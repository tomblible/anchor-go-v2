// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package moonit

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_funds" instruction.
type MigrateFunds struct {
	// Params:
	// Accounts:
	// [0] = [,signer] backend_authority
	BackendAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] migration_authority
	MigrationAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] curve_account
	CurveAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] curve_token_account
	CurveTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] migration_authority_token_account
	MigrationAuthorityTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [6] = [writable] dex_fee_account
	DexFeeAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] helio_fee_account
	HelioFeeAccount solanago.PublicKey `bin:"-"`
	// [8] = [] config_account
	ConfigAccount solanago.PublicKey `bin:"-"`
	// [9] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateFunds) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrateFunds) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrateFunds) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.BackendAuthority = accounts[0]
	obj.MigrationAuthority = accounts[1]
	obj.CurveAccount = accounts[2]
	obj.CurveTokenAccount = accounts[3]
	obj.MigrationAuthorityTokenAccount = accounts[4]
	obj.Mint = accounts[5]
	obj.DexFeeAccount = accounts[6]
	obj.HelioFeeAccount = accounts[7]
	obj.ConfigAccount = accounts[8]
	obj.SystemProgram = accounts[9]
	obj.TokenProgram = accounts[10]
	obj.AssociatedTokenProgram = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateFunds) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateFunds) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateFunds)
}

func (*MigrateFunds) NewInstance() programparser.Instruction {
	return new(MigrateFunds)
}

func (obj *MigrateFunds) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[12:]
}

// Builds a "migrate_funds" instruction.
func NewMigrateFundsInstruction(
	backendAuthority solanago.PublicKey,
	migrationAuthority solanago.PublicKey,
	curveAccount solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	migrationAuthorityTokenAccount solanago.PublicKey,
	mint solanago.PublicKey,
	dexFeeAccount solanago.PublicKey,
	helioFeeAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateFunds[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] backend_authority
		// BE Authority
		metas_[0] = solanago.NewAccountMeta(backendAuthority, false, true)
		// [1] = [writable,signer] migration_authority
		// Migration Authority
		// Owner and Payer over Token Accounts, needs to be mutable
		metas_[1] = solanago.NewAccountMeta(migrationAuthority, true, true)
		// [2] = [writable] curve_account
		// Curve Account
		// The account is closed after this instruction
		metas_[2] = solanago.NewAccountMeta(curveAccount, true, false)
		// [3] = [writable] curve_token_account
		// Curve Token Account
		// The account is closed after this instruction
		metas_[3] = solanago.NewAccountMeta(curveTokenAccount, true, false)
		// [4] = [writable] migration_authority_token_account
		// Authority token Account
		// Init on demand
		metas_[4] = solanago.NewAccountMeta(migrationAuthorityTokenAccount, true, false)
		// [5] = [writable] mint
		// InterfaceAccount: checks program ownership + deserialize into Mint
		metas_[5] = solanago.NewAccountMeta(mint, true, false)
		// [6] = [writable] dex_fee_account
		metas_[6] = solanago.NewAccountMeta(dexFeeAccount, true, false)
		// [7] = [writable] helio_fee_account
		metas_[7] = solanago.NewAccountMeta(helioFeeAccount, true, false)
		// [8] = [] config_account
		metas_[8] = solanago.NewAccountMeta(configAccount, false, false)
		// [9] = [] system_program
		metas_[9] = solanago.NewAccountMeta(systemProgram, false, false)
		// [10] = [] token_program
		metas_[10] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [11] = [] associated_token_program
		metas_[11] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateFunds" instruction.
func BuildMigrateFunds(
	backendAuthority solanago.PublicKey,
	migrationAuthority solanago.PublicKey,
	curveAccount solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	migrationAuthorityTokenAccount solanago.PublicKey,
	mint solanago.PublicKey,
	dexFeeAccount solanago.PublicKey,
	helioFeeAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateFundsInstruction(
		backendAuthority,
		migrationAuthority,
		curveAccount,
		curveTokenAccount,
		migrationAuthorityTokenAccount,
		mint,
		dexFeeAccount,
		helioFeeAccount,
		configAccount,
		systemProgram,
		tokenProgram,
		associatedTokenProgram,
		remaining__...,
	)
	return instruction_
}
