// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package moonit

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "config_update" instruction.
type ConfigUpdate struct {
	// Params:
	Data ConfigParams
	// Accounts:
	// [0] = [,signer] config_authority
	ConfigAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable] config_account
	ConfigAccount solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ConfigUpdate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `dataParam`:
	if err = encoder.Encode(obj.Data); err != nil {
		return fmt.Errorf("error while marshaling dataParam:%w", err)
	}
	return nil
}

func (obj *ConfigUpdate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	if err = decoder.Decode(&obj.Data); err != nil {
		return fmt.Errorf("error while unmarshaling Data:%w", err)
	}
	return nil
}

func (obj *ConfigUpdate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.ConfigAuthority = accounts[0]
	obj.ConfigAccount = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ConfigUpdate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ConfigUpdate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ConfigUpdate)
}

func (*ConfigUpdate) NewInstance() programparser.Instruction {
	return new(ConfigUpdate)
}

// Builds a "config_update" instruction.
func NewConfigUpdateInstruction(
	// Params:
	dataParam ConfigParams,

	// Accounts:
	configAuthority solanago.PublicKey,
	configAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ConfigUpdate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `dataParam`:
		if err = enc__.Encode(dataParam); err != nil {
			return nil, fmt.Errorf("error while marshaling dataParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] config_authority
		metas_[0] = solanago.NewAccountMeta(configAuthority, false, true)
		// [1] = [writable] config_account
		metas_[1] = solanago.NewAccountMeta(configAccount, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildConfigUpdate" instruction.
func BuildConfigUpdate(
	// Params:
	dataParam ConfigParams,

	// Accounts:
	configAuthority solanago.PublicKey,
	configAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewConfigUpdateInstruction(
		dataParam,
		configAuthority,
		configAccount,
		remaining__...,
	)
	return instruction_
}
