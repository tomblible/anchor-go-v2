// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package moonit

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "buy" instruction.
type Buy struct {
	// Params:
	Data TradeParams
	// Accounts:
	// [0] = [writable,signer] sender
	Sender solanago.PublicKey `bin:"-"`
	// [1] = [writable] sender_token_account
	SenderTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [writable] curve_account
	CurveAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] curve_token_account
	CurveTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] dex_fee
	DexFee solanago.PublicKey `bin:"-"`
	// [5] = [writable] helio_fee
	HelioFee solanago.PublicKey `bin:"-"`
	// [6] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [7] = [] config_account
	ConfigAccount solanago.PublicKey `bin:"-"`
	// [8] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Buy) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `dataParam`:
	if err = encoder.Encode(obj.Data); err != nil {
		return fmt.Errorf("error while marshaling dataParam:%w", err)
	}
	return nil
}

func (obj *Buy) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	if err = decoder.Decode(&obj.Data); err != nil {
		return fmt.Errorf("error while unmarshaling Data:%w", err)
	}
	return nil
}

func (obj *Buy) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.Sender = accounts[0]
	obj.SenderTokenAccount = accounts[1]
	obj.CurveAccount = accounts[2]
	obj.CurveTokenAccount = accounts[3]
	obj.DexFee = accounts[4]
	obj.HelioFee = accounts[5]
	obj.Mint = accounts[6]
	obj.ConfigAccount = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.AssociatedTokenProgram = accounts[9]
	obj.SystemProgram = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Buy) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Buy) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Buy)
}

func (*Buy) NewInstance() programparser.Instruction {
	return new(Buy)
}

func (obj *Buy) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[11:]
}

// Builds a "buy" instruction.
func NewBuyInstruction(
	// Params:
	dataParam TradeParams,

	// Accounts:
	sender solanago.PublicKey,
	senderTokenAccount solanago.PublicKey,
	curveAccount solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	dexFee solanago.PublicKey,
	helioFee solanago.PublicKey,
	mint solanago.PublicKey,
	configAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Buy[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `dataParam`:
		if err = enc__.Encode(dataParam); err != nil {
			return nil, fmt.Errorf("error while marshaling dataParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] sender
		metas_[0] = solanago.NewAccountMeta(sender, true, true)
		// [1] = [writable] sender_token_account
		metas_[1] = solanago.NewAccountMeta(senderTokenAccount, true, false)
		// [2] = [writable] curve_account
		metas_[2] = solanago.NewAccountMeta(curveAccount, true, false)
		// [3] = [writable] curve_token_account
		metas_[3] = solanago.NewAccountMeta(curveTokenAccount, true, false)
		// [4] = [writable] dex_fee
		metas_[4] = solanago.NewAccountMeta(dexFee, true, false)
		// [5] = [writable] helio_fee
		metas_[5] = solanago.NewAccountMeta(helioFee, true, false)
		// [6] = [] mint
		metas_[6] = solanago.NewAccountMeta(mint, false, false)
		// [7] = [] config_account
		metas_[7] = solanago.NewAccountMeta(configAccount, false, false)
		// [8] = [] token_program
		metas_[8] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [9] = [] associated_token_program
		metas_[9] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [10] = [] system_program
		metas_[10] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildBuy" instruction.
func BuildBuy(
	// Params:
	dataParam TradeParams,

	// Accounts:
	sender solanago.PublicKey,
	senderTokenAccount solanago.PublicKey,
	curveAccount solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	dexFee solanago.PublicKey,
	helioFee solanago.PublicKey,
	mint solanago.PublicKey,
	configAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewBuyInstruction(
		dataParam,
		sender,
		senderTokenAccount,
		curveAccount,
		curveTokenAccount,
		dexFee,
		helioFee,
		mint,
		configAccount,
		tokenProgram,
		associatedTokenProgram,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
