// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package moonit

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "token_mint" instruction.
type TokenMint struct {
	// Params:
	MintParams TokenMintParams
	// Accounts:
	// [0] = [writable,signer] sender
	Sender solanago.PublicKey `bin:"-"`
	// [1] = [,signer] backend_authority
	BackendAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] curve_account
	CurveAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] mint
	Mint solanago.PublicKey `bin:"-"`
	// [4] = [writable] mint_metadata
	MintMetadata solanago.PublicKey `bin:"-"`
	// [5] = [writable] curve_token_account
	CurveTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [] config_account
	ConfigAccount solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] mpl_token_metadata
	MplTokenMetadata solanago.PublicKey `bin:"-"`
	// [10] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj TokenMint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `mintParamsParam`:
	if err = encoder.Encode(obj.MintParams); err != nil {
		return fmt.Errorf("error while marshaling mintParamsParam:%w", err)
	}
	return nil
}

func (obj *TokenMint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MintParams`:
	if err = decoder.Decode(&obj.MintParams); err != nil {
		return fmt.Errorf("error while unmarshaling MintParams:%w", err)
	}
	return nil
}

func (obj *TokenMint) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.Sender = accounts[0]
	obj.BackendAuthority = accounts[1]
	obj.CurveAccount = accounts[2]
	obj.Mint = accounts[3]
	obj.MintMetadata = accounts[4]
	obj.CurveTokenAccount = accounts[5]
	obj.ConfigAccount = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.AssociatedTokenProgram = accounts[8]
	obj.MplTokenMetadata = accounts[9]
	obj.SystemProgram = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *TokenMint) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*TokenMint) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_TokenMint)
}

func (*TokenMint) NewInstance() programparser.Instruction {
	return new(TokenMint)
}

func (obj *TokenMint) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 11 {
		return nil
	}
	return obj.PublicKeySlice[11:]
}

// Builds a "token_mint" instruction.
func NewTokenMintInstruction(
	// Params:
	mintParamsParam TokenMintParams,

	// Accounts:
	sender solanago.PublicKey,
	backendAuthority solanago.PublicKey,
	curveAccount solanago.PublicKey,
	mint solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	mplTokenMetadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_TokenMint[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `mintParamsParam`:
		if err = enc__.Encode(mintParamsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling mintParamsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] sender
		metas_[0] = solanago.NewAccountMeta(sender, true, true)
		// [1] = [,signer] backend_authority
		metas_[1] = solanago.NewAccountMeta(backendAuthority, false, true)
		// [2] = [writable] curve_account
		metas_[2] = solanago.NewAccountMeta(curveAccount, true, false)
		// [3] = [writable,signer] mint
		metas_[3] = solanago.NewAccountMeta(mint, true, true)
		// [4] = [writable] mint_metadata
		// Type validating that the account is owned by the System Program = uninitialized
		// seeds should ensure that the address is correct
		metas_[4] = solanago.NewAccountMeta(mintMetadata, true, false)
		// [5] = [writable] curve_token_account
		metas_[5] = solanago.NewAccountMeta(curveTokenAccount, true, false)
		// [6] = [] config_account
		metas_[6] = solanago.NewAccountMeta(configAccount, false, false)
		// [7] = [] token_program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [8] = [] associated_token_program
		metas_[8] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [9] = [] mpl_token_metadata
		metas_[9] = solanago.NewAccountMeta(mplTokenMetadata, false, false)
		// [10] = [] system_program
		metas_[10] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildTokenMint" instruction.
func BuildTokenMint(
	// Params:
	mintParamsParam TokenMintParams,

	// Accounts:
	sender solanago.PublicKey,
	backendAuthority solanago.PublicKey,
	curveAccount solanago.PublicKey,
	mint solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	curveTokenAccount solanago.PublicKey,
	configAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	mplTokenMetadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewTokenMintInstruction(
		mintParamsParam,
		sender,
		backendAuthority,
		curveAccount,
		mint,
		mintMetadata,
		curveTokenAccount,
		configAccount,
		tokenProgram,
		associatedTokenProgram,
		mplTokenMetadata,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
