// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package meteora_vault

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

// Vault bumps struct
type VaultBumps struct {
	// vault_bump
	VaultBump uint8

	// token_vault_bump
	TokenVaultBump uint8
}

func (obj VaultBumps) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VaultBump`:
	if err = encoder.Encode(obj.VaultBump); err != nil {
		return fmt.Errorf("error while marshaling VaultBump:%w", err)
	}
	// Serialize `TokenVaultBump`:
	if err = encoder.Encode(obj.TokenVaultBump); err != nil {
		return fmt.Errorf("error while marshaling TokenVaultBump:%w", err)
	}
	return nil
}

func (obj VaultBumps) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VaultBumps: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VaultBumps) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VaultBump`:
	if err = decoder.Decode(&obj.VaultBump); err != nil {
		return fmt.Errorf("error while unmarshaling VaultBump:%w", err)
	}
	// Deserialize `TokenVaultBump`:
	if err = decoder.Decode(&obj.TokenVaultBump); err != nil {
		return fmt.Errorf("error while unmarshaling TokenVaultBump:%w", err)
	}
	return nil
}

func (obj *VaultBumps) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VaultBumps: %w", err)
	}
	return nil
}

func UnmarshalVaultBumps(buf []byte) (*VaultBumps, error) {
	obj := new(VaultBumps)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Strategy bumps struct
type StrategyBumps struct {
	// strategy_index
	StrategyIndex uint8

	// Bumps of PDAs for the integrated protocol.
	OtherBumps [10]uint8
}

func (obj StrategyBumps) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `StrategyIndex`:
	if err = encoder.Encode(obj.StrategyIndex); err != nil {
		return fmt.Errorf("error while marshaling StrategyIndex:%w", err)
	}
	// Serialize `OtherBumps`:
	if err = encoder.Encode(obj.OtherBumps); err != nil {
		return fmt.Errorf("error while marshaling OtherBumps:%w", err)
	}
	return nil
}

func (obj StrategyBumps) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding StrategyBumps: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *StrategyBumps) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `StrategyIndex`:
	if err = decoder.Decode(&obj.StrategyIndex); err != nil {
		return fmt.Errorf("error while unmarshaling StrategyIndex:%w", err)
	}
	// Deserialize `OtherBumps`:
	if err = decoder.Decode(&obj.OtherBumps); err != nil {
		return fmt.Errorf("error while unmarshaling OtherBumps:%w", err)
	}
	return nil
}

func (obj *StrategyBumps) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling StrategyBumps: %w", err)
	}
	return nil
}

func UnmarshalStrategyBumps(buf []byte) (*StrategyBumps, error) {
	obj := new(StrategyBumps)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// LockedProfitTracker struct
type LockedProfitTracker struct {
	// The total locked profit from the last report
	LastUpdatedLockedProfit uint64

	// The last timestamp (in seconds) rebalancing
	LastReport uint64

	// Rate per second of degradation
	LockedProfitDegradation uint64
}

func (obj LockedProfitTracker) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastUpdatedLockedProfit`:
	if err = encoder.Encode(obj.LastUpdatedLockedProfit); err != nil {
		return fmt.Errorf("error while marshaling LastUpdatedLockedProfit:%w", err)
	}
	// Serialize `LastReport`:
	if err = encoder.Encode(obj.LastReport); err != nil {
		return fmt.Errorf("error while marshaling LastReport:%w", err)
	}
	// Serialize `LockedProfitDegradation`:
	if err = encoder.Encode(obj.LockedProfitDegradation); err != nil {
		return fmt.Errorf("error while marshaling LockedProfitDegradation:%w", err)
	}
	return nil
}

func (obj LockedProfitTracker) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockedProfitTracker: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockedProfitTracker) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastUpdatedLockedProfit`:
	if err = decoder.Decode(&obj.LastUpdatedLockedProfit); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdatedLockedProfit:%w", err)
	}
	// Deserialize `LastReport`:
	if err = decoder.Decode(&obj.LastReport); err != nil {
		return fmt.Errorf("error while unmarshaling LastReport:%w", err)
	}
	// Deserialize `LockedProfitDegradation`:
	if err = decoder.Decode(&obj.LockedProfitDegradation); err != nil {
		return fmt.Errorf("error while unmarshaling LockedProfitDegradation:%w", err)
	}
	return nil
}

func (obj *LockedProfitTracker) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockedProfitTracker: %w", err)
	}
	return nil
}

func UnmarshalLockedProfitTracker(buf []byte) (*LockedProfitTracker, error) {
	obj := new(LockedProfitTracker)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// StrategyType struct
type StrategyType binary.BorshEnum

const (
	StrategyType_PortFinanceWithoutLm StrategyType = iota
	StrategyType_PortFinanceWithLm
	StrategyType_SolendWithoutLm
	StrategyType_Mango
	StrategyType_SolendWithLm
	StrategyType_ApricotWithoutLm
	StrategyType_Francium
	StrategyType_Tulip
	StrategyType_Vault
	StrategyType_Drift
	StrategyType_Frakt
	StrategyType_Marginfi
)

func (value StrategyType) String() string {
	switch value {
	case StrategyType_PortFinanceWithoutLm:
		return "PortFinanceWithoutLM"
	case StrategyType_PortFinanceWithLm:
		return "PortFinanceWithLM"
	case StrategyType_SolendWithoutLm:
		return "SolendWithoutLM"
	case StrategyType_Mango:
		return "Mango"
	case StrategyType_SolendWithLm:
		return "SolendWithLM"
	case StrategyType_ApricotWithoutLm:
		return "ApricotWithoutLM"
	case StrategyType_Francium:
		return "Francium"
	case StrategyType_Tulip:
		return "Tulip"
	case StrategyType_Vault:
		return "Vault"
	case StrategyType_Drift:
		return "Drift"
	case StrategyType_Frakt:
		return "Frakt"
	case StrategyType_Marginfi:
		return "Marginfi"
	default:
		return ""
	}
}
