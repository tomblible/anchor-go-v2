// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw" instruction.

// user withdraw liquidity from vault
type Withdraw struct {
	// Params:
	UnmintAmount uint64
	MinOutAmount uint64
	// Accounts:
	// [0] = [writable] vault
	Vault solanago.PublicKey `bin:"-"`
	// [1] = [writable] token_vault
	TokenVault solanago.PublicKey `bin:"-"`
	// [2] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [3] = [writable] user_token
	UserToken solanago.PublicKey `bin:"-"`
	// [4] = [writable] user_lp
	UserLp solanago.PublicKey `bin:"-"`
	// [5] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Withdraw) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `unmintAmountParam`:
	if err = encoder.Encode(obj.UnmintAmount); err != nil {
		return fmt.Errorf("error while marshaling unmintAmountParam:%w", err)
	}
	// Serialize `minOutAmountParam`:
	if err = encoder.Encode(obj.MinOutAmount); err != nil {
		return fmt.Errorf("error while marshaling minOutAmountParam:%w", err)
	}
	return nil
}

func (obj *Withdraw) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UnmintAmount`:
	if err = decoder.Decode(&obj.UnmintAmount); err != nil {
		return fmt.Errorf("error while unmarshaling UnmintAmount:%w", err)
	}
	// Deserialize `MinOutAmount`:
	if err = decoder.Decode(&obj.MinOutAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MinOutAmount:%w", err)
	}
	return nil
}

func (obj *Withdraw) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Vault = accounts[0]
	obj.TokenVault = accounts[1]
	obj.LpMint = accounts[2]
	obj.UserToken = accounts[3]
	obj.UserLp = accounts[4]
	obj.User = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Withdraw) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Withdraw) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Withdraw)
}

func (*Withdraw) NewInstance() programparser.Instruction {
	return new(Withdraw)
}

func (obj *Withdraw) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "withdraw" instruction.
// user withdraw liquidity from vault
func NewWithdrawInstruction(
	// Params:
	unmintAmountParam uint64,
	minOutAmountParam uint64,

	// Accounts:
	vault solanago.PublicKey,
	tokenVault solanago.PublicKey,
	lpMint solanago.PublicKey,
	userToken solanago.PublicKey,
	userLp solanago.PublicKey,
	user solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Withdraw[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `unmintAmountParam`:
		if err = enc__.Encode(unmintAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling unmintAmountParam:%w", err)
		}
		// Serialize `minOutAmountParam`:
		if err = enc__.Encode(minOutAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minOutAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] vault
		// vault
		metas_[0] = solanago.NewAccountMeta(vault, true, false)
		// [1] = [writable] token_vault
		// token_vault
		metas_[1] = solanago.NewAccountMeta(tokenVault, true, false)
		// [2] = [writable] lp_mint
		// lp_mint
		metas_[2] = solanago.NewAccountMeta(lpMint, true, false)
		// [3] = [writable] user_token
		// user_token
		metas_[3] = solanago.NewAccountMeta(userToken, true, false)
		// [4] = [writable] user_lp
		// user_lp
		metas_[4] = solanago.NewAccountMeta(userLp, true, false)
		// [5] = [,signer] user
		// user
		metas_[5] = solanago.NewAccountMeta(user, false, true)
		// [6] = [] token_program
		// token_program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdraw" instruction.
// user withdraw liquidity from vault
func BuildWithdraw(
	// Params:
	unmintAmountParam uint64,
	minOutAmountParam uint64,

	// Accounts:
	vault solanago.PublicKey,
	tokenVault solanago.PublicKey,
	lpMint solanago.PublicKey,
	userToken solanago.PublicKey,
	userLp solanago.PublicKey,
	user solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawInstruction(
		unmintAmountParam,
		minOutAmountParam,
		vault,
		tokenVault,
		lpMint,
		userToken,
		userLp,
		user,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
