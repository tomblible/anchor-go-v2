// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize" instruction.

// initialize new vault
type Initialize struct {
	// Params:
	// Accounts:
	// [0] = [writable] vault
	Vault solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [2] = [writable] token_vault
	TokenVault solanago.PublicKey `bin:"-"`
	// [3] = [] token_mint
	TokenMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [5] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Initialize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Initialize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *Initialize) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Vault = accounts[0]
	obj.Payer = accounts[1]
	obj.TokenVault = accounts[2]
	obj.TokenMint = accounts[3]
	obj.LpMint = accounts[4]
	obj.Rent = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Initialize) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Initialize) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Initialize)
}

func (*Initialize) NewInstance() programparser.Instruction {
	return new(Initialize)
}

func (obj *Initialize) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "initialize" instruction.
// initialize new vault
func NewInitializeInstruction(
	vault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenVault solanago.PublicKey,
	tokenMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	rent solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Initialize[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] vault
		// This is base account for all vault
		// No need base key now because we only allow 1 vault per token now
		// Vault account
		metas_[0] = solanago.NewAccountMeta(vault, true, false)
		// [1] = [writable,signer] payer
		// Payer can be anyone
		metas_[1] = solanago.NewAccountMeta(payer, true, true)
		// [2] = [writable] token_vault
		// Token vault account
		metas_[2] = solanago.NewAccountMeta(tokenVault, true, false)
		// [3] = [] token_mint
		// Token mint account
		metas_[3] = solanago.NewAccountMeta(tokenMint, false, false)
		// [4] = [writable] lp_mint
		metas_[4] = solanago.NewAccountMeta(lpMint, true, false)
		// [5] = [] rent
		// rent
		metas_[5] = solanago.NewAccountMeta(rent, false, false)
		// [6] = [] token_program
		// token_program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [7] = [] system_program
		// system_program
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitialize" instruction.
// initialize new vault
func BuildInitialize(
	vault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenVault solanago.PublicKey,
	tokenMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	rent solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeInstruction(
		vault,
		payer,
		tokenVault,
		tokenMint,
		lpMint,
		rent,
		tokenProgram,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
