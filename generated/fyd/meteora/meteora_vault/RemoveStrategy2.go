// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "remove_strategy2" instruction.

// remove a strategy by advance payment
type RemoveStrategy2 struct {
	// Params:
	MaxAdminPayAmount uint64
	// Accounts:
	// [0] = [writable] vault
	Vault solanago.PublicKey `bin:"-"`
	// [1] = [writable] strategy
	Strategy solanago.PublicKey `bin:"-"`
	// [2] = [] strategy_program
	StrategyProgram solanago.PublicKey `bin:"-"`
	// [3] = [writable] collateral_vault
	CollateralVault solanago.PublicKey `bin:"-"`
	// [4] = [writable] reserve
	Reserve solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_vault
	TokenVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_admin_advance_payment
	TokenAdminAdvancePayment solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_vault_advance_payment
	TokenVaultAdvancePayment solanago.PublicKey `bin:"-"`
	// [8] = [writable] fee_vault
	FeeVault solanago.PublicKey `bin:"-"`
	// [9] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [10] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj RemoveStrategy2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxAdminPayAmountParam`:
	if err = encoder.Encode(obj.MaxAdminPayAmount); err != nil {
		return fmt.Errorf("error while marshaling maxAdminPayAmountParam:%w", err)
	}
	return nil
}

func (obj *RemoveStrategy2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAdminPayAmount`:
	if err = decoder.Decode(&obj.MaxAdminPayAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAdminPayAmount:%w", err)
	}
	return nil
}

func (obj *RemoveStrategy2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.Vault = accounts[0]
	obj.Strategy = accounts[1]
	obj.StrategyProgram = accounts[2]
	obj.CollateralVault = accounts[3]
	obj.Reserve = accounts[4]
	obj.TokenVault = accounts[5]
	obj.TokenAdminAdvancePayment = accounts[6]
	obj.TokenVaultAdvancePayment = accounts[7]
	obj.FeeVault = accounts[8]
	obj.LpMint = accounts[9]
	obj.TokenProgram = accounts[10]
	obj.Admin = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *RemoveStrategy2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*RemoveStrategy2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_RemoveStrategy2)
}

func (*RemoveStrategy2) NewInstance() programparser.Instruction {
	return new(RemoveStrategy2)
}

func (obj *RemoveStrategy2) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[12:]
}

// Builds a "remove_strategy2" instruction.
// remove a strategy by advance payment
func NewRemoveStrategy2Instruction(
	// Params:
	maxAdminPayAmountParam uint64,

	// Accounts:
	vault solanago.PublicKey,
	strategy solanago.PublicKey,
	strategyProgram solanago.PublicKey,
	collateralVault solanago.PublicKey,
	reserve solanago.PublicKey,
	tokenVault solanago.PublicKey,
	tokenAdminAdvancePayment solanago.PublicKey,
	tokenVaultAdvancePayment solanago.PublicKey,
	feeVault solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_RemoveStrategy2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxAdminPayAmountParam`:
		if err = enc__.Encode(maxAdminPayAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAdminPayAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] vault
		// Vault account
		metas_[0] = solanago.NewAccountMeta(vault, true, false)
		// [1] = [writable] strategy
		// Strategy account
		metas_[1] = solanago.NewAccountMeta(strategy, true, false)
		// [2] = [] strategy_program
		metas_[2] = solanago.NewAccountMeta(strategyProgram, false, false)
		// [3] = [writable] collateral_vault
		// Collateral vault account
		metas_[3] = solanago.NewAccountMeta(collateralVault, true, false)
		// [4] = [writable] reserve
		metas_[4] = solanago.NewAccountMeta(reserve, true, false)
		// [5] = [writable] token_vault
		// token_vault
		metas_[5] = solanago.NewAccountMeta(tokenVault, true, false)
		// [6] = [writable] token_admin_advance_payment
		// token_advance_payemnt
		// the owner of token_advance_payment must be admin
		metas_[6] = solanago.NewAccountMeta(tokenAdminAdvancePayment, true, false)
		// [7] = [writable] token_vault_advance_payment
		// token_vault_advance_payment
		// the account must be different from token_vault
		// the owner of token_advance_payment must be vault
		metas_[7] = solanago.NewAccountMeta(tokenVaultAdvancePayment, true, false)
		// [8] = [writable] fee_vault
		// fee_vault
		metas_[8] = solanago.NewAccountMeta(feeVault, true, false)
		// [9] = [writable] lp_mint
		// lp_mint
		metas_[9] = solanago.NewAccountMeta(lpMint, true, false)
		// [10] = [] token_program
		// token_program
		metas_[10] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [11] = [,signer] admin
		// admin
		metas_[11] = solanago.NewAccountMeta(admin, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildRemoveStrategy2" instruction.
// remove a strategy by advance payment
func BuildRemoveStrategy2(
	// Params:
	maxAdminPayAmountParam uint64,

	// Accounts:
	vault solanago.PublicKey,
	strategy solanago.PublicKey,
	strategyProgram solanago.PublicKey,
	collateralVault solanago.PublicKey,
	reserve solanago.PublicKey,
	tokenVault solanago.PublicKey,
	tokenAdminAdvancePayment solanago.PublicKey,
	tokenVaultAdvancePayment solanago.PublicKey,
	feeVault solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewRemoveStrategy2Instruction(
		maxAdminPayAmountParam,
		vault,
		strategy,
		strategyProgram,
		collateralVault,
		reserve,
		tokenVault,
		tokenAdminAdvancePayment,
		tokenVaultAdvancePayment,
		feeVault,
		lpMint,
		tokenProgram,
		admin,
		remaining__...,
	)
	return instruction_
}
