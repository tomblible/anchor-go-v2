// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_strategy" instruction.

// Initialize a strategy and add strategy to vault.strategies index
type InitializeStrategy struct {
	// Params:
	Bumps        StrategyBumps
	StrategyType StrategyType
	// Accounts:
	// [0] = [writable] vault
	Vault solanago.PublicKey `bin:"-"`
	// [1] = [] strategy_program
	StrategyProgram solanago.PublicKey `bin:"-"`
	// [2] = [writable] strategy
	Strategy solanago.PublicKey `bin:"-"`
	// [3] = [writable] reserve
	Reserve solanago.PublicKey `bin:"-"`
	// [4] = [writable] collateral_vault
	CollateralVault solanago.PublicKey `bin:"-"`
	// [5] = [] collateral_mint
	CollateralMint solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [9] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeStrategy) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `bumpsParam`:
	if err = encoder.Encode(obj.Bumps); err != nil {
		return fmt.Errorf("error while marshaling bumpsParam:%w", err)
	}
	// Serialize `strategyTypeParam`:
	if err = encoder.Encode(obj.StrategyType); err != nil {
		return fmt.Errorf("error while marshaling strategyTypeParam:%w", err)
	}
	return nil
}

func (obj *InitializeStrategy) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Bumps`:
	if err = decoder.Decode(&obj.Bumps); err != nil {
		return fmt.Errorf("error while unmarshaling Bumps:%w", err)
	}
	// Deserialize `StrategyType`:
	if err = decoder.Decode(&obj.StrategyType); err != nil {
		return fmt.Errorf("error while unmarshaling StrategyType:%w", err)
	}
	return nil
}

func (obj *InitializeStrategy) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Vault = accounts[0]
	obj.StrategyProgram = accounts[1]
	obj.Strategy = accounts[2]
	obj.Reserve = accounts[3]
	obj.CollateralVault = accounts[4]
	obj.CollateralMint = accounts[5]
	obj.Admin = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.Rent = accounts[8]
	obj.TokenProgram = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeStrategy) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeStrategy) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeStrategy)
}

func (*InitializeStrategy) NewInstance() programparser.Instruction {
	return new(InitializeStrategy)
}

func (obj *InitializeStrategy) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[10:]
}

// Builds a "initialize_strategy" instruction.
// Initialize a strategy and add strategy to vault.strategies index
func NewInitializeStrategyInstruction(
	// Params:
	bumpsParam StrategyBumps,
	strategyTypeParam StrategyType,

	// Accounts:
	vault solanago.PublicKey,
	strategyProgram solanago.PublicKey,
	strategy solanago.PublicKey,
	reserve solanago.PublicKey,
	collateralVault solanago.PublicKey,
	collateralMint solanago.PublicKey,
	admin solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeStrategy[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `bumpsParam`:
		if err = enc__.Encode(bumpsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling bumpsParam:%w", err)
		}
		// Serialize `strategyTypeParam`:
		if err = enc__.Encode(strategyTypeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling strategyTypeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] vault
		// Vault account
		metas_[0] = solanago.NewAccountMeta(vault, true, false)
		// [1] = [] strategy_program
		metas_[1] = solanago.NewAccountMeta(strategyProgram, false, false)
		// [2] = [writable] strategy
		// Strategy account
		metas_[2] = solanago.NewAccountMeta(strategy, true, false)
		// [3] = [writable] reserve
		metas_[3] = solanago.NewAccountMeta(reserve, true, false)
		// [4] = [writable] collateral_vault
		// Collateral vault account
		metas_[4] = solanago.NewAccountMeta(collateralVault, true, false)
		// [5] = [] collateral_mint
		// Collateral mint account
		metas_[5] = solanago.NewAccountMeta(collateralMint, false, false)
		// [6] = [writable,signer] admin
		// Admin account
		metas_[6] = solanago.NewAccountMeta(admin, true, true)
		// [7] = [] system_program
		// System program account
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// [8] = [] rent
		// Rent account
		metas_[8] = solanago.NewAccountMeta(rent, false, false)
		// [9] = [] token_program
		// Token program account
		metas_[9] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeStrategy" instruction.
// Initialize a strategy and add strategy to vault.strategies index
func BuildInitializeStrategy(
	// Params:
	bumpsParam StrategyBumps,
	strategyTypeParam StrategyType,

	// Accounts:
	vault solanago.PublicKey,
	strategyProgram solanago.PublicKey,
	strategy solanago.PublicKey,
	reserve solanago.PublicKey,
	collateralVault solanago.PublicKey,
	collateralMint solanago.PublicKey,
	admin solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeStrategyInstruction(
		bumpsParam,
		strategyTypeParam,
		vault,
		strategyProgram,
		strategy,
		reserve,
		collateralVault,
		collateralMint,
		admin,
		systemProgram,
		rent,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
