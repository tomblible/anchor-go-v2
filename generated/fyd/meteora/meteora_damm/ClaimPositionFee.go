// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_position_fee" instruction.
type ClaimPositionFee struct {
	// Params:
	// Accounts:
	// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [2] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_a_account
	TokenAAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_b_account
	TokenBAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_a_vault
	TokenAVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_b_vault
	TokenBVault solanago.PublicKey `bin:"-"`
	// [7] = [] token_a_mint
	TokenAMint solanago.PublicKey `bin:"-"`
	// [8] = [] token_b_mint
	TokenBMint solanago.PublicKey `bin:"-"`
	// [9] = [] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [10] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [11] = [] token_a_program
	TokenAProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_b_program
	TokenBProgram solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimPositionFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimPositionFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClaimPositionFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Pool = accounts[1]
	obj.Position = accounts[2]
	obj.TokenAAccount = accounts[3]
	obj.TokenBAccount = accounts[4]
	obj.TokenAVault = accounts[5]
	obj.TokenBVault = accounts[6]
	obj.TokenAMint = accounts[7]
	obj.TokenBMint = accounts[8]
	obj.PositionNftAccount = accounts[9]
	obj.Owner = accounts[10]
	obj.TokenAProgram = accounts[11]
	obj.TokenBProgram = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimPositionFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimPositionFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimPositionFee)
}

func (*ClaimPositionFee) NewInstance() programparser.Instruction {
	return new(ClaimPositionFee)
}

func (obj *ClaimPositionFee) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[15:]
}

// Builds a "claim_position_fee" instruction.
func NewClaimPositionFeeInstruction(
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimPositionFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [] pool
		metas_[1] = solanago.NewAccountMeta(pool, false, false)
		// [2] = [writable] position
		metas_[2] = solanago.NewAccountMeta(position, true, false)
		// [3] = [writable] token_a_account
		// The user token a account
		metas_[3] = solanago.NewAccountMeta(tokenAAccount, true, false)
		// [4] = [writable] token_b_account
		// The user token b account
		metas_[4] = solanago.NewAccountMeta(tokenBAccount, true, false)
		// [5] = [writable] token_a_vault
		// The vault token account for input token
		metas_[5] = solanago.NewAccountMeta(tokenAVault, true, false)
		// [6] = [writable] token_b_vault
		// The vault token account for output token
		metas_[6] = solanago.NewAccountMeta(tokenBVault, true, false)
		// [7] = [] token_a_mint
		// The mint of token a
		metas_[7] = solanago.NewAccountMeta(tokenAMint, false, false)
		// [8] = [] token_b_mint
		// The mint of token b
		metas_[8] = solanago.NewAccountMeta(tokenBMint, false, false)
		// [9] = [] position_nft_account
		// The token account for nft
		metas_[9] = solanago.NewAccountMeta(positionNftAccount, false, false)
		// [10] = [,signer] owner
		// owner of position
		metas_[10] = solanago.NewAccountMeta(owner, false, true)
		// [11] = [] token_a_program
		// Token a program
		metas_[11] = solanago.NewAccountMeta(tokenAProgram, false, false)
		// [12] = [] token_b_program
		// Token b program
		metas_[12] = solanago.NewAccountMeta(tokenBProgram, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimPositionFee" instruction.
func BuildClaimPositionFee(
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimPositionFeeInstruction(
		pool,
		position,
		tokenAAccount,
		tokenBAccount,
		tokenAVault,
		tokenBVault,
		tokenAMint,
		tokenBMint,
		positionNftAccount,
		owner,
		tokenAProgram,
		tokenBProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
