// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "lock_position" instruction.
type LockPosition struct {
	// Params:
	Params VestingParameters
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] vesting
	Vesting solanago.PublicKey `bin:"-"`
	// [3] = [] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [4] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [8] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj LockPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *LockPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *LockPosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.Position = accounts[1]
	obj.Vesting = accounts[2]
	obj.PositionNftAccount = accounts[3]
	obj.Owner = accounts[4]
	obj.Payer = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.EventAuthority = accounts[7]
	obj.Program = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *LockPosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*LockPosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_LockPosition)
}

func (*LockPosition) NewInstance() programparser.Instruction {
	return new(LockPosition)
}

// Builds a "lock_position" instruction.
func NewLockPositionInstruction(
	// Params:
	paramsParam VestingParameters,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	vesting solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_LockPosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [writable] position
		metas_[1] = solanago.NewAccountMeta(position, true, false)
		// [2] = [writable,signer] vesting
		metas_[2] = solanago.NewAccountMeta(vesting, true, true)
		// [3] = [] position_nft_account
		// The token account for nft
		metas_[3] = solanago.NewAccountMeta(positionNftAccount, false, false)
		// [4] = [,signer] owner
		// owner of position
		metas_[4] = solanago.NewAccountMeta(owner, false, true)
		// [5] = [writable,signer] payer
		metas_[5] = solanago.NewAccountMeta(payer, true, true)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [] event_authority
		metas_[7] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [8] = [] program
		metas_[8] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildLockPosition" instruction.
func BuildLockPosition(
	// Params:
	paramsParam VestingParameters,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	vesting solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewLockPositionInstruction(
		paramsParam,
		pool,
		position,
		vesting,
		positionNftAccount,
		owner,
		payer,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
