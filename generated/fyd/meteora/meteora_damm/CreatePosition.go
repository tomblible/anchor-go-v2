// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_position" instruction.
type CreatePosition struct {
	// Params:
	// Accounts:
	// [0] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] position_nft_mint
	PositionNftMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [4] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [5] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [7] = [] token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [10] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreatePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreatePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreatePosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.PositionNftMint = accounts[1]
	obj.PositionNftAccount = accounts[2]
	obj.Pool = accounts[3]
	obj.Position = accounts[4]
	obj.PoolAuthority = accounts[5]
	obj.Payer = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.EventAuthority = accounts[9]
	obj.Program = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreatePosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreatePosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreatePosition)
}

func (*CreatePosition) NewInstance() programparser.Instruction {
	return new(CreatePosition)
}

func (obj *CreatePosition) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[11:]
}

// Builds a "create_position" instruction.
func NewCreatePositionInstruction(
	owner solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	pool solanago.PublicKey,
	position solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreatePosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] owner
		metas_[0] = solanago.NewAccountMeta(owner, false, false)
		// [1] = [writable,signer] position_nft_mint
		// position_nft_mint
		metas_[1] = solanago.NewAccountMeta(positionNftMint, true, true)
		// [2] = [writable] position_nft_account
		// position nft account
		metas_[2] = solanago.NewAccountMeta(positionNftAccount, true, false)
		// [3] = [writable] pool
		metas_[3] = solanago.NewAccountMeta(pool, true, false)
		// [4] = [writable] position
		metas_[4] = solanago.NewAccountMeta(position, true, false)
		// [5] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
		metas_[5] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [6] = [writable,signer] payer
		// Address paying to create the position. Can be anyone
		metas_[6] = solanago.NewAccountMeta(payer, true, true)
		// [7] = [] token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Program to create NFT mint/token account and transfer for token22 account
		metas_[7] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [8] = [] system_program
		metas_[8] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [9] = [] event_authority
		metas_[9] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [10] = [] program
		metas_[10] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreatePosition" instruction.
func BuildCreatePosition(
	owner solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	pool solanago.PublicKey,
	position solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreatePositionInstruction(
		owner,
		positionNftMint,
		positionNftAccount,
		pool,
		position,
		payer,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
