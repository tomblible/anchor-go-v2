// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_ineligible_reward" instruction.
type WithdrawIneligibleReward struct {
	// Params:
	RewardIndex uint8
	// Accounts:
	// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [2] = [writable] reward_vault
	RewardVault solanago.PublicKey `bin:"-"`
	// [3] = [] reward_mint
	RewardMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] funder_token_account
	FunderTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [8] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawIneligibleReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	return nil
}

func (obj *WithdrawIneligibleReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	return nil
}

func (obj *WithdrawIneligibleReward) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Pool = accounts[1]
	obj.RewardVault = accounts[2]
	obj.RewardMint = accounts[3]
	obj.FunderTokenAccount = accounts[4]
	obj.Funder = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.EventAuthority = accounts[7]
	obj.Program = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawIneligibleReward) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawIneligibleReward) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawIneligibleReward)
}

func (*WithdrawIneligibleReward) NewInstance() programparser.Instruction {
	return new(WithdrawIneligibleReward)
}

// Builds a "withdraw_ineligible_reward" instruction.
func NewWithdrawIneligibleRewardInstruction(
	// Params:
	rewardIndexParam uint8,

	// Accounts:
	pool solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	funder solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawIneligibleReward[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [writable] pool
		metas_[1] = solanago.NewAccountMeta(pool, true, false)
		// [2] = [writable] reward_vault
		metas_[2] = solanago.NewAccountMeta(rewardVault, true, false)
		// [3] = [] reward_mint
		metas_[3] = solanago.NewAccountMeta(rewardMint, false, false)
		// [4] = [writable] funder_token_account
		metas_[4] = solanago.NewAccountMeta(funderTokenAccount, true, false)
		// [5] = [,signer] funder
		metas_[5] = solanago.NewAccountMeta(funder, false, true)
		// [6] = [] token_program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [7] = [] event_authority
		metas_[7] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [8] = [] program
		metas_[8] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawIneligibleReward" instruction.
func BuildWithdrawIneligibleReward(
	// Params:
	rewardIndexParam uint8,

	// Accounts:
	pool solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	funder solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawIneligibleRewardInstruction(
		rewardIndexParam,
		pool,
		rewardVault,
		rewardMint,
		funderTokenAccount,
		funder,
		tokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
