// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type AddLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta binary.Uint128

	// maximum token a amount
	TokenAAmountThreshold uint64

	// maximum token b amount
	TokenBAmountThreshold uint64
}

func (obj AddLiquidityParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LiquidityDelta`:
	if err = encoder.Encode(obj.LiquidityDelta); err != nil {
		return fmt.Errorf("error while marshaling LiquidityDelta:%w", err)
	}
	// Serialize `TokenAAmountThreshold`:
	if err = encoder.Encode(obj.TokenAAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling TokenAAmountThreshold:%w", err)
	}
	// Serialize `TokenBAmountThreshold`:
	if err = encoder.Encode(obj.TokenBAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling TokenBAmountThreshold:%w", err)
	}
	return nil
}

func (obj AddLiquidityParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidityParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidityParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	if err = decoder.Decode(&obj.LiquidityDelta); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDelta:%w", err)
	}
	// Deserialize `TokenAAmountThreshold`:
	if err = decoder.Decode(&obj.TokenAAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling TokenAAmountThreshold:%w", err)
	}
	// Deserialize `TokenBAmountThreshold`:
	if err = decoder.Decode(&obj.TokenBAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling TokenBAmountThreshold:%w", err)
	}
	return nil
}

func (obj *AddLiquidityParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidityParameters: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidityParameters(buf []byte) (*AddLiquidityParameters, error) {
	obj := new(AddLiquidityParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeConfig struct {
	CliffFeeNumerator uint64
	FeeSchedulerMode  uint8
	Padding           [5]uint8
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	if err = encoder.Encode(obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling CliffFeeNumerator:%w", err)
	}
	// Serialize `FeeSchedulerMode`:
	if err = encoder.Encode(obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while marshaling FeeSchedulerMode:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	// Serialize `PeriodFrequency`:
	if err = encoder.Encode(obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while marshaling PeriodFrequency:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	return nil
}

func (obj BaseFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	if err = decoder.Decode(&obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling CliffFeeNumerator:%w", err)
	}
	// Deserialize `FeeSchedulerMode`:
	if err = decoder.Decode(&obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while unmarshaling FeeSchedulerMode:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	// Deserialize `PeriodFrequency`:
	if err = decoder.Decode(&obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while unmarshaling PeriodFrequency:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	return nil
}

func (obj *BaseFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeConfig(buf []byte) (*BaseFeeConfig, error) {
	obj := new(BaseFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
	FeeSchedulerMode  uint8
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	if err = encoder.Encode(obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling CliffFeeNumerator:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	// Serialize `PeriodFrequency`:
	if err = encoder.Encode(obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while marshaling PeriodFrequency:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `FeeSchedulerMode`:
	if err = encoder.Encode(obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while marshaling FeeSchedulerMode:%w", err)
	}
	return nil
}

func (obj BaseFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	if err = decoder.Decode(&obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling CliffFeeNumerator:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	// Deserialize `PeriodFrequency`:
	if err = decoder.Decode(&obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while unmarshaling PeriodFrequency:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `FeeSchedulerMode`:
	if err = decoder.Decode(&obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while unmarshaling FeeSchedulerMode:%w", err)
	}
	return nil
}

func (obj *BaseFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeParameters(buf []byte) (*BaseFeeParameters, error) {
	obj := new(BaseFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeStruct struct {
	CliffFeeNumerator uint64
	FeeSchedulerMode  uint8
	Padding0          [5]uint8
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
	Padding1          uint64
}

func (obj BaseFeeStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	if err = encoder.Encode(obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling CliffFeeNumerator:%w", err)
	}
	// Serialize `FeeSchedulerMode`:
	if err = encoder.Encode(obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while marshaling FeeSchedulerMode:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	// Serialize `PeriodFrequency`:
	if err = encoder.Encode(obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while marshaling PeriodFrequency:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	return nil
}

func (obj BaseFeeStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	if err = decoder.Decode(&obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling CliffFeeNumerator:%w", err)
	}
	// Deserialize `FeeSchedulerMode`:
	if err = decoder.Decode(&obj.FeeSchedulerMode); err != nil {
		return fmt.Errorf("error while unmarshaling FeeSchedulerMode:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	// Deserialize `PeriodFrequency`:
	if err = decoder.Decode(&obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while unmarshaling PeriodFrequency:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	return nil
}

func (obj *BaseFeeStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeStruct: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeStruct(buf []byte) (*BaseFeeStruct, error) {
	obj := new(BaseFeeStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicConfigParameters struct {
	PoolCreatorAuthority solanago.PublicKey
}

func (obj DynamicConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolCreatorAuthority`:
	if err = encoder.Encode(obj.PoolCreatorAuthority); err != nil {
		return fmt.Errorf("error while marshaling PoolCreatorAuthority:%w", err)
	}
	return nil
}

func (obj DynamicConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolCreatorAuthority`:
	if err = decoder.Decode(&obj.PoolCreatorAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling PoolCreatorAuthority:%w", err)
	}
	return nil
}

func (obj *DynamicConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicConfigParameters(buf []byte) (*DynamicConfigParameters, error) {
	obj := new(DynamicConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeConfig struct {
	Initialized              uint8
	Padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	Padding1                 [8]uint8
	BinStepU128              binary.Uint128
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	if err = encoder.Encode(obj.Initialized); err != nil {
		return fmt.Errorf("error while marshaling Initialized:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling MaxVolatilityAccumulator:%w", err)
	}
	// Serialize `VariableFeeControl`:
	if err = encoder.Encode(obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while marshaling VariableFeeControl:%w", err)
	}
	// Serialize `BinStep`:
	if err = encoder.Encode(obj.BinStep); err != nil {
		return fmt.Errorf("error while marshaling BinStep:%w", err)
	}
	// Serialize `FilterPeriod`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling FilterPeriod:%w", err)
	}
	// Serialize `DecayPeriod`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling DecayPeriod:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	// Serialize `BinStepU128`:
	if err = encoder.Encode(obj.BinStepU128); err != nil {
		return fmt.Errorf("error while marshaling BinStepU128:%w", err)
	}
	return nil
}

func (obj DynamicFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	if err = decoder.Decode(&obj.Initialized); err != nil {
		return fmt.Errorf("error while unmarshaling Initialized:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `VariableFeeControl`:
	if err = decoder.Decode(&obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while unmarshaling VariableFeeControl:%w", err)
	}
	// Deserialize `BinStep`:
	if err = decoder.Decode(&obj.BinStep); err != nil {
		return fmt.Errorf("error while unmarshaling BinStep:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	// Deserialize `BinStepU128`:
	if err = decoder.Decode(&obj.BinStepU128); err != nil {
		return fmt.Errorf("error while unmarshaling BinStepU128:%w", err)
	}
	return nil
}

func (obj *DynamicFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeConfig(buf []byte) (*DynamicFeeConfig, error) {
	obj := new(DynamicFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16
	BinStepU128              binary.Uint128
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	if err = encoder.Encode(obj.BinStep); err != nil {
		return fmt.Errorf("error while marshaling BinStep:%w", err)
	}
	// Serialize `BinStepU128`:
	if err = encoder.Encode(obj.BinStepU128); err != nil {
		return fmt.Errorf("error while marshaling BinStepU128:%w", err)
	}
	// Serialize `FilterPeriod`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling FilterPeriod:%w", err)
	}
	// Serialize `DecayPeriod`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling DecayPeriod:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling MaxVolatilityAccumulator:%w", err)
	}
	// Serialize `VariableFeeControl`:
	if err = encoder.Encode(obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while marshaling VariableFeeControl:%w", err)
	}
	return nil
}

func (obj DynamicFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	if err = decoder.Decode(&obj.BinStep); err != nil {
		return fmt.Errorf("error while unmarshaling BinStep:%w", err)
	}
	// Deserialize `BinStepU128`:
	if err = decoder.Decode(&obj.BinStepU128); err != nil {
		return fmt.Errorf("error while unmarshaling BinStepU128:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `VariableFeeControl`:
	if err = decoder.Decode(&obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while unmarshaling VariableFeeControl:%w", err)
	}
	return nil
}

func (obj *DynamicFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameters(buf []byte) (*DynamicFeeParameters, error) {
	obj := new(DynamicFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeStruct struct {
	Initialized              uint8
	Padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	LastUpdateTimestamp      uint64
	BinStepU128              binary.Uint128
	SqrtPriceReference       binary.Uint128
	VolatilityAccumulator    binary.Uint128
	VolatilityReference      binary.Uint128
}

func (obj DynamicFeeStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	if err = encoder.Encode(obj.Initialized); err != nil {
		return fmt.Errorf("error while marshaling Initialized:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling MaxVolatilityAccumulator:%w", err)
	}
	// Serialize `VariableFeeControl`:
	if err = encoder.Encode(obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while marshaling VariableFeeControl:%w", err)
	}
	// Serialize `BinStep`:
	if err = encoder.Encode(obj.BinStep); err != nil {
		return fmt.Errorf("error while marshaling BinStep:%w", err)
	}
	// Serialize `FilterPeriod`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling FilterPeriod:%w", err)
	}
	// Serialize `DecayPeriod`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling DecayPeriod:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `LastUpdateTimestamp`:
	if err = encoder.Encode(obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while marshaling LastUpdateTimestamp:%w", err)
	}
	// Serialize `BinStepU128`:
	if err = encoder.Encode(obj.BinStepU128); err != nil {
		return fmt.Errorf("error while marshaling BinStepU128:%w", err)
	}
	// Serialize `SqrtPriceReference`:
	if err = encoder.Encode(obj.SqrtPriceReference); err != nil {
		return fmt.Errorf("error while marshaling SqrtPriceReference:%w", err)
	}
	// Serialize `VolatilityAccumulator`:
	if err = encoder.Encode(obj.VolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling VolatilityAccumulator:%w", err)
	}
	// Serialize `VolatilityReference`:
	if err = encoder.Encode(obj.VolatilityReference); err != nil {
		return fmt.Errorf("error while marshaling VolatilityReference:%w", err)
	}
	return nil
}

func (obj DynamicFeeStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	if err = decoder.Decode(&obj.Initialized); err != nil {
		return fmt.Errorf("error while unmarshaling Initialized:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `VariableFeeControl`:
	if err = decoder.Decode(&obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while unmarshaling VariableFeeControl:%w", err)
	}
	// Deserialize `BinStep`:
	if err = decoder.Decode(&obj.BinStep); err != nil {
		return fmt.Errorf("error while unmarshaling BinStep:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `LastUpdateTimestamp`:
	if err = decoder.Decode(&obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdateTimestamp:%w", err)
	}
	// Deserialize `BinStepU128`:
	if err = decoder.Decode(&obj.BinStepU128); err != nil {
		return fmt.Errorf("error while unmarshaling BinStepU128:%w", err)
	}
	// Deserialize `SqrtPriceReference`:
	if err = decoder.Decode(&obj.SqrtPriceReference); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPriceReference:%w", err)
	}
	// Deserialize `VolatilityAccumulator`:
	if err = decoder.Decode(&obj.VolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityAccumulator:%w", err)
	}
	// Deserialize `VolatilityReference`:
	if err = decoder.Decode(&obj.VolatilityReference); err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityReference:%w", err)
	}
	return nil
}

func (obj *DynamicFeeStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeStruct: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeStruct(buf []byte) (*DynamicFeeStruct, error) {
	obj := new(DynamicFeeStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializeCustomizablePoolParameters struct {
	// pool fees
	PoolFees PoolFeeParameters

	// sqrt min price
	SqrtMinPrice binary.Uint128

	// sqrt max price
	SqrtMaxPrice binary.Uint128

	// has alpha vault
	HasAlphaVault bool

	// initialize liquidity
	Liquidity binary.Uint128

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice binary.Uint128

	// activation type
	ActivationType uint8

	// collect fee mode
	CollectFeeMode uint8

	// activation point
	ActivationPoint *uint64 `bin:"optional"`
}

func (obj InitializeCustomizablePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	if err = encoder.Encode(obj.PoolFees); err != nil {
		return fmt.Errorf("error while marshaling PoolFees:%w", err)
	}
	// Serialize `SqrtMinPrice`:
	if err = encoder.Encode(obj.SqrtMinPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtMinPrice:%w", err)
	}
	// Serialize `SqrtMaxPrice`:
	if err = encoder.Encode(obj.SqrtMaxPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtMaxPrice:%w", err)
	}
	// Serialize `HasAlphaVault`:
	if err = encoder.Encode(obj.HasAlphaVault); err != nil {
		return fmt.Errorf("error while marshaling HasAlphaVault:%w", err)
	}
	// Serialize `Liquidity`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling Liquidity:%w", err)
	}
	// Serialize `SqrtPrice`:
	if err = encoder.Encode(obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtPrice:%w", err)
	}
	// Serialize `ActivationType`:
	if err = encoder.Encode(obj.ActivationType); err != nil {
		return fmt.Errorf("error while marshaling ActivationType:%w", err)
	}
	// Serialize `CollectFeeMode`:
	if err = encoder.Encode(obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while marshaling CollectFeeMode:%w", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint optionality: %w", err)
			}
			if err = encoder.Encode(obj.ActivationPoint); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint: %w", err)
			}
		}
	}
	return nil
}

func (obj InitializeCustomizablePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializeCustomizablePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializeCustomizablePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	if err = decoder.Decode(&obj.PoolFees); err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees:%w", err)
	}
	// Deserialize `SqrtMinPrice`:
	if err = decoder.Decode(&obj.SqrtMinPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtMinPrice:%w", err)
	}
	// Deserialize `SqrtMaxPrice`:
	if err = decoder.Decode(&obj.SqrtMaxPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtMaxPrice:%w", err)
	}
	// Deserialize `HasAlphaVault`:
	if err = decoder.Decode(&obj.HasAlphaVault); err != nil {
		return fmt.Errorf("error while unmarshaling HasAlphaVault:%w", err)
	}
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	// Deserialize `SqrtPrice`:
	if err = decoder.Decode(&obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPrice:%w", err)
	}
	// Deserialize `ActivationType`:
	if err = decoder.Decode(&obj.ActivationType); err != nil {
		return fmt.Errorf("error while unmarshaling ActivationType:%w", err)
	}
	// Deserialize `CollectFeeMode`:
	if err = decoder.Decode(&obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling CollectFeeMode:%w", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling ActivationPoint:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.ActivationPoint); err != nil {
				return fmt.Errorf("error while unmarshaling ActivationPoint:%w", err)
			}
		}
	}
	return nil
}

func (obj *InitializeCustomizablePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializeCustomizablePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializeCustomizablePoolParameters(buf []byte) (*InitializeCustomizablePoolParameters, error) {
	obj := new(InitializeCustomizablePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializePoolParameters struct {
	// initialize liquidity
	Liquidity binary.Uint128

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice binary.Uint128

	// activation point
	ActivationPoint *uint64 `bin:"optional"`
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Liquidity`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling Liquidity:%w", err)
	}
	// Serialize `SqrtPrice`:
	if err = encoder.Encode(obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtPrice:%w", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint optionality: %w", err)
			}
			if err = encoder.Encode(obj.ActivationPoint); err != nil {
				return fmt.Errorf("error while marshaling ActivationPoint: %w", err)
			}
		}
	}
	return nil
}

func (obj InitializePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	// Deserialize `SqrtPrice`:
	if err = decoder.Decode(&obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPrice:%w", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling ActivationPoint:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.ActivationPoint); err != nil {
				return fmt.Errorf("error while unmarshaling ActivationPoint:%w", err)
			}
		}
	}
	return nil
}

func (obj *InitializePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializePoolParameters(buf []byte) (*InitializePoolParameters, error) {
	obj := new(InitializePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters

	// padding
	Padding [3]uint8

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	if err = encoder.Encode(obj.BaseFee); err != nil {
		return fmt.Errorf("error while marshaling BaseFee:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `DynamicFee` (optional):
	{
		if obj.DynamicFee == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee optionality: %w", err)
			}
			if err = encoder.Encode(obj.DynamicFee); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee: %w", err)
			}
		}
	}
	return nil
}

func (obj PoolFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	if err = decoder.Decode(&obj.BaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFee:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.DynamicFee); err != nil {
				return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalPoolFeeParameters(buf []byte) (*PoolFeeParameters, error) {
	obj := new(PoolFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolFeesConfig struct {
	BaseFee            BaseFeeConfig
	DynamicFee         DynamicFeeConfig
	ProtocolFeePercent uint8
	PartnerFeePercent  uint8
	ReferralFeePercent uint8
	Padding0           [5]uint8
	Padding1           [5]uint64
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	if err = encoder.Encode(obj.BaseFee); err != nil {
		return fmt.Errorf("error while marshaling BaseFee:%w", err)
	}
	// Serialize `DynamicFee`:
	if err = encoder.Encode(obj.DynamicFee); err != nil {
		return fmt.Errorf("error while marshaling DynamicFee:%w", err)
	}
	// Serialize `ProtocolFeePercent`:
	if err = encoder.Encode(obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFeePercent:%w", err)
	}
	// Serialize `PartnerFeePercent`:
	if err = encoder.Encode(obj.PartnerFeePercent); err != nil {
		return fmt.Errorf("error while marshaling PartnerFeePercent:%w", err)
	}
	// Serialize `ReferralFeePercent`:
	if err = encoder.Encode(obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ReferralFeePercent:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	return nil
}

func (obj PoolFeesConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	if err = decoder.Decode(&obj.BaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFee:%w", err)
	}
	// Deserialize `DynamicFee`:
	if err = decoder.Decode(&obj.DynamicFee); err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
	}
	// Deserialize `ProtocolFeePercent`:
	if err = decoder.Decode(&obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFeePercent:%w", err)
	}
	// Deserialize `PartnerFeePercent`:
	if err = decoder.Decode(&obj.PartnerFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling PartnerFeePercent:%w", err)
	}
	// Deserialize `ReferralFeePercent`:
	if err = decoder.Decode(&obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFeePercent:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	return nil
}

func (obj *PoolFeesConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesConfig: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesConfig(buf []byte) (*PoolFeesConfig, error) {
	obj := new(PoolFeesConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
// trading_fee = amount * trade_fee_numerator / denominator
// protocol_fee = trading_fee * protocol_fee_percentage / 100
// referral_fee = protocol_fee * referral_percentage / 100
// partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator
type PoolFeesStruct struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	BaseFee BaseFeeStruct

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolFeePercent uint8

	// partner fee
	PartnerFeePercent uint8

	// referral fee
	ReferralFeePercent uint8

	// padding
	Padding0 [5]uint8

	// dynamic fee
	DynamicFee DynamicFeeStruct

	// padding
	Padding1 [2]uint64
}

func (obj PoolFeesStruct) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	if err = encoder.Encode(obj.BaseFee); err != nil {
		return fmt.Errorf("error while marshaling BaseFee:%w", err)
	}
	// Serialize `ProtocolFeePercent`:
	if err = encoder.Encode(obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFeePercent:%w", err)
	}
	// Serialize `PartnerFeePercent`:
	if err = encoder.Encode(obj.PartnerFeePercent); err != nil {
		return fmt.Errorf("error while marshaling PartnerFeePercent:%w", err)
	}
	// Serialize `ReferralFeePercent`:
	if err = encoder.Encode(obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ReferralFeePercent:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	// Serialize `DynamicFee`:
	if err = encoder.Encode(obj.DynamicFee); err != nil {
		return fmt.Errorf("error while marshaling DynamicFee:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	return nil
}

func (obj PoolFeesStruct) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesStruct: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesStruct) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	if err = decoder.Decode(&obj.BaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFee:%w", err)
	}
	// Deserialize `ProtocolFeePercent`:
	if err = decoder.Decode(&obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFeePercent:%w", err)
	}
	// Deserialize `PartnerFeePercent`:
	if err = decoder.Decode(&obj.PartnerFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling PartnerFeePercent:%w", err)
	}
	// Deserialize `ReferralFeePercent`:
	if err = decoder.Decode(&obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFeePercent:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	// Deserialize `DynamicFee`:
	if err = decoder.Decode(&obj.DynamicFee); err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	return nil
}

func (obj *PoolFeesStruct) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesStruct: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesStruct(buf []byte) (*PoolFeesStruct, error) {
	obj := new(PoolFeesStruct)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolMetrics struct {
	TotalLpAFee       binary.Uint128
	TotalLpBFee       binary.Uint128
	TotalProtocolAFee uint64
	TotalProtocolBFee uint64
	TotalPartnerAFee  uint64
	TotalPartnerBFee  uint64
	TotalPosition     uint64
	Padding           uint64
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalLpAFee`:
	if err = encoder.Encode(obj.TotalLpAFee); err != nil {
		return fmt.Errorf("error while marshaling TotalLpAFee:%w", err)
	}
	// Serialize `TotalLpBFee`:
	if err = encoder.Encode(obj.TotalLpBFee); err != nil {
		return fmt.Errorf("error while marshaling TotalLpBFee:%w", err)
	}
	// Serialize `TotalProtocolAFee`:
	if err = encoder.Encode(obj.TotalProtocolAFee); err != nil {
		return fmt.Errorf("error while marshaling TotalProtocolAFee:%w", err)
	}
	// Serialize `TotalProtocolBFee`:
	if err = encoder.Encode(obj.TotalProtocolBFee); err != nil {
		return fmt.Errorf("error while marshaling TotalProtocolBFee:%w", err)
	}
	// Serialize `TotalPartnerAFee`:
	if err = encoder.Encode(obj.TotalPartnerAFee); err != nil {
		return fmt.Errorf("error while marshaling TotalPartnerAFee:%w", err)
	}
	// Serialize `TotalPartnerBFee`:
	if err = encoder.Encode(obj.TotalPartnerBFee); err != nil {
		return fmt.Errorf("error while marshaling TotalPartnerBFee:%w", err)
	}
	// Serialize `TotalPosition`:
	if err = encoder.Encode(obj.TotalPosition); err != nil {
		return fmt.Errorf("error while marshaling TotalPosition:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	return nil
}

func (obj PoolMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalLpAFee`:
	if err = decoder.Decode(&obj.TotalLpAFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalLpAFee:%w", err)
	}
	// Deserialize `TotalLpBFee`:
	if err = decoder.Decode(&obj.TotalLpBFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalLpBFee:%w", err)
	}
	// Deserialize `TotalProtocolAFee`:
	if err = decoder.Decode(&obj.TotalProtocolAFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalProtocolAFee:%w", err)
	}
	// Deserialize `TotalProtocolBFee`:
	if err = decoder.Decode(&obj.TotalProtocolBFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalProtocolBFee:%w", err)
	}
	// Deserialize `TotalPartnerAFee`:
	if err = decoder.Decode(&obj.TotalPartnerAFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalPartnerAFee:%w", err)
	}
	// Deserialize `TotalPartnerBFee`:
	if err = decoder.Decode(&obj.TotalPartnerBFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalPartnerBFee:%w", err)
	}
	// Deserialize `TotalPosition`:
	if err = decoder.Decode(&obj.TotalPosition); err != nil {
		return fmt.Errorf("error while unmarshaling TotalPosition:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	return nil
}

func (obj *PoolMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolMetrics: %w", err)
	}
	return nil
}

func UnmarshalPoolMetrics(buf []byte) (*PoolMetrics, error) {
	obj := new(PoolMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionMetrics struct {
	TotalClaimedAFee uint64
	TotalClaimedBFee uint64
}

func (obj PositionMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalClaimedAFee`:
	if err = encoder.Encode(obj.TotalClaimedAFee); err != nil {
		return fmt.Errorf("error while marshaling TotalClaimedAFee:%w", err)
	}
	// Serialize `TotalClaimedBFee`:
	if err = encoder.Encode(obj.TotalClaimedBFee); err != nil {
		return fmt.Errorf("error while marshaling TotalClaimedBFee:%w", err)
	}
	return nil
}

func (obj PositionMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalClaimedAFee`:
	if err = decoder.Decode(&obj.TotalClaimedAFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalClaimedAFee:%w", err)
	}
	// Deserialize `TotalClaimedBFee`:
	if err = decoder.Decode(&obj.TotalClaimedBFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalClaimedBFee:%w", err)
	}
	return nil
}

func (obj *PositionMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionMetrics: %w", err)
	}
	return nil
}

func UnmarshalPositionMetrics(buf []byte) (*PositionMetrics, error) {
	obj := new(PositionMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta binary.Uint128

	// minimum token a amount
	TokenAAmountThreshold uint64

	// minimum token b amount
	TokenBAmountThreshold uint64
}

func (obj RemoveLiquidityParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LiquidityDelta`:
	if err = encoder.Encode(obj.LiquidityDelta); err != nil {
		return fmt.Errorf("error while marshaling LiquidityDelta:%w", err)
	}
	// Serialize `TokenAAmountThreshold`:
	if err = encoder.Encode(obj.TokenAAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling TokenAAmountThreshold:%w", err)
	}
	// Serialize `TokenBAmountThreshold`:
	if err = encoder.Encode(obj.TokenBAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling TokenBAmountThreshold:%w", err)
	}
	return nil
}

func (obj RemoveLiquidityParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidityParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidityParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	if err = decoder.Decode(&obj.LiquidityDelta); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDelta:%w", err)
	}
	// Deserialize `TokenAAmountThreshold`:
	if err = decoder.Decode(&obj.TokenAAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling TokenAAmountThreshold:%w", err)
	}
	// Deserialize `TokenBAmountThreshold`:
	if err = decoder.Decode(&obj.TokenBAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling TokenBAmountThreshold:%w", err)
	}
	return nil
}

func (obj *RemoveLiquidityParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidityParameters: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidityParameters(buf []byte) (*RemoveLiquidityParameters, error) {
	obj := new(RemoveLiquidityParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Stores the state relevant for tracking liquidity mining rewards
type RewardInfo struct {
	// Indicates if the reward has been initialized
	Initialized uint8

	// reward token flag
	RewardTokenFlag uint8

	// padding
	Padding0 [6]uint8

	// Padding to ensure `reward_rate: u128` is 16-byte aligned
	Padding1 [8]uint8

	// Reward token mint.
	Mint solanago.PublicKey

	// Reward vault token account.
	Vault solanago.PublicKey

	// Authority account that allows to fund rewards
	Funder solanago.PublicKey

	// reward duration
	RewardDuration uint64

	// reward duration end
	RewardDurationEnd uint64

	// reward rate
	RewardRate binary.Uint128

	// Reward per token stored
	RewardPerTokenStored [32]uint8

	// The last time reward states were updated.
	LastUpdateTime uint64

	// Accumulated seconds when the farm distributed rewards but the bin was empty.
	// These rewards will be carried over to the next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64
}

func (obj RewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	if err = encoder.Encode(obj.Initialized); err != nil {
		return fmt.Errorf("error while marshaling Initialized:%w", err)
	}
	// Serialize `RewardTokenFlag`:
	if err = encoder.Encode(obj.RewardTokenFlag); err != nil {
		return fmt.Errorf("error while marshaling RewardTokenFlag:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	// Serialize `Mint`:
	if err = encoder.Encode(obj.Mint); err != nil {
		return fmt.Errorf("error while marshaling Mint:%w", err)
	}
	// Serialize `Vault`:
	if err = encoder.Encode(obj.Vault); err != nil {
		return fmt.Errorf("error while marshaling Vault:%w", err)
	}
	// Serialize `Funder`:
	if err = encoder.Encode(obj.Funder); err != nil {
		return fmt.Errorf("error while marshaling Funder:%w", err)
	}
	// Serialize `RewardDuration`:
	if err = encoder.Encode(obj.RewardDuration); err != nil {
		return fmt.Errorf("error while marshaling RewardDuration:%w", err)
	}
	// Serialize `RewardDurationEnd`:
	if err = encoder.Encode(obj.RewardDurationEnd); err != nil {
		return fmt.Errorf("error while marshaling RewardDurationEnd:%w", err)
	}
	// Serialize `RewardRate`:
	if err = encoder.Encode(obj.RewardRate); err != nil {
		return fmt.Errorf("error while marshaling RewardRate:%w", err)
	}
	// Serialize `RewardPerTokenStored`:
	if err = encoder.Encode(obj.RewardPerTokenStored); err != nil {
		return fmt.Errorf("error while marshaling RewardPerTokenStored:%w", err)
	}
	// Serialize `LastUpdateTime`:
	if err = encoder.Encode(obj.LastUpdateTime); err != nil {
		return fmt.Errorf("error while marshaling LastUpdateTime:%w", err)
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward`:
	if err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward); err != nil {
		return fmt.Errorf("error while marshaling CumulativeSecondsWithEmptyLiquidityReward:%w", err)
	}
	return nil
}

func (obj RewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	if err = decoder.Decode(&obj.Initialized); err != nil {
		return fmt.Errorf("error while unmarshaling Initialized:%w", err)
	}
	// Deserialize `RewardTokenFlag`:
	if err = decoder.Decode(&obj.RewardTokenFlag); err != nil {
		return fmt.Errorf("error while unmarshaling RewardTokenFlag:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	// Deserialize `Mint`:
	if err = decoder.Decode(&obj.Mint); err != nil {
		return fmt.Errorf("error while unmarshaling Mint:%w", err)
	}
	// Deserialize `Vault`:
	if err = decoder.Decode(&obj.Vault); err != nil {
		return fmt.Errorf("error while unmarshaling Vault:%w", err)
	}
	// Deserialize `Funder`:
	if err = decoder.Decode(&obj.Funder); err != nil {
		return fmt.Errorf("error while unmarshaling Funder:%w", err)
	}
	// Deserialize `RewardDuration`:
	if err = decoder.Decode(&obj.RewardDuration); err != nil {
		return fmt.Errorf("error while unmarshaling RewardDuration:%w", err)
	}
	// Deserialize `RewardDurationEnd`:
	if err = decoder.Decode(&obj.RewardDurationEnd); err != nil {
		return fmt.Errorf("error while unmarshaling RewardDurationEnd:%w", err)
	}
	// Deserialize `RewardRate`:
	if err = decoder.Decode(&obj.RewardRate); err != nil {
		return fmt.Errorf("error while unmarshaling RewardRate:%w", err)
	}
	// Deserialize `RewardPerTokenStored`:
	if err = decoder.Decode(&obj.RewardPerTokenStored); err != nil {
		return fmt.Errorf("error while unmarshaling RewardPerTokenStored:%w", err)
	}
	// Deserialize `LastUpdateTime`:
	if err = decoder.Decode(&obj.LastUpdateTime); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdateTime:%w", err)
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	if err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward); err != nil {
		return fmt.Errorf("error while unmarshaling CumulativeSecondsWithEmptyLiquidityReward:%w", err)
	}
	return nil
}

func (obj *RewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RewardInfo: %w", err)
	}
	return nil
}

func UnmarshalRewardInfo(buf []byte) (*RewardInfo, error) {
	obj := new(RewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitAmountInfo struct {
	PermanentLockedLiquidity binary.Uint128
	UnlockedLiquidity        binary.Uint128
	FeeA                     uint64
	FeeB                     uint64
	Reward0                  uint64
	Reward1                  uint64
}

func (obj SplitAmountInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PermanentLockedLiquidity`:
	if err = encoder.Encode(obj.PermanentLockedLiquidity); err != nil {
		return fmt.Errorf("error while marshaling PermanentLockedLiquidity:%w", err)
	}
	// Serialize `UnlockedLiquidity`:
	if err = encoder.Encode(obj.UnlockedLiquidity); err != nil {
		return fmt.Errorf("error while marshaling UnlockedLiquidity:%w", err)
	}
	// Serialize `FeeA`:
	if err = encoder.Encode(obj.FeeA); err != nil {
		return fmt.Errorf("error while marshaling FeeA:%w", err)
	}
	// Serialize `FeeB`:
	if err = encoder.Encode(obj.FeeB); err != nil {
		return fmt.Errorf("error while marshaling FeeB:%w", err)
	}
	// Serialize `Reward0`:
	if err = encoder.Encode(obj.Reward0); err != nil {
		return fmt.Errorf("error while marshaling Reward0:%w", err)
	}
	// Serialize `Reward1`:
	if err = encoder.Encode(obj.Reward1); err != nil {
		return fmt.Errorf("error while marshaling Reward1:%w", err)
	}
	return nil
}

func (obj SplitAmountInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitAmountInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitAmountInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PermanentLockedLiquidity`:
	if err = decoder.Decode(&obj.PermanentLockedLiquidity); err != nil {
		return fmt.Errorf("error while unmarshaling PermanentLockedLiquidity:%w", err)
	}
	// Deserialize `UnlockedLiquidity`:
	if err = decoder.Decode(&obj.UnlockedLiquidity); err != nil {
		return fmt.Errorf("error while unmarshaling UnlockedLiquidity:%w", err)
	}
	// Deserialize `FeeA`:
	if err = decoder.Decode(&obj.FeeA); err != nil {
		return fmt.Errorf("error while unmarshaling FeeA:%w", err)
	}
	// Deserialize `FeeB`:
	if err = decoder.Decode(&obj.FeeB); err != nil {
		return fmt.Errorf("error while unmarshaling FeeB:%w", err)
	}
	// Deserialize `Reward0`:
	if err = decoder.Decode(&obj.Reward0); err != nil {
		return fmt.Errorf("error while unmarshaling Reward0:%w", err)
	}
	// Deserialize `Reward1`:
	if err = decoder.Decode(&obj.Reward1); err != nil {
		return fmt.Errorf("error while unmarshaling Reward1:%w", err)
	}
	return nil
}

func (obj *SplitAmountInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitAmountInfo: %w", err)
	}
	return nil
}

func UnmarshalSplitAmountInfo(buf []byte) (*SplitAmountInfo, error) {
	obj := new(SplitAmountInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitPositionInfo struct {
	Liquidity binary.Uint128
	FeeA      uint64
	FeeB      uint64
	Reward0   uint64
	Reward1   uint64
}

func (obj SplitPositionInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Liquidity`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling Liquidity:%w", err)
	}
	// Serialize `FeeA`:
	if err = encoder.Encode(obj.FeeA); err != nil {
		return fmt.Errorf("error while marshaling FeeA:%w", err)
	}
	// Serialize `FeeB`:
	if err = encoder.Encode(obj.FeeB); err != nil {
		return fmt.Errorf("error while marshaling FeeB:%w", err)
	}
	// Serialize `Reward0`:
	if err = encoder.Encode(obj.Reward0); err != nil {
		return fmt.Errorf("error while marshaling Reward0:%w", err)
	}
	// Serialize `Reward1`:
	if err = encoder.Encode(obj.Reward1); err != nil {
		return fmt.Errorf("error while marshaling Reward1:%w", err)
	}
	return nil
}

func (obj SplitPositionInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitPositionInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitPositionInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	// Deserialize `FeeA`:
	if err = decoder.Decode(&obj.FeeA); err != nil {
		return fmt.Errorf("error while unmarshaling FeeA:%w", err)
	}
	// Deserialize `FeeB`:
	if err = decoder.Decode(&obj.FeeB); err != nil {
		return fmt.Errorf("error while unmarshaling FeeB:%w", err)
	}
	// Deserialize `Reward0`:
	if err = decoder.Decode(&obj.Reward0); err != nil {
		return fmt.Errorf("error while unmarshaling Reward0:%w", err)
	}
	// Deserialize `Reward1`:
	if err = decoder.Decode(&obj.Reward1); err != nil {
		return fmt.Errorf("error while unmarshaling Reward1:%w", err)
	}
	return nil
}

func (obj *SplitPositionInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitPositionInfo: %w", err)
	}
	return nil
}

func UnmarshalSplitPositionInfo(buf []byte) (*SplitPositionInfo, error) {
	obj := new(SplitPositionInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SplitPositionParameters struct {
	// Percentage of unlocked liquidity to split to the second position
	UnlockedLiquidityPercentage uint8

	// Percentage of permanent locked liquidity to split to the second position
	PermanentLockedLiquidityPercentage uint8

	// Percentage of fee A pending to split to the second position
	FeeAPercentage uint8

	// Percentage of fee B pending to split to the second position
	FeeBPercentage uint8

	// Percentage of reward 0 pending to split to the second position
	Reward0Percentage uint8

	// Percentage of reward 1 pending to split to the second position
	Reward1Percentage uint8

	// padding for future
	Padding [16]uint8
}

func (obj SplitPositionParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UnlockedLiquidityPercentage`:
	if err = encoder.Encode(obj.UnlockedLiquidityPercentage); err != nil {
		return fmt.Errorf("error while marshaling UnlockedLiquidityPercentage:%w", err)
	}
	// Serialize `PermanentLockedLiquidityPercentage`:
	if err = encoder.Encode(obj.PermanentLockedLiquidityPercentage); err != nil {
		return fmt.Errorf("error while marshaling PermanentLockedLiquidityPercentage:%w", err)
	}
	// Serialize `FeeAPercentage`:
	if err = encoder.Encode(obj.FeeAPercentage); err != nil {
		return fmt.Errorf("error while marshaling FeeAPercentage:%w", err)
	}
	// Serialize `FeeBPercentage`:
	if err = encoder.Encode(obj.FeeBPercentage); err != nil {
		return fmt.Errorf("error while marshaling FeeBPercentage:%w", err)
	}
	// Serialize `Reward0Percentage`:
	if err = encoder.Encode(obj.Reward0Percentage); err != nil {
		return fmt.Errorf("error while marshaling Reward0Percentage:%w", err)
	}
	// Serialize `Reward1Percentage`:
	if err = encoder.Encode(obj.Reward1Percentage); err != nil {
		return fmt.Errorf("error while marshaling Reward1Percentage:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	return nil
}

func (obj SplitPositionParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SplitPositionParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SplitPositionParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UnlockedLiquidityPercentage`:
	if err = decoder.Decode(&obj.UnlockedLiquidityPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling UnlockedLiquidityPercentage:%w", err)
	}
	// Deserialize `PermanentLockedLiquidityPercentage`:
	if err = decoder.Decode(&obj.PermanentLockedLiquidityPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling PermanentLockedLiquidityPercentage:%w", err)
	}
	// Deserialize `FeeAPercentage`:
	if err = decoder.Decode(&obj.FeeAPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling FeeAPercentage:%w", err)
	}
	// Deserialize `FeeBPercentage`:
	if err = decoder.Decode(&obj.FeeBPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling FeeBPercentage:%w", err)
	}
	// Deserialize `Reward0Percentage`:
	if err = decoder.Decode(&obj.Reward0Percentage); err != nil {
		return fmt.Errorf("error while unmarshaling Reward0Percentage:%w", err)
	}
	// Deserialize `Reward1Percentage`:
	if err = decoder.Decode(&obj.Reward1Percentage); err != nil {
		return fmt.Errorf("error while unmarshaling Reward1Percentage:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	return nil
}

func (obj *SplitPositionParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SplitPositionParameters: %w", err)
	}
	return nil
}

func UnmarshalSplitPositionParameters(buf []byte) (*SplitPositionParameters, error) {
	obj := new(SplitPositionParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type StaticConfigParameters struct {
	PoolFees             PoolFeeParameters
	SqrtMinPrice         binary.Uint128
	SqrtMaxPrice         binary.Uint128
	VaultConfigKey       solanago.PublicKey
	PoolCreatorAuthority solanago.PublicKey
	ActivationType       uint8
	CollectFeeMode       uint8
}

func (obj StaticConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	if err = encoder.Encode(obj.PoolFees); err != nil {
		return fmt.Errorf("error while marshaling PoolFees:%w", err)
	}
	// Serialize `SqrtMinPrice`:
	if err = encoder.Encode(obj.SqrtMinPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtMinPrice:%w", err)
	}
	// Serialize `SqrtMaxPrice`:
	if err = encoder.Encode(obj.SqrtMaxPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtMaxPrice:%w", err)
	}
	// Serialize `VaultConfigKey`:
	if err = encoder.Encode(obj.VaultConfigKey); err != nil {
		return fmt.Errorf("error while marshaling VaultConfigKey:%w", err)
	}
	// Serialize `PoolCreatorAuthority`:
	if err = encoder.Encode(obj.PoolCreatorAuthority); err != nil {
		return fmt.Errorf("error while marshaling PoolCreatorAuthority:%w", err)
	}
	// Serialize `ActivationType`:
	if err = encoder.Encode(obj.ActivationType); err != nil {
		return fmt.Errorf("error while marshaling ActivationType:%w", err)
	}
	// Serialize `CollectFeeMode`:
	if err = encoder.Encode(obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while marshaling CollectFeeMode:%w", err)
	}
	return nil
}

func (obj StaticConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding StaticConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *StaticConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	if err = decoder.Decode(&obj.PoolFees); err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees:%w", err)
	}
	// Deserialize `SqrtMinPrice`:
	if err = decoder.Decode(&obj.SqrtMinPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtMinPrice:%w", err)
	}
	// Deserialize `SqrtMaxPrice`:
	if err = decoder.Decode(&obj.SqrtMaxPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtMaxPrice:%w", err)
	}
	// Deserialize `VaultConfigKey`:
	if err = decoder.Decode(&obj.VaultConfigKey); err != nil {
		return fmt.Errorf("error while unmarshaling VaultConfigKey:%w", err)
	}
	// Deserialize `PoolCreatorAuthority`:
	if err = decoder.Decode(&obj.PoolCreatorAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling PoolCreatorAuthority:%w", err)
	}
	// Deserialize `ActivationType`:
	if err = decoder.Decode(&obj.ActivationType); err != nil {
		return fmt.Errorf("error while unmarshaling ActivationType:%w", err)
	}
	// Deserialize `CollectFeeMode`:
	if err = decoder.Decode(&obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling CollectFeeMode:%w", err)
	}
	return nil
}

func (obj *StaticConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling StaticConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalStaticConfigParameters(buf []byte) (*StaticConfigParameters, error) {
	obj := new(StaticConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapParameters struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling AmountIn:%w", err)
	}
	// Serialize `MinimumAmountOut`:
	if err = encoder.Encode(obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while marshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj SwapParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `MinimumAmountOut`:
	if err = decoder.Decode(&obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj *SwapParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapParameters: %w", err)
	}
	return nil
}

func UnmarshalSwapParameters(buf []byte) (*SwapParameters, error) {
	obj := new(SwapParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Encodes all results of swapping
type SwapResult struct {
	OutputAmount  uint64
	NextSqrtPrice binary.Uint128
	LpFee         uint64
	ProtocolFee   uint64
	PartnerFee    uint64
	ReferralFee   uint64
}

func (obj SwapResult) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OutputAmount`:
	if err = encoder.Encode(obj.OutputAmount); err != nil {
		return fmt.Errorf("error while marshaling OutputAmount:%w", err)
	}
	// Serialize `NextSqrtPrice`:
	if err = encoder.Encode(obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling NextSqrtPrice:%w", err)
	}
	// Serialize `LpFee`:
	if err = encoder.Encode(obj.LpFee); err != nil {
		return fmt.Errorf("error while marshaling LpFee:%w", err)
	}
	// Serialize `ProtocolFee`:
	if err = encoder.Encode(obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFee:%w", err)
	}
	// Serialize `PartnerFee`:
	if err = encoder.Encode(obj.PartnerFee); err != nil {
		return fmt.Errorf("error while marshaling PartnerFee:%w", err)
	}
	// Serialize `ReferralFee`:
	if err = encoder.Encode(obj.ReferralFee); err != nil {
		return fmt.Errorf("error while marshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj SwapResult) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapResult: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OutputAmount`:
	if err = decoder.Decode(&obj.OutputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling OutputAmount:%w", err)
	}
	// Deserialize `NextSqrtPrice`:
	if err = decoder.Decode(&obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling NextSqrtPrice:%w", err)
	}
	// Deserialize `LpFee`:
	if err = decoder.Decode(&obj.LpFee); err != nil {
		return fmt.Errorf("error while unmarshaling LpFee:%w", err)
	}
	// Deserialize `ProtocolFee`:
	if err = decoder.Decode(&obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFee:%w", err)
	}
	// Deserialize `PartnerFee`:
	if err = decoder.Decode(&obj.PartnerFee); err != nil {
		return fmt.Errorf("error while unmarshaling PartnerFee:%w", err)
	}
	// Deserialize `ReferralFee`:
	if err = decoder.Decode(&obj.ReferralFee); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj *SwapResult) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapResult: %w", err)
	}
	return nil
}

func UnmarshalSwapResult(buf []byte) (*SwapResult, error) {
	obj := new(SwapResult)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserRewardInfo struct {
	// The latest update reward checkpoint
	RewardPerTokenCheckpoint [32]uint8

	// Current pending rewards
	RewardPendings uint64

	// Total claimed rewards
	TotalClaimedRewards uint64
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCheckpoint`:
	if err = encoder.Encode(obj.RewardPerTokenCheckpoint); err != nil {
		return fmt.Errorf("error while marshaling RewardPerTokenCheckpoint:%w", err)
	}
	// Serialize `RewardPendings`:
	if err = encoder.Encode(obj.RewardPendings); err != nil {
		return fmt.Errorf("error while marshaling RewardPendings:%w", err)
	}
	// Serialize `TotalClaimedRewards`:
	if err = encoder.Encode(obj.TotalClaimedRewards); err != nil {
		return fmt.Errorf("error while marshaling TotalClaimedRewards:%w", err)
	}
	return nil
}

func (obj UserRewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserRewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCheckpoint`:
	if err = decoder.Decode(&obj.RewardPerTokenCheckpoint); err != nil {
		return fmt.Errorf("error while unmarshaling RewardPerTokenCheckpoint:%w", err)
	}
	// Deserialize `RewardPendings`:
	if err = decoder.Decode(&obj.RewardPendings); err != nil {
		return fmt.Errorf("error while unmarshaling RewardPendings:%w", err)
	}
	// Deserialize `TotalClaimedRewards`:
	if err = decoder.Decode(&obj.TotalClaimedRewards); err != nil {
		return fmt.Errorf("error while unmarshaling TotalClaimedRewards:%w", err)
	}
	return nil
}

func (obj *UserRewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserRewardInfo: %w", err)
	}
	return nil
}

func UnmarshalUserRewardInfo(buf []byte) (*UserRewardInfo, error) {
	obj := new(UserRewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingParameters struct {
	CliffPoint           *uint64 `bin:"optional"`
	PeriodFrequency      uint64
	CliffUnlockLiquidity binary.Uint128
	LiquidityPerPeriod   binary.Uint128
	NumberOfPeriod       uint16
}

func (obj VestingParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffPoint` (optional):
	{
		if obj.CliffPoint == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling CliffPoint optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling CliffPoint optionality: %w", err)
			}
			if err = encoder.Encode(obj.CliffPoint); err != nil {
				return fmt.Errorf("error while marshaling CliffPoint: %w", err)
			}
		}
	}
	// Serialize `PeriodFrequency`:
	if err = encoder.Encode(obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while marshaling PeriodFrequency:%w", err)
	}
	// Serialize `CliffUnlockLiquidity`:
	if err = encoder.Encode(obj.CliffUnlockLiquidity); err != nil {
		return fmt.Errorf("error while marshaling CliffUnlockLiquidity:%w", err)
	}
	// Serialize `LiquidityPerPeriod`:
	if err = encoder.Encode(obj.LiquidityPerPeriod); err != nil {
		return fmt.Errorf("error while marshaling LiquidityPerPeriod:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	return nil
}

func (obj VestingParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling CliffPoint:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.CliffPoint); err != nil {
				return fmt.Errorf("error while unmarshaling CliffPoint:%w", err)
			}
		}
	}
	// Deserialize `PeriodFrequency`:
	if err = decoder.Decode(&obj.PeriodFrequency); err != nil {
		return fmt.Errorf("error while unmarshaling PeriodFrequency:%w", err)
	}
	// Deserialize `CliffUnlockLiquidity`:
	if err = decoder.Decode(&obj.CliffUnlockLiquidity); err != nil {
		return fmt.Errorf("error while unmarshaling CliffUnlockLiquidity:%w", err)
	}
	// Deserialize `LiquidityPerPeriod`:
	if err = decoder.Decode(&obj.LiquidityPerPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityPerPeriod:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	return nil
}

func (obj *VestingParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingParameters: %w", err)
	}
	return nil
}

func UnmarshalVestingParameters(buf []byte) (*VestingParameters, error) {
	obj := new(VestingParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
