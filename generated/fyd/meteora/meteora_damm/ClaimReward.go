// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_reward" instruction.
type ClaimReward struct {
	// Params:
	RewardIndex uint8
	SkipReward  uint8
	// Accounts:
	// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [2] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [writable] reward_vault
	RewardVault solanago.PublicKey `bin:"-"`
	// [4] = [] reward_mint
	RewardMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_token_account
	UserTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [7] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [8] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [10] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `skipRewardParam`:
	if err = encoder.Encode(obj.SkipReward); err != nil {
		return fmt.Errorf("error while marshaling skipRewardParam:%w", err)
	}
	return nil
}

func (obj *ClaimReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `SkipReward`:
	if err = decoder.Decode(&obj.SkipReward); err != nil {
		return fmt.Errorf("error while unmarshaling SkipReward:%w", err)
	}
	return nil
}

func (obj *ClaimReward) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Pool = accounts[1]
	obj.Position = accounts[2]
	obj.RewardVault = accounts[3]
	obj.RewardMint = accounts[4]
	obj.UserTokenAccount = accounts[5]
	obj.PositionNftAccount = accounts[6]
	obj.Owner = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.EventAuthority = accounts[9]
	obj.Program = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimReward) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimReward) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimReward)
}

func (*ClaimReward) NewInstance() programparser.Instruction {
	return new(ClaimReward)
}

func (obj *ClaimReward) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 11 {
		return nil
	}
	return obj.PublicKeySlice[11:]
}

// Builds a "claim_reward" instruction.
func NewClaimRewardInstruction(
	// Params:
	rewardIndexParam uint8,
	skipRewardParam uint8,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	userTokenAccount solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimReward[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `skipRewardParam`:
		if err = enc__.Encode(skipRewardParam); err != nil {
			return nil, fmt.Errorf("error while marshaling skipRewardParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [writable] pool
		metas_[1] = solanago.NewAccountMeta(pool, true, false)
		// [2] = [writable] position
		metas_[2] = solanago.NewAccountMeta(position, true, false)
		// [3] = [writable] reward_vault
		// The vault token account for reward token
		metas_[3] = solanago.NewAccountMeta(rewardVault, true, false)
		// [4] = [] reward_mint
		metas_[4] = solanago.NewAccountMeta(rewardMint, false, false)
		// [5] = [writable] user_token_account
		metas_[5] = solanago.NewAccountMeta(userTokenAccount, true, false)
		// [6] = [] position_nft_account
		// The token account for nft
		metas_[6] = solanago.NewAccountMeta(positionNftAccount, false, false)
		// [7] = [,signer] owner
		// owner of position
		metas_[7] = solanago.NewAccountMeta(owner, false, true)
		// [8] = [] token_program
		metas_[8] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [9] = [] event_authority
		metas_[9] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [10] = [] program
		metas_[10] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimReward" instruction.
func BuildClaimReward(
	// Params:
	rewardIndexParam uint8,
	skipRewardParam uint8,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	userTokenAccount solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimRewardInstruction(
		rewardIndexParam,
		skipRewardParam,
		pool,
		position,
		rewardVault,
		rewardMint,
		userTokenAccount,
		positionNftAccount,
		owner,
		tokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
