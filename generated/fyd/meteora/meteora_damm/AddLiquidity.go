// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "add_liquidity" instruction.
type AddLiquidity struct {
	// Params:
	Params AddLiquidityParameters
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [2] = [writable] token_a_account
	TokenAAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_b_account
	TokenBAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_a_vault
	TokenAVault solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_b_vault
	TokenBVault solanago.PublicKey `bin:"-"`
	// [6] = [] token_a_mint
	TokenAMint solanago.PublicKey `bin:"-"`
	// [7] = [] token_b_mint
	TokenBMint solanago.PublicKey `bin:"-"`
	// [8] = [] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [9] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [10] = [] token_a_program
	TokenAProgram solanago.PublicKey `bin:"-"`
	// [11] = [] token_b_program
	TokenBProgram solanago.PublicKey `bin:"-"`
	// [12] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [13] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *AddLiquidity) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.Position = accounts[1]
	obj.TokenAAccount = accounts[2]
	obj.TokenBAccount = accounts[3]
	obj.TokenAVault = accounts[4]
	obj.TokenBVault = accounts[5]
	obj.TokenAMint = accounts[6]
	obj.TokenBMint = accounts[7]
	obj.PositionNftAccount = accounts[8]
	obj.Owner = accounts[9]
	obj.TokenAProgram = accounts[10]
	obj.TokenBProgram = accounts[11]
	obj.EventAuthority = accounts[12]
	obj.Program = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *AddLiquidity) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*AddLiquidity) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_AddLiquidity)
}

func (*AddLiquidity) NewInstance() programparser.Instruction {
	return new(AddLiquidity)
}

// Builds a "add_liquidity" instruction.
func NewAddLiquidityInstruction(
	// Params:
	paramsParam AddLiquidityParameters,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_AddLiquidity[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [writable] position
		metas_[1] = solanago.NewAccountMeta(position, true, false)
		// [2] = [writable] token_a_account
		// The user token a account
		metas_[2] = solanago.NewAccountMeta(tokenAAccount, true, false)
		// [3] = [writable] token_b_account
		// The user token b account
		metas_[3] = solanago.NewAccountMeta(tokenBAccount, true, false)
		// [4] = [writable] token_a_vault
		// The vault token account for input token
		metas_[4] = solanago.NewAccountMeta(tokenAVault, true, false)
		// [5] = [writable] token_b_vault
		// The vault token account for output token
		metas_[5] = solanago.NewAccountMeta(tokenBVault, true, false)
		// [6] = [] token_a_mint
		// The mint of token a
		metas_[6] = solanago.NewAccountMeta(tokenAMint, false, false)
		// [7] = [] token_b_mint
		// The mint of token b
		metas_[7] = solanago.NewAccountMeta(tokenBMint, false, false)
		// [8] = [] position_nft_account
		// The token account for nft
		metas_[8] = solanago.NewAccountMeta(positionNftAccount, false, false)
		// [9] = [,signer] owner
		// owner of position
		metas_[9] = solanago.NewAccountMeta(owner, false, true)
		// [10] = [] token_a_program
		// Token a program
		metas_[10] = solanago.NewAccountMeta(tokenAProgram, false, false)
		// [11] = [] token_b_program
		// Token b program
		metas_[11] = solanago.NewAccountMeta(tokenBProgram, false, false)
		// [12] = [] event_authority
		metas_[12] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [13] = [] program
		metas_[13] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAddLiquidity" instruction.
func BuildAddLiquidity(
	// Params:
	paramsParam AddLiquidityParameters,

	// Accounts:
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	owner solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAddLiquidityInstruction(
		paramsParam,
		pool,
		position,
		tokenAAccount,
		tokenBAccount,
		tokenAVault,
		tokenBVault,
		tokenAMint,
		tokenBMint,
		positionNftAccount,
		owner,
		tokenAProgram,
		tokenBProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
