// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_pool" instruction.

// USER FUNCTIONS ////
type InitializePool struct {
	// Params:
	Params InitializePoolParameters
	// Accounts:
	// [0] = [] creator
	Creator solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] position_nft_mint
	PositionNftMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [4] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [5] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [7] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [8] = [] token_a_mint
	TokenAMint solanago.PublicKey `bin:"-"`
	// [9] = [] token_b_mint
	TokenBMint solanago.PublicKey `bin:"-"`
	// [10] = [writable] token_a_vault
	TokenAVault solanago.PublicKey `bin:"-"`
	// [11] = [writable] token_b_vault
	TokenBVault solanago.PublicKey `bin:"-"`
	// [12] = [writable] payer_token_a
	PayerTokenA solanago.PublicKey `bin:"-"`
	// [13] = [writable] payer_token_b
	PayerTokenB solanago.PublicKey `bin:"-"`
	// [14] = [] token_a_program
	TokenAProgram solanago.PublicKey `bin:"-"`
	// [15] = [] token_b_program
	TokenBProgram solanago.PublicKey `bin:"-"`
	// [16] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	Token2022Program solanago.PublicKey `bin:"-"`
	// [17] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [18] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [19] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *InitializePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *InitializePool) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 20 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 20, len(accounts))
	}
	obj.Creator = accounts[0]
	obj.PositionNftMint = accounts[1]
	obj.PositionNftAccount = accounts[2]
	obj.Payer = accounts[3]
	obj.Config = accounts[4]
	obj.PoolAuthority = accounts[5]
	obj.Pool = accounts[6]
	obj.Position = accounts[7]
	obj.TokenAMint = accounts[8]
	obj.TokenBMint = accounts[9]
	obj.TokenAVault = accounts[10]
	obj.TokenBVault = accounts[11]
	obj.PayerTokenA = accounts[12]
	obj.PayerTokenB = accounts[13]
	obj.TokenAProgram = accounts[14]
	obj.TokenBProgram = accounts[15]
	obj.Token2022Program = accounts[16]
	obj.SystemProgram = accounts[17]
	obj.EventAuthority = accounts[18]
	obj.Program = accounts[19]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializePool) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializePool) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializePool)
}

func (*InitializePool) NewInstance() programparser.Instruction {
	return new(InitializePool)
}

// Builds a "initialize_pool" instruction.
// USER FUNCTIONS ////
func NewInitializePoolInstruction(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	creator solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	payer solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	payerTokenA solanago.PublicKey,
	payerTokenB solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 20, 20+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializePool[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] creator
		metas_[0] = solanago.NewAccountMeta(creator, false, false)
		// [1] = [writable,signer] position_nft_mint
		// position_nft_mint
		metas_[1] = solanago.NewAccountMeta(positionNftMint, true, true)
		// [2] = [writable] position_nft_account
		// position nft account
		metas_[2] = solanago.NewAccountMeta(positionNftAccount, true, false)
		// [3] = [writable,signer] payer
		// Address paying to create the pool. Can be anyone
		metas_[3] = solanago.NewAccountMeta(payer, true, true)
		// [4] = [] config
		// Which config the pool belongs to.
		metas_[4] = solanago.NewAccountMeta(config, false, false)
		// [5] = [] pool_authority[HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC]
		metas_[5] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [6] = [writable] pool
		// Initialize an account to store the pool state
		metas_[6] = solanago.NewAccountMeta(pool, true, false)
		// [7] = [writable] position
		metas_[7] = solanago.NewAccountMeta(position, true, false)
		// [8] = [] token_a_mint
		// Token a mint
		metas_[8] = solanago.NewAccountMeta(tokenAMint, false, false)
		// [9] = [] token_b_mint
		// Token b mint
		metas_[9] = solanago.NewAccountMeta(tokenBMint, false, false)
		// [10] = [writable] token_a_vault
		// Token a vault for the pool
		metas_[10] = solanago.NewAccountMeta(tokenAVault, true, false)
		// [11] = [writable] token_b_vault
		// Token b vault for the pool
		metas_[11] = solanago.NewAccountMeta(tokenBVault, true, false)
		// [12] = [writable] payer_token_a
		// payer token a account
		metas_[12] = solanago.NewAccountMeta(payerTokenA, true, false)
		// [13] = [writable] payer_token_b
		// creator token b account
		metas_[13] = solanago.NewAccountMeta(payerTokenB, true, false)
		// [14] = [] token_a_program
		// Program to create mint account and mint tokens
		metas_[14] = solanago.NewAccountMeta(tokenAProgram, false, false)
		// [15] = [] token_b_program
		// Program to create mint account and mint tokens
		metas_[15] = solanago.NewAccountMeta(tokenBProgram, false, false)
		// [16] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Program to create NFT mint/token account and transfer for token22 account
		metas_[16] = solanago.NewAccountMeta(Token2022Program, false, false)
		// [17] = [] system_program
		metas_[17] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [18] = [] event_authority
		metas_[18] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [19] = [] program
		metas_[19] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializePool" instruction.
// USER FUNCTIONS ////
func BuildInitializePool(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	creator solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	payer solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	position solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	payerTokenA solanago.PublicKey,
	payerTokenB solanago.PublicKey,
	tokenAProgram solanago.PublicKey,
	tokenBProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializePoolInstruction(
		paramsParam,
		creator,
		positionNftMint,
		positionNftAccount,
		payer,
		config,
		pool,
		position,
		tokenAMint,
		tokenBMint,
		tokenAVault,
		tokenBVault,
		payerTokenA,
		payerTokenB,
		tokenAProgram,
		tokenBProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
