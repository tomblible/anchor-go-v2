// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package meteora_damm

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 102, 95, 111, 112, 101, 114, 97, 116, 111, 114}
	seeds[1] = operator.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindClaimFeeOperatorAddress(operator)
	return
}

func FindConfigAddress(index uint64) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 111, 110, 102, 105, 103}
	if seeds[1], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindConfigAddress(index uint64) (pda solanago.PublicKey) {
	pda, _, _ = FindConfigAddress(index)
	return
}

func FindPositionNftAccountAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 115, 105, 116, 105, 111, 110, 95, 110, 102, 116, 95, 97, 99, 99, 111, 117, 110, 116}
	seeds[1] = positionNftMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPositionNftAccountAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPositionNftAccountAddress(positionNftMint)
	return
}

func FindPositionAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 115, 105, 116, 105, 111, 110}
	seeds[1] = positionNftMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPositionAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPositionAddress(positionNftMint)
	return
}

func FindTokenBadgeAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101}
	seeds[1] = tokenMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenBadgeAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenBadgeAddress(tokenMint)
	return
}

func FindTokenAVaultAddress(tokenAMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116}
	seeds[1] = tokenAMint.Bytes()
	seeds[2] = pool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenAVaultAddress(tokenAMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenAVaultAddress(tokenAMint, pool)
	return
}

func FindTokenBVaultAddress(tokenBMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116}
	seeds[1] = tokenBMint.Bytes()
	seeds[2] = pool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenBVaultAddress(tokenBMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenBVaultAddress(tokenBMint, pool)
	return
}

func FindRewardVaultAddress(pool solanago.PublicKey, rewardIndex uint8) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{114, 101, 119, 97, 114, 100, 95, 118, 97, 117, 108, 116}
	seeds[1] = pool.Bytes()
	if seeds[2], err = binary.MarshalBorsh(rewardIndex); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindRewardVaultAddress(pool solanago.PublicKey, rewardIndex uint8) (pda solanago.PublicKey) {
	pda, _, _ = FindRewardVaultAddress(pool, rewardIndex)
	return
}
