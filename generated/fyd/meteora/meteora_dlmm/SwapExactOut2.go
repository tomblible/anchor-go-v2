// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap_exact_out2" instruction.
type SwapExactOut2 struct {
	// Params:
	MaxInAmount           uint64
	OutAmount             uint64
	RemainingAccountsInfo RemainingAccountsInfo
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [,optional] bin_array_bitmap_extension
	BinArrayBitmapExtension solanago.PublicKey `bin:"-"`
	// [2] = [writable] reserve_x
	ReserveX solanago.PublicKey `bin:"-"`
	// [3] = [writable] reserve_y
	ReserveY solanago.PublicKey `bin:"-"`
	// [4] = [writable] user_token_in
	UserTokenIn solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_token_out
	UserTokenOut solanago.PublicKey `bin:"-"`
	// [6] = [] token_x_mint
	TokenXMint solanago.PublicKey `bin:"-"`
	// [7] = [] token_y_mint
	TokenYMint solanago.PublicKey `bin:"-"`
	// [8] = [writable] oracle
	Oracle solanago.PublicKey `bin:"-"`
	// [9] = [writable,optional] host_fee_in
	HostFeeIn solanago.PublicKey `bin:"-"`
	// [10] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [11] = [] token_x_program
	TokenXProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_y_program
	TokenYProgram solanago.PublicKey `bin:"-"`
	// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// [14] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [15] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SwapExactOut2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxInAmountParam`:
	if err = encoder.Encode(obj.MaxInAmount); err != nil {
		return fmt.Errorf("error while marshaling maxInAmountParam:%w", err)
	}
	// Serialize `outAmountParam`:
	if err = encoder.Encode(obj.OutAmount); err != nil {
		return fmt.Errorf("error while marshaling outAmountParam:%w", err)
	}
	// Serialize `remainingAccountsInfoParam`:
	if err = encoder.Encode(obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
	}
	return nil
}

func (obj *SwapExactOut2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxInAmount`:
	if err = decoder.Decode(&obj.MaxInAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxInAmount:%w", err)
	}
	// Deserialize `OutAmount`:
	if err = decoder.Decode(&obj.OutAmount); err != nil {
		return fmt.Errorf("error while unmarshaling OutAmount:%w", err)
	}
	// Deserialize `RemainingAccountsInfo`:
	if err = decoder.Decode(&obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
	}
	return nil
}

func (obj *SwapExactOut2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.BinArrayBitmapExtension = accounts[1]
	obj.ReserveX = accounts[2]
	obj.ReserveY = accounts[3]
	obj.UserTokenIn = accounts[4]
	obj.UserTokenOut = accounts[5]
	obj.TokenXMint = accounts[6]
	obj.TokenYMint = accounts[7]
	obj.Oracle = accounts[8]
	obj.HostFeeIn = accounts[9]
	obj.User = accounts[10]
	obj.TokenXProgram = accounts[11]
	obj.TokenYProgram = accounts[12]
	obj.MemoProgram = accounts[13]
	obj.EventAuthority = accounts[14]
	obj.Program = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SwapExactOut2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SwapExactOut2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SwapExactOut2)
}

func (*SwapExactOut2) NewInstance() programparser.Instruction {
	return new(SwapExactOut2)
}

func (inst *SwapExactOut2) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[16:]
}

// Builds a "swap_exact_out2" instruction.
func NewSwapExactOut2Instruction(
	// Params:
	maxInAmountParam uint64,
	outAmountParam uint64,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	userTokenIn solanago.PublicKey,
	userTokenOut solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	oracle solanago.PublicKey,
	hostFeeIn solanago.PublicKey,
	user solanago.PublicKey,
	tokenXProgram solanago.PublicKey,
	tokenYProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SwapExactOut2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxInAmountParam`:
		if err = enc__.Encode(maxInAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxInAmountParam:%w", err)
		}
		// Serialize `outAmountParam`:
		if err = enc__.Encode(outAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling outAmountParam:%w", err)
		}
		// Serialize `remainingAccountsInfoParam`:
		if err = enc__.Encode(remainingAccountsInfoParam); err != nil {
			return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [,optional] bin_array_bitmap_extension
		metas_[1] = solanago.NewAccountMeta(binArrayBitmapExtension, false, false)
		// [2] = [writable] reserve_x
		metas_[2] = solanago.NewAccountMeta(reserveX, true, false)
		// [3] = [writable] reserve_y
		metas_[3] = solanago.NewAccountMeta(reserveY, true, false)
		// [4] = [writable] user_token_in
		metas_[4] = solanago.NewAccountMeta(userTokenIn, true, false)
		// [5] = [writable] user_token_out
		metas_[5] = solanago.NewAccountMeta(userTokenOut, true, false)
		// [6] = [] token_x_mint
		metas_[6] = solanago.NewAccountMeta(tokenXMint, false, false)
		// [7] = [] token_y_mint
		metas_[7] = solanago.NewAccountMeta(tokenYMint, false, false)
		// [8] = [writable] oracle
		metas_[8] = solanago.NewAccountMeta(oracle, true, false)
		// [9] = [writable,optional] host_fee_in
		metas_[9] = solanago.NewAccountMeta(hostFeeIn, true, false)
		// [10] = [,signer] user
		metas_[10] = solanago.NewAccountMeta(user, false, true)
		// [11] = [] token_x_program
		metas_[11] = solanago.NewAccountMeta(tokenXProgram, false, false)
		// [12] = [] token_y_program
		metas_[12] = solanago.NewAccountMeta(tokenYProgram, false, false)
		// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		metas_[13] = solanago.NewAccountMeta(MemoProgram, false, false)
		// [14] = [] event_authority
		metas_[14] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [15] = [] program
		metas_[15] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwapExactOut2" instruction.
func BuildSwapExactOut2(
	// Params:
	maxInAmountParam uint64,
	outAmountParam uint64,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	userTokenIn solanago.PublicKey,
	userTokenOut solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	oracle solanago.PublicKey,
	hostFeeIn solanago.PublicKey,
	user solanago.PublicKey,
	tokenXProgram solanago.PublicKey,
	tokenYProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapExactOut2Instruction(
		maxInAmountParam,
		outAmountParam,
		remainingAccountsInfoParam,
		lbPair,
		binArrayBitmapExtension,
		reserveX,
		reserveY,
		userTokenIn,
		userTokenOut,
		tokenXMint,
		tokenYMint,
		oracle,
		hostFeeIn,
		user,
		tokenXProgram,
		tokenYProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
