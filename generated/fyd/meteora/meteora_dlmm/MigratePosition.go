// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_position" instruction.
type MigratePosition struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] position_v2
	PositionV2 solanago.PublicKey `bin:"-"`
	// [1] = [writable] position_v1
	PositionV1 solanago.PublicKey `bin:"-"`
	// [2] = [] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [3] = [writable] bin_array_lower
	BinArrayLower solanago.PublicKey `bin:"-"`
	// [4] = [writable] bin_array_upper
	BinArrayUpper solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [writable] rent_receiver
	RentReceiver solanago.PublicKey `bin:"-"`
	// [8] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [9] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigratePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigratePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigratePosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.PositionV2 = accounts[0]
	obj.PositionV1 = accounts[1]
	obj.LbPair = accounts[2]
	obj.BinArrayLower = accounts[3]
	obj.BinArrayUpper = accounts[4]
	obj.Owner = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.RentReceiver = accounts[7]
	obj.EventAuthority = accounts[8]
	obj.Program = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigratePosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigratePosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigratePosition)
}

func (*MigratePosition) NewInstance() programparser.Instruction {
	return new(MigratePosition)
}

func (obj *MigratePosition) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 10 {
		return nil
	}
	return obj.PublicKeySlice[10:]
}

// Builds a "migrate_position" instruction.
func NewMigratePositionInstruction(
	positionV2 solanago.PublicKey,
	positionV1 solanago.PublicKey,
	lbPair solanago.PublicKey,
	binArrayLower solanago.PublicKey,
	binArrayUpper solanago.PublicKey,
	owner solanago.PublicKey,
	rentReceiver solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigratePosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] position_v2
		metas_[0] = solanago.NewAccountMeta(positionV2, true, true)
		// [1] = [writable] position_v1
		metas_[1] = solanago.NewAccountMeta(positionV1, true, false)
		// [2] = [] lb_pair
		metas_[2] = solanago.NewAccountMeta(lbPair, false, false)
		// [3] = [writable] bin_array_lower
		metas_[3] = solanago.NewAccountMeta(binArrayLower, true, false)
		// [4] = [writable] bin_array_upper
		metas_[4] = solanago.NewAccountMeta(binArrayUpper, true, false)
		// [5] = [writable,signer] owner
		metas_[5] = solanago.NewAccountMeta(owner, true, true)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [writable] rent_receiver
		metas_[7] = solanago.NewAccountMeta(rentReceiver, true, false)
		// [8] = [] event_authority
		metas_[8] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [9] = [] program
		metas_[9] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigratePosition" instruction.
func BuildMigratePosition(
	positionV2 solanago.PublicKey,
	positionV1 solanago.PublicKey,
	lbPair solanago.PublicKey,
	binArrayLower solanago.PublicKey,
	binArrayUpper solanago.PublicKey,
	owner solanago.PublicKey,
	rentReceiver solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigratePositionInstruction(
		positionV2,
		positionV1,
		lbPair,
		binArrayLower,
		binArrayUpper,
		owner,
		rentReceiver,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
