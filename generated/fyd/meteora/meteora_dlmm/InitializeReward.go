// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_reward" instruction.
type InitializeReward struct {
	// Params:
	RewardIndex    uint64
	RewardDuration uint64
	Funder         solanago.PublicKey
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [writable] reward_vault
	RewardVault solanago.PublicKey `bin:"-"`
	// [2] = [] reward_mint
	RewardMint solanago.PublicKey `bin:"-"`
	// [3] = [,optional] token_badge
	TokenBadge solanago.PublicKey `bin:"-"`
	// [4] = [writable,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [5] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// [8] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [9] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `rewardDurationParam`:
	if err = encoder.Encode(obj.RewardDuration); err != nil {
		return fmt.Errorf("error while marshaling rewardDurationParam:%w", err)
	}
	// Serialize `funderParam`:
	if err = encoder.Encode(obj.Funder); err != nil {
		return fmt.Errorf("error while marshaling funderParam:%w", err)
	}
	return nil
}

func (obj *InitializeReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `RewardDuration`:
	if err = decoder.Decode(&obj.RewardDuration); err != nil {
		return fmt.Errorf("error while unmarshaling RewardDuration:%w", err)
	}
	// Deserialize `Funder`:
	if err = decoder.Decode(&obj.Funder); err != nil {
		return fmt.Errorf("error while unmarshaling Funder:%w", err)
	}
	return nil
}

func (obj *InitializeReward) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.RewardVault = accounts[1]
	obj.RewardMint = accounts[2]
	obj.TokenBadge = accounts[3]
	obj.Admin = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.Rent = accounts[7]
	obj.EventAuthority = accounts[8]
	obj.Program = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeReward) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeReward) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeReward)
}

func (*InitializeReward) NewInstance() programparser.Instruction {
	return new(InitializeReward)
}

func (obj *InitializeReward) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[10:]
}

// Builds a "initialize_reward" instruction.
func NewInitializeRewardInstruction(
	// Params:
	rewardIndexParam uint64,
	rewardDurationParam uint64,
	funderParam solanago.PublicKey,

	// Accounts:
	lbPair solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	tokenBadge solanago.PublicKey,
	admin solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeReward[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `rewardDurationParam`:
		if err = enc__.Encode(rewardDurationParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardDurationParam:%w", err)
		}
		// Serialize `funderParam`:
		if err = enc__.Encode(funderParam); err != nil {
			return nil, fmt.Errorf("error while marshaling funderParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [writable] reward_vault
		metas_[1] = solanago.NewAccountMeta(rewardVault, true, false)
		// [2] = [] reward_mint
		metas_[2] = solanago.NewAccountMeta(rewardMint, false, false)
		// [3] = [,optional] token_badge
		metas_[3] = solanago.NewAccountMeta(tokenBadge, false, false)
		// [4] = [writable,signer] admin
		metas_[4] = solanago.NewAccountMeta(admin, true, true)
		// [5] = [] token_program
		metas_[5] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[7] = solanago.NewAccountMeta(Rent, false, false)
		// [8] = [] event_authority
		metas_[8] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [9] = [] program
		metas_[9] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeReward" instruction.
func BuildInitializeReward(
	// Params:
	rewardIndexParam uint64,
	rewardDurationParam uint64,
	funderParam solanago.PublicKey,

	// Accounts:
	lbPair solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardMint solanago.PublicKey,
	tokenBadge solanago.PublicKey,
	admin solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeRewardInstruction(
		rewardIndexParam,
		rewardDurationParam,
		funderParam,
		lbPair,
		rewardVault,
		rewardMint,
		tokenBadge,
		admin,
		tokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
