// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "add_liquidity_one_side_precise2" instruction.
type AddLiquidityOneSidePrecise2 struct {
	// Params:
	LiquidityParameter    AddLiquiditySingleSidePreciseParameter2
	RemainingAccountsInfo RemainingAccountsInfo
	// Accounts:
	// [0] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [1] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [2] = [writable,optional] bin_array_bitmap_extension
	BinArrayBitmapExtension solanago.PublicKey `bin:"-"`
	// [3] = [writable] user_token
	UserToken solanago.PublicKey `bin:"-"`
	// [4] = [writable] reserve
	Reserve solanago.PublicKey `bin:"-"`
	// [5] = [] token_mint
	TokenMint solanago.PublicKey `bin:"-"`
	// [6] = [,signer] sender
	Sender solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [9] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj AddLiquidityOneSidePrecise2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `liquidityParameterParam`:
	if err = encoder.Encode(obj.LiquidityParameter); err != nil {
		return fmt.Errorf("error while marshaling liquidityParameterParam:%w", err)
	}
	// Serialize `remainingAccountsInfoParam`:
	if err = encoder.Encode(obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
	}
	return nil
}

func (obj *AddLiquidityOneSidePrecise2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityParameter`:
	if err = decoder.Decode(&obj.LiquidityParameter); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityParameter:%w", err)
	}
	// Deserialize `RemainingAccountsInfo`:
	if err = decoder.Decode(&obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
	}
	return nil
}

func (obj *AddLiquidityOneSidePrecise2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Position = accounts[0]
	obj.LbPair = accounts[1]
	obj.BinArrayBitmapExtension = accounts[2]
	obj.UserToken = accounts[3]
	obj.Reserve = accounts[4]
	obj.TokenMint = accounts[5]
	obj.Sender = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.EventAuthority = accounts[8]
	obj.Program = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *AddLiquidityOneSidePrecise2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*AddLiquidityOneSidePrecise2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_AddLiquidityOneSidePrecise2)
}

func (*AddLiquidityOneSidePrecise2) NewInstance() programparser.Instruction {
	return new(AddLiquidityOneSidePrecise2)
}

func (inst *AddLiquidityOneSidePrecise2) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[10:]
}

// Builds a "add_liquidity_one_side_precise2" instruction.
func NewAddLiquidityOneSidePrecise2Instruction(
	// Params:
	liquidityParameterParam AddLiquiditySingleSidePreciseParameter2,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	position solanago.PublicKey,
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	userToken solanago.PublicKey,
	reserve solanago.PublicKey,
	tokenMint solanago.PublicKey,
	sender solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_AddLiquidityOneSidePrecise2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `liquidityParameterParam`:
		if err = enc__.Encode(liquidityParameterParam); err != nil {
			return nil, fmt.Errorf("error while marshaling liquidityParameterParam:%w", err)
		}
		// Serialize `remainingAccountsInfoParam`:
		if err = enc__.Encode(remainingAccountsInfoParam); err != nil {
			return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] position
		metas_[0] = solanago.NewAccountMeta(position, true, false)
		// [1] = [writable] lb_pair
		metas_[1] = solanago.NewAccountMeta(lbPair, true, false)
		// [2] = [writable,optional] bin_array_bitmap_extension
		metas_[2] = solanago.NewAccountMeta(binArrayBitmapExtension, true, false)
		// [3] = [writable] user_token
		metas_[3] = solanago.NewAccountMeta(userToken, true, false)
		// [4] = [writable] reserve
		metas_[4] = solanago.NewAccountMeta(reserve, true, false)
		// [5] = [] token_mint
		metas_[5] = solanago.NewAccountMeta(tokenMint, false, false)
		// [6] = [,signer] sender
		metas_[6] = solanago.NewAccountMeta(sender, false, true)
		// [7] = [] token_program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [8] = [] event_authority
		metas_[8] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [9] = [] program
		metas_[9] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAddLiquidityOneSidePrecise2" instruction.
func BuildAddLiquidityOneSidePrecise2(
	// Params:
	liquidityParameterParam AddLiquiditySingleSidePreciseParameter2,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	position solanago.PublicKey,
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	userToken solanago.PublicKey,
	reserve solanago.PublicKey,
	tokenMint solanago.PublicKey,
	sender solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAddLiquidityOneSidePrecise2Instruction(
		liquidityParameterParam,
		remainingAccountsInfoParam,
		position,
		lbPair,
		binArrayBitmapExtension,
		userToken,
		reserve,
		tokenMint,
		sender,
		tokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
