// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_reward_duration" instruction.
type UpdateRewardDuration struct {
	// Params:
	RewardIndex uint64
	NewDuration uint64
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [2] = [writable] bin_array
	BinArray solanago.PublicKey `bin:"-"`
	// [3] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [4] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateRewardDuration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `newDurationParam`:
	if err = encoder.Encode(obj.NewDuration); err != nil {
		return fmt.Errorf("error while marshaling newDurationParam:%w", err)
	}
	return nil
}

func (obj *UpdateRewardDuration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `NewDuration`:
	if err = decoder.Decode(&obj.NewDuration); err != nil {
		return fmt.Errorf("error while unmarshaling NewDuration:%w", err)
	}
	return nil
}

func (obj *UpdateRewardDuration) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.Admin = accounts[1]
	obj.BinArray = accounts[2]
	obj.EventAuthority = accounts[3]
	obj.Program = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateRewardDuration) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateRewardDuration) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateRewardDuration)
}

func (*UpdateRewardDuration) NewInstance() programparser.Instruction {
	return new(UpdateRewardDuration)
}

func (obj *UpdateRewardDuration) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[5:]
}

// Builds a "update_reward_duration" instruction.
func NewUpdateRewardDurationInstruction(
	// Params:
	rewardIndexParam uint64,
	newDurationParam uint64,

	// Accounts:
	lbPair solanago.PublicKey,
	admin solanago.PublicKey,
	binArray solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateRewardDuration[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `newDurationParam`:
		if err = enc__.Encode(newDurationParam); err != nil {
			return nil, fmt.Errorf("error while marshaling newDurationParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [,signer] admin
		metas_[1] = solanago.NewAccountMeta(admin, false, true)
		// [2] = [writable] bin_array
		metas_[2] = solanago.NewAccountMeta(binArray, true, false)
		// [3] = [] event_authority
		metas_[3] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [4] = [] program
		metas_[4] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateRewardDuration" instruction.
func BuildUpdateRewardDuration(
	// Params:
	rewardIndexParam uint64,
	newDurationParam uint64,

	// Accounts:
	lbPair solanago.PublicKey,
	admin solanago.PublicKey,
	binArray solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateRewardDurationInstruction(
		rewardIndexParam,
		newDurationParam,
		lbPair,
		admin,
		binArray,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
