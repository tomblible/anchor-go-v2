// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_fees_and_reward2" instruction.
type UpdateFeesAndReward2 struct {
	// Params:
	MinBinId int32
	MaxBinId int32
	// Accounts:
	// [0] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [1] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [2] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateFeesAndReward2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `minBinIdParam`:
	if err = encoder.Encode(obj.MinBinId); err != nil {
		return fmt.Errorf("error while marshaling minBinIdParam:%w", err)
	}
	// Serialize `maxBinIdParam`:
	if err = encoder.Encode(obj.MaxBinId); err != nil {
		return fmt.Errorf("error while marshaling maxBinIdParam:%w", err)
	}
	return nil
}

func (obj *UpdateFeesAndReward2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MinBinId`:
	if err = decoder.Decode(&obj.MinBinId); err != nil {
		return fmt.Errorf("error while unmarshaling MinBinId:%w", err)
	}
	// Deserialize `MaxBinId`:
	if err = decoder.Decode(&obj.MaxBinId); err != nil {
		return fmt.Errorf("error while unmarshaling MaxBinId:%w", err)
	}
	return nil
}

func (obj *UpdateFeesAndReward2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Position = accounts[0]
	obj.LbPair = accounts[1]
	obj.Owner = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateFeesAndReward2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateFeesAndReward2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateFeesAndReward2)
}

func (*UpdateFeesAndReward2) NewInstance() programparser.Instruction {
	return new(UpdateFeesAndReward2)
}

func (obj *UpdateFeesAndReward2) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[3:]
}

// Builds a "update_fees_and_reward2" instruction.
func NewUpdateFeesAndReward2Instruction(
	// Params:
	minBinIdParam int32,
	maxBinIdParam int32,

	// Accounts:
	position solanago.PublicKey,
	lbPair solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateFeesAndReward2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `minBinIdParam`:
		if err = enc__.Encode(minBinIdParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minBinIdParam:%w", err)
		}
		// Serialize `maxBinIdParam`:
		if err = enc__.Encode(maxBinIdParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxBinIdParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] position
		metas_[0] = solanago.NewAccountMeta(position, true, false)
		// [1] = [writable] lb_pair
		metas_[1] = solanago.NewAccountMeta(lbPair, true, false)
		// [2] = [,signer] owner
		metas_[2] = solanago.NewAccountMeta(owner, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateFeesAndReward2" instruction.
func BuildUpdateFeesAndReward2(
	// Params:
	minBinIdParam int32,
	maxBinIdParam int32,

	// Accounts:
	position solanago.PublicKey,
	lbPair solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateFeesAndReward2Instruction(
		minBinIdParam,
		maxBinIdParam,
		position,
		lbPair,
		owner,
		remaining__...,
	)
	return instruction_
}
