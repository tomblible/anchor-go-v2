// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_protocol_fee" instruction.
type WithdrawProtocolFee struct {
	// Params:
	MaxAmountX            uint64
	MaxAmountY            uint64
	RemainingAccountsInfo RemainingAccountsInfo
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [writable] reserve_x
	ReserveX solanago.PublicKey `bin:"-"`
	// [2] = [writable] reserve_y
	ReserveY solanago.PublicKey `bin:"-"`
	// [3] = [] token_x_mint
	TokenXMint solanago.PublicKey `bin:"-"`
	// [4] = [] token_y_mint
	TokenYMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] receiver_token_x
	ReceiverTokenX solanago.PublicKey `bin:"-"`
	// [6] = [writable] receiver_token_y
	ReceiverTokenY solanago.PublicKey `bin:"-"`
	// [7] = [] claim_fee_operator
	ClaimFeeOperator solanago.PublicKey `bin:"-"`
	// [8] = [,signer] operator
	Operator solanago.PublicKey `bin:"-"`
	// [9] = [] token_x_program
	TokenXProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_y_program
	TokenYProgram solanago.PublicKey `bin:"-"`
	// [11] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawProtocolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxAmountXParam`:
	if err = encoder.Encode(obj.MaxAmountX); err != nil {
		return fmt.Errorf("error while marshaling maxAmountXParam:%w", err)
	}
	// Serialize `maxAmountYParam`:
	if err = encoder.Encode(obj.MaxAmountY); err != nil {
		return fmt.Errorf("error while marshaling maxAmountYParam:%w", err)
	}
	// Serialize `remainingAccountsInfoParam`:
	if err = encoder.Encode(obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
	}
	return nil
}

func (obj *WithdrawProtocolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAmountX`:
	if err = decoder.Decode(&obj.MaxAmountX); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmountX:%w", err)
	}
	// Deserialize `MaxAmountY`:
	if err = decoder.Decode(&obj.MaxAmountY); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmountY:%w", err)
	}
	// Deserialize `RemainingAccountsInfo`:
	if err = decoder.Decode(&obj.RemainingAccountsInfo); err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
	}
	return nil
}

func (obj *WithdrawProtocolFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.ReserveX = accounts[1]
	obj.ReserveY = accounts[2]
	obj.TokenXMint = accounts[3]
	obj.TokenYMint = accounts[4]
	obj.ReceiverTokenX = accounts[5]
	obj.ReceiverTokenY = accounts[6]
	obj.ClaimFeeOperator = accounts[7]
	obj.Operator = accounts[8]
	obj.TokenXProgram = accounts[9]
	obj.TokenYProgram = accounts[10]
	obj.MemoProgram = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawProtocolFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawProtocolFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawProtocolFee)
}

func (*WithdrawProtocolFee) NewInstance() programparser.Instruction {
	return new(WithdrawProtocolFee)
}

func (obj *WithdrawProtocolFee) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[12:]
}

// Builds a "withdraw_protocol_fee" instruction.
func NewWithdrawProtocolFeeInstruction(
	// Params:
	maxAmountXParam uint64,
	maxAmountYParam uint64,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	lbPair solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	receiverTokenX solanago.PublicKey,
	receiverTokenY solanago.PublicKey,
	claimFeeOperator solanago.PublicKey,
	operator solanago.PublicKey,
	tokenXProgram solanago.PublicKey,
	tokenYProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawProtocolFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxAmountXParam`:
		if err = enc__.Encode(maxAmountXParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAmountXParam:%w", err)
		}
		// Serialize `maxAmountYParam`:
		if err = enc__.Encode(maxAmountYParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAmountYParam:%w", err)
		}
		// Serialize `remainingAccountsInfoParam`:
		if err = enc__.Encode(remainingAccountsInfoParam); err != nil {
			return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [writable] reserve_x
		metas_[1] = solanago.NewAccountMeta(reserveX, true, false)
		// [2] = [writable] reserve_y
		metas_[2] = solanago.NewAccountMeta(reserveY, true, false)
		// [3] = [] token_x_mint
		metas_[3] = solanago.NewAccountMeta(tokenXMint, false, false)
		// [4] = [] token_y_mint
		metas_[4] = solanago.NewAccountMeta(tokenYMint, false, false)
		// [5] = [writable] receiver_token_x
		metas_[5] = solanago.NewAccountMeta(receiverTokenX, true, false)
		// [6] = [writable] receiver_token_y
		metas_[6] = solanago.NewAccountMeta(receiverTokenY, true, false)
		// [7] = [] claim_fee_operator
		metas_[7] = solanago.NewAccountMeta(claimFeeOperator, false, false)
		// [8] = [,signer] operator
		// operator
		metas_[8] = solanago.NewAccountMeta(operator, false, true)
		// [9] = [] token_x_program
		metas_[9] = solanago.NewAccountMeta(tokenXProgram, false, false)
		// [10] = [] token_y_program
		metas_[10] = solanago.NewAccountMeta(tokenYProgram, false, false)
		// [11] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		metas_[11] = solanago.NewAccountMeta(MemoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawProtocolFee" instruction.
func BuildWithdrawProtocolFee(
	// Params:
	maxAmountXParam uint64,
	maxAmountYParam uint64,
	remainingAccountsInfoParam RemainingAccountsInfo,

	// Accounts:
	lbPair solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	receiverTokenX solanago.PublicKey,
	receiverTokenY solanago.PublicKey,
	claimFeeOperator solanago.PublicKey,
	operator solanago.PublicKey,
	tokenXProgram solanago.PublicKey,
	tokenYProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawProtocolFeeInstruction(
		maxAmountXParam,
		maxAmountYParam,
		remainingAccountsInfoParam,
		lbPair,
		reserveX,
		reserveY,
		tokenXMint,
		tokenYMint,
		receiverTokenX,
		receiverTokenY,
		claimFeeOperator,
		operator,
		tokenXProgram,
		tokenYProgram,
		remaining__...,
	)
	return instruction_
}
