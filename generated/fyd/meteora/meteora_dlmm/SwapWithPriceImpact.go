// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap_with_price_impact" instruction.
type SwapWithPriceImpact struct {
	// Params:
	AmountIn          uint64
	ActiveId          *int32 `bin:"optional"`
	MaxPriceImpactBps uint16
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [,optional] bin_array_bitmap_extension
	BinArrayBitmapExtension solanago.PublicKey `bin:"-"`
	// [2] = [writable] reserve_x
	ReserveX solanago.PublicKey `bin:"-"`
	// [3] = [writable] reserve_y
	ReserveY solanago.PublicKey `bin:"-"`
	// [4] = [writable] user_token_in
	UserTokenIn solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_token_out
	UserTokenOut solanago.PublicKey `bin:"-"`
	// [6] = [] token_x_mint
	TokenXMint solanago.PublicKey `bin:"-"`
	// [7] = [] token_y_mint
	TokenYMint solanago.PublicKey `bin:"-"`
	// [8] = [writable] oracle
	Oracle solanago.PublicKey `bin:"-"`
	// [9] = [writable,optional] host_fee_in
	HostFeeIn solanago.PublicKey `bin:"-"`
	// [10] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [11] = [] token_x_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenXProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_y_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenYProgram solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SwapWithPriceImpact) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountInParam`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling amountInParam:%w", err)
	}
	// Serialize `activeIdParam` (optional):
	{
		if obj.ActiveId == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling activeIdParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling activeIdParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.ActiveId); err != nil {
				return fmt.Errorf("error while marshaling activeIdParam: %w", err)
			}
		}
	}
	// Serialize `maxPriceImpactBpsParam`:
	if err = encoder.Encode(obj.MaxPriceImpactBps); err != nil {
		return fmt.Errorf("error while marshaling maxPriceImpactBpsParam:%w", err)
	}
	return nil
}

func (obj *SwapWithPriceImpact) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `ActiveId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling ActiveId:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.ActiveId); err != nil {
				return fmt.Errorf("error while unmarshaling ActiveId:%w", err)
			}
		}
	}
	// Deserialize `MaxPriceImpactBps`:
	if err = decoder.Decode(&obj.MaxPriceImpactBps); err != nil {
		return fmt.Errorf("error while unmarshaling MaxPriceImpactBps:%w", err)
	}
	return nil
}

func (obj *SwapWithPriceImpact) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.BinArrayBitmapExtension = accounts[1]
	obj.ReserveX = accounts[2]
	obj.ReserveY = accounts[3]
	obj.UserTokenIn = accounts[4]
	obj.UserTokenOut = accounts[5]
	obj.TokenXMint = accounts[6]
	obj.TokenYMint = accounts[7]
	obj.Oracle = accounts[8]
	obj.HostFeeIn = accounts[9]
	obj.User = accounts[10]
	obj.TokenXProgram = accounts[11]
	obj.TokenYProgram = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SwapWithPriceImpact) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SwapWithPriceImpact) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SwapWithPriceImpact)
}

func (*SwapWithPriceImpact) NewInstance() programparser.Instruction {
	return new(SwapWithPriceImpact)
}

func (inst *SwapWithPriceImpact) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[15:]
}

// Builds a "swap_with_price_impact" instruction.
func NewSwapWithPriceImpactInstruction(
	// Params:
	amountInParam uint64,
	activeIdParam *int32,
	maxPriceImpactBpsParam uint16,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	userTokenIn solanago.PublicKey,
	userTokenOut solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	oracle solanago.PublicKey,
	hostFeeIn solanago.PublicKey,
	user solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SwapWithPriceImpact[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountInParam`:
		if err = enc__.Encode(amountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountInParam:%w", err)
		}
		// Serialize `activeIdParam` (optional):
		{
			if activeIdParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling activeIdParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling activeIdParam optionality: %w", err)
				}
				if err = enc__.Encode(activeIdParam); err != nil {
					return nil, fmt.Errorf("error while marshaling activeIdParam: %w", err)
				}
			}
		}
		// Serialize `maxPriceImpactBpsParam`:
		if err = enc__.Encode(maxPriceImpactBpsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxPriceImpactBpsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [,optional] bin_array_bitmap_extension
		metas_[1] = solanago.NewAccountMeta(binArrayBitmapExtension, false, false)
		// [2] = [writable] reserve_x
		metas_[2] = solanago.NewAccountMeta(reserveX, true, false)
		// [3] = [writable] reserve_y
		metas_[3] = solanago.NewAccountMeta(reserveY, true, false)
		// [4] = [writable] user_token_in
		metas_[4] = solanago.NewAccountMeta(userTokenIn, true, false)
		// [5] = [writable] user_token_out
		metas_[5] = solanago.NewAccountMeta(userTokenOut, true, false)
		// [6] = [] token_x_mint
		metas_[6] = solanago.NewAccountMeta(tokenXMint, false, false)
		// [7] = [] token_y_mint
		metas_[7] = solanago.NewAccountMeta(tokenYMint, false, false)
		// [8] = [writable] oracle
		metas_[8] = solanago.NewAccountMeta(oracle, true, false)
		// [9] = [writable,optional] host_fee_in
		metas_[9] = solanago.NewAccountMeta(hostFeeIn, true, false)
		// [10] = [,signer] user
		metas_[10] = solanago.NewAccountMeta(user, false, true)
		// [11] = [] token_x_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[11] = solanago.NewAccountMeta(TokenXProgram, false, false)
		// [12] = [] token_y_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[12] = solanago.NewAccountMeta(TokenYProgram, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwapWithPriceImpact" instruction.
func BuildSwapWithPriceImpact(
	// Params:
	amountInParam uint64,
	activeIdParam *int32,
	maxPriceImpactBpsParam uint16,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	userTokenIn solanago.PublicKey,
	userTokenOut solanago.PublicKey,
	tokenXMint solanago.PublicKey,
	tokenYMint solanago.PublicKey,
	oracle solanago.PublicKey,
	hostFeeIn solanago.PublicKey,
	user solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapWithPriceImpactInstruction(
		amountInParam,
		activeIdParam,
		maxPriceImpactBpsParam,
		lbPair,
		binArrayBitmapExtension,
		reserveX,
		reserveY,
		userTokenIn,
		userTokenOut,
		tokenXMint,
		tokenYMint,
		oracle,
		hostFeeIn,
		user,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
