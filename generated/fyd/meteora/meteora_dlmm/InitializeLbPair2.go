// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_lb_pair2" instruction.
type InitializeLbPair2 struct {
	// Params:
	Params InitializeLbPair2Params
	// Accounts:
	// [0] = [writable] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [writable,optional] bin_array_bitmap_extension
	BinArrayBitmapExtension solanago.PublicKey `bin:"-"`
	// [2] = [] token_mint_x
	TokenMintX solanago.PublicKey `bin:"-"`
	// [3] = [] token_mint_y
	TokenMintY solanago.PublicKey `bin:"-"`
	// [4] = [writable] reserve_x
	ReserveX solanago.PublicKey `bin:"-"`
	// [5] = [writable] reserve_y
	ReserveY solanago.PublicKey `bin:"-"`
	// [6] = [writable] oracle
	Oracle solanago.PublicKey `bin:"-"`
	// [7] = [] preset_parameter
	PresetParameter solanago.PublicKey `bin:"-"`
	// [8] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [9] = [,optional] token_badge_x
	TokenBadgeX solanago.PublicKey `bin:"-"`
	// [10] = [,optional] token_badge_y
	TokenBadgeY solanago.PublicKey `bin:"-"`
	// [11] = [] token_program_x
	TokenProgramX solanago.PublicKey `bin:"-"`
	// [12] = [] token_program_y
	TokenProgramY solanago.PublicKey `bin:"-"`
	// [13] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [14] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [15] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeLbPair2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *InitializeLbPair2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *InitializeLbPair2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.BinArrayBitmapExtension = accounts[1]
	obj.TokenMintX = accounts[2]
	obj.TokenMintY = accounts[3]
	obj.ReserveX = accounts[4]
	obj.ReserveY = accounts[5]
	obj.Oracle = accounts[6]
	obj.PresetParameter = accounts[7]
	obj.Funder = accounts[8]
	obj.TokenBadgeX = accounts[9]
	obj.TokenBadgeY = accounts[10]
	obj.TokenProgramX = accounts[11]
	obj.TokenProgramY = accounts[12]
	obj.SystemProgram = accounts[13]
	obj.EventAuthority = accounts[14]
	obj.Program = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeLbPair2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeLbPair2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeLbPair2)
}

func (*InitializeLbPair2) NewInstance() programparser.Instruction {
	return new(InitializeLbPair2)
}

func (obj *InitializeLbPair2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 16 {
		return nil
	}
	return obj.PublicKeySlice[16:]
}

// Builds a "initialize_lb_pair2" instruction.
func NewInitializeLbPair2Instruction(
	// Params:
	paramsParam InitializeLbPair2Params,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	tokenMintX solanago.PublicKey,
	tokenMintY solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	oracle solanago.PublicKey,
	presetParameter solanago.PublicKey,
	funder solanago.PublicKey,
	tokenBadgeX solanago.PublicKey,
	tokenBadgeY solanago.PublicKey,
	tokenProgramX solanago.PublicKey,
	tokenProgramY solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeLbPair2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, true, false)
		// [1] = [writable,optional] bin_array_bitmap_extension
		metas_[1] = solanago.NewAccountMeta(binArrayBitmapExtension, true, false)
		// [2] = [] token_mint_x
		metas_[2] = solanago.NewAccountMeta(tokenMintX, false, false)
		// [3] = [] token_mint_y
		metas_[3] = solanago.NewAccountMeta(tokenMintY, false, false)
		// [4] = [writable] reserve_x
		metas_[4] = solanago.NewAccountMeta(reserveX, true, false)
		// [5] = [writable] reserve_y
		metas_[5] = solanago.NewAccountMeta(reserveY, true, false)
		// [6] = [writable] oracle
		metas_[6] = solanago.NewAccountMeta(oracle, true, false)
		// [7] = [] preset_parameter
		metas_[7] = solanago.NewAccountMeta(presetParameter, false, false)
		// [8] = [writable,signer] funder
		metas_[8] = solanago.NewAccountMeta(funder, true, true)
		// [9] = [,optional] token_badge_x
		metas_[9] = solanago.NewAccountMeta(tokenBadgeX, false, false)
		// [10] = [,optional] token_badge_y
		metas_[10] = solanago.NewAccountMeta(tokenBadgeY, false, false)
		// [11] = [] token_program_x
		metas_[11] = solanago.NewAccountMeta(tokenProgramX, false, false)
		// [12] = [] token_program_y
		metas_[12] = solanago.NewAccountMeta(tokenProgramY, false, false)
		// [13] = [] system_program
		metas_[13] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [14] = [] event_authority
		metas_[14] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [15] = [] program
		metas_[15] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeLbPair2" instruction.
func BuildInitializeLbPair2(
	// Params:
	paramsParam InitializeLbPair2Params,

	// Accounts:
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	tokenMintX solanago.PublicKey,
	tokenMintY solanago.PublicKey,
	reserveX solanago.PublicKey,
	reserveY solanago.PublicKey,
	oracle solanago.PublicKey,
	presetParameter solanago.PublicKey,
	funder solanago.PublicKey,
	tokenBadgeX solanago.PublicKey,
	tokenBadgeY solanago.PublicKey,
	tokenProgramX solanago.PublicKey,
	tokenProgramY solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeLbPair2Instruction(
		paramsParam,
		lbPair,
		binArrayBitmapExtension,
		tokenMintX,
		tokenMintY,
		reserveX,
		reserveY,
		oracle,
		presetParameter,
		funder,
		tokenBadgeX,
		tokenBadgeY,
		tokenProgramX,
		tokenProgramY,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
