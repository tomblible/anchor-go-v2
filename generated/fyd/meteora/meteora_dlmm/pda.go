// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package meteora_dlmm

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 102, 95, 111, 112, 101, 114, 97, 116, 111, 114}
	seeds[1] = operator.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindClaimFeeOperatorAddress(operator)
	return
}

func FindBinArrayAddress(lbPair solanago.PublicKey, index int64) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{98, 105, 110, 95, 97, 114, 114, 97, 121}
	seeds[1] = lbPair.Bytes()
	if seeds[2], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBinArrayAddress(lbPair solanago.PublicKey, index int64) (pda solanago.PublicKey) {
	pda, _, _ = FindBinArrayAddress(lbPair, index)
	return
}

func FindBinArrayBitmapExtensionAddress(lbPair solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{98, 105, 116, 109, 97, 112}
	seeds[1] = lbPair.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBinArrayBitmapExtensionAddress(lbPair solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindBinArrayBitmapExtensionAddress(lbPair)
	return
}

func FindReserveXAddress(lbPair solanago.PublicKey, tokenMintX solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = lbPair.Bytes()
	seeds[1] = tokenMintX.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindReserveXAddress(lbPair solanago.PublicKey, tokenMintX solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindReserveXAddress(lbPair, tokenMintX)
	return
}

func FindReserveYAddress(lbPair solanago.PublicKey, tokenMintY solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = lbPair.Bytes()
	seeds[1] = tokenMintY.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindReserveYAddress(lbPair solanago.PublicKey, tokenMintY solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindReserveYAddress(lbPair, tokenMintY)
	return
}

func FindOracleAddress(lbPair solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{111, 114, 97, 99, 108, 101}
	seeds[1] = lbPair.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindOracleAddress(lbPair solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindOracleAddress(lbPair)
	return
}

func FindPositionAddress(lbPair solanago.PublicKey, base solanago.PublicKey, lowerBinId int32, width int32) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 5)
	seeds[0] = []byte{112, 111, 115, 105, 116, 105, 111, 110}
	seeds[1] = lbPair.Bytes()
	seeds[2] = base.Bytes()
	if seeds[3], err = binary.MarshalBorsh(lowerBinId); err != nil {
		return
	}
	if seeds[4], err = binary.MarshalBorsh(width); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPositionAddress(lbPair solanago.PublicKey, base solanago.PublicKey, lowerBinId int32, width int32) (pda solanago.PublicKey) {
	pda, _, _ = FindPositionAddress(lbPair, base, lowerBinId, width)
	return
}

func FindPresetParameterAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 114, 101, 115, 101, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPresetParameterAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindPresetParameterAddress()
	return
}

func FindRewardVaultAddress(lbPair solanago.PublicKey, rewardIndex uint64) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = lbPair.Bytes()
	if seeds[1], err = binary.MarshalBorsh(rewardIndex); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindRewardVaultAddress(lbPair solanago.PublicKey, rewardIndex uint64) (pda solanago.PublicKey) {
	pda, _, _ = FindRewardVaultAddress(lbPair, rewardIndex)
	return
}

func FindTokenBadgeAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101}
	seeds[1] = tokenMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenBadgeAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenBadgeAddress(tokenMint)
	return
}
