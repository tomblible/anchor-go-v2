// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_bin_array_bitmap_extension" instruction.
type InitializeBinArrayBitmapExtension struct {
	// Params:
	// Accounts:
	// [0] = [] lb_pair
	LbPair solanago.PublicKey `bin:"-"`
	// [1] = [writable] bin_array_bitmap_extension
	BinArrayBitmapExtension solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [4] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeBinArrayBitmapExtension) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *InitializeBinArrayBitmapExtension) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *InitializeBinArrayBitmapExtension) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.LbPair = accounts[0]
	obj.BinArrayBitmapExtension = accounts[1]
	obj.Funder = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.Rent = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeBinArrayBitmapExtension) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeBinArrayBitmapExtension) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeBinArrayBitmapExtension)
}

func (*InitializeBinArrayBitmapExtension) NewInstance() programparser.Instruction {
	return new(InitializeBinArrayBitmapExtension)
}

func (obj *InitializeBinArrayBitmapExtension) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[5:]
}

// Builds a "initialize_bin_array_bitmap_extension" instruction.
func NewInitializeBinArrayBitmapExtensionInstruction(
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	funder solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeBinArrayBitmapExtension[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] lb_pair
		metas_[0] = solanago.NewAccountMeta(lbPair, false, false)
		// [1] = [writable] bin_array_bitmap_extension
		// Initialize an account to store if a bin array is initialized.
		metas_[1] = solanago.NewAccountMeta(binArrayBitmapExtension, true, false)
		// [2] = [writable,signer] funder
		metas_[2] = solanago.NewAccountMeta(funder, true, true)
		// [3] = [] system_program
		metas_[3] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [4] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[4] = solanago.NewAccountMeta(Rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeBinArrayBitmapExtension" instruction.
func BuildInitializeBinArrayBitmapExtension(
	lbPair solanago.PublicKey,
	binArrayBitmapExtension solanago.PublicKey,
	funder solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeBinArrayBitmapExtensionInstruction(
		lbPair,
		binArrayBitmapExtension,
		funder,
		remaining__...,
	)
	return instruction_
}
