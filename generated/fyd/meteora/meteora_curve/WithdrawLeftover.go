// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_leftover" instruction.
type WithdrawLeftover struct {
	// Params:
	// Accounts:
	// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_base_account
	TokenBaseAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [5] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [6] = [] leftover_receiver
	LeftoverReceiver solanago.PublicKey `bin:"-"`
	// [7] = [] token_base_program
	TokenBaseProgram solanago.PublicKey `bin:"-"`
	// [8] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [9] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawLeftover) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *WithdrawLeftover) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *WithdrawLeftover) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Config = accounts[1]
	obj.VirtualPool = accounts[2]
	obj.TokenBaseAccount = accounts[3]
	obj.BaseVault = accounts[4]
	obj.BaseMint = accounts[5]
	obj.LeftoverReceiver = accounts[6]
	obj.TokenBaseProgram = accounts[7]
	obj.EventAuthority = accounts[8]
	obj.Program = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawLeftover) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawLeftover) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawLeftover)
}

func (*WithdrawLeftover) NewInstance() programparser.Instruction {
	return new(WithdrawLeftover)
}

func (obj *WithdrawLeftover) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[10:]
}

// Builds a "withdraw_leftover" instruction.
func NewWithdrawLeftoverInstruction(
	config solanago.PublicKey,
	virtualPool solanago.PublicKey,
	tokenBaseAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	leftoverReceiver solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawLeftover[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] virtual_pool
		metas_[2] = solanago.NewAccountMeta(virtualPool, true, false)
		// [3] = [writable] token_base_account
		// The receiver token account, withdraw to ATA
		metas_[3] = solanago.NewAccountMeta(tokenBaseAccount, true, false)
		// [4] = [writable] base_vault
		// The vault token account for output token
		metas_[4] = solanago.NewAccountMeta(baseVault, true, false)
		// [5] = [] base_mint
		// The mint of quote token
		metas_[5] = solanago.NewAccountMeta(baseMint, false, false)
		// [6] = [] leftover_receiver
		metas_[6] = solanago.NewAccountMeta(leftoverReceiver, false, false)
		// [7] = [] token_base_program
		// Token base program
		metas_[7] = solanago.NewAccountMeta(tokenBaseProgram, false, false)
		// [8] = [] event_authority
		metas_[8] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [9] = [] program
		metas_[9] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawLeftover" instruction.
func BuildWithdrawLeftover(
	config solanago.PublicKey,
	virtualPool solanago.PublicKey,
	tokenBaseAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	leftoverReceiver solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawLeftoverInstruction(
		config,
		virtualPool,
		tokenBaseAccount,
		baseVault,
		baseMint,
		leftoverReceiver,
		tokenBaseProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
