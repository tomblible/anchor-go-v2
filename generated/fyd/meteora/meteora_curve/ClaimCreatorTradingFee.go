// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_creator_trading_fee" instruction.
type ClaimCreatorTradingFee struct {
	// Params:
	MaxBaseAmount  uint64
	MaxQuoteAmount uint64
	// Accounts:
	// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [2] = [writable] token_a_account
	TokenAAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_b_account
	TokenBAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [5] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [6] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [7] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [8] = [,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [9] = [] token_base_program
	TokenBaseProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [11] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [12] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimCreatorTradingFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxBaseAmountParam`:
	if err = encoder.Encode(obj.MaxBaseAmount); err != nil {
		return fmt.Errorf("error while marshaling maxBaseAmountParam:%w", err)
	}
	// Serialize `maxQuoteAmountParam`:
	if err = encoder.Encode(obj.MaxQuoteAmount); err != nil {
		return fmt.Errorf("error while marshaling maxQuoteAmountParam:%w", err)
	}
	return nil
}

func (obj *ClaimCreatorTradingFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxBaseAmount`:
	if err = decoder.Decode(&obj.MaxBaseAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxBaseAmount:%w", err)
	}
	// Deserialize `MaxQuoteAmount`:
	if err = decoder.Decode(&obj.MaxQuoteAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxQuoteAmount:%w", err)
	}
	return nil
}

func (obj *ClaimCreatorTradingFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Pool = accounts[1]
	obj.TokenAAccount = accounts[2]
	obj.TokenBAccount = accounts[3]
	obj.BaseVault = accounts[4]
	obj.QuoteVault = accounts[5]
	obj.BaseMint = accounts[6]
	obj.QuoteMint = accounts[7]
	obj.Creator = accounts[8]
	obj.TokenBaseProgram = accounts[9]
	obj.TokenQuoteProgram = accounts[10]
	obj.EventAuthority = accounts[11]
	obj.Program = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimCreatorTradingFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimCreatorTradingFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimCreatorTradingFee)
}

func (*ClaimCreatorTradingFee) NewInstance() programparser.Instruction {
	return new(ClaimCreatorTradingFee)
}

// Builds a "claim_creator_trading_fee" instruction.
func NewClaimCreatorTradingFeeInstruction(
	// Params:
	maxBaseAmountParam uint64,
	maxQuoteAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	creator solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimCreatorTradingFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxBaseAmountParam`:
		if err = enc__.Encode(maxBaseAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxBaseAmountParam:%w", err)
		}
		// Serialize `maxQuoteAmountParam`:
		if err = enc__.Encode(maxQuoteAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxQuoteAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [writable] pool
		metas_[1] = solanago.NewAccountMeta(pool, true, false)
		// [2] = [writable] token_a_account
		// The treasury token a account
		metas_[2] = solanago.NewAccountMeta(tokenAAccount, true, false)
		// [3] = [writable] token_b_account
		// The treasury token b account
		metas_[3] = solanago.NewAccountMeta(tokenBAccount, true, false)
		// [4] = [writable] base_vault
		// The vault token account for input token
		metas_[4] = solanago.NewAccountMeta(baseVault, true, false)
		// [5] = [writable] quote_vault
		// The vault token account for output token
		metas_[5] = solanago.NewAccountMeta(quoteVault, true, false)
		// [6] = [] base_mint
		// The mint of token a
		metas_[6] = solanago.NewAccountMeta(baseMint, false, false)
		// [7] = [] quote_mint
		// The mint of token b
		metas_[7] = solanago.NewAccountMeta(quoteMint, false, false)
		// [8] = [,signer] creator
		metas_[8] = solanago.NewAccountMeta(creator, false, true)
		// [9] = [] token_base_program
		// Token a program
		metas_[9] = solanago.NewAccountMeta(tokenBaseProgram, false, false)
		// [10] = [] token_quote_program
		// Token b program
		metas_[10] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [11] = [] event_authority
		metas_[11] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [12] = [] program
		metas_[12] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimCreatorTradingFee" instruction.
func BuildClaimCreatorTradingFee(
	// Params:
	maxBaseAmountParam uint64,
	maxQuoteAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	tokenAAccount solanago.PublicKey,
	tokenBAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	creator solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimCreatorTradingFeeInstruction(
		maxBaseAmountParam,
		maxQuoteAmountParam,
		pool,
		tokenAAccount,
		tokenBAccount,
		baseVault,
		quoteVault,
		baseMint,
		quoteMint,
		creator,
		tokenBaseProgram,
		tokenQuoteProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
