// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package meteora_curve

import solanago "github.com/gagliardetto/solana-go"

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 102, 95, 111, 112, 101, 114, 97, 116, 111, 114}
	seeds[1] = operator.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindClaimFeeOperatorAddress(operator solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindClaimFeeOperatorAddress(operator)
	return
}

func FindBaseAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{98, 97, 115, 101, 95, 108, 111, 99, 107, 101, 114}
	seeds[1] = virtualPool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBaseAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindBaseAddress(virtualPool)
	return
}

func FindPartnerMetadataAddress(feeClaimer solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 97, 114, 116, 110, 101, 114, 95, 109, 101, 116, 97, 100, 97, 116, 97}
	seeds[1] = feeClaimer.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPartnerMetadataAddress(feeClaimer solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPartnerMetadataAddress(feeClaimer)
	return
}

func FindVirtualPoolMetadataAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{118, 105, 114, 116, 117, 97, 108, 95, 112, 111, 111, 108, 95, 109, 101, 116, 97, 100, 97, 116, 97}
	seeds[1] = virtualPool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindVirtualPoolMetadataAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindVirtualPoolMetadataAddress(virtualPool)
	return
}

func FindBaseVaultAddress(baseMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116}
	seeds[1] = baseMint.Bytes()
	seeds[2] = pool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBaseVaultAddress(baseMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindBaseVaultAddress(baseMint, pool)
	return
}

func FindQuoteVaultAddress(quoteMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116}
	seeds[1] = quoteMint.Bytes()
	seeds[2] = pool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindQuoteVaultAddress(quoteMint solanago.PublicKey, pool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindQuoteVaultAddress(quoteMint, pool)
	return
}

func FindMigrationMetadataAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{100, 97, 109, 109, 95, 118, 50}
	seeds[1] = virtualPool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindMigrationMetadataAddress(virtualPool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindMigrationMetadataAddress(virtualPool)
	return
}
