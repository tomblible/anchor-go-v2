// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_protocol_fee" instruction.
type ClaimProtocolFee struct {
	// Params:
	// Accounts:
	// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [3] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [4] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [5] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [6] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_base_account
	TokenBaseAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] token_quote_account
	TokenQuoteAccount solanago.PublicKey `bin:"-"`
	// [9] = [] claim_fee_operator
	ClaimFeeOperator solanago.PublicKey `bin:"-"`
	// [10] = [,signer] operator
	Operator solanago.PublicKey `bin:"-"`
	// [11] = [] token_base_program
	TokenBaseProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimProtocolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimProtocolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClaimProtocolFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Config = accounts[1]
	obj.Pool = accounts[2]
	obj.BaseVault = accounts[3]
	obj.QuoteVault = accounts[4]
	obj.BaseMint = accounts[5]
	obj.QuoteMint = accounts[6]
	obj.TokenBaseAccount = accounts[7]
	obj.TokenQuoteAccount = accounts[8]
	obj.ClaimFeeOperator = accounts[9]
	obj.Operator = accounts[10]
	obj.TokenBaseProgram = accounts[11]
	obj.TokenQuoteProgram = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimProtocolFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimProtocolFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimProtocolFee)
}

func (*ClaimProtocolFee) NewInstance() programparser.Instruction {
	return new(ClaimProtocolFee)
}

// Builds a "claim_protocol_fee" instruction.
func NewClaimProtocolFeeInstruction(
	config solanago.PublicKey,
	pool solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenBaseAccount solanago.PublicKey,
	tokenQuoteAccount solanago.PublicKey,
	claimFeeOperator solanago.PublicKey,
	operator solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimProtocolFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] pool
		metas_[2] = solanago.NewAccountMeta(pool, true, false)
		// [3] = [writable] base_vault
		// The vault token account for input token
		metas_[3] = solanago.NewAccountMeta(baseVault, true, false)
		// [4] = [writable] quote_vault
		// The vault token account for output token
		metas_[4] = solanago.NewAccountMeta(quoteVault, true, false)
		// [5] = [] base_mint
		// The mint of token a
		metas_[5] = solanago.NewAccountMeta(baseMint, false, false)
		// [6] = [] quote_mint
		// The mint of token b
		metas_[6] = solanago.NewAccountMeta(quoteMint, false, false)
		// [7] = [writable] token_base_account
		// The treasury token a account
		metas_[7] = solanago.NewAccountMeta(tokenBaseAccount, true, false)
		// [8] = [writable] token_quote_account
		// The treasury token b account
		metas_[8] = solanago.NewAccountMeta(tokenQuoteAccount, true, false)
		// [9] = [] claim_fee_operator
		// Claim fee operator
		metas_[9] = solanago.NewAccountMeta(claimFeeOperator, false, false)
		// [10] = [,signer] operator
		// Operator
		metas_[10] = solanago.NewAccountMeta(operator, false, true)
		// [11] = [] token_base_program
		// Token a program
		metas_[11] = solanago.NewAccountMeta(tokenBaseProgram, false, false)
		// [12] = [] token_quote_program
		// Token b program
		metas_[12] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimProtocolFee" instruction.
func BuildClaimProtocolFee(
	config solanago.PublicKey,
	pool solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenBaseAccount solanago.PublicKey,
	tokenQuoteAccount solanago.PublicKey,
	claimFeeOperator solanago.PublicKey,
	operator solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimProtocolFeeInstruction(
		config,
		pool,
		baseVault,
		quoteVault,
		baseMint,
		quoteMint,
		tokenBaseAccount,
		tokenQuoteAccount,
		claimFeeOperator,
		operator,
		tokenBaseProgram,
		tokenQuoteProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
