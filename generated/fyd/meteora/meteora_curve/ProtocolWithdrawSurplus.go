// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "protocol_withdraw_surplus" instruction.
type ProtocolWithdrawSurplus struct {
	// Params:
	// Accounts:
	// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_quote_account
	TokenQuoteAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [5] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [6] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [7] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [8] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ProtocolWithdrawSurplus) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ProtocolWithdrawSurplus) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ProtocolWithdrawSurplus) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Config = accounts[1]
	obj.VirtualPool = accounts[2]
	obj.TokenQuoteAccount = accounts[3]
	obj.QuoteVault = accounts[4]
	obj.QuoteMint = accounts[5]
	obj.TokenQuoteProgram = accounts[6]
	obj.EventAuthority = accounts[7]
	obj.Program = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ProtocolWithdrawSurplus) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ProtocolWithdrawSurplus) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ProtocolWithdrawSurplus)
}

func (*ProtocolWithdrawSurplus) NewInstance() programparser.Instruction {
	return new(ProtocolWithdrawSurplus)
}

// Builds a "protocol_withdraw_surplus" instruction.
func NewProtocolWithdrawSurplusInstruction(
	config solanago.PublicKey,
	virtualPool solanago.PublicKey,
	tokenQuoteAccount solanago.PublicKey,
	quoteVault solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ProtocolWithdrawSurplus[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] virtual_pool
		metas_[2] = solanago.NewAccountMeta(virtualPool, true, false)
		// [3] = [writable] token_quote_account
		// The treasury quote token account
		metas_[3] = solanago.NewAccountMeta(tokenQuoteAccount, true, false)
		// [4] = [writable] quote_vault
		// The vault token account for quote token
		metas_[4] = solanago.NewAccountMeta(quoteVault, true, false)
		// [5] = [] quote_mint
		// The mint of token
		metas_[5] = solanago.NewAccountMeta(quoteMint, false, false)
		// [6] = [] token_quote_program
		// Token b program
		metas_[6] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [7] = [] event_authority
		metas_[7] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [8] = [] program
		metas_[8] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildProtocolWithdrawSurplus" instruction.
func BuildProtocolWithdrawSurplus(
	config solanago.PublicKey,
	virtualPool solanago.PublicKey,
	tokenQuoteAccount solanago.PublicKey,
	quoteVault solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewProtocolWithdrawSurplusInstruction(
		config,
		virtualPool,
		tokenQuoteAccount,
		quoteVault,
		quoteMint,
		tokenQuoteProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
