// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_meteora_damm_claim_lp_token" instruction.
type MigrateMeteoraDammClaimLpToken struct {
	// Params:
	// Accounts:
	// [0] = [] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [writable] migration_metadata
	MigrationMetadata solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] source_token
	SourceToken solanago.PublicKey `bin:"-"`
	// [5] = [writable] destination_token
	DestinationToken solanago.PublicKey `bin:"-"`
	// [6] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [7] = [,signer] sender
	Sender solanago.PublicKey `bin:"-"`
	// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateMeteoraDammClaimLpToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrateMeteoraDammClaimLpToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrateMeteoraDammClaimLpToken) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.MigrationMetadata = accounts[1]
	obj.PoolAuthority = accounts[2]
	obj.LpMint = accounts[3]
	obj.SourceToken = accounts[4]
	obj.DestinationToken = accounts[5]
	obj.Owner = accounts[6]
	obj.Sender = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateMeteoraDammClaimLpToken) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateMeteoraDammClaimLpToken) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateMeteoraDammClaimLpToken)
}

func (*MigrateMeteoraDammClaimLpToken) NewInstance() programparser.Instruction {
	return new(MigrateMeteoraDammClaimLpToken)
}

func (obj *MigrateMeteoraDammClaimLpToken) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[9:]
}

// Builds a "migrate_meteora_damm_claim_lp_token" instruction.
func NewMigrateMeteoraDammClaimLpTokenInstruction(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	lpMint solanago.PublicKey,
	sourceToken solanago.PublicKey,
	destinationToken solanago.PublicKey,
	owner solanago.PublicKey,
	sender solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateMeteoraDammClaimLpToken[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] virtual_pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, false, false)
		// [1] = [writable] migration_metadata
		// migration metadata
		metas_[1] = solanago.NewAccountMeta(migrationMetadata, true, false)
		// [2] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[2] = solanago.NewAccountMeta(PoolAuthority, true, false)
		// [3] = [] lp_mint
		metas_[3] = solanago.NewAccountMeta(lpMint, false, false)
		// [4] = [writable] source_token
		metas_[4] = solanago.NewAccountMeta(sourceToken, true, false)
		// [5] = [writable] destination_token
		metas_[5] = solanago.NewAccountMeta(destinationToken, true, false)
		// [6] = [] owner
		metas_[6] = solanago.NewAccountMeta(owner, false, false)
		// [7] = [,signer] sender
		metas_[7] = solanago.NewAccountMeta(sender, false, true)
		// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// token_program
		metas_[8] = solanago.NewAccountMeta(TokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateMeteoraDammClaimLpToken" instruction.
func BuildMigrateMeteoraDammClaimLpToken(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	lpMint solanago.PublicKey,
	sourceToken solanago.PublicKey,
	destinationToken solanago.PublicKey,
	owner solanago.PublicKey,
	sender solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateMeteoraDammClaimLpTokenInstruction(
		virtualPool,
		migrationMetadata,
		lpMint,
		sourceToken,
		destinationToken,
		owner,
		sender,
		remaining__...,
	)
	return instruction_
}
