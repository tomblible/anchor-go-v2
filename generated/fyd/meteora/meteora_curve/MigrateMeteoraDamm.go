// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_meteora_damm" instruction.
type MigrateMeteoraDamm struct {
	// Params:
	// Accounts:
	// [0] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [writable] migration_metadata
	MigrationMetadata solanago.PublicKey `bin:"-"`
	// [2] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [5] = [] damm_config
	DammConfig solanago.PublicKey `bin:"-"`
	// [6] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_a_mint
	TokenAMint solanago.PublicKey `bin:"-"`
	// [8] = [] token_b_mint
	TokenBMint solanago.PublicKey `bin:"-"`
	// [9] = [writable] a_vault
	AVault solanago.PublicKey `bin:"-"`
	// [10] = [writable] b_vault
	BVault solanago.PublicKey `bin:"-"`
	// [11] = [writable] a_token_vault
	ATokenVault solanago.PublicKey `bin:"-"`
	// [12] = [writable] b_token_vault
	BTokenVault solanago.PublicKey `bin:"-"`
	// [13] = [writable] a_vault_lp_mint
	AVaultLpMint solanago.PublicKey `bin:"-"`
	// [14] = [writable] b_vault_lp_mint
	BVaultLpMint solanago.PublicKey `bin:"-"`
	// [15] = [writable] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [16] = [writable] b_vault_lp
	BVaultLp solanago.PublicKey `bin:"-"`
	// [17] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [18] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [19] = [writable] virtual_pool_lp
	VirtualPoolLp solanago.PublicKey `bin:"-"`
	// [20] = [writable] protocol_token_a_fee
	ProtocolTokenAFee solanago.PublicKey `bin:"-"`
	// [21] = [writable] protocol_token_b_fee
	ProtocolTokenBFee solanago.PublicKey `bin:"-"`
	// [22] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [23] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [24] = [writable] mint_metadata
	MintMetadata solanago.PublicKey `bin:"-"`
	// [25] = [] metadata_program
	MetadataProgram solanago.PublicKey `bin:"-"`
	// [26] = [] amm_program[Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB]
	AmmProgram solanago.PublicKey `bin:"-"`
	// [27] = [] vault_program
	VaultProgram solanago.PublicKey `bin:"-"`
	// [28] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [29] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [30] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateMeteoraDamm) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrateMeteoraDamm) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrateMeteoraDamm) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 31 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 31, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.MigrationMetadata = accounts[1]
	obj.Config = accounts[2]
	obj.PoolAuthority = accounts[3]
	obj.Pool = accounts[4]
	obj.DammConfig = accounts[5]
	obj.LpMint = accounts[6]
	obj.TokenAMint = accounts[7]
	obj.TokenBMint = accounts[8]
	obj.AVault = accounts[9]
	obj.BVault = accounts[10]
	obj.ATokenVault = accounts[11]
	obj.BTokenVault = accounts[12]
	obj.AVaultLpMint = accounts[13]
	obj.BVaultLpMint = accounts[14]
	obj.AVaultLp = accounts[15]
	obj.BVaultLp = accounts[16]
	obj.BaseVault = accounts[17]
	obj.QuoteVault = accounts[18]
	obj.VirtualPoolLp = accounts[19]
	obj.ProtocolTokenAFee = accounts[20]
	obj.ProtocolTokenBFee = accounts[21]
	obj.Payer = accounts[22]
	obj.Rent = accounts[23]
	obj.MintMetadata = accounts[24]
	obj.MetadataProgram = accounts[25]
	obj.AmmProgram = accounts[26]
	obj.VaultProgram = accounts[27]
	obj.TokenProgram = accounts[28]
	obj.AssociatedTokenProgram = accounts[29]
	obj.SystemProgram = accounts[30]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateMeteoraDamm) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateMeteoraDamm) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateMeteoraDamm)
}

func (*MigrateMeteoraDamm) NewInstance() programparser.Instruction {
	return new(MigrateMeteoraDamm)
}

func (obj *MigrateMeteoraDamm) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[31:]
}

// Builds a "migrate_meteora_damm" instruction.
func NewMigrateMeteoraDammInstruction(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	dammConfig solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	virtualPoolLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	payer solanago.PublicKey,
	rent solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 31, 31+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateMeteoraDamm[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] virtual_pool
		// virtual pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, true, false)
		// [1] = [writable] migration_metadata
		metas_[1] = solanago.NewAccountMeta(migrationMetadata, true, false)
		// [2] = [] config
		metas_[2] = solanago.NewAccountMeta(config, false, false)
		// [3] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[3] = solanago.NewAccountMeta(PoolAuthority, true, false)
		// [4] = [writable] pool
		metas_[4] = solanago.NewAccountMeta(pool, true, false)
		// [5] = [] damm_config
		// pool config
		metas_[5] = solanago.NewAccountMeta(dammConfig, false, false)
		// [6] = [writable] lp_mint
		metas_[6] = solanago.NewAccountMeta(lpMint, true, false)
		// [7] = [writable] token_a_mint
		metas_[7] = solanago.NewAccountMeta(tokenAMint, true, false)
		// [8] = [] token_b_mint
		metas_[8] = solanago.NewAccountMeta(tokenBMint, false, false)
		// [9] = [writable] a_vault
		metas_[9] = solanago.NewAccountMeta(aVault, true, false)
		// [10] = [writable] b_vault
		metas_[10] = solanago.NewAccountMeta(bVault, true, false)
		// [11] = [writable] a_token_vault
		metas_[11] = solanago.NewAccountMeta(aTokenVault, true, false)
		// [12] = [writable] b_token_vault
		metas_[12] = solanago.NewAccountMeta(bTokenVault, true, false)
		// [13] = [writable] a_vault_lp_mint
		metas_[13] = solanago.NewAccountMeta(aVaultLpMint, true, false)
		// [14] = [writable] b_vault_lp_mint
		metas_[14] = solanago.NewAccountMeta(bVaultLpMint, true, false)
		// [15] = [writable] a_vault_lp
		metas_[15] = solanago.NewAccountMeta(aVaultLp, true, false)
		// [16] = [writable] b_vault_lp
		metas_[16] = solanago.NewAccountMeta(bVaultLp, true, false)
		// [17] = [writable] base_vault
		metas_[17] = solanago.NewAccountMeta(baseVault, true, false)
		// [18] = [writable] quote_vault
		metas_[18] = solanago.NewAccountMeta(quoteVault, true, false)
		// [19] = [writable] virtual_pool_lp
		metas_[19] = solanago.NewAccountMeta(virtualPoolLp, true, false)
		// [20] = [writable] protocol_token_a_fee
		metas_[20] = solanago.NewAccountMeta(protocolTokenAFee, true, false)
		// [21] = [writable] protocol_token_b_fee
		metas_[21] = solanago.NewAccountMeta(protocolTokenBFee, true, false)
		// [22] = [writable,signer] payer
		metas_[22] = solanago.NewAccountMeta(payer, true, true)
		// [23] = [] rent
		metas_[23] = solanago.NewAccountMeta(rent, false, false)
		// [24] = [writable] mint_metadata
		metas_[24] = solanago.NewAccountMeta(mintMetadata, true, false)
		// [25] = [] metadata_program
		metas_[25] = solanago.NewAccountMeta(metadataProgram, false, false)
		// [26] = [] amm_program[Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB]
		metas_[26] = solanago.NewAccountMeta(AmmProgram, false, false)
		// [27] = [] vault_program
		metas_[27] = solanago.NewAccountMeta(vaultProgram, false, false)
		// [28] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// token_program
		metas_[28] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [29] = [] associated_token_program
		metas_[29] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [30] = [] system_program
		// System program.
		metas_[30] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateMeteoraDamm" instruction.
func BuildMigrateMeteoraDamm(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	dammConfig solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	virtualPoolLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	payer solanago.PublicKey,
	rent solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateMeteoraDammInstruction(
		virtualPool,
		migrationMetadata,
		config,
		pool,
		dammConfig,
		lpMint,
		tokenAMint,
		tokenBMint,
		aVault,
		bVault,
		aTokenVault,
		bTokenVault,
		aVaultLpMint,
		bVaultLpMint,
		aVaultLp,
		bVaultLp,
		baseVault,
		quoteVault,
		virtualPoolLp,
		protocolTokenAFee,
		protocolTokenBFee,
		payer,
		rent,
		mintMetadata,
		metadataProgram,
		vaultProgram,
		associatedTokenProgram,
		remaining__...,
	)
	return instruction_
}
