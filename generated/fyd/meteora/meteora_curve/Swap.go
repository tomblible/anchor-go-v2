// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap" instruction.

// TRADING BOTS FUNCTIONS ////
type Swap struct {
	// Params:
	Params SwapParameters
	// Accounts:
	// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [3] = [writable] input_token_account
	InputTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] output_token_account
	OutputTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [7] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [8] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [9] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [10] = [] token_base_program
	TokenBaseProgram solanago.PublicKey `bin:"-"`
	// [11] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [12] = [writable,optional] referral_token_account
	ReferralTokenAccount solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Swap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *Swap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *Swap) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.PoolAuthority = accounts[0]
	obj.Config = accounts[1]
	obj.Pool = accounts[2]
	obj.InputTokenAccount = accounts[3]
	obj.OutputTokenAccount = accounts[4]
	obj.BaseVault = accounts[5]
	obj.QuoteVault = accounts[6]
	obj.BaseMint = accounts[7]
	obj.QuoteMint = accounts[8]
	obj.Payer = accounts[9]
	obj.TokenBaseProgram = accounts[10]
	obj.TokenQuoteProgram = accounts[11]
	obj.ReferralTokenAccount = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Swap) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Swap) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Swap)
}

func (*Swap) NewInstance() programparser.Instruction {
	return new(Swap)
}

func (obj *Swap) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 15 {
		return nil
	}
	return obj.PublicKeySlice[15:]
}

// Builds a "swap" instruction.
// TRADING BOTS FUNCTIONS ////
func NewSwapInstruction(
	// Params:
	paramsParam SwapParameters,

	// Accounts:
	config solanago.PublicKey,
	pool solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	payer solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	referralTokenAccount solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Swap[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[0] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [1] = [] config
		// config key
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] pool
		// Pool account
		metas_[2] = solanago.NewAccountMeta(pool, true, false)
		// [3] = [writable] input_token_account
		// The user token account for input token
		metas_[3] = solanago.NewAccountMeta(inputTokenAccount, true, false)
		// [4] = [writable] output_token_account
		// The user token account for output token
		metas_[4] = solanago.NewAccountMeta(outputTokenAccount, true, false)
		// [5] = [writable] base_vault
		// The vault token account for base token
		metas_[5] = solanago.NewAccountMeta(baseVault, true, false)
		// [6] = [writable] quote_vault
		// The vault token account for quote token
		metas_[6] = solanago.NewAccountMeta(quoteVault, true, false)
		// [7] = [] base_mint
		// The mint of base token
		metas_[7] = solanago.NewAccountMeta(baseMint, false, false)
		// [8] = [] quote_mint
		// The mint of quote token
		metas_[8] = solanago.NewAccountMeta(quoteMint, false, false)
		// [9] = [,signer] payer
		// The user performing the swap
		metas_[9] = solanago.NewAccountMeta(payer, false, true)
		// [10] = [] token_base_program
		// Token base program
		metas_[10] = solanago.NewAccountMeta(tokenBaseProgram, false, false)
		// [11] = [] token_quote_program
		// Token quote program
		metas_[11] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [12] = [writable,optional] referral_token_account
		// referral token account
		metas_[12] = solanago.NewAccountMeta(referralTokenAccount, true, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwap" instruction.
// TRADING BOTS FUNCTIONS ////
func BuildSwap(
	// Params:
	paramsParam SwapParameters,

	// Accounts:
	config solanago.PublicKey,
	pool solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	payer solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	referralTokenAccount solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapInstruction(
		paramsParam,
		config,
		pool,
		inputTokenAccount,
		outputTokenAccount,
		baseVault,
		quoteVault,
		baseMint,
		quoteMint,
		payer,
		tokenBaseProgram,
		tokenQuoteProgram,
		referralTokenAccount,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
