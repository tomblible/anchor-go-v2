// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_virtual_pool_with_token2022" instruction.
type InitializeVirtualPoolWithToken2022 struct {
	// Params:
	Params InitializePoolParameters
	// Accounts:
	// [0] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [1] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [2] = [,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [4] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [6] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [7] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [8] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [9] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [12] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [13] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeVirtualPoolWithToken2022) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramsParam`:
	if err = encoder.Encode(obj.Params); err != nil {
		return fmt.Errorf("error while marshaling paramsParam:%w", err)
	}
	return nil
}

func (obj *InitializeVirtualPoolWithToken2022) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Params`:
	if err = decoder.Decode(&obj.Params); err != nil {
		return fmt.Errorf("error while unmarshaling Params:%w", err)
	}
	return nil
}

func (obj *InitializeVirtualPoolWithToken2022) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.Config = accounts[0]
	obj.PoolAuthority = accounts[1]
	obj.Creator = accounts[2]
	obj.BaseMint = accounts[3]
	obj.QuoteMint = accounts[4]
	obj.Pool = accounts[5]
	obj.BaseVault = accounts[6]
	obj.QuoteVault = accounts[7]
	obj.Payer = accounts[8]
	obj.TokenQuoteProgram = accounts[9]
	obj.TokenProgram = accounts[10]
	obj.SystemProgram = accounts[11]
	obj.EventAuthority = accounts[12]
	obj.Program = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeVirtualPoolWithToken2022) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeVirtualPoolWithToken2022) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeVirtualPoolWithToken2022)
}

func (*InitializeVirtualPoolWithToken2022) NewInstance() programparser.Instruction {
	return new(InitializeVirtualPoolWithToken2022)
}

func (obj *InitializeVirtualPoolWithToken2022) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[14:]
}

// Builds a "initialize_virtual_pool_with_token2022" instruction.
func NewInitializeVirtualPoolWithToken2022Instruction(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	config solanago.PublicKey,
	creator solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	pool solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeVirtualPoolWithToken2022[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramsParam`:
		if err = enc__.Encode(paramsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] config
		// Which config the pool belongs to.
		metas_[0] = solanago.NewAccountMeta(config, false, false)
		// [1] = [] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[1] = solanago.NewAccountMeta(PoolAuthority, false, false)
		// [2] = [,signer] creator
		metas_[2] = solanago.NewAccountMeta(creator, false, true)
		// [3] = [writable,signer] base_mint
		// Unique token mint address, initialize in contract
		metas_[3] = solanago.NewAccountMeta(baseMint, true, true)
		// [4] = [] quote_mint
		metas_[4] = solanago.NewAccountMeta(quoteMint, false, false)
		// [5] = [writable] pool
		// Initialize an account to store the pool state
		metas_[5] = solanago.NewAccountMeta(pool, true, false)
		// [6] = [writable] base_vault
		metas_[6] = solanago.NewAccountMeta(baseVault, true, false)
		// [7] = [writable] quote_vault
		// Token quote vault for the pool
		metas_[7] = solanago.NewAccountMeta(quoteVault, true, false)
		// [8] = [writable,signer] payer
		// Address paying to create the pool. Can be anyone
		metas_[8] = solanago.NewAccountMeta(payer, true, true)
		// [9] = [] token_quote_program
		// Program to create mint account and mint tokens
		metas_[9] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [10] = [] token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// token program for base mint
		metas_[10] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [11] = [] system_program
		metas_[11] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [12] = [] event_authority
		metas_[12] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [13] = [] program
		metas_[13] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeVirtualPoolWithToken2022" instruction.
func BuildInitializeVirtualPoolWithToken2022(
	// Params:
	paramsParam InitializePoolParameters,

	// Accounts:
	config solanago.PublicKey,
	creator solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	pool solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeVirtualPoolWithToken2022Instruction(
		paramsParam,
		config,
		creator,
		baseMint,
		quoteMint,
		pool,
		baseVault,
		quoteVault,
		payer,
		tokenQuoteProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
