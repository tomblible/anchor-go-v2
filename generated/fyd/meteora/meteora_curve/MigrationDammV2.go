// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migration_damm_v2" instruction.
type MigrationDammV2 struct {
	// Params:
	// Accounts:
	// [0] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [] migration_metadata
	MigrationMetadata solanago.PublicKey `bin:"-"`
	// [2] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [5] = [writable] first_position_nft_mint
	FirstPositionNftMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] first_position_nft_account
	FirstPositionNftAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] first_position
	FirstPosition solanago.PublicKey `bin:"-"`
	// [8] = [writable,optional] second_position_nft_mint
	SecondPositionNftMint solanago.PublicKey `bin:"-"`
	// [9] = [writable,optional] second_position_nft_account
	SecondPositionNftAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable,optional] second_position
	SecondPosition solanago.PublicKey `bin:"-"`
	// [11] = [] damm_pool_authority
	DammPoolAuthority solanago.PublicKey `bin:"-"`
	// [12] = [] amm_program[cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG]
	AmmProgram solanago.PublicKey `bin:"-"`
	// [13] = [writable] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [14] = [writable] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [15] = [writable] token_a_vault
	TokenAVault solanago.PublicKey `bin:"-"`
	// [16] = [writable] token_b_vault
	TokenBVault solanago.PublicKey `bin:"-"`
	// [17] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [18] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [19] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [20] = [] token_base_program
	TokenBaseProgram solanago.PublicKey `bin:"-"`
	// [21] = [] token_quote_program
	TokenQuoteProgram solanago.PublicKey `bin:"-"`
	// [22] = [] token_2022_program
	Token2022Program solanago.PublicKey `bin:"-"`
	// [23] = [] damm_event_authority
	DammEventAuthority solanago.PublicKey `bin:"-"`
	// [24] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrationDammV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrationDammV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrationDammV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 25 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 25, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.MigrationMetadata = accounts[1]
	obj.Config = accounts[2]
	obj.PoolAuthority = accounts[3]
	obj.Pool = accounts[4]
	obj.FirstPositionNftMint = accounts[5]
	obj.FirstPositionNftAccount = accounts[6]
	obj.FirstPosition = accounts[7]
	obj.SecondPositionNftMint = accounts[8]
	obj.SecondPositionNftAccount = accounts[9]
	obj.SecondPosition = accounts[10]
	obj.DammPoolAuthority = accounts[11]
	obj.AmmProgram = accounts[12]
	obj.BaseMint = accounts[13]
	obj.QuoteMint = accounts[14]
	obj.TokenAVault = accounts[15]
	obj.TokenBVault = accounts[16]
	obj.BaseVault = accounts[17]
	obj.QuoteVault = accounts[18]
	obj.Payer = accounts[19]
	obj.TokenBaseProgram = accounts[20]
	obj.TokenQuoteProgram = accounts[21]
	obj.Token2022Program = accounts[22]
	obj.DammEventAuthority = accounts[23]
	obj.SystemProgram = accounts[24]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrationDammV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrationDammV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrationDammV2)
}

func (*MigrationDammV2) NewInstance() programparser.Instruction {
	return new(MigrationDammV2)
}

func (obj *MigrationDammV2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 25 {
		return nil
	}
	return obj.PublicKeySlice[25:]
}

// Builds a "migration_damm_v2" instruction.
func NewMigrationDammV2Instruction(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	firstPositionNftMint solanago.PublicKey,
	firstPositionNftAccount solanago.PublicKey,
	firstPosition solanago.PublicKey,
	secondPositionNftMint solanago.PublicKey,
	secondPositionNftAccount solanago.PublicKey,
	secondPosition solanago.PublicKey,
	dammPoolAuthority solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	token2022Program solanago.PublicKey,
	dammEventAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 25, 25+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrationDammV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] virtual_pool
		// virtual pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, true, false)
		// [1] = [] migration_metadata
		// migration metadata
		metas_[1] = solanago.NewAccountMeta(migrationMetadata, false, false)
		// [2] = [] config
		// virtual pool config key
		metas_[2] = solanago.NewAccountMeta(config, false, false)
		// [3] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[3] = solanago.NewAccountMeta(PoolAuthority, true, false)
		// [4] = [writable] pool
		metas_[4] = solanago.NewAccountMeta(pool, true, false)
		// [5] = [writable] first_position_nft_mint
		metas_[5] = solanago.NewAccountMeta(firstPositionNftMint, true, false)
		// [6] = [writable] first_position_nft_account
		metas_[6] = solanago.NewAccountMeta(firstPositionNftAccount, true, false)
		// [7] = [writable] first_position
		metas_[7] = solanago.NewAccountMeta(firstPosition, true, false)
		// [8] = [writable,optional] second_position_nft_mint
		metas_[8] = solanago.NewAccountMeta(secondPositionNftMint, true, false)
		// [9] = [writable,optional] second_position_nft_account
		metas_[9] = solanago.NewAccountMeta(secondPositionNftAccount, true, false)
		// [10] = [writable,optional] second_position
		metas_[10] = solanago.NewAccountMeta(secondPosition, true, false)
		// [11] = [] damm_pool_authority
		metas_[11] = solanago.NewAccountMeta(dammPoolAuthority, false, false)
		// [12] = [] amm_program[cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG]
		metas_[12] = solanago.NewAccountMeta(AmmProgram, false, false)
		// [13] = [writable] base_mint
		metas_[13] = solanago.NewAccountMeta(baseMint, true, false)
		// [14] = [writable] quote_mint
		metas_[14] = solanago.NewAccountMeta(quoteMint, true, false)
		// [15] = [writable] token_a_vault
		metas_[15] = solanago.NewAccountMeta(tokenAVault, true, false)
		// [16] = [writable] token_b_vault
		metas_[16] = solanago.NewAccountMeta(tokenBVault, true, false)
		// [17] = [writable] base_vault
		metas_[17] = solanago.NewAccountMeta(baseVault, true, false)
		// [18] = [writable] quote_vault
		metas_[18] = solanago.NewAccountMeta(quoteVault, true, false)
		// [19] = [writable,signer] payer
		metas_[19] = solanago.NewAccountMeta(payer, true, true)
		// [20] = [] token_base_program
		metas_[20] = solanago.NewAccountMeta(tokenBaseProgram, false, false)
		// [21] = [] token_quote_program
		metas_[21] = solanago.NewAccountMeta(tokenQuoteProgram, false, false)
		// [22] = [] token_2022_program
		metas_[22] = solanago.NewAccountMeta(token2022Program, false, false)
		// [23] = [] damm_event_authority
		metas_[23] = solanago.NewAccountMeta(dammEventAuthority, false, false)
		// [24] = [] system_program
		// System program.
		metas_[24] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrationDammV2" instruction.
func BuildMigrationDammV2(
	virtualPool solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	config solanago.PublicKey,
	pool solanago.PublicKey,
	firstPositionNftMint solanago.PublicKey,
	firstPositionNftAccount solanago.PublicKey,
	firstPosition solanago.PublicKey,
	secondPositionNftMint solanago.PublicKey,
	secondPositionNftAccount solanago.PublicKey,
	secondPosition solanago.PublicKey,
	dammPoolAuthority solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	tokenAVault solanago.PublicKey,
	tokenBVault solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	payer solanago.PublicKey,
	tokenBaseProgram solanago.PublicKey,
	tokenQuoteProgram solanago.PublicKey,
	token2022Program solanago.PublicKey,
	dammEventAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrationDammV2Instruction(
		virtualPool,
		migrationMetadata,
		config,
		pool,
		firstPositionNftMint,
		firstPositionNftAccount,
		firstPosition,
		secondPositionNftMint,
		secondPositionNftAccount,
		secondPosition,
		dammPoolAuthority,
		baseMint,
		quoteMint,
		tokenAVault,
		tokenBVault,
		baseVault,
		quoteVault,
		payer,
		tokenBaseProgram,
		tokenQuoteProgram,
		token2022Program,
		dammEventAuthority,
		remaining__...,
	)
	return instruction_
}
