// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_locker" instruction.

// PERMISSIONLESS FUNCTIONS ///
// create locker
type CreateLocker struct {
	// Params:
	// Accounts:
	// [0] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [4] = [writable] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] base
	Base solanago.PublicKey `bin:"-"`
	// [6] = [] creator
	Creator solanago.PublicKey `bin:"-"`
	// [7] = [writable] escrow
	Escrow solanago.PublicKey `bin:"-"`
	// [8] = [writable] escrow_token
	EscrowToken solanago.PublicKey `bin:"-"`
	// [9] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [10] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] locker_program[LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn]
	LockerProgram solanago.PublicKey `bin:"-"`
	// [12] = [] locker_event_authority
	LockerEventAuthority solanago.PublicKey `bin:"-"`
	// [13] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateLocker) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateLocker) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateLocker) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.Config = accounts[1]
	obj.PoolAuthority = accounts[2]
	obj.BaseVault = accounts[3]
	obj.BaseMint = accounts[4]
	obj.Base = accounts[5]
	obj.Creator = accounts[6]
	obj.Escrow = accounts[7]
	obj.EscrowToken = accounts[8]
	obj.Payer = accounts[9]
	obj.TokenProgram = accounts[10]
	obj.LockerProgram = accounts[11]
	obj.LockerEventAuthority = accounts[12]
	obj.SystemProgram = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateLocker) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateLocker) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateLocker)
}

func (*CreateLocker) NewInstance() programparser.Instruction {
	return new(CreateLocker)
}

func (obj *CreateLocker) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 14 {
		return nil
	}
	return obj.PublicKeySlice[14:]
}

// Builds a "create_locker" instruction.
// PERMISSIONLESS FUNCTIONS /// // create locker
func NewCreateLockerInstruction(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	baseVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	base solanago.PublicKey,
	creator solanago.PublicKey,
	escrow solanago.PublicKey,
	escrowToken solanago.PublicKey,
	payer solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	lockerEventAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateLocker[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] virtual_pool
		// Virtual pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, true, false)
		// [1] = [] config
		// Config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] pool_authority[FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM]
		metas_[2] = solanago.NewAccountMeta(PoolAuthority, true, false)
		// [3] = [writable] base_vault
		metas_[3] = solanago.NewAccountMeta(baseVault, true, false)
		// [4] = [writable] base_mint
		metas_[4] = solanago.NewAccountMeta(baseMint, true, false)
		// [5] = [writable] base
		metas_[5] = solanago.NewAccountMeta(base, true, false)
		// [6] = [] creator
		metas_[6] = solanago.NewAccountMeta(creator, false, false)
		// [7] = [writable] escrow
		metas_[7] = solanago.NewAccountMeta(escrow, true, false)
		// [8] = [writable] escrow_token
		metas_[8] = solanago.NewAccountMeta(escrowToken, true, false)
		// [9] = [writable,signer] payer
		metas_[9] = solanago.NewAccountMeta(payer, true, true)
		// [10] = [] token_program
		metas_[10] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [11] = [] locker_program[LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn]
		metas_[11] = solanago.NewAccountMeta(LockerProgram, false, false)
		// [12] = [] locker_event_authority
		metas_[12] = solanago.NewAccountMeta(lockerEventAuthority, false, false)
		// [13] = [] system_program
		// System program.
		metas_[13] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateLocker" instruction.
// PERMISSIONLESS FUNCTIONS /// // create locker
func BuildCreateLocker(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	baseVault solanago.PublicKey,
	baseMint solanago.PublicKey,
	base solanago.PublicKey,
	creator solanago.PublicKey,
	escrow solanago.PublicKey,
	escrowToken solanago.PublicKey,
	payer solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	lockerEventAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateLockerInstruction(
		virtualPool,
		config,
		baseVault,
		baseMint,
		base,
		creator,
		escrow,
		escrowToken,
		payer,
		tokenProgram,
		lockerEventAuthority,
		remaining__...,
	)
	return instruction_
}
