// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migration_meteora_damm_create_metadata" instruction.

// migrate damm v1
type MigrationMeteoraDammCreateMetadata struct {
	// Params:
	// Accounts:
	// [0] = [] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] migration_metadata
	MigrationMetadata solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [4] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [5] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [6] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrationMeteoraDammCreateMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrationMeteoraDammCreateMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrationMeteoraDammCreateMetadata) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.Config = accounts[1]
	obj.MigrationMetadata = accounts[2]
	obj.Payer = accounts[3]
	obj.SystemProgram = accounts[4]
	obj.EventAuthority = accounts[5]
	obj.Program = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrationMeteoraDammCreateMetadata) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrationMeteoraDammCreateMetadata) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrationMeteoraDammCreateMetadata)
}

func (*MigrationMeteoraDammCreateMetadata) NewInstance() programparser.Instruction {
	return new(MigrationMeteoraDammCreateMetadata)
}

func (obj *MigrationMeteoraDammCreateMetadata) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "migration_meteora_damm_create_metadata" instruction.
// migrate damm v1
func NewMigrationMeteoraDammCreateMetadataInstruction(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrationMeteoraDammCreateMetadata[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] virtual_pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, false, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] migration_metadata
		metas_[2] = solanago.NewAccountMeta(migrationMetadata, true, false)
		// [3] = [writable,signer] payer
		metas_[3] = solanago.NewAccountMeta(payer, true, true)
		// [4] = [] system_program
		metas_[4] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [5] = [] event_authority
		metas_[5] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [6] = [] program
		metas_[6] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrationMeteoraDammCreateMetadata" instruction.
// migrate damm v1
func BuildMigrationMeteoraDammCreateMetadata(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	migrationMetadata solanago.PublicKey,
	payer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrationMeteoraDammCreateMetadataInstruction(
		virtualPool,
		config,
		migrationMetadata,
		payer,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
