// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type BaseFeeConfig struct {
	CliffFeeNumerator uint64
	SecondFactor      uint64
	ThirdFactor       uint64
	FirstFactor       uint16
	BaseFeeMode       uint8
	Padding0          [5]uint8
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	if err = encoder.Encode(obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling CliffFeeNumerator:%w", err)
	}
	// Serialize `SecondFactor`:
	if err = encoder.Encode(obj.SecondFactor); err != nil {
		return fmt.Errorf("error while marshaling SecondFactor:%w", err)
	}
	// Serialize `ThirdFactor`:
	if err = encoder.Encode(obj.ThirdFactor); err != nil {
		return fmt.Errorf("error while marshaling ThirdFactor:%w", err)
	}
	// Serialize `FirstFactor`:
	if err = encoder.Encode(obj.FirstFactor); err != nil {
		return fmt.Errorf("error while marshaling FirstFactor:%w", err)
	}
	// Serialize `BaseFeeMode`:
	if err = encoder.Encode(obj.BaseFeeMode); err != nil {
		return fmt.Errorf("error while marshaling BaseFeeMode:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	return nil
}

func (obj BaseFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	if err = decoder.Decode(&obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling CliffFeeNumerator:%w", err)
	}
	// Deserialize `SecondFactor`:
	if err = decoder.Decode(&obj.SecondFactor); err != nil {
		return fmt.Errorf("error while unmarshaling SecondFactor:%w", err)
	}
	// Deserialize `ThirdFactor`:
	if err = decoder.Decode(&obj.ThirdFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ThirdFactor:%w", err)
	}
	// Deserialize `FirstFactor`:
	if err = decoder.Decode(&obj.FirstFactor); err != nil {
		return fmt.Errorf("error while unmarshaling FirstFactor:%w", err)
	}
	// Deserialize `BaseFeeMode`:
	if err = decoder.Decode(&obj.BaseFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeMode:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	return nil
}

func (obj *BaseFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeConfig(buf []byte) (*BaseFeeConfig, error) {
	obj := new(BaseFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64
	FirstFactor       uint16
	SecondFactor      uint64
	ThirdFactor       uint64
	BaseFeeMode       uint8
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator`:
	if err = encoder.Encode(obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling CliffFeeNumerator:%w", err)
	}
	// Serialize `FirstFactor`:
	if err = encoder.Encode(obj.FirstFactor); err != nil {
		return fmt.Errorf("error while marshaling FirstFactor:%w", err)
	}
	// Serialize `SecondFactor`:
	if err = encoder.Encode(obj.SecondFactor); err != nil {
		return fmt.Errorf("error while marshaling SecondFactor:%w", err)
	}
	// Serialize `ThirdFactor`:
	if err = encoder.Encode(obj.ThirdFactor); err != nil {
		return fmt.Errorf("error while marshaling ThirdFactor:%w", err)
	}
	// Serialize `BaseFeeMode`:
	if err = encoder.Encode(obj.BaseFeeMode); err != nil {
		return fmt.Errorf("error while marshaling BaseFeeMode:%w", err)
	}
	return nil
}

func (obj BaseFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	if err = decoder.Decode(&obj.CliffFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling CliffFeeNumerator:%w", err)
	}
	// Deserialize `FirstFactor`:
	if err = decoder.Decode(&obj.FirstFactor); err != nil {
		return fmt.Errorf("error while unmarshaling FirstFactor:%w", err)
	}
	// Deserialize `SecondFactor`:
	if err = decoder.Decode(&obj.SecondFactor); err != nil {
		return fmt.Errorf("error while unmarshaling SecondFactor:%w", err)
	}
	// Deserialize `ThirdFactor`:
	if err = decoder.Decode(&obj.ThirdFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ThirdFactor:%w", err)
	}
	// Deserialize `BaseFeeMode`:
	if err = decoder.Decode(&obj.BaseFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeMode:%w", err)
	}
	return nil
}

func (obj *BaseFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeParameters(buf []byte) (*BaseFeeParameters, error) {
	obj := new(BaseFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ConfigParameters struct {
	PoolFees                    PoolFeeParameters
	CollectFeeMode              uint8
	MigrationOption             uint8
	ActivationType              uint8
	TokenType                   uint8
	TokenDecimal                uint8
	PartnerLpPercentage         uint8
	PartnerLockedLpPercentage   uint8
	CreatorLpPercentage         uint8
	CreatorLockedLpPercentage   uint8
	MigrationQuoteThreshold     uint64
	SqrtStartPrice              binary.Uint128
	LockedVesting               LockedVestingParams
	MigrationFeeOption          uint8
	TokenSupply                 *TokenSupplyParams `bin:"optional"`
	CreatorTradingFeePercentage uint8
	TokenUpdateAuthority        uint8
	MigrationFee                MigrationFee
	MigratedPoolFee             MigratedPoolFee

	// padding for future use
	Padding [7]uint64
	Curve   []LiquidityDistributionParameters
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolFees`:
	if err = encoder.Encode(obj.PoolFees); err != nil {
		return fmt.Errorf("error while marshaling PoolFees:%w", err)
	}
	// Serialize `CollectFeeMode`:
	if err = encoder.Encode(obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while marshaling CollectFeeMode:%w", err)
	}
	// Serialize `MigrationOption`:
	if err = encoder.Encode(obj.MigrationOption); err != nil {
		return fmt.Errorf("error while marshaling MigrationOption:%w", err)
	}
	// Serialize `ActivationType`:
	if err = encoder.Encode(obj.ActivationType); err != nil {
		return fmt.Errorf("error while marshaling ActivationType:%w", err)
	}
	// Serialize `TokenType`:
	if err = encoder.Encode(obj.TokenType); err != nil {
		return fmt.Errorf("error while marshaling TokenType:%w", err)
	}
	// Serialize `TokenDecimal`:
	if err = encoder.Encode(obj.TokenDecimal); err != nil {
		return fmt.Errorf("error while marshaling TokenDecimal:%w", err)
	}
	// Serialize `PartnerLpPercentage`:
	if err = encoder.Encode(obj.PartnerLpPercentage); err != nil {
		return fmt.Errorf("error while marshaling PartnerLpPercentage:%w", err)
	}
	// Serialize `PartnerLockedLpPercentage`:
	if err = encoder.Encode(obj.PartnerLockedLpPercentage); err != nil {
		return fmt.Errorf("error while marshaling PartnerLockedLpPercentage:%w", err)
	}
	// Serialize `CreatorLpPercentage`:
	if err = encoder.Encode(obj.CreatorLpPercentage); err != nil {
		return fmt.Errorf("error while marshaling CreatorLpPercentage:%w", err)
	}
	// Serialize `CreatorLockedLpPercentage`:
	if err = encoder.Encode(obj.CreatorLockedLpPercentage); err != nil {
		return fmt.Errorf("error while marshaling CreatorLockedLpPercentage:%w", err)
	}
	// Serialize `MigrationQuoteThreshold`:
	if err = encoder.Encode(obj.MigrationQuoteThreshold); err != nil {
		return fmt.Errorf("error while marshaling MigrationQuoteThreshold:%w", err)
	}
	// Serialize `SqrtStartPrice`:
	if err = encoder.Encode(obj.SqrtStartPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtStartPrice:%w", err)
	}
	// Serialize `LockedVesting`:
	if err = encoder.Encode(obj.LockedVesting); err != nil {
		return fmt.Errorf("error while marshaling LockedVesting:%w", err)
	}
	// Serialize `MigrationFeeOption`:
	if err = encoder.Encode(obj.MigrationFeeOption); err != nil {
		return fmt.Errorf("error while marshaling MigrationFeeOption:%w", err)
	}
	// Serialize `TokenSupply` (optional):
	{
		if obj.TokenSupply == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling TokenSupply optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling TokenSupply optionality: %w", err)
			}
			if err = encoder.Encode(obj.TokenSupply); err != nil {
				return fmt.Errorf("error while marshaling TokenSupply: %w", err)
			}
		}
	}
	// Serialize `CreatorTradingFeePercentage`:
	if err = encoder.Encode(obj.CreatorTradingFeePercentage); err != nil {
		return fmt.Errorf("error while marshaling CreatorTradingFeePercentage:%w", err)
	}
	// Serialize `TokenUpdateAuthority`:
	if err = encoder.Encode(obj.TokenUpdateAuthority); err != nil {
		return fmt.Errorf("error while marshaling TokenUpdateAuthority:%w", err)
	}
	// Serialize `MigrationFee`:
	if err = encoder.Encode(obj.MigrationFee); err != nil {
		return fmt.Errorf("error while marshaling MigrationFee:%w", err)
	}
	// Serialize `MigratedPoolFee`:
	if err = encoder.Encode(obj.MigratedPoolFee); err != nil {
		return fmt.Errorf("error while marshaling MigratedPoolFee:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `Curve`:
	if err = encoder.Encode(obj.Curve); err != nil {
		return fmt.Errorf("error while marshaling Curve:%w", err)
	}
	return nil
}

func (obj ConfigParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ConfigParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	if err = decoder.Decode(&obj.PoolFees); err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees:%w", err)
	}
	// Deserialize `CollectFeeMode`:
	if err = decoder.Decode(&obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling CollectFeeMode:%w", err)
	}
	// Deserialize `MigrationOption`:
	if err = decoder.Decode(&obj.MigrationOption); err != nil {
		return fmt.Errorf("error while unmarshaling MigrationOption:%w", err)
	}
	// Deserialize `ActivationType`:
	if err = decoder.Decode(&obj.ActivationType); err != nil {
		return fmt.Errorf("error while unmarshaling ActivationType:%w", err)
	}
	// Deserialize `TokenType`:
	if err = decoder.Decode(&obj.TokenType); err != nil {
		return fmt.Errorf("error while unmarshaling TokenType:%w", err)
	}
	// Deserialize `TokenDecimal`:
	if err = decoder.Decode(&obj.TokenDecimal); err != nil {
		return fmt.Errorf("error while unmarshaling TokenDecimal:%w", err)
	}
	// Deserialize `PartnerLpPercentage`:
	if err = decoder.Decode(&obj.PartnerLpPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling PartnerLpPercentage:%w", err)
	}
	// Deserialize `PartnerLockedLpPercentage`:
	if err = decoder.Decode(&obj.PartnerLockedLpPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling PartnerLockedLpPercentage:%w", err)
	}
	// Deserialize `CreatorLpPercentage`:
	if err = decoder.Decode(&obj.CreatorLpPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling CreatorLpPercentage:%w", err)
	}
	// Deserialize `CreatorLockedLpPercentage`:
	if err = decoder.Decode(&obj.CreatorLockedLpPercentage); err != nil {
		return fmt.Errorf("error while unmarshaling CreatorLockedLpPercentage:%w", err)
	}
	// Deserialize `MigrationQuoteThreshold`:
	if err = decoder.Decode(&obj.MigrationQuoteThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling MigrationQuoteThreshold:%w", err)
	}
	// Deserialize `SqrtStartPrice`:
	if err = decoder.Decode(&obj.SqrtStartPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtStartPrice:%w", err)
	}
	// Deserialize `LockedVesting`:
	if err = decoder.Decode(&obj.LockedVesting); err != nil {
		return fmt.Errorf("error while unmarshaling LockedVesting:%w", err)
	}
	// Deserialize `MigrationFeeOption`:
	if err = decoder.Decode(&obj.MigrationFeeOption); err != nil {
		return fmt.Errorf("error while unmarshaling MigrationFeeOption:%w", err)
	}
	// Deserialize `TokenSupply` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling TokenSupply:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.TokenSupply); err != nil {
				return fmt.Errorf("error while unmarshaling TokenSupply:%w", err)
			}
		}
	}
	// Deserialize `CreatorTradingFeePercentage`:
	if err = decoder.Decode(&obj.CreatorTradingFeePercentage); err != nil {
		return fmt.Errorf("error while unmarshaling CreatorTradingFeePercentage:%w", err)
	}
	// Deserialize `TokenUpdateAuthority`:
	if err = decoder.Decode(&obj.TokenUpdateAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling TokenUpdateAuthority:%w", err)
	}
	// Deserialize `MigrationFee`:
	if err = decoder.Decode(&obj.MigrationFee); err != nil {
		return fmt.Errorf("error while unmarshaling MigrationFee:%w", err)
	}
	// Deserialize `MigratedPoolFee`:
	if err = decoder.Decode(&obj.MigratedPoolFee); err != nil {
		return fmt.Errorf("error while unmarshaling MigratedPoolFee:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `Curve`:
	if err = decoder.Decode(&obj.Curve); err != nil {
		return fmt.Errorf("error while unmarshaling Curve:%w", err)
	}
	return nil
}

func (obj *ConfigParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ConfigParameters: %w", err)
	}
	return nil
}

func UnmarshalConfigParameters(buf []byte) (*ConfigParameters, error) {
	obj := new(ConfigParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreatePartnerMetadataParameters struct {
	Padding [96]uint8
	Name    string
	Website string
	Logo    string
}

func (obj CreatePartnerMetadataParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `Name`:
	if err = encoder.Encode(obj.Name); err != nil {
		return fmt.Errorf("error while marshaling Name:%w", err)
	}
	// Serialize `Website`:
	if err = encoder.Encode(obj.Website); err != nil {
		return fmt.Errorf("error while marshaling Website:%w", err)
	}
	// Serialize `Logo`:
	if err = encoder.Encode(obj.Logo); err != nil {
		return fmt.Errorf("error while marshaling Logo:%w", err)
	}
	return nil
}

func (obj CreatePartnerMetadataParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreatePartnerMetadataParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreatePartnerMetadataParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `Name`:
	if err = decoder.Decode(&obj.Name); err != nil {
		return fmt.Errorf("error while unmarshaling Name:%w", err)
	}
	// Deserialize `Website`:
	if err = decoder.Decode(&obj.Website); err != nil {
		return fmt.Errorf("error while unmarshaling Website:%w", err)
	}
	// Deserialize `Logo`:
	if err = decoder.Decode(&obj.Logo); err != nil {
		return fmt.Errorf("error while unmarshaling Logo:%w", err)
	}
	return nil
}

func (obj *CreatePartnerMetadataParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreatePartnerMetadataParameters: %w", err)
	}
	return nil
}

func UnmarshalCreatePartnerMetadataParameters(buf []byte) (*CreatePartnerMetadataParameters, error) {
	obj := new(CreatePartnerMetadataParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateVirtualPoolMetadataParameters struct {
	Padding [96]uint8
	Name    string
	Website string
	Logo    string
}

func (obj CreateVirtualPoolMetadataParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `Name`:
	if err = encoder.Encode(obj.Name); err != nil {
		return fmt.Errorf("error while marshaling Name:%w", err)
	}
	// Serialize `Website`:
	if err = encoder.Encode(obj.Website); err != nil {
		return fmt.Errorf("error while marshaling Website:%w", err)
	}
	// Serialize `Logo`:
	if err = encoder.Encode(obj.Logo); err != nil {
		return fmt.Errorf("error while marshaling Logo:%w", err)
	}
	return nil
}

func (obj CreateVirtualPoolMetadataParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVirtualPoolMetadataParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVirtualPoolMetadataParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `Name`:
	if err = decoder.Decode(&obj.Name); err != nil {
		return fmt.Errorf("error while unmarshaling Name:%w", err)
	}
	// Deserialize `Website`:
	if err = decoder.Decode(&obj.Website); err != nil {
		return fmt.Errorf("error while unmarshaling Website:%w", err)
	}
	// Deserialize `Logo`:
	if err = decoder.Decode(&obj.Logo); err != nil {
		return fmt.Errorf("error while unmarshaling Logo:%w", err)
	}
	return nil
}

func (obj *CreateVirtualPoolMetadataParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVirtualPoolMetadataParameters: %w", err)
	}
	return nil
}

func UnmarshalCreateVirtualPoolMetadataParameters(buf []byte) (*CreateVirtualPoolMetadataParameters, error) {
	obj := new(CreateVirtualPoolMetadataParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeConfig struct {
	Initialized              uint8
	Padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	Padding2                 [8]uint8
	BinStepU128              binary.Uint128
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Initialized`:
	if err = encoder.Encode(obj.Initialized); err != nil {
		return fmt.Errorf("error while marshaling Initialized:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling MaxVolatilityAccumulator:%w", err)
	}
	// Serialize `VariableFeeControl`:
	if err = encoder.Encode(obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while marshaling VariableFeeControl:%w", err)
	}
	// Serialize `BinStep`:
	if err = encoder.Encode(obj.BinStep); err != nil {
		return fmt.Errorf("error while marshaling BinStep:%w", err)
	}
	// Serialize `FilterPeriod`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling FilterPeriod:%w", err)
	}
	// Serialize `DecayPeriod`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling DecayPeriod:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `Padding2`:
	if err = encoder.Encode(obj.Padding2); err != nil {
		return fmt.Errorf("error while marshaling Padding2:%w", err)
	}
	// Serialize `BinStepU128`:
	if err = encoder.Encode(obj.BinStepU128); err != nil {
		return fmt.Errorf("error while marshaling BinStepU128:%w", err)
	}
	return nil
}

func (obj DynamicFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	if err = decoder.Decode(&obj.Initialized); err != nil {
		return fmt.Errorf("error while unmarshaling Initialized:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `VariableFeeControl`:
	if err = decoder.Decode(&obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while unmarshaling VariableFeeControl:%w", err)
	}
	// Deserialize `BinStep`:
	if err = decoder.Decode(&obj.BinStep); err != nil {
		return fmt.Errorf("error while unmarshaling BinStep:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `Padding2`:
	if err = decoder.Decode(&obj.Padding2); err != nil {
		return fmt.Errorf("error while unmarshaling Padding2:%w", err)
	}
	// Deserialize `BinStepU128`:
	if err = decoder.Decode(&obj.BinStepU128); err != nil {
		return fmt.Errorf("error while unmarshaling BinStepU128:%w", err)
	}
	return nil
}

func (obj *DynamicFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeConfig(buf []byte) (*DynamicFeeConfig, error) {
	obj := new(DynamicFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16
	BinStepU128              binary.Uint128
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	if err = encoder.Encode(obj.BinStep); err != nil {
		return fmt.Errorf("error while marshaling BinStep:%w", err)
	}
	// Serialize `BinStepU128`:
	if err = encoder.Encode(obj.BinStepU128); err != nil {
		return fmt.Errorf("error while marshaling BinStepU128:%w", err)
	}
	// Serialize `FilterPeriod`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling FilterPeriod:%w", err)
	}
	// Serialize `DecayPeriod`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling DecayPeriod:%w", err)
	}
	// Serialize `ReductionFactor`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling ReductionFactor:%w", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling MaxVolatilityAccumulator:%w", err)
	}
	// Serialize `VariableFeeControl`:
	if err = encoder.Encode(obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while marshaling VariableFeeControl:%w", err)
	}
	return nil
}

func (obj DynamicFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	if err = decoder.Decode(&obj.BinStep); err != nil {
		return fmt.Errorf("error while unmarshaling BinStep:%w", err)
	}
	// Deserialize `BinStepU128`:
	if err = decoder.Decode(&obj.BinStepU128); err != nil {
		return fmt.Errorf("error while unmarshaling BinStepU128:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `VariableFeeControl`:
	if err = decoder.Decode(&obj.VariableFeeControl); err != nil {
		return fmt.Errorf("error while unmarshaling VariableFeeControl:%w", err)
	}
	return nil
}

func (obj *DynamicFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameters(buf []byte) (*DynamicFeeParameters, error) {
	obj := new(DynamicFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializePoolParameters struct {
	Name   string
	Symbol string
	Uri    string
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	if err = encoder.Encode(obj.Name); err != nil {
		return fmt.Errorf("error while marshaling Name:%w", err)
	}
	// Serialize `Symbol`:
	if err = encoder.Encode(obj.Symbol); err != nil {
		return fmt.Errorf("error while marshaling Symbol:%w", err)
	}
	// Serialize `Uri`:
	if err = encoder.Encode(obj.Uri); err != nil {
		return fmt.Errorf("error while marshaling Uri:%w", err)
	}
	return nil
}

func (obj InitializePoolParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializePoolParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	if err = decoder.Decode(&obj.Name); err != nil {
		return fmt.Errorf("error while unmarshaling Name:%w", err)
	}
	// Deserialize `Symbol`:
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return fmt.Errorf("error while unmarshaling Symbol:%w", err)
	}
	// Deserialize `Uri`:
	if err = decoder.Decode(&obj.Uri); err != nil {
		return fmt.Errorf("error while unmarshaling Uri:%w", err)
	}
	return nil
}

func (obj *InitializePoolParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializePoolParameters: %w", err)
	}
	return nil
}

func UnmarshalInitializePoolParameters(buf []byte) (*InitializePoolParameters, error) {
	obj := new(InitializePoolParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityDistributionConfig struct {
	SqrtPrice binary.Uint128
	Liquidity binary.Uint128
}

func (obj LiquidityDistributionConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SqrtPrice`:
	if err = encoder.Encode(obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtPrice:%w", err)
	}
	// Serialize `Liquidity`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling Liquidity:%w", err)
	}
	return nil
}

func (obj LiquidityDistributionConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityDistributionConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityDistributionConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	if err = decoder.Decode(&obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPrice:%w", err)
	}
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	return nil
}

func (obj *LiquidityDistributionConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDistributionConfig: %w", err)
	}
	return nil
}

func UnmarshalLiquidityDistributionConfig(buf []byte) (*LiquidityDistributionConfig, error) {
	obj := new(LiquidityDistributionConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityDistributionParameters struct {
	SqrtPrice binary.Uint128
	Liquidity binary.Uint128
}

func (obj LiquidityDistributionParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SqrtPrice`:
	if err = encoder.Encode(obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling SqrtPrice:%w", err)
	}
	// Serialize `Liquidity`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling Liquidity:%w", err)
	}
	return nil
}

func (obj LiquidityDistributionParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityDistributionParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityDistributionParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	if err = decoder.Decode(&obj.SqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPrice:%w", err)
	}
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	return nil
}

func (obj *LiquidityDistributionParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityDistributionParameters: %w", err)
	}
	return nil
}

func UnmarshalLiquidityDistributionParameters(buf []byte) (*LiquidityDistributionParameters, error) {
	obj := new(LiquidityDistributionParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LockedVestingConfig struct {
	AmountPerPeriod                uint64
	CliffDurationFromMigrationTime uint64
	Frequency                      uint64
	NumberOfPeriod                 uint64
	CliffUnlockAmount              uint64
	Padding                        uint64
}

func (obj LockedVestingConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod`:
	if err = encoder.Encode(obj.AmountPerPeriod); err != nil {
		return fmt.Errorf("error while marshaling AmountPerPeriod:%w", err)
	}
	// Serialize `CliffDurationFromMigrationTime`:
	if err = encoder.Encode(obj.CliffDurationFromMigrationTime); err != nil {
		return fmt.Errorf("error while marshaling CliffDurationFromMigrationTime:%w", err)
	}
	// Serialize `Frequency`:
	if err = encoder.Encode(obj.Frequency); err != nil {
		return fmt.Errorf("error while marshaling Frequency:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	// Serialize `CliffUnlockAmount`:
	if err = encoder.Encode(obj.CliffUnlockAmount); err != nil {
		return fmt.Errorf("error while marshaling CliffUnlockAmount:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	return nil
}

func (obj LockedVestingConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockedVestingConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockedVestingConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	if err = decoder.Decode(&obj.AmountPerPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling AmountPerPeriod:%w", err)
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	if err = decoder.Decode(&obj.CliffDurationFromMigrationTime); err != nil {
		return fmt.Errorf("error while unmarshaling CliffDurationFromMigrationTime:%w", err)
	}
	// Deserialize `Frequency`:
	if err = decoder.Decode(&obj.Frequency); err != nil {
		return fmt.Errorf("error while unmarshaling Frequency:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	// Deserialize `CliffUnlockAmount`:
	if err = decoder.Decode(&obj.CliffUnlockAmount); err != nil {
		return fmt.Errorf("error while unmarshaling CliffUnlockAmount:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	return nil
}

func (obj *LockedVestingConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockedVestingConfig: %w", err)
	}
	return nil
}

func UnmarshalLockedVestingConfig(buf []byte) (*LockedVestingConfig, error) {
	obj := new(LockedVestingConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LockedVestingParams struct {
	AmountPerPeriod                uint64
	CliffDurationFromMigrationTime uint64
	Frequency                      uint64
	NumberOfPeriod                 uint64
	CliffUnlockAmount              uint64
}

func (obj LockedVestingParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod`:
	if err = encoder.Encode(obj.AmountPerPeriod); err != nil {
		return fmt.Errorf("error while marshaling AmountPerPeriod:%w", err)
	}
	// Serialize `CliffDurationFromMigrationTime`:
	if err = encoder.Encode(obj.CliffDurationFromMigrationTime); err != nil {
		return fmt.Errorf("error while marshaling CliffDurationFromMigrationTime:%w", err)
	}
	// Serialize `Frequency`:
	if err = encoder.Encode(obj.Frequency); err != nil {
		return fmt.Errorf("error while marshaling Frequency:%w", err)
	}
	// Serialize `NumberOfPeriod`:
	if err = encoder.Encode(obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while marshaling NumberOfPeriod:%w", err)
	}
	// Serialize `CliffUnlockAmount`:
	if err = encoder.Encode(obj.CliffUnlockAmount); err != nil {
		return fmt.Errorf("error while marshaling CliffUnlockAmount:%w", err)
	}
	return nil
}

func (obj LockedVestingParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LockedVestingParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LockedVestingParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	if err = decoder.Decode(&obj.AmountPerPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling AmountPerPeriod:%w", err)
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	if err = decoder.Decode(&obj.CliffDurationFromMigrationTime); err != nil {
		return fmt.Errorf("error while unmarshaling CliffDurationFromMigrationTime:%w", err)
	}
	// Deserialize `Frequency`:
	if err = decoder.Decode(&obj.Frequency); err != nil {
		return fmt.Errorf("error while unmarshaling Frequency:%w", err)
	}
	// Deserialize `NumberOfPeriod`:
	if err = decoder.Decode(&obj.NumberOfPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling NumberOfPeriod:%w", err)
	}
	// Deserialize `CliffUnlockAmount`:
	if err = decoder.Decode(&obj.CliffUnlockAmount); err != nil {
		return fmt.Errorf("error while unmarshaling CliffUnlockAmount:%w", err)
	}
	return nil
}

func (obj *LockedVestingParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LockedVestingParams: %w", err)
	}
	return nil
}

func UnmarshalLockedVestingParams(buf []byte) (*LockedVestingParams, error) {
	obj := new(LockedVestingParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MigratedPoolFee struct {
	CollectFeeMode uint8
	DynamicFee     uint8
	PoolFeeBps     uint16
}

func (obj MigratedPoolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollectFeeMode`:
	if err = encoder.Encode(obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while marshaling CollectFeeMode:%w", err)
	}
	// Serialize `DynamicFee`:
	if err = encoder.Encode(obj.DynamicFee); err != nil {
		return fmt.Errorf("error while marshaling DynamicFee:%w", err)
	}
	// Serialize `PoolFeeBps`:
	if err = encoder.Encode(obj.PoolFeeBps); err != nil {
		return fmt.Errorf("error while marshaling PoolFeeBps:%w", err)
	}
	return nil
}

func (obj MigratedPoolFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigratedPoolFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigratedPoolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollectFeeMode`:
	if err = decoder.Decode(&obj.CollectFeeMode); err != nil {
		return fmt.Errorf("error while unmarshaling CollectFeeMode:%w", err)
	}
	// Deserialize `DynamicFee`:
	if err = decoder.Decode(&obj.DynamicFee); err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
	}
	// Deserialize `PoolFeeBps`:
	if err = decoder.Decode(&obj.PoolFeeBps); err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeeBps:%w", err)
	}
	return nil
}

func (obj *MigratedPoolFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigratedPoolFee: %w", err)
	}
	return nil
}

func UnmarshalMigratedPoolFee(buf []byte) (*MigratedPoolFee, error) {
	obj := new(MigratedPoolFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MigrationFee struct {
	FeePercentage        uint8
	CreatorFeePercentage uint8
}

func (obj MigrationFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeePercentage`:
	if err = encoder.Encode(obj.FeePercentage); err != nil {
		return fmt.Errorf("error while marshaling FeePercentage:%w", err)
	}
	// Serialize `CreatorFeePercentage`:
	if err = encoder.Encode(obj.CreatorFeePercentage); err != nil {
		return fmt.Errorf("error while marshaling CreatorFeePercentage:%w", err)
	}
	return nil
}

func (obj MigrationFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigrationFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigrationFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeePercentage`:
	if err = decoder.Decode(&obj.FeePercentage); err != nil {
		return fmt.Errorf("error while unmarshaling FeePercentage:%w", err)
	}
	// Deserialize `CreatorFeePercentage`:
	if err = decoder.Decode(&obj.CreatorFeePercentage); err != nil {
		return fmt.Errorf("error while unmarshaling CreatorFeePercentage:%w", err)
	}
	return nil
}

func (obj *MigrationFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigrationFee: %w", err)
	}
	return nil
}

func UnmarshalMigrationFee(buf []byte) (*MigrationFee, error) {
	obj := new(MigrationFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	if err = encoder.Encode(obj.BaseFee); err != nil {
		return fmt.Errorf("error while marshaling BaseFee:%w", err)
	}
	// Serialize `DynamicFee` (optional):
	{
		if obj.DynamicFee == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee optionality: %w", err)
			}
			if err = encoder.Encode(obj.DynamicFee); err != nil {
				return fmt.Errorf("error while marshaling DynamicFee: %w", err)
			}
		}
	}
	return nil
}

func (obj PoolFeeParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeeParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	if err = decoder.Decode(&obj.BaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFee:%w", err)
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.DynamicFee); err != nil {
				return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeeParameters: %w", err)
	}
	return nil
}

func UnmarshalPoolFeeParameters(buf []byte) (*PoolFeeParameters, error) {
	obj := new(PoolFeeParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Information regarding fee charges
type PoolFees struct {
	TradeFeeNumerator           uint64
	TradeFeeDenominator         uint64
	ProtocolTradeFeeNumerator   uint64
	ProtocolTradeFeeDenominator uint64
}

func (obj PoolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator`:
	if err = encoder.Encode(obj.TradeFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling TradeFeeNumerator:%w", err)
	}
	// Serialize `TradeFeeDenominator`:
	if err = encoder.Encode(obj.TradeFeeDenominator); err != nil {
		return fmt.Errorf("error while marshaling TradeFeeDenominator:%w", err)
	}
	// Serialize `ProtocolTradeFeeNumerator`:
	if err = encoder.Encode(obj.ProtocolTradeFeeNumerator); err != nil {
		return fmt.Errorf("error while marshaling ProtocolTradeFeeNumerator:%w", err)
	}
	// Serialize `ProtocolTradeFeeDenominator`:
	if err = encoder.Encode(obj.ProtocolTradeFeeDenominator); err != nil {
		return fmt.Errorf("error while marshaling ProtocolTradeFeeDenominator:%w", err)
	}
	return nil
}

func (obj PoolFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	if err = decoder.Decode(&obj.TradeFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling TradeFeeNumerator:%w", err)
	}
	// Deserialize `TradeFeeDenominator`:
	if err = decoder.Decode(&obj.TradeFeeDenominator); err != nil {
		return fmt.Errorf("error while unmarshaling TradeFeeDenominator:%w", err)
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	if err = decoder.Decode(&obj.ProtocolTradeFeeNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolTradeFeeNumerator:%w", err)
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	if err = decoder.Decode(&obj.ProtocolTradeFeeDenominator); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolTradeFeeDenominator:%w", err)
	}
	return nil
}

func (obj *PoolFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFees: %w", err)
	}
	return nil
}

func UnmarshalPoolFees(buf []byte) (*PoolFees, error) {
	obj := new(PoolFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolFeesConfig struct {
	BaseFee            BaseFeeConfig
	DynamicFee         DynamicFeeConfig
	Padding0           [5]uint64
	Padding1           [6]uint8
	ProtocolFeePercent uint8
	ReferralFeePercent uint8
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFee`:
	if err = encoder.Encode(obj.BaseFee); err != nil {
		return fmt.Errorf("error while marshaling BaseFee:%w", err)
	}
	// Serialize `DynamicFee`:
	if err = encoder.Encode(obj.DynamicFee); err != nil {
		return fmt.Errorf("error while marshaling DynamicFee:%w", err)
	}
	// Serialize `Padding0`:
	if err = encoder.Encode(obj.Padding0); err != nil {
		return fmt.Errorf("error while marshaling Padding0:%w", err)
	}
	// Serialize `Padding1`:
	if err = encoder.Encode(obj.Padding1); err != nil {
		return fmt.Errorf("error while marshaling Padding1:%w", err)
	}
	// Serialize `ProtocolFeePercent`:
	if err = encoder.Encode(obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFeePercent:%w", err)
	}
	// Serialize `ReferralFeePercent`:
	if err = encoder.Encode(obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while marshaling ReferralFeePercent:%w", err)
	}
	return nil
}

func (obj PoolFeesConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolFeesConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	if err = decoder.Decode(&obj.BaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling BaseFee:%w", err)
	}
	// Deserialize `DynamicFee`:
	if err = decoder.Decode(&obj.DynamicFee); err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFee:%w", err)
	}
	// Deserialize `Padding0`:
	if err = decoder.Decode(&obj.Padding0); err != nil {
		return fmt.Errorf("error while unmarshaling Padding0:%w", err)
	}
	// Deserialize `Padding1`:
	if err = decoder.Decode(&obj.Padding1); err != nil {
		return fmt.Errorf("error while unmarshaling Padding1:%w", err)
	}
	// Deserialize `ProtocolFeePercent`:
	if err = decoder.Decode(&obj.ProtocolFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFeePercent:%w", err)
	}
	// Deserialize `ReferralFeePercent`:
	if err = decoder.Decode(&obj.ReferralFeePercent); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFeePercent:%w", err)
	}
	return nil
}

func (obj *PoolFeesConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolFeesConfig: %w", err)
	}
	return nil
}

func UnmarshalPoolFeesConfig(buf []byte) (*PoolFeesConfig, error) {
	obj := new(PoolFeesConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolMetrics struct {
	TotalProtocolBaseFee  uint64
	TotalProtocolQuoteFee uint64
	TotalTradingBaseFee   uint64
	TotalTradingQuoteFee  uint64
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalProtocolBaseFee`:
	if err = encoder.Encode(obj.TotalProtocolBaseFee); err != nil {
		return fmt.Errorf("error while marshaling TotalProtocolBaseFee:%w", err)
	}
	// Serialize `TotalProtocolQuoteFee`:
	if err = encoder.Encode(obj.TotalProtocolQuoteFee); err != nil {
		return fmt.Errorf("error while marshaling TotalProtocolQuoteFee:%w", err)
	}
	// Serialize `TotalTradingBaseFee`:
	if err = encoder.Encode(obj.TotalTradingBaseFee); err != nil {
		return fmt.Errorf("error while marshaling TotalTradingBaseFee:%w", err)
	}
	// Serialize `TotalTradingQuoteFee`:
	if err = encoder.Encode(obj.TotalTradingQuoteFee); err != nil {
		return fmt.Errorf("error while marshaling TotalTradingQuoteFee:%w", err)
	}
	return nil
}

func (obj PoolMetrics) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolMetrics: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalProtocolBaseFee`:
	if err = decoder.Decode(&obj.TotalProtocolBaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalProtocolBaseFee:%w", err)
	}
	// Deserialize `TotalProtocolQuoteFee`:
	if err = decoder.Decode(&obj.TotalProtocolQuoteFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalProtocolQuoteFee:%w", err)
	}
	// Deserialize `TotalTradingBaseFee`:
	if err = decoder.Decode(&obj.TotalTradingBaseFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalTradingBaseFee:%w", err)
	}
	// Deserialize `TotalTradingQuoteFee`:
	if err = decoder.Decode(&obj.TotalTradingQuoteFee); err != nil {
		return fmt.Errorf("error while unmarshaling TotalTradingQuoteFee:%w", err)
	}
	return nil
}

func (obj *PoolMetrics) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolMetrics: %w", err)
	}
	return nil
}

func UnmarshalPoolMetrics(buf []byte) (*PoolMetrics, error) {
	obj := new(PoolMetrics)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapParameters struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling AmountIn:%w", err)
	}
	// Serialize `MinimumAmountOut`:
	if err = encoder.Encode(obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while marshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj SwapParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `MinimumAmountOut`:
	if err = decoder.Decode(&obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj *SwapParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapParameters: %w", err)
	}
	return nil
}

func UnmarshalSwapParameters(buf []byte) (*SwapParameters, error) {
	obj := new(SwapParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapParameters2 struct {
	// When it's exact in, partial fill, this will be amount_in. When it's exact out, this will be amount_out
	Amount0 uint64

	// When it's exact in, partial fill, this will be minimum_amount_out. When it's exact out, this will be maximum_amount_in
	Amount1 uint64

	// Swap mode, refer [SwapMode]
	SwapMode uint8
}

func (obj SwapParameters2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount0`:
	if err = encoder.Encode(obj.Amount0); err != nil {
		return fmt.Errorf("error while marshaling Amount0:%w", err)
	}
	// Serialize `Amount1`:
	if err = encoder.Encode(obj.Amount1); err != nil {
		return fmt.Errorf("error while marshaling Amount1:%w", err)
	}
	// Serialize `SwapMode`:
	if err = encoder.Encode(obj.SwapMode); err != nil {
		return fmt.Errorf("error while marshaling SwapMode:%w", err)
	}
	return nil
}

func (obj SwapParameters2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapParameters2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapParameters2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount0`:
	if err = decoder.Decode(&obj.Amount0); err != nil {
		return fmt.Errorf("error while unmarshaling Amount0:%w", err)
	}
	// Deserialize `Amount1`:
	if err = decoder.Decode(&obj.Amount1); err != nil {
		return fmt.Errorf("error while unmarshaling Amount1:%w", err)
	}
	// Deserialize `SwapMode`:
	if err = decoder.Decode(&obj.SwapMode); err != nil {
		return fmt.Errorf("error while unmarshaling SwapMode:%w", err)
	}
	return nil
}

func (obj *SwapParameters2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapParameters2: %w", err)
	}
	return nil
}

func UnmarshalSwapParameters2(buf []byte) (*SwapParameters2, error) {
	obj := new(SwapParameters2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Encodes all results of swapping
type SwapResult struct {
	ActualInputAmount uint64
	OutputAmount      uint64
	NextSqrtPrice     binary.Uint128
	TradingFee        uint64
	ProtocolFee       uint64
	ReferralFee       uint64
}

func (obj SwapResult) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActualInputAmount`:
	if err = encoder.Encode(obj.ActualInputAmount); err != nil {
		return fmt.Errorf("error while marshaling ActualInputAmount:%w", err)
	}
	// Serialize `OutputAmount`:
	if err = encoder.Encode(obj.OutputAmount); err != nil {
		return fmt.Errorf("error while marshaling OutputAmount:%w", err)
	}
	// Serialize `NextSqrtPrice`:
	if err = encoder.Encode(obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling NextSqrtPrice:%w", err)
	}
	// Serialize `TradingFee`:
	if err = encoder.Encode(obj.TradingFee); err != nil {
		return fmt.Errorf("error while marshaling TradingFee:%w", err)
	}
	// Serialize `ProtocolFee`:
	if err = encoder.Encode(obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFee:%w", err)
	}
	// Serialize `ReferralFee`:
	if err = encoder.Encode(obj.ReferralFee); err != nil {
		return fmt.Errorf("error while marshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj SwapResult) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapResult: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActualInputAmount`:
	if err = decoder.Decode(&obj.ActualInputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling ActualInputAmount:%w", err)
	}
	// Deserialize `OutputAmount`:
	if err = decoder.Decode(&obj.OutputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling OutputAmount:%w", err)
	}
	// Deserialize `NextSqrtPrice`:
	if err = decoder.Decode(&obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling NextSqrtPrice:%w", err)
	}
	// Deserialize `TradingFee`:
	if err = decoder.Decode(&obj.TradingFee); err != nil {
		return fmt.Errorf("error while unmarshaling TradingFee:%w", err)
	}
	// Deserialize `ProtocolFee`:
	if err = decoder.Decode(&obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFee:%w", err)
	}
	// Deserialize `ReferralFee`:
	if err = decoder.Decode(&obj.ReferralFee); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj *SwapResult) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapResult: %w", err)
	}
	return nil
}

func UnmarshalSwapResult(buf []byte) (*SwapResult, error) {
	obj := new(SwapResult)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapResult2 struct {
	IncludedFeeInputAmount uint64
	ExcludedFeeInputAmount uint64
	AmountLeft             uint64
	OutputAmount           uint64
	NextSqrtPrice          binary.Uint128
	TradingFee             uint64
	ProtocolFee            uint64
	ReferralFee            uint64
}

func (obj SwapResult2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `IncludedFeeInputAmount`:
	if err = encoder.Encode(obj.IncludedFeeInputAmount); err != nil {
		return fmt.Errorf("error while marshaling IncludedFeeInputAmount:%w", err)
	}
	// Serialize `ExcludedFeeInputAmount`:
	if err = encoder.Encode(obj.ExcludedFeeInputAmount); err != nil {
		return fmt.Errorf("error while marshaling ExcludedFeeInputAmount:%w", err)
	}
	// Serialize `AmountLeft`:
	if err = encoder.Encode(obj.AmountLeft); err != nil {
		return fmt.Errorf("error while marshaling AmountLeft:%w", err)
	}
	// Serialize `OutputAmount`:
	if err = encoder.Encode(obj.OutputAmount); err != nil {
		return fmt.Errorf("error while marshaling OutputAmount:%w", err)
	}
	// Serialize `NextSqrtPrice`:
	if err = encoder.Encode(obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling NextSqrtPrice:%w", err)
	}
	// Serialize `TradingFee`:
	if err = encoder.Encode(obj.TradingFee); err != nil {
		return fmt.Errorf("error while marshaling TradingFee:%w", err)
	}
	// Serialize `ProtocolFee`:
	if err = encoder.Encode(obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while marshaling ProtocolFee:%w", err)
	}
	// Serialize `ReferralFee`:
	if err = encoder.Encode(obj.ReferralFee); err != nil {
		return fmt.Errorf("error while marshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj SwapResult2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapResult2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapResult2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `IncludedFeeInputAmount`:
	if err = decoder.Decode(&obj.IncludedFeeInputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling IncludedFeeInputAmount:%w", err)
	}
	// Deserialize `ExcludedFeeInputAmount`:
	if err = decoder.Decode(&obj.ExcludedFeeInputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling ExcludedFeeInputAmount:%w", err)
	}
	// Deserialize `AmountLeft`:
	if err = decoder.Decode(&obj.AmountLeft); err != nil {
		return fmt.Errorf("error while unmarshaling AmountLeft:%w", err)
	}
	// Deserialize `OutputAmount`:
	if err = decoder.Decode(&obj.OutputAmount); err != nil {
		return fmt.Errorf("error while unmarshaling OutputAmount:%w", err)
	}
	// Deserialize `NextSqrtPrice`:
	if err = decoder.Decode(&obj.NextSqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling NextSqrtPrice:%w", err)
	}
	// Deserialize `TradingFee`:
	if err = decoder.Decode(&obj.TradingFee); err != nil {
		return fmt.Errorf("error while unmarshaling TradingFee:%w", err)
	}
	// Deserialize `ProtocolFee`:
	if err = decoder.Decode(&obj.ProtocolFee); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFee:%w", err)
	}
	// Deserialize `ReferralFee`:
	if err = decoder.Decode(&obj.ReferralFee); err != nil {
		return fmt.Errorf("error while unmarshaling ReferralFee:%w", err)
	}
	return nil
}

func (obj *SwapResult2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapResult2: %w", err)
	}
	return nil
}

func UnmarshalSwapResult2(buf []byte) (*SwapResult2, error) {
	obj := new(SwapResult2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TokenSupplyParams struct {
	// pre migration token supply
	PreMigrationTokenSupply uint64

	// post migration token supply
	// becase DBC allow user to swap over the migration quote threshold, so in extreme case user may swap more than allowed buffer on curve
	// that result the total supply in post migration may be increased a bit (between pre_migration_token_supply and post_migration_token_supply)
	PostMigrationTokenSupply uint64
}

func (obj TokenSupplyParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PreMigrationTokenSupply`:
	if err = encoder.Encode(obj.PreMigrationTokenSupply); err != nil {
		return fmt.Errorf("error while marshaling PreMigrationTokenSupply:%w", err)
	}
	// Serialize `PostMigrationTokenSupply`:
	if err = encoder.Encode(obj.PostMigrationTokenSupply); err != nil {
		return fmt.Errorf("error while marshaling PostMigrationTokenSupply:%w", err)
	}
	return nil
}

func (obj TokenSupplyParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenSupplyParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenSupplyParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PreMigrationTokenSupply`:
	if err = decoder.Decode(&obj.PreMigrationTokenSupply); err != nil {
		return fmt.Errorf("error while unmarshaling PreMigrationTokenSupply:%w", err)
	}
	// Deserialize `PostMigrationTokenSupply`:
	if err = decoder.Decode(&obj.PostMigrationTokenSupply); err != nil {
		return fmt.Errorf("error while unmarshaling PostMigrationTokenSupply:%w", err)
	}
	return nil
}

func (obj *TokenSupplyParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenSupplyParams: %w", err)
	}
	return nil
}

func UnmarshalTokenSupplyParams(buf []byte) (*TokenSupplyParams, error) {
	obj := new(TokenSupplyParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VolatilityTracker struct {
	LastUpdateTimestamp   uint64
	Padding               [8]uint8
	SqrtPriceReference    binary.Uint128
	VolatilityAccumulator binary.Uint128
	VolatilityReference   binary.Uint128
}

func (obj VolatilityTracker) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastUpdateTimestamp`:
	if err = encoder.Encode(obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while marshaling LastUpdateTimestamp:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	// Serialize `SqrtPriceReference`:
	if err = encoder.Encode(obj.SqrtPriceReference); err != nil {
		return fmt.Errorf("error while marshaling SqrtPriceReference:%w", err)
	}
	// Serialize `VolatilityAccumulator`:
	if err = encoder.Encode(obj.VolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling VolatilityAccumulator:%w", err)
	}
	// Serialize `VolatilityReference`:
	if err = encoder.Encode(obj.VolatilityReference); err != nil {
		return fmt.Errorf("error while marshaling VolatilityReference:%w", err)
	}
	return nil
}

func (obj VolatilityTracker) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VolatilityTracker: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VolatilityTracker) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastUpdateTimestamp`:
	if err = decoder.Decode(&obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdateTimestamp:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	// Deserialize `SqrtPriceReference`:
	if err = decoder.Decode(&obj.SqrtPriceReference); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPriceReference:%w", err)
	}
	// Deserialize `VolatilityAccumulator`:
	if err = decoder.Decode(&obj.VolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityAccumulator:%w", err)
	}
	// Deserialize `VolatilityReference`:
	if err = decoder.Decode(&obj.VolatilityReference); err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityReference:%w", err)
	}
	return nil
}

func (obj *VolatilityTracker) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VolatilityTracker: %w", err)
	}
	return nil
}

func UnmarshalVolatilityTracker(buf []byte) (*VolatilityTracker, error) {
	obj := new(VolatilityTracker)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
