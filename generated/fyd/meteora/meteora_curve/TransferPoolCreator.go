// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "transfer_pool_creator" instruction.
type TransferPoolCreator struct {
	// Params:
	// Accounts:
	// [0] = [writable] virtual_pool
	VirtualPool solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [3] = [] new_creator
	NewCreator solanago.PublicKey `bin:"-"`
	// [4] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [5] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj TransferPoolCreator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *TransferPoolCreator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *TransferPoolCreator) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.VirtualPool = accounts[0]
	obj.Config = accounts[1]
	obj.Creator = accounts[2]
	obj.NewCreator = accounts[3]
	obj.EventAuthority = accounts[4]
	obj.Program = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *TransferPoolCreator) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*TransferPoolCreator) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_TransferPoolCreator)
}

func (*TransferPoolCreator) NewInstance() programparser.Instruction {
	return new(TransferPoolCreator)
}

// Builds a "transfer_pool_creator" instruction.
func NewTransferPoolCreatorInstruction(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	creator solanago.PublicKey,
	newCreator solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_TransferPoolCreator[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] virtual_pool
		metas_[0] = solanago.NewAccountMeta(virtualPool, true, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [,signer] creator
		metas_[2] = solanago.NewAccountMeta(creator, false, true)
		// [3] = [] new_creator
		metas_[3] = solanago.NewAccountMeta(newCreator, false, false)
		// [4] = [] event_authority
		metas_[4] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [5] = [] program
		metas_[5] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildTransferPoolCreator" instruction.
func BuildTransferPoolCreator(
	virtualPool solanago.PublicKey,
	config solanago.PublicKey,
	creator solanago.PublicKey,
	newCreator solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewTransferPoolCreatorInstruction(
		virtualPool,
		config,
		creator,
		newCreator,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
