// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_partner_metadata" instruction.

// PARTNER FUNCTIONS ////
type CreatePartnerMetadata struct {
	// Params:
	Metadata CreatePartnerMetadataParameters
	// Accounts:
	// [0] = [writable] partner_metadata
	PartnerMetadata solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [2] = [,signer] fee_claimer
	FeeClaimer solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [4] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [5] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreatePartnerMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `metadataParam`:
	if err = encoder.Encode(obj.Metadata); err != nil {
		return fmt.Errorf("error while marshaling metadataParam:%w", err)
	}
	return nil
}

func (obj *CreatePartnerMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Metadata`:
	if err = decoder.Decode(&obj.Metadata); err != nil {
		return fmt.Errorf("error while unmarshaling Metadata:%w", err)
	}
	return nil
}

func (obj *CreatePartnerMetadata) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.PartnerMetadata = accounts[0]
	obj.Payer = accounts[1]
	obj.FeeClaimer = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.EventAuthority = accounts[4]
	obj.Program = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreatePartnerMetadata) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreatePartnerMetadata) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreatePartnerMetadata)
}

func (*CreatePartnerMetadata) NewInstance() programparser.Instruction {
	return new(CreatePartnerMetadata)
}

func (obj *CreatePartnerMetadata) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 6 {
		return nil
	}
	return obj.PublicKeySlice[6:]
}

// Builds a "create_partner_metadata" instruction.
// PARTNER FUNCTIONS ////
func NewCreatePartnerMetadataInstruction(
	// Params:
	metadataParam CreatePartnerMetadataParameters,

	// Accounts:
	partnerMetadata solanago.PublicKey,
	payer solanago.PublicKey,
	feeClaimer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreatePartnerMetadata[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `metadataParam`:
		if err = enc__.Encode(metadataParam); err != nil {
			return nil, fmt.Errorf("error while marshaling metadataParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] partner_metadata
		// Partner metadata
		metas_[0] = solanago.NewAccountMeta(partnerMetadata, true, false)
		// [1] = [writable,signer] payer
		// Payer of the partner metadata.
		metas_[1] = solanago.NewAccountMeta(payer, true, true)
		// [2] = [,signer] fee_claimer
		// Fee claimer for partner
		metas_[2] = solanago.NewAccountMeta(feeClaimer, false, true)
		// [3] = [] system_program
		// System program.
		metas_[3] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [4] = [] event_authority
		metas_[4] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [5] = [] program
		metas_[5] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreatePartnerMetadata" instruction.
// PARTNER FUNCTIONS ////
func BuildCreatePartnerMetadata(
	// Params:
	metadataParam CreatePartnerMetadataParameters,

	// Accounts:
	partnerMetadata solanago.PublicKey,
	payer solanago.PublicKey,
	feeClaimer solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreatePartnerMetadataInstruction(
		metadataParam,
		partnerMetadata,
		payer,
		feeClaimer,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
