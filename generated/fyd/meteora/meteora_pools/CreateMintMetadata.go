// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_mint_metadata" instruction.

// Create mint metadata account for old pools
type CreateMintMetadata struct {
	// Params:
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [2] = [] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [3] = [writable] mint_metadata
	MintMetadata solanago.PublicKey `bin:"-"`
	// [4] = [] metadata_program
	MetadataProgram solanago.PublicKey `bin:"-"`
	// [5] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateMintMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateMintMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateMintMetadata) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.LpMint = accounts[1]
	obj.AVaultLp = accounts[2]
	obj.MintMetadata = accounts[3]
	obj.MetadataProgram = accounts[4]
	obj.SystemProgram = accounts[5]
	obj.Payer = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateMintMetadata) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateMintMetadata) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateMintMetadata)
}

func (*CreateMintMetadata) NewInstance() programparser.Instruction {
	return new(CreateMintMetadata)
}

func (obj *CreateMintMetadata) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[7:]
}

// Builds a "create_mint_metadata" instruction.
// Create mint metadata account for old pools
func NewCreateMintMetadataInstruction(
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	payer solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateMintMetadata[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		// Pool account
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [] lp_mint
		// LP mint account of the pool
		metas_[1] = solanago.NewAccountMeta(lpMint, false, false)
		// [2] = [] a_vault_lp
		// Vault A LP account of the pool
		metas_[2] = solanago.NewAccountMeta(aVaultLp, false, false)
		// [3] = [writable] mint_metadata
		metas_[3] = solanago.NewAccountMeta(mintMetadata, true, false)
		// [4] = [] metadata_program
		metas_[4] = solanago.NewAccountMeta(metadataProgram, false, false)
		// [5] = [] system_program
		// System program.
		metas_[5] = solanago.NewAccountMeta(systemProgram, false, false)
		// [6] = [writable,signer] payer
		// Payer
		metas_[6] = solanago.NewAccountMeta(payer, true, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateMintMetadata" instruction.
// Create mint metadata account for old pools
func BuildCreateMintMetadata(
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	payer solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateMintMetadataInstruction(
		pool,
		lpMint,
		aVaultLp,
		mintMetadata,
		metadataProgram,
		systemProgram,
		payer,
		remaining__...,
	)
	return instruction_
}
