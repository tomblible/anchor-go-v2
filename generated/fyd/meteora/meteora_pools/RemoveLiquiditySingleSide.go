// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "remove_liquidity_single_side" instruction.

// Withdraw only single token from the pool. Only supported by pool with stable swap curve.
type RemoveLiquiditySingleSide struct {
	// Params:
	PoolTokenAmount  uint64
	MinimumOutAmount uint64
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] user_pool_lp
	UserPoolLp solanago.PublicKey `bin:"-"`
	// [3] = [writable] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [4] = [writable] b_vault_lp
	BVaultLp solanago.PublicKey `bin:"-"`
	// [5] = [writable] a_vault
	AVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] b_vault
	BVault solanago.PublicKey `bin:"-"`
	// [7] = [writable] a_vault_lp_mint
	AVaultLpMint solanago.PublicKey `bin:"-"`
	// [8] = [writable] b_vault_lp_mint
	BVaultLpMint solanago.PublicKey `bin:"-"`
	// [9] = [writable] a_token_vault
	ATokenVault solanago.PublicKey `bin:"-"`
	// [10] = [writable] b_token_vault
	BTokenVault solanago.PublicKey `bin:"-"`
	// [11] = [writable] user_destination_token
	UserDestinationToken solanago.PublicKey `bin:"-"`
	// [12] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [13] = [] vault_program
	VaultProgram solanago.PublicKey `bin:"-"`
	// [14] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj RemoveLiquiditySingleSide) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `poolTokenAmountParam`:
	if err = encoder.Encode(obj.PoolTokenAmount); err != nil {
		return fmt.Errorf("error while marshaling poolTokenAmountParam:%w", err)
	}
	// Serialize `minimumOutAmountParam`:
	if err = encoder.Encode(obj.MinimumOutAmount); err != nil {
		return fmt.Errorf("error while marshaling minimumOutAmountParam:%w", err)
	}
	return nil
}

func (obj *RemoveLiquiditySingleSide) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolTokenAmount`:
	if err = decoder.Decode(&obj.PoolTokenAmount); err != nil {
		return fmt.Errorf("error while unmarshaling PoolTokenAmount:%w", err)
	}
	// Deserialize `MinimumOutAmount`:
	if err = decoder.Decode(&obj.MinimumOutAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumOutAmount:%w", err)
	}
	return nil
}

func (obj *RemoveLiquiditySingleSide) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.LpMint = accounts[1]
	obj.UserPoolLp = accounts[2]
	obj.AVaultLp = accounts[3]
	obj.BVaultLp = accounts[4]
	obj.AVault = accounts[5]
	obj.BVault = accounts[6]
	obj.AVaultLpMint = accounts[7]
	obj.BVaultLpMint = accounts[8]
	obj.ATokenVault = accounts[9]
	obj.BTokenVault = accounts[10]
	obj.UserDestinationToken = accounts[11]
	obj.User = accounts[12]
	obj.VaultProgram = accounts[13]
	obj.TokenProgram = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *RemoveLiquiditySingleSide) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*RemoveLiquiditySingleSide) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_RemoveLiquiditySingleSide)
}

func (*RemoveLiquiditySingleSide) NewInstance() programparser.Instruction {
	return new(RemoveLiquiditySingleSide)
}

func (inst *RemoveLiquiditySingleSide) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[15:]
}

// Builds a "remove_liquidity_single_side" instruction.
// Withdraw only single token from the pool. Only supported by pool with stable swap curve.
func NewRemoveLiquiditySingleSideInstruction(
	// Params:
	poolTokenAmountParam uint64,
	minimumOutAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	userPoolLp solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	userDestinationToken solanago.PublicKey,
	user solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_RemoveLiquiditySingleSide[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `poolTokenAmountParam`:
		if err = enc__.Encode(poolTokenAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling poolTokenAmountParam:%w", err)
		}
		// Serialize `minimumOutAmountParam`:
		if err = enc__.Encode(minimumOutAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minimumOutAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [writable] lp_mint
		// LP token mint of the pool
		metas_[1] = solanago.NewAccountMeta(lpMint, true, false)
		// [2] = [writable] user_pool_lp
		// User pool lp token account. LP will be burned from this account upon success liquidity removal.
		metas_[2] = solanago.NewAccountMeta(userPoolLp, true, false)
		// [3] = [writable] a_vault_lp
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[3] = solanago.NewAccountMeta(aVaultLp, true, false)
		// [4] = [writable] b_vault_lp
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[4] = solanago.NewAccountMeta(bVaultLp, true, false)
		// [5] = [writable] a_vault
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		metas_[5] = solanago.NewAccountMeta(aVault, true, false)
		// [6] = [writable] b_vault
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		metas_[6] = solanago.NewAccountMeta(bVault, true, false)
		// [7] = [writable] a_vault_lp_mint
		// LP token mint of vault A
		metas_[7] = solanago.NewAccountMeta(aVaultLpMint, true, false)
		// [8] = [writable] b_vault_lp_mint
		// LP token mint of vault B
		metas_[8] = solanago.NewAccountMeta(bVaultLpMint, true, false)
		// [9] = [writable] a_token_vault
		// Token vault account of vault A
		metas_[9] = solanago.NewAccountMeta(aTokenVault, true, false)
		// [10] = [writable] b_token_vault
		// Token vault account of vault B
		metas_[10] = solanago.NewAccountMeta(bTokenVault, true, false)
		// [11] = [writable] user_destination_token
		// User token account to receive token upon success liquidity removal.
		metas_[11] = solanago.NewAccountMeta(userDestinationToken, true, false)
		// [12] = [,signer] user
		// User account. Must be owner of the user_pool_lp account.
		metas_[12] = solanago.NewAccountMeta(user, false, true)
		// [13] = [] vault_program
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		metas_[13] = solanago.NewAccountMeta(vaultProgram, false, false)
		// [14] = [] token_program
		// Token program.
		metas_[14] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildRemoveLiquiditySingleSide" instruction.
// Withdraw only single token from the pool. Only supported by pool with stable swap curve.
func BuildRemoveLiquiditySingleSide(
	// Params:
	poolTokenAmountParam uint64,
	minimumOutAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	userPoolLp solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	userDestinationToken solanago.PublicKey,
	user solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewRemoveLiquiditySingleSideInstruction(
		poolTokenAmountParam,
		minimumOutAmountParam,
		pool,
		lpMint,
		userPoolLp,
		aVaultLp,
		bVaultLp,
		aVault,
		bVault,
		aVaultLpMint,
		bVaultLpMint,
		aTokenVault,
		bTokenVault,
		userDestinationToken,
		user,
		vaultProgram,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
