// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_protocol_fees" instruction.

// Withdraw protocol fee
type WithdrawProtocolFees struct {
	// Params:
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [2] = [writable] protocol_token_a_fee
	ProtocolTokenAFee solanago.PublicKey `bin:"-"`
	// [3] = [writable] protocol_token_b_fee
	ProtocolTokenBFee solanago.PublicKey `bin:"-"`
	// [4] = [writable] treasury_token_a
	TreasuryTokenA solanago.PublicKey `bin:"-"`
	// [5] = [writable] treasury_token_b
	TreasuryTokenB solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawProtocolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *WithdrawProtocolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *WithdrawProtocolFees) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.AVaultLp = accounts[1]
	obj.ProtocolTokenAFee = accounts[2]
	obj.ProtocolTokenBFee = accounts[3]
	obj.TreasuryTokenA = accounts[4]
	obj.TreasuryTokenB = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawProtocolFees) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawProtocolFees) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawProtocolFees)
}

func (*WithdrawProtocolFees) NewInstance() programparser.Instruction {
	return new(WithdrawProtocolFees)
}

func (obj *WithdrawProtocolFees) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[7:]
}

// Builds a "withdraw_protocol_fees" instruction.
// Withdraw protocol fee
func NewWithdrawProtocolFeesInstruction(
	pool solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	treasuryTokenA solanago.PublicKey,
	treasuryTokenB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawProtocolFees[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [] a_vault_lp
		metas_[1] = solanago.NewAccountMeta(aVaultLp, false, false)
		// [2] = [writable] protocol_token_a_fee
		metas_[2] = solanago.NewAccountMeta(protocolTokenAFee, true, false)
		// [3] = [writable] protocol_token_b_fee
		metas_[3] = solanago.NewAccountMeta(protocolTokenBFee, true, false)
		// [4] = [writable] treasury_token_a
		metas_[4] = solanago.NewAccountMeta(treasuryTokenA, true, false)
		// [5] = [writable] treasury_token_b
		metas_[5] = solanago.NewAccountMeta(treasuryTokenB, true, false)
		// [6] = [] token_program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawProtocolFees" instruction.
// Withdraw protocol fee
func BuildWithdrawProtocolFees(
	pool solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	treasuryTokenA solanago.PublicKey,
	treasuryTokenB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawProtocolFeesInstruction(
		pool,
		aVaultLp,
		protocolTokenAFee,
		protocolTokenBFee,
		treasuryTokenA,
		treasuryTokenB,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
