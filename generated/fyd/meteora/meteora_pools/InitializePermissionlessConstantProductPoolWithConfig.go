// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_permissionless_constant_product_pool_with_config" instruction.

// Initialize permissionless pool with config
type InitializePermissionlessConstantProductPoolWithConfig struct {
	// Params:
	TokenAAmount uint64
	TokenBAmount uint64
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] config
	Config solanago.PublicKey `bin:"-"`
	// [2] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [3] = [] token_a_mint
	TokenAMint solanago.PublicKey `bin:"-"`
	// [4] = [] token_b_mint
	TokenBMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] a_vault
	AVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] b_vault
	BVault solanago.PublicKey `bin:"-"`
	// [7] = [writable] a_token_vault
	ATokenVault solanago.PublicKey `bin:"-"`
	// [8] = [writable] b_token_vault
	BTokenVault solanago.PublicKey `bin:"-"`
	// [9] = [writable] a_vault_lp_mint
	AVaultLpMint solanago.PublicKey `bin:"-"`
	// [10] = [writable] b_vault_lp_mint
	BVaultLpMint solanago.PublicKey `bin:"-"`
	// [11] = [writable] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [12] = [writable] b_vault_lp
	BVaultLp solanago.PublicKey `bin:"-"`
	// [13] = [writable] payer_token_a
	PayerTokenA solanago.PublicKey `bin:"-"`
	// [14] = [writable] payer_token_b
	PayerTokenB solanago.PublicKey `bin:"-"`
	// [15] = [writable] payer_pool_lp
	PayerPoolLp solanago.PublicKey `bin:"-"`
	// [16] = [writable] protocol_token_a_fee
	ProtocolTokenAFee solanago.PublicKey `bin:"-"`
	// [17] = [writable] protocol_token_b_fee
	ProtocolTokenBFee solanago.PublicKey `bin:"-"`
	// [18] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [19] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [20] = [writable] mint_metadata
	MintMetadata solanago.PublicKey `bin:"-"`
	// [21] = [] metadata_program
	MetadataProgram solanago.PublicKey `bin:"-"`
	// [22] = [] vault_program
	VaultProgram solanago.PublicKey `bin:"-"`
	// [23] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [24] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [25] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializePermissionlessConstantProductPoolWithConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `tokenAAmountParam`:
	if err = encoder.Encode(obj.TokenAAmount); err != nil {
		return fmt.Errorf("error while marshaling tokenAAmountParam:%w", err)
	}
	// Serialize `tokenBAmountParam`:
	if err = encoder.Encode(obj.TokenBAmount); err != nil {
		return fmt.Errorf("error while marshaling tokenBAmountParam:%w", err)
	}
	return nil
}

func (obj *InitializePermissionlessConstantProductPoolWithConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAAmount`:
	if err = decoder.Decode(&obj.TokenAAmount); err != nil {
		return fmt.Errorf("error while unmarshaling TokenAAmount:%w", err)
	}
	// Deserialize `TokenBAmount`:
	if err = decoder.Decode(&obj.TokenBAmount); err != nil {
		return fmt.Errorf("error while unmarshaling TokenBAmount:%w", err)
	}
	return nil
}

func (obj *InitializePermissionlessConstantProductPoolWithConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 26 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 26, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.Config = accounts[1]
	obj.LpMint = accounts[2]
	obj.TokenAMint = accounts[3]
	obj.TokenBMint = accounts[4]
	obj.AVault = accounts[5]
	obj.BVault = accounts[6]
	obj.ATokenVault = accounts[7]
	obj.BTokenVault = accounts[8]
	obj.AVaultLpMint = accounts[9]
	obj.BVaultLpMint = accounts[10]
	obj.AVaultLp = accounts[11]
	obj.BVaultLp = accounts[12]
	obj.PayerTokenA = accounts[13]
	obj.PayerTokenB = accounts[14]
	obj.PayerPoolLp = accounts[15]
	obj.ProtocolTokenAFee = accounts[16]
	obj.ProtocolTokenBFee = accounts[17]
	obj.Payer = accounts[18]
	obj.Rent = accounts[19]
	obj.MintMetadata = accounts[20]
	obj.MetadataProgram = accounts[21]
	obj.VaultProgram = accounts[22]
	obj.TokenProgram = accounts[23]
	obj.AssociatedTokenProgram = accounts[24]
	obj.SystemProgram = accounts[25]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializePermissionlessConstantProductPoolWithConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializePermissionlessConstantProductPoolWithConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializePermissionlessConstantProductPoolWithConfig)
}

func (*InitializePermissionlessConstantProductPoolWithConfig) NewInstance() programparser.Instruction {
	return new(InitializePermissionlessConstantProductPoolWithConfig)
}

func (inst *InitializePermissionlessConstantProductPoolWithConfig) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[26:]
}

// Builds a "initialize_permissionless_constant_product_pool_with_config" instruction.
// Initialize permissionless pool with config
func NewInitializePermissionlessConstantProductPoolWithConfigInstruction(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	config solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	payerTokenA solanago.PublicKey,
	payerTokenB solanago.PublicKey,
	payerPoolLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	payer solanago.PublicKey,
	rent solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 26, 26+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializePermissionlessConstantProductPoolWithConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `tokenAAmountParam`:
		if err = enc__.Encode(tokenAAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenAAmountParam:%w", err)
		}
		// Serialize `tokenBAmountParam`:
		if err = enc__.Encode(tokenBAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenBAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account (PDA address)
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [] config
		metas_[1] = solanago.NewAccountMeta(config, false, false)
		// [2] = [writable] lp_mint
		// LP token mint of the pool
		metas_[2] = solanago.NewAccountMeta(lpMint, true, false)
		// [3] = [] token_a_mint
		// Token A mint of the pool. Eg: USDT
		metas_[3] = solanago.NewAccountMeta(tokenAMint, false, false)
		// [4] = [] token_b_mint
		// Token B mint of the pool. Eg: USDC
		metas_[4] = solanago.NewAccountMeta(tokenBMint, false, false)
		// [5] = [writable] a_vault
		// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
		metas_[5] = solanago.NewAccountMeta(aVault, true, false)
		// [6] = [writable] b_vault
		// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
		metas_[6] = solanago.NewAccountMeta(bVault, true, false)
		// [7] = [writable] a_token_vault
		// Token vault account of vault A
		metas_[7] = solanago.NewAccountMeta(aTokenVault, true, false)
		// [8] = [writable] b_token_vault
		// Token vault account of vault B
		metas_[8] = solanago.NewAccountMeta(bTokenVault, true, false)
		// [9] = [writable] a_vault_lp_mint
		// LP token mint of vault A
		metas_[9] = solanago.NewAccountMeta(aVaultLpMint, true, false)
		// [10] = [writable] b_vault_lp_mint
		// LP token mint of vault B
		metas_[10] = solanago.NewAccountMeta(bVaultLpMint, true, false)
		// [11] = [writable] a_vault_lp
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[11] = solanago.NewAccountMeta(aVaultLp, true, false)
		// [12] = [writable] b_vault_lp
		// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
		metas_[12] = solanago.NewAccountMeta(bVaultLp, true, false)
		// [13] = [writable] payer_token_a
		// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
		metas_[13] = solanago.NewAccountMeta(payerTokenA, true, false)
		// [14] = [writable] payer_token_b
		// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
		metas_[14] = solanago.NewAccountMeta(payerTokenB, true, false)
		// [15] = [writable] payer_pool_lp
		metas_[15] = solanago.NewAccountMeta(payerPoolLp, true, false)
		// [16] = [writable] protocol_token_a_fee
		// Protocol fee token account for token A. Used to receive trading fee.
		metas_[16] = solanago.NewAccountMeta(protocolTokenAFee, true, false)
		// [17] = [writable] protocol_token_b_fee
		// Protocol fee token account for token B. Used to receive trading fee.
		metas_[17] = solanago.NewAccountMeta(protocolTokenBFee, true, false)
		// [18] = [writable,signer] payer
		// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
		metas_[18] = solanago.NewAccountMeta(payer, true, true)
		// [19] = [] rent
		// Rent account.
		metas_[19] = solanago.NewAccountMeta(rent, false, false)
		// [20] = [writable] mint_metadata
		metas_[20] = solanago.NewAccountMeta(mintMetadata, true, false)
		// [21] = [] metadata_program
		metas_[21] = solanago.NewAccountMeta(metadataProgram, false, false)
		// [22] = [] vault_program
		// Vault program. The pool will deposit/withdraw liquidity from the vault.
		metas_[22] = solanago.NewAccountMeta(vaultProgram, false, false)
		// [23] = [] token_program
		// Token program.
		metas_[23] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [24] = [] associated_token_program
		// Associated token program.
		metas_[24] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [25] = [] system_program
		// System program.
		metas_[25] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializePermissionlessConstantProductPoolWithConfig" instruction.
// Initialize permissionless pool with config
func BuildInitializePermissionlessConstantProductPoolWithConfig(
	// Params:
	tokenAAmountParam uint64,
	tokenBAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	config solanago.PublicKey,
	lpMint solanago.PublicKey,
	tokenAMint solanago.PublicKey,
	tokenBMint solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aTokenVault solanago.PublicKey,
	bTokenVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	payerTokenA solanago.PublicKey,
	payerTokenB solanago.PublicKey,
	payerPoolLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	payer solanago.PublicKey,
	rent solanago.PublicKey,
	mintMetadata solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	vaultProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializePermissionlessConstantProductPoolWithConfigInstruction(
		tokenAAmountParam,
		tokenBAmountParam,
		pool,
		config,
		lpMint,
		tokenAMint,
		tokenBMint,
		aVault,
		bVault,
		aTokenVault,
		bTokenVault,
		aVaultLpMint,
		bVaultLpMint,
		aVaultLp,
		bVaultLp,
		payerTokenA,
		payerTokenB,
		payerPoolLp,
		protocolTokenAFee,
		protocolTokenBFee,
		payer,
		rent,
		mintMetadata,
		metadataProgram,
		vaultProgram,
		tokenProgram,
		associatedTokenProgram,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
