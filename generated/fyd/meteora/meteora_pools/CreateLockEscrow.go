// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_lock_escrow" instruction.

// Create lock account
type CreateLockEscrow struct {
	// Params:
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [writable] lock_escrow
	LockEscrow solanago.PublicKey `bin:"-"`
	// [2] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [3] = [] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [4] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [5] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateLockEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateLockEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateLockEscrow) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.LockEscrow = accounts[1]
	obj.Owner = accounts[2]
	obj.LpMint = accounts[3]
	obj.Payer = accounts[4]
	obj.SystemProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateLockEscrow) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateLockEscrow) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateLockEscrow)
}

func (*CreateLockEscrow) NewInstance() programparser.Instruction {
	return new(CreateLockEscrow)
}

func (obj *CreateLockEscrow) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[6:]
}

// Builds a "create_lock_escrow" instruction.
// Create lock account
func NewCreateLockEscrowInstruction(
	pool solanago.PublicKey,
	lockEscrow solanago.PublicKey,
	owner solanago.PublicKey,
	lpMint solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateLockEscrow[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		// Pool account
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [writable] lock_escrow
		// Lock account
		metas_[1] = solanago.NewAccountMeta(lockEscrow, true, false)
		// [2] = [] owner
		metas_[2] = solanago.NewAccountMeta(owner, false, false)
		// [3] = [] lp_mint
		// LP token mint of the pool
		metas_[3] = solanago.NewAccountMeta(lpMint, false, false)
		// [4] = [writable,signer] payer
		// Payer account
		metas_[4] = solanago.NewAccountMeta(payer, true, true)
		// [5] = [] system_program
		// System program.
		metas_[5] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateLockEscrow" instruction.
// Create lock account
func BuildCreateLockEscrow(
	pool solanago.PublicKey,
	lockEscrow solanago.PublicKey,
	owner solanago.PublicKey,
	lpMint solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateLockEscrowInstruction(
		pool,
		lockEscrow,
		owner,
		lpMint,
		payer,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
