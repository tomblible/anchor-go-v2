// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "lock" instruction.

// Lock Lp token
type Lock struct {
	// Params:
	MaxAmount uint64
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] lock_escrow
	LockEscrow solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [4] = [writable] source_tokens
	SourceTokens solanago.PublicKey `bin:"-"`
	// [5] = [writable] escrow_vault
	EscrowVault solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [] a_vault
	AVault solanago.PublicKey `bin:"-"`
	// [8] = [] b_vault
	BVault solanago.PublicKey `bin:"-"`
	// [9] = [] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [10] = [] b_vault_lp
	BVaultLp solanago.PublicKey `bin:"-"`
	// [11] = [] a_vault_lp_mint
	AVaultLpMint solanago.PublicKey `bin:"-"`
	// [12] = [] b_vault_lp_mint
	BVaultLpMint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Lock) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxAmountParam`:
	if err = encoder.Encode(obj.MaxAmount); err != nil {
		return fmt.Errorf("error while marshaling maxAmountParam:%w", err)
	}
	return nil
}

func (obj *Lock) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAmount`:
	if err = decoder.Decode(&obj.MaxAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmount:%w", err)
	}
	return nil
}

func (obj *Lock) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.LpMint = accounts[1]
	obj.LockEscrow = accounts[2]
	obj.Owner = accounts[3]
	obj.SourceTokens = accounts[4]
	obj.EscrowVault = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.AVault = accounts[7]
	obj.BVault = accounts[8]
	obj.AVaultLp = accounts[9]
	obj.BVaultLp = accounts[10]
	obj.AVaultLpMint = accounts[11]
	obj.BVaultLpMint = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Lock) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Lock) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Lock)
}

func (*Lock) NewInstance() programparser.Instruction {
	return new(Lock)
}

func (obj *Lock) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[13:]
}

// Builds a "lock" instruction.
// Lock Lp token
func NewLockInstruction(
	// Params:
	maxAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	lockEscrow solanago.PublicKey,
	owner solanago.PublicKey,
	sourceTokens solanago.PublicKey,
	escrowVault solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Lock[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxAmountParam`:
		if err = enc__.Encode(maxAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [] lp_mint
		// LP token mint of the pool
		metas_[1] = solanago.NewAccountMeta(lpMint, false, false)
		// [2] = [writable] lock_escrow
		// Lock account
		metas_[2] = solanago.NewAccountMeta(lockEscrow, true, false)
		// [3] = [writable,signer] owner
		// Can be anyone
		metas_[3] = solanago.NewAccountMeta(owner, true, true)
		// [4] = [writable] source_tokens
		// owner lp token account
		metas_[4] = solanago.NewAccountMeta(sourceTokens, true, false)
		// [5] = [writable] escrow_vault
		// Escrow vault
		metas_[5] = solanago.NewAccountMeta(escrowVault, true, false)
		// [6] = [] token_program
		// Token program.
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [7] = [] a_vault
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		metas_[7] = solanago.NewAccountMeta(aVault, false, false)
		// [8] = [] b_vault
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		metas_[8] = solanago.NewAccountMeta(bVault, false, false)
		// [9] = [] a_vault_lp
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[9] = solanago.NewAccountMeta(aVaultLp, false, false)
		// [10] = [] b_vault_lp
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[10] = solanago.NewAccountMeta(bVaultLp, false, false)
		// [11] = [] a_vault_lp_mint
		// LP token mint of vault a
		metas_[11] = solanago.NewAccountMeta(aVaultLpMint, false, false)
		// [12] = [] b_vault_lp_mint
		// LP token mint of vault b
		metas_[12] = solanago.NewAccountMeta(bVaultLpMint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildLock" instruction.
// Lock Lp token
func BuildLock(
	// Params:
	maxAmountParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	lockEscrow solanago.PublicKey,
	owner solanago.PublicKey,
	sourceTokens solanago.PublicKey,
	escrowVault solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewLockInstruction(
		maxAmountParam,
		pool,
		lpMint,
		lockEscrow,
		owner,
		sourceTokens,
		escrowVault,
		tokenProgram,
		aVault,
		bVault,
		aVaultLp,
		bVaultLp,
		aVaultLpMint,
		bVaultLpMint,
		remaining__...,
	)
	return instruction_
}
