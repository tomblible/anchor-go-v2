// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "enable_or_disable_pool" instruction.

// Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.
type EnableOrDisablePool struct {
	// Params:
	Enable bool
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj EnableOrDisablePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `enableParam`:
	if err = encoder.Encode(obj.Enable); err != nil {
		return fmt.Errorf("error while marshaling enableParam:%w", err)
	}
	return nil
}

func (obj *EnableOrDisablePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Enable`:
	if err = decoder.Decode(&obj.Enable); err != nil {
		return fmt.Errorf("error while unmarshaling Enable:%w", err)
	}
	return nil
}

func (obj *EnableOrDisablePool) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.Admin = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *EnableOrDisablePool) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*EnableOrDisablePool) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_EnableOrDisablePool)
}

func (*EnableOrDisablePool) NewInstance() programparser.Instruction {
	return new(EnableOrDisablePool)
}

func (inst *EnableOrDisablePool) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[2:]
}

// Builds a "enable_or_disable_pool" instruction.
// Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.
func NewEnableOrDisablePoolInstruction(
	// Params:
	enableParam bool,

	// Accounts:
	pool solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_EnableOrDisablePool[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `enableParam`:
		if err = enc__.Encode(enableParam); err != nil {
			return nil, fmt.Errorf("error while marshaling enableParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [,signer] admin
		// Admin account. Must be owner of the pool.
		metas_[1] = solanago.NewAccountMeta(admin, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildEnableOrDisablePool" instruction.
// Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.
func BuildEnableOrDisablePool(
	// Params:
	enableParam bool,

	// Accounts:
	pool solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewEnableOrDisablePoolInstruction(
		enableParam,
		pool,
		admin,
		remaining__...,
	)
	return instruction_
}
