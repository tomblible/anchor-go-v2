// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "partner_claim_fee" instruction.

// Partner claim fee
type PartnerClaimFee struct {
	// Params:
	MaxAmountA uint64
	MaxAmountB uint64
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [2] = [writable] protocol_token_a_fee
	ProtocolTokenAFee solanago.PublicKey `bin:"-"`
	// [3] = [writable] protocol_token_b_fee
	ProtocolTokenBFee solanago.PublicKey `bin:"-"`
	// [4] = [writable] partner_token_a
	PartnerTokenA solanago.PublicKey `bin:"-"`
	// [5] = [writable] partner_token_b
	PartnerTokenB solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [,signer] partner_authority
	PartnerAuthority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj PartnerClaimFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxAmountAParam`:
	if err = encoder.Encode(obj.MaxAmountA); err != nil {
		return fmt.Errorf("error while marshaling maxAmountAParam:%w", err)
	}
	// Serialize `maxAmountBParam`:
	if err = encoder.Encode(obj.MaxAmountB); err != nil {
		return fmt.Errorf("error while marshaling maxAmountBParam:%w", err)
	}
	return nil
}

func (obj *PartnerClaimFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAmountA`:
	if err = decoder.Decode(&obj.MaxAmountA); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmountA:%w", err)
	}
	// Deserialize `MaxAmountB`:
	if err = decoder.Decode(&obj.MaxAmountB); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmountB:%w", err)
	}
	return nil
}

func (obj *PartnerClaimFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.AVaultLp = accounts[1]
	obj.ProtocolTokenAFee = accounts[2]
	obj.ProtocolTokenBFee = accounts[3]
	obj.PartnerTokenA = accounts[4]
	obj.PartnerTokenB = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.PartnerAuthority = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *PartnerClaimFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*PartnerClaimFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_PartnerClaimFee)
}

func (*PartnerClaimFee) NewInstance() programparser.Instruction {
	return new(PartnerClaimFee)
}

func (obj *PartnerClaimFee) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "partner_claim_fee" instruction.
// Partner claim fee
func NewPartnerClaimFeeInstruction(
	// Params:
	maxAmountAParam uint64,
	maxAmountBParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	partnerTokenA solanago.PublicKey,
	partnerTokenB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	partnerAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_PartnerClaimFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxAmountAParam`:
		if err = enc__.Encode(maxAmountAParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAmountAParam:%w", err)
		}
		// Serialize `maxAmountBParam`:
		if err = enc__.Encode(maxAmountBParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxAmountBParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [] a_vault_lp
		metas_[1] = solanago.NewAccountMeta(aVaultLp, false, false)
		// [2] = [writable] protocol_token_a_fee
		metas_[2] = solanago.NewAccountMeta(protocolTokenAFee, true, false)
		// [3] = [writable] protocol_token_b_fee
		metas_[3] = solanago.NewAccountMeta(protocolTokenBFee, true, false)
		// [4] = [writable] partner_token_a
		metas_[4] = solanago.NewAccountMeta(partnerTokenA, true, false)
		// [5] = [writable] partner_token_b
		metas_[5] = solanago.NewAccountMeta(partnerTokenB, true, false)
		// [6] = [] token_program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [7] = [,signer] partner_authority
		metas_[7] = solanago.NewAccountMeta(partnerAuthority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildPartnerClaimFee" instruction.
// Partner claim fee
func BuildPartnerClaimFee(
	// Params:
	maxAmountAParam uint64,
	maxAmountBParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	protocolTokenAFee solanago.PublicKey,
	protocolTokenBFee solanago.PublicKey,
	partnerTokenA solanago.PublicKey,
	partnerTokenB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	partnerAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewPartnerClaimFeeInstruction(
		maxAmountAParam,
		maxAmountBParam,
		pool,
		aVaultLp,
		protocolTokenAFee,
		protocolTokenBFee,
		partnerTokenA,
		partnerTokenB,
		tokenProgram,
		partnerAuthority,
		remaining__...,
	)
	return instruction_
}
