// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "override_curve_param" instruction.

// Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve.
// Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.
type OverrideCurveParam struct {
	// Params:
	CurveType CurveType
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj OverrideCurveParam) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `curveTypeParam`:
	{
		if err = EncodeCurveType(encoder, obj.CurveType); err != nil {
			return fmt.Errorf("error while marshalingcurveTypeParam:%w", err)
		}
	}
	return nil
}

func (obj *OverrideCurveParam) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CurveType`:
	{
		var err error
		obj.CurveType, err = DecodeCurveType(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *OverrideCurveParam) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.Admin = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *OverrideCurveParam) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*OverrideCurveParam) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_OverrideCurveParam)
}

func (*OverrideCurveParam) NewInstance() programparser.Instruction {
	return new(OverrideCurveParam)
}

func (inst *OverrideCurveParam) GetRemainingAccounts() solanago.PublicKeySlice {
	return inst.PublicKeySlice[2:]
}

// Builds a "override_curve_param" instruction.
// Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve. // Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.
func NewOverrideCurveParamInstruction(
	// Params:
	curveTypeParam CurveType,

	// Accounts:
	pool solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_OverrideCurveParam[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `curveTypeParam`:
		{
			if err = EncodeCurveType(enc__, curveTypeParam); err != nil {
				return nil, fmt.Errorf("error while marshalingcurveTypeParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [,signer] admin
		// Admin account.
		metas_[1] = solanago.NewAccountMeta(admin, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildOverrideCurveParam" instruction.
// Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve. // Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.
func BuildOverrideCurveParam(
	// Params:
	curveTypeParam CurveType,

	// Accounts:
	pool solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewOverrideCurveParamInstruction(
		curveTypeParam,
		pool,
		admin,
		remaining__...,
	)
	return instruction_
}
