// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "get_pool_info" instruction.

// Get the general information of the pool.
type GetPoolInfo struct {
	// Params:
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [2] = [] a_vault_lp
	AVaultLp solanago.PublicKey `bin:"-"`
	// [3] = [] b_vault_lp
	BVaultLp solanago.PublicKey `bin:"-"`
	// [4] = [] a_vault
	AVault solanago.PublicKey `bin:"-"`
	// [5] = [] b_vault
	BVault solanago.PublicKey `bin:"-"`
	// [6] = [] a_vault_lp_mint
	AVaultLpMint solanago.PublicKey `bin:"-"`
	// [7] = [] b_vault_lp_mint
	BVaultLpMint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj GetPoolInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *GetPoolInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *GetPoolInfo) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.LpMint = accounts[1]
	obj.AVaultLp = accounts[2]
	obj.BVaultLp = accounts[3]
	obj.AVault = accounts[4]
	obj.BVault = accounts[5]
	obj.AVaultLpMint = accounts[6]
	obj.BVaultLpMint = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *GetPoolInfo) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*GetPoolInfo) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_GetPoolInfo)
}

func (*GetPoolInfo) NewInstance() programparser.Instruction {
	return new(GetPoolInfo)
}

func (obj *GetPoolInfo) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "get_pool_info" instruction.
// Get the general information of the pool.
func NewGetPoolInfoInstruction(
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_GetPoolInfo[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		// Pool account (PDA)
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [] lp_mint
		// LP token mint of the pool
		metas_[1] = solanago.NewAccountMeta(lpMint, false, false)
		// [2] = [] a_vault_lp
		// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[2] = solanago.NewAccountMeta(aVaultLp, false, false)
		// [3] = [] b_vault_lp
		// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
		metas_[3] = solanago.NewAccountMeta(bVaultLp, false, false)
		// [4] = [] a_vault
		// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
		metas_[4] = solanago.NewAccountMeta(aVault, false, false)
		// [5] = [] b_vault
		// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
		metas_[5] = solanago.NewAccountMeta(bVault, false, false)
		// [6] = [] a_vault_lp_mint
		// LP token mint of vault a
		metas_[6] = solanago.NewAccountMeta(aVaultLpMint, false, false)
		// [7] = [] b_vault_lp_mint
		// LP token mint of vault b
		metas_[7] = solanago.NewAccountMeta(bVaultLpMint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildGetPoolInfo" instruction.
// Get the general information of the pool.
func BuildGetPoolInfo(
	pool solanago.PublicKey,
	lpMint solanago.PublicKey,
	aVaultLp solanago.PublicKey,
	bVaultLp solanago.PublicKey,
	aVault solanago.PublicKey,
	bVault solanago.PublicKey,
	aVaultLpMint solanago.PublicKey,
	bVaultLpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewGetPoolInfoInstruction(
		pool,
		lpMint,
		aVaultLp,
		bVaultLp,
		aVault,
		bVault,
		aVaultLpMint,
		bVaultLpMint,
		remaining__...,
	)
	return instruction_
}
