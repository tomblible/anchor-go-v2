// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "simulate_info" instruction.
type SimulateInfo struct {
	// Params:
	Param            uint8
	SwapBaseInValue  *SwapInstructionBaseIn  `bin:"optional"`
	SwapBaseOutValue *SwapInstructionBaseOut `bin:"optional"`
	// Accounts:
	// [0] = [] amm
	Amm solanago.PublicKey `bin:"-"`
	// [1] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [3] = [] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] lp_mint_address
	LpMintAddress solanago.PublicKey `bin:"-"`
	// [6] = [] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [7] = [] serum_event_queue
	SerumEventQueue solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SimulateInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	// Serialize `swapBaseInValueParam` (optional):
	{
		if obj.SwapBaseInValue == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling swapBaseInValueParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling swapBaseInValueParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.SwapBaseInValue); err != nil {
				return fmt.Errorf("error while marshaling swapBaseInValueParam: %w", err)
			}
		}
	}
	// Serialize `swapBaseOutValueParam` (optional):
	{
		if obj.SwapBaseOutValue == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling swapBaseOutValueParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling swapBaseOutValueParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.SwapBaseOutValue); err != nil {
				return fmt.Errorf("error while marshaling swapBaseOutValueParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *SimulateInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	// Deserialize `SwapBaseInValue` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling SwapBaseInValue:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.SwapBaseInValue); err != nil {
				return fmt.Errorf("error while unmarshaling SwapBaseInValue:%w", err)
			}
		}
	}
	// Deserialize `SwapBaseOutValue` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling SwapBaseOutValue:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.SwapBaseOutValue); err != nil {
				return fmt.Errorf("error while unmarshaling SwapBaseOutValue:%w", err)
			}
		}
	}
	return nil
}

func (obj *SimulateInfo) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Amm = accounts[0]
	obj.AmmAuthority = accounts[1]
	obj.AmmOpenOrders = accounts[2]
	obj.PoolCoinTokenAccount = accounts[3]
	obj.PoolPcTokenAccount = accounts[4]
	obj.LpMintAddress = accounts[5]
	obj.SerumMarket = accounts[6]
	obj.SerumEventQueue = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SimulateInfo) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SimulateInfo) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SimulateInfo)
}

func (*SimulateInfo) NewInstance() programparser.Instruction {
	return new(SimulateInfo)
}

// Builds a "simulate_info" instruction.
func NewSimulateInfoInstruction(
	// Params:
	paramParam uint8,
	swapBaseInValueParam *SwapInstructionBaseIn,
	swapBaseOutValueParam *SwapInstructionBaseOut,

	// Accounts:
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SimulateInfo[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
		// Serialize `swapBaseInValueParam` (optional):
		{
			if swapBaseInValueParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseInValueParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseInValueParam optionality: %w", err)
				}
				if err = enc__.Encode(swapBaseInValueParam); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseInValueParam: %w", err)
				}
			}
		}
		// Serialize `swapBaseOutValueParam` (optional):
		{
			if swapBaseOutValueParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseOutValueParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseOutValueParam optionality: %w", err)
				}
				if err = enc__.Encode(swapBaseOutValueParam); err != nil {
					return nil, fmt.Errorf("error while marshaling swapBaseOutValueParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] amm
		metas_[0] = solanago.NewAccountMeta(amm, false, false)
		// [1] = [] amm_authority
		metas_[1] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [2] = [] amm_open_orders
		metas_[2] = solanago.NewAccountMeta(ammOpenOrders, false, false)
		// [3] = [] pool_coin_token_account
		metas_[3] = solanago.NewAccountMeta(poolCoinTokenAccount, false, false)
		// [4] = [] pool_pc_token_account
		metas_[4] = solanago.NewAccountMeta(poolPcTokenAccount, false, false)
		// [5] = [] lp_mint_address
		metas_[5] = solanago.NewAccountMeta(lpMintAddress, false, false)
		// [6] = [] serum_market
		metas_[6] = solanago.NewAccountMeta(serumMarket, false, false)
		// [7] = [] serum_event_queue
		metas_[7] = solanago.NewAccountMeta(serumEventQueue, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSimulateInfo" instruction.
func BuildSimulateInfo(
	// Params:
	paramParam uint8,
	swapBaseInValueParam *SwapInstructionBaseIn,
	swapBaseOutValueParam *SwapInstructionBaseOut,

	// Accounts:
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSimulateInfoInstruction(
		paramParam,
		swapBaseInValueParam,
		swapBaseOutValueParam,
		amm,
		ammAuthority,
		ammOpenOrders,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		lpMintAddress,
		serumMarket,
		serumEventQueue,
		remaining__...,
	)
	return instruction_
}
