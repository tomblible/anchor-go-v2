// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_srm" instruction.
type WithdrawSrm struct {
	// Params:
	Amount uint64
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [,signer] amm_owner_account
	AmmOwnerAccount solanago.PublicKey `bin:"-"`
	// [3] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable] srm_token
	SrmToken solanago.PublicKey `bin:"-"`
	// [5] = [writable] dest_srm_token
	DestSrmToken solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawSrm) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	return nil
}

func (obj *WithdrawSrm) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	return nil
}

func (obj *WithdrawSrm) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmOwnerAccount = accounts[2]
	obj.AmmAuthority = accounts[3]
	obj.SrmToken = accounts[4]
	obj.DestSrmToken = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawSrm) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawSrm) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawSrm)
}

func (*WithdrawSrm) NewInstance() programparser.Instruction {
	return new(WithdrawSrm)
}

// Builds a "withdraw_srm" instruction.
func NewWithdrawSrmInstruction(
	// Params:
	amountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammOwnerAccount solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	srmToken solanago.PublicKey,
	destSrmToken solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawSrm[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] amm
		metas_[1] = solanago.NewAccountMeta(amm, false, false)
		// [2] = [,signer] amm_owner_account
		metas_[2] = solanago.NewAccountMeta(ammOwnerAccount, false, true)
		// [3] = [] amm_authority
		metas_[3] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [4] = [writable] srm_token
		metas_[4] = solanago.NewAccountMeta(srmToken, true, false)
		// [5] = [writable] dest_srm_token
		metas_[5] = solanago.NewAccountMeta(destSrmToken, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawSrm" instruction.
func BuildWithdrawSrm(
	// Params:
	amountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammOwnerAccount solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	srmToken solanago.PublicKey,
	destSrmToken solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawSrmInstruction(
		amountParam,
		tokenProgram,
		amm,
		ammOwnerAccount,
		ammAuthority,
		srmToken,
		destSrmToken,
		remaining__...,
	)
	return instruction_
}
