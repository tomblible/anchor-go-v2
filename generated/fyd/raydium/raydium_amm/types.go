// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type WithdrawDestToken struct {
	WithdrawAmount uint64
	CoinAmount     uint64
	PcAmount       uint64
	DestTokenCoin  solanago.PublicKey
	DestTokenPc    solanago.PublicKey
}

func (obj WithdrawDestToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `WithdrawAmount`:
	if err = encoder.Encode(obj.WithdrawAmount); err != nil {
		return fmt.Errorf("error while marshaling WithdrawAmount:%w", err)
	}
	// Serialize `CoinAmount`:
	if err = encoder.Encode(obj.CoinAmount); err != nil {
		return fmt.Errorf("error while marshaling CoinAmount:%w", err)
	}
	// Serialize `PcAmount`:
	if err = encoder.Encode(obj.PcAmount); err != nil {
		return fmt.Errorf("error while marshaling PcAmount:%w", err)
	}
	// Serialize `DestTokenCoin`:
	if err = encoder.Encode(obj.DestTokenCoin); err != nil {
		return fmt.Errorf("error while marshaling DestTokenCoin:%w", err)
	}
	// Serialize `DestTokenPc`:
	if err = encoder.Encode(obj.DestTokenPc); err != nil {
		return fmt.Errorf("error while marshaling DestTokenPc:%w", err)
	}
	return nil
}

func (obj WithdrawDestToken) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawDestToken: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawDestToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `WithdrawAmount`:
	if err = decoder.Decode(&obj.WithdrawAmount); err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawAmount:%w", err)
	}
	// Deserialize `CoinAmount`:
	if err = decoder.Decode(&obj.CoinAmount); err != nil {
		return fmt.Errorf("error while unmarshaling CoinAmount:%w", err)
	}
	// Deserialize `PcAmount`:
	if err = decoder.Decode(&obj.PcAmount); err != nil {
		return fmt.Errorf("error while unmarshaling PcAmount:%w", err)
	}
	// Deserialize `DestTokenCoin`:
	if err = decoder.Decode(&obj.DestTokenCoin); err != nil {
		return fmt.Errorf("error while unmarshaling DestTokenCoin:%w", err)
	}
	// Deserialize `DestTokenPc`:
	if err = decoder.Decode(&obj.DestTokenPc); err != nil {
		return fmt.Errorf("error while unmarshaling DestTokenPc:%w", err)
	}
	return nil
}

func (obj *WithdrawDestToken) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawDestToken: %w", err)
	}
	return nil
}

func UnmarshalWithdrawDestToken(buf []byte) (*WithdrawDestToken, error) {
	obj := new(WithdrawDestToken)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type WithdrawQueue struct {
	Owner [4]uint64
	Head  uint64
	Count uint64
	Buf   [64]WithdrawDestToken
}

func (obj WithdrawQueue) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	if err = encoder.Encode(obj.Owner); err != nil {
		return fmt.Errorf("error while marshaling Owner:%w", err)
	}
	// Serialize `Head`:
	if err = encoder.Encode(obj.Head); err != nil {
		return fmt.Errorf("error while marshaling Head:%w", err)
	}
	// Serialize `Count`:
	if err = encoder.Encode(obj.Count); err != nil {
		return fmt.Errorf("error while marshaling Count:%w", err)
	}
	// Serialize `Buf`:
	if err = encoder.Encode(obj.Buf); err != nil {
		return fmt.Errorf("error while marshaling Buf:%w", err)
	}
	return nil
}

func (obj WithdrawQueue) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawQueue: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawQueue) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	if err = decoder.Decode(&obj.Owner); err != nil {
		return fmt.Errorf("error while unmarshaling Owner:%w", err)
	}
	// Deserialize `Head`:
	if err = decoder.Decode(&obj.Head); err != nil {
		return fmt.Errorf("error while unmarshaling Head:%w", err)
	}
	// Deserialize `Count`:
	if err = decoder.Decode(&obj.Count); err != nil {
		return fmt.Errorf("error while unmarshaling Count:%w", err)
	}
	// Deserialize `Buf`:
	if err = decoder.Decode(&obj.Buf); err != nil {
		return fmt.Errorf("error while unmarshaling Buf:%w", err)
	}
	return nil
}

func (obj *WithdrawQueue) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawQueue: %w", err)
	}
	return nil
}

func UnmarshalWithdrawQueue(buf []byte) (*WithdrawQueue, error) {
	obj := new(WithdrawQueue)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TargetOrder struct {
	Price uint64
	Vol   uint64
}

func (obj TargetOrder) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	if err = encoder.Encode(obj.Price); err != nil {
		return fmt.Errorf("error while marshaling Price:%w", err)
	}
	// Serialize `Vol`:
	if err = encoder.Encode(obj.Vol); err != nil {
		return fmt.Errorf("error while marshaling Vol:%w", err)
	}
	return nil
}

func (obj TargetOrder) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TargetOrder: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TargetOrder) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	if err = decoder.Decode(&obj.Price); err != nil {
		return fmt.Errorf("error while unmarshaling Price:%w", err)
	}
	// Deserialize `Vol`:
	if err = decoder.Decode(&obj.Vol); err != nil {
		return fmt.Errorf("error while unmarshaling Vol:%w", err)
	}
	return nil
}

func (obj *TargetOrder) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TargetOrder: %w", err)
	}
	return nil
}

func UnmarshalTargetOrder(buf []byte) (*TargetOrder, error) {
	obj := new(TargetOrder)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OutPutData struct {
	NeedTakePnlCoin     uint64
	NeedTakePnlPc       uint64
	TotalPnlPc          uint64
	TotalPnlCoin        uint64
	PoolOpenTime        uint64
	PunishPcAmount      uint64
	PunishCoinAmount    uint64
	OrderbookToInitTime uint64
	SwapCoinInAmount    binary.Uint128
	SwapPcOutAmount     binary.Uint128
	SwapTakePcFee       uint64
	SwapPcInAmount      binary.Uint128
	SwapCoinOutAmount   binary.Uint128
	SwapTakeCoinFee     uint64
}

func (obj OutPutData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `NeedTakePnlCoin`:
	if err = encoder.Encode(obj.NeedTakePnlCoin); err != nil {
		return fmt.Errorf("error while marshaling NeedTakePnlCoin:%w", err)
	}
	// Serialize `NeedTakePnlPc`:
	if err = encoder.Encode(obj.NeedTakePnlPc); err != nil {
		return fmt.Errorf("error while marshaling NeedTakePnlPc:%w", err)
	}
	// Serialize `TotalPnlPc`:
	if err = encoder.Encode(obj.TotalPnlPc); err != nil {
		return fmt.Errorf("error while marshaling TotalPnlPc:%w", err)
	}
	// Serialize `TotalPnlCoin`:
	if err = encoder.Encode(obj.TotalPnlCoin); err != nil {
		return fmt.Errorf("error while marshaling TotalPnlCoin:%w", err)
	}
	// Serialize `PoolOpenTime`:
	if err = encoder.Encode(obj.PoolOpenTime); err != nil {
		return fmt.Errorf("error while marshaling PoolOpenTime:%w", err)
	}
	// Serialize `PunishPcAmount`:
	if err = encoder.Encode(obj.PunishPcAmount); err != nil {
		return fmt.Errorf("error while marshaling PunishPcAmount:%w", err)
	}
	// Serialize `PunishCoinAmount`:
	if err = encoder.Encode(obj.PunishCoinAmount); err != nil {
		return fmt.Errorf("error while marshaling PunishCoinAmount:%w", err)
	}
	// Serialize `OrderbookToInitTime`:
	if err = encoder.Encode(obj.OrderbookToInitTime); err != nil {
		return fmt.Errorf("error while marshaling OrderbookToInitTime:%w", err)
	}
	// Serialize `SwapCoinInAmount`:
	if err = encoder.Encode(obj.SwapCoinInAmount); err != nil {
		return fmt.Errorf("error while marshaling SwapCoinInAmount:%w", err)
	}
	// Serialize `SwapPcOutAmount`:
	if err = encoder.Encode(obj.SwapPcOutAmount); err != nil {
		return fmt.Errorf("error while marshaling SwapPcOutAmount:%w", err)
	}
	// Serialize `SwapTakePcFee`:
	if err = encoder.Encode(obj.SwapTakePcFee); err != nil {
		return fmt.Errorf("error while marshaling SwapTakePcFee:%w", err)
	}
	// Serialize `SwapPcInAmount`:
	if err = encoder.Encode(obj.SwapPcInAmount); err != nil {
		return fmt.Errorf("error while marshaling SwapPcInAmount:%w", err)
	}
	// Serialize `SwapCoinOutAmount`:
	if err = encoder.Encode(obj.SwapCoinOutAmount); err != nil {
		return fmt.Errorf("error while marshaling SwapCoinOutAmount:%w", err)
	}
	// Serialize `SwapTakeCoinFee`:
	if err = encoder.Encode(obj.SwapTakeCoinFee); err != nil {
		return fmt.Errorf("error while marshaling SwapTakeCoinFee:%w", err)
	}
	return nil
}

func (obj OutPutData) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OutPutData: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OutPutData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NeedTakePnlCoin`:
	if err = decoder.Decode(&obj.NeedTakePnlCoin); err != nil {
		return fmt.Errorf("error while unmarshaling NeedTakePnlCoin:%w", err)
	}
	// Deserialize `NeedTakePnlPc`:
	if err = decoder.Decode(&obj.NeedTakePnlPc); err != nil {
		return fmt.Errorf("error while unmarshaling NeedTakePnlPc:%w", err)
	}
	// Deserialize `TotalPnlPc`:
	if err = decoder.Decode(&obj.TotalPnlPc); err != nil {
		return fmt.Errorf("error while unmarshaling TotalPnlPc:%w", err)
	}
	// Deserialize `TotalPnlCoin`:
	if err = decoder.Decode(&obj.TotalPnlCoin); err != nil {
		return fmt.Errorf("error while unmarshaling TotalPnlCoin:%w", err)
	}
	// Deserialize `PoolOpenTime`:
	if err = decoder.Decode(&obj.PoolOpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling PoolOpenTime:%w", err)
	}
	// Deserialize `PunishPcAmount`:
	if err = decoder.Decode(&obj.PunishPcAmount); err != nil {
		return fmt.Errorf("error while unmarshaling PunishPcAmount:%w", err)
	}
	// Deserialize `PunishCoinAmount`:
	if err = decoder.Decode(&obj.PunishCoinAmount); err != nil {
		return fmt.Errorf("error while unmarshaling PunishCoinAmount:%w", err)
	}
	// Deserialize `OrderbookToInitTime`:
	if err = decoder.Decode(&obj.OrderbookToInitTime); err != nil {
		return fmt.Errorf("error while unmarshaling OrderbookToInitTime:%w", err)
	}
	// Deserialize `SwapCoinInAmount`:
	if err = decoder.Decode(&obj.SwapCoinInAmount); err != nil {
		return fmt.Errorf("error while unmarshaling SwapCoinInAmount:%w", err)
	}
	// Deserialize `SwapPcOutAmount`:
	if err = decoder.Decode(&obj.SwapPcOutAmount); err != nil {
		return fmt.Errorf("error while unmarshaling SwapPcOutAmount:%w", err)
	}
	// Deserialize `SwapTakePcFee`:
	if err = decoder.Decode(&obj.SwapTakePcFee); err != nil {
		return fmt.Errorf("error while unmarshaling SwapTakePcFee:%w", err)
	}
	// Deserialize `SwapPcInAmount`:
	if err = decoder.Decode(&obj.SwapPcInAmount); err != nil {
		return fmt.Errorf("error while unmarshaling SwapPcInAmount:%w", err)
	}
	// Deserialize `SwapCoinOutAmount`:
	if err = decoder.Decode(&obj.SwapCoinOutAmount); err != nil {
		return fmt.Errorf("error while unmarshaling SwapCoinOutAmount:%w", err)
	}
	// Deserialize `SwapTakeCoinFee`:
	if err = decoder.Decode(&obj.SwapTakeCoinFee); err != nil {
		return fmt.Errorf("error while unmarshaling SwapTakeCoinFee:%w", err)
	}
	return nil
}

func (obj *OutPutData) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OutPutData: %w", err)
	}
	return nil
}

func UnmarshalOutPutData(buf []byte) (*OutPutData, error) {
	obj := new(OutPutData)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AmmConfig struct {
	PnlOwner    solanago.PublicKey
	CancelOwner solanago.PublicKey
	Pending1    [28]uint64
	Pending2    [32]uint64
}

func (obj AmmConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PnlOwner`:
	if err = encoder.Encode(obj.PnlOwner); err != nil {
		return fmt.Errorf("error while marshaling PnlOwner:%w", err)
	}
	// Serialize `CancelOwner`:
	if err = encoder.Encode(obj.CancelOwner); err != nil {
		return fmt.Errorf("error while marshaling CancelOwner:%w", err)
	}
	// Serialize `Pending1`:
	if err = encoder.Encode(obj.Pending1); err != nil {
		return fmt.Errorf("error while marshaling Pending1:%w", err)
	}
	// Serialize `Pending2`:
	if err = encoder.Encode(obj.Pending2); err != nil {
		return fmt.Errorf("error while marshaling Pending2:%w", err)
	}
	return nil
}

func (obj AmmConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AmmConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AmmConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PnlOwner`:
	if err = decoder.Decode(&obj.PnlOwner); err != nil {
		return fmt.Errorf("error while unmarshaling PnlOwner:%w", err)
	}
	// Deserialize `CancelOwner`:
	if err = decoder.Decode(&obj.CancelOwner); err != nil {
		return fmt.Errorf("error while unmarshaling CancelOwner:%w", err)
	}
	// Deserialize `Pending1`:
	if err = decoder.Decode(&obj.Pending1); err != nil {
		return fmt.Errorf("error while unmarshaling Pending1:%w", err)
	}
	// Deserialize `Pending2`:
	if err = decoder.Decode(&obj.Pending2); err != nil {
		return fmt.Errorf("error while unmarshaling Pending2:%w", err)
	}
	return nil
}

func (obj *AmmConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AmmConfig: %w", err)
	}
	return nil
}

func UnmarshalAmmConfig(buf []byte) (*AmmConfig, error) {
	obj := new(AmmConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LastOrderDistance struct {
	LastOrderNumerator   uint64
	LastOrderDenominator uint64
}

func (obj LastOrderDistance) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastOrderNumerator`:
	if err = encoder.Encode(obj.LastOrderNumerator); err != nil {
		return fmt.Errorf("error while marshaling LastOrderNumerator:%w", err)
	}
	// Serialize `LastOrderDenominator`:
	if err = encoder.Encode(obj.LastOrderDenominator); err != nil {
		return fmt.Errorf("error while marshaling LastOrderDenominator:%w", err)
	}
	return nil
}

func (obj LastOrderDistance) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LastOrderDistance: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LastOrderDistance) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastOrderNumerator`:
	if err = decoder.Decode(&obj.LastOrderNumerator); err != nil {
		return fmt.Errorf("error while unmarshaling LastOrderNumerator:%w", err)
	}
	// Deserialize `LastOrderDenominator`:
	if err = decoder.Decode(&obj.LastOrderDenominator); err != nil {
		return fmt.Errorf("error while unmarshaling LastOrderDenominator:%w", err)
	}
	return nil
}

func (obj *LastOrderDistance) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LastOrderDistance: %w", err)
	}
	return nil
}

func UnmarshalLastOrderDistance(buf []byte) (*LastOrderDistance, error) {
	obj := new(LastOrderDistance)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type NeedTake struct {
	NeedTakePc   uint64
	NeedTakeCoin uint64
}

func (obj NeedTake) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `NeedTakePc`:
	if err = encoder.Encode(obj.NeedTakePc); err != nil {
		return fmt.Errorf("error while marshaling NeedTakePc:%w", err)
	}
	// Serialize `NeedTakeCoin`:
	if err = encoder.Encode(obj.NeedTakeCoin); err != nil {
		return fmt.Errorf("error while marshaling NeedTakeCoin:%w", err)
	}
	return nil
}

func (obj NeedTake) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NeedTake: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NeedTake) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NeedTakePc`:
	if err = decoder.Decode(&obj.NeedTakePc); err != nil {
		return fmt.Errorf("error while unmarshaling NeedTakePc:%w", err)
	}
	// Deserialize `NeedTakeCoin`:
	if err = decoder.Decode(&obj.NeedTakeCoin); err != nil {
		return fmt.Errorf("error while unmarshaling NeedTakeCoin:%w", err)
	}
	return nil
}

func (obj *NeedTake) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NeedTake: %w", err)
	}
	return nil
}

func UnmarshalNeedTake(buf []byte) (*NeedTake, error) {
	obj := new(NeedTake)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapInstructionBaseIn struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapInstructionBaseIn) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling AmountIn:%w", err)
	}
	// Serialize `MinimumAmountOut`:
	if err = encoder.Encode(obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while marshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj SwapInstructionBaseIn) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapInstructionBaseIn: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapInstructionBaseIn) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `MinimumAmountOut`:
	if err = decoder.Decode(&obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj *SwapInstructionBaseIn) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapInstructionBaseIn: %w", err)
	}
	return nil
}

func UnmarshalSwapInstructionBaseIn(buf []byte) (*SwapInstructionBaseIn, error) {
	obj := new(SwapInstructionBaseIn)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapInstructionBaseOut struct {
	MaxAmountIn uint64
	AmountOut   uint64
}

func (obj SwapInstructionBaseOut) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxAmountIn`:
	if err = encoder.Encode(obj.MaxAmountIn); err != nil {
		return fmt.Errorf("error while marshaling MaxAmountIn:%w", err)
	}
	// Serialize `AmountOut`:
	if err = encoder.Encode(obj.AmountOut); err != nil {
		return fmt.Errorf("error while marshaling AmountOut:%w", err)
	}
	return nil
}

func (obj SwapInstructionBaseOut) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapInstructionBaseOut: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapInstructionBaseOut) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAmountIn`:
	if err = decoder.Decode(&obj.MaxAmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling MaxAmountIn:%w", err)
	}
	// Deserialize `AmountOut`:
	if err = decoder.Decode(&obj.AmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling AmountOut:%w", err)
	}
	return nil
}

func (obj *SwapInstructionBaseOut) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapInstructionBaseOut: %w", err)
	}
	return nil
}

func UnmarshalSwapInstructionBaseOut(buf []byte) (*SwapInstructionBaseOut, error) {
	obj := new(SwapInstructionBaseOut)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
