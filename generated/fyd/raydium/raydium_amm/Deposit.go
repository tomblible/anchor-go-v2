// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "deposit" instruction.
type Deposit struct {
	// Params:
	MaxCoinAmount uint64
	MaxPcAmount   uint64
	BaseSide      uint64
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [5] = [writable] lp_mint_address
	LpMintAddress solanago.PublicKey `bin:"-"`
	// [6] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [9] = [writable] user_coin_token_account
	UserCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable] user_pc_token_account
	UserPcTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [writable] user_lp_token_account
	UserLpTokenAccount solanago.PublicKey `bin:"-"`
	// [12] = [,signer] user_owner
	UserOwner solanago.PublicKey `bin:"-"`
	// [13] = [] serum_event_queue
	SerumEventQueue solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Deposit) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `maxCoinAmountParam`:
	if err = encoder.Encode(obj.MaxCoinAmount); err != nil {
		return fmt.Errorf("error while marshaling maxCoinAmountParam:%w", err)
	}
	// Serialize `maxPcAmountParam`:
	if err = encoder.Encode(obj.MaxPcAmount); err != nil {
		return fmt.Errorf("error while marshaling maxPcAmountParam:%w", err)
	}
	// Serialize `baseSideParam`:
	if err = encoder.Encode(obj.BaseSide); err != nil {
		return fmt.Errorf("error while marshaling baseSideParam:%w", err)
	}
	return nil
}

func (obj *Deposit) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxCoinAmount`:
	if err = decoder.Decode(&obj.MaxCoinAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxCoinAmount:%w", err)
	}
	// Deserialize `MaxPcAmount`:
	if err = decoder.Decode(&obj.MaxPcAmount); err != nil {
		return fmt.Errorf("error while unmarshaling MaxPcAmount:%w", err)
	}
	// Deserialize `BaseSide`:
	if err = decoder.Decode(&obj.BaseSide); err != nil {
		return fmt.Errorf("error while unmarshaling BaseSide:%w", err)
	}
	return nil
}

func (obj *Deposit) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmAuthority = accounts[2]
	obj.AmmOpenOrders = accounts[3]
	obj.AmmTargetOrders = accounts[4]
	obj.LpMintAddress = accounts[5]
	obj.PoolCoinTokenAccount = accounts[6]
	obj.PoolPcTokenAccount = accounts[7]
	obj.SerumMarket = accounts[8]
	obj.UserCoinTokenAccount = accounts[9]
	obj.UserPcTokenAccount = accounts[10]
	obj.UserLpTokenAccount = accounts[11]
	obj.UserOwner = accounts[12]
	obj.SerumEventQueue = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Deposit) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Deposit) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Deposit)
}

func (*Deposit) NewInstance() programparser.Instruction {
	return new(Deposit)
}

func (obj *Deposit) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 14 {
		return nil
	}
	return obj.PublicKeySlice[14:]
}

// Builds a "deposit" instruction.
func NewDepositInstruction(
	// Params:
	maxCoinAmountParam uint64,
	maxPcAmountParam uint64,
	baseSideParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userCoinTokenAccount solanago.PublicKey,
	userPcTokenAccount solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	userOwner solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Deposit[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `maxCoinAmountParam`:
		if err = enc__.Encode(maxCoinAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxCoinAmountParam:%w", err)
		}
		// Serialize `maxPcAmountParam`:
		if err = enc__.Encode(maxPcAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxPcAmountParam:%w", err)
		}
		// Serialize `baseSideParam`:
		if err = enc__.Encode(baseSideParam); err != nil {
			return nil, fmt.Errorf("error while marshaling baseSideParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [writable] amm
		metas_[1] = solanago.NewAccountMeta(amm, true, false)
		// [2] = [] amm_authority
		metas_[2] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [3] = [] amm_open_orders
		metas_[3] = solanago.NewAccountMeta(ammOpenOrders, false, false)
		// [4] = [writable] amm_target_orders
		metas_[4] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [5] = [writable] lp_mint_address
		metas_[5] = solanago.NewAccountMeta(lpMintAddress, true, false)
		// [6] = [writable] pool_coin_token_account
		metas_[6] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [7] = [writable] pool_pc_token_account
		metas_[7] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [8] = [] serum_market
		metas_[8] = solanago.NewAccountMeta(serumMarket, false, false)
		// [9] = [writable] user_coin_token_account
		metas_[9] = solanago.NewAccountMeta(userCoinTokenAccount, true, false)
		// [10] = [writable] user_pc_token_account
		metas_[10] = solanago.NewAccountMeta(userPcTokenAccount, true, false)
		// [11] = [writable] user_lp_token_account
		metas_[11] = solanago.NewAccountMeta(userLpTokenAccount, true, false)
		// [12] = [,signer] user_owner
		metas_[12] = solanago.NewAccountMeta(userOwner, false, true)
		// [13] = [] serum_event_queue
		metas_[13] = solanago.NewAccountMeta(serumEventQueue, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeposit" instruction.
func BuildDeposit(
	// Params:
	maxCoinAmountParam uint64,
	maxPcAmountParam uint64,
	baseSideParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userCoinTokenAccount solanago.PublicKey,
	userPcTokenAccount solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	userOwner solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDepositInstruction(
		maxCoinAmountParam,
		maxPcAmountParam,
		baseSideParam,
		tokenProgram,
		amm,
		ammAuthority,
		ammOpenOrders,
		ammTargetOrders,
		lpMintAddress,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		serumMarket,
		userCoinTokenAccount,
		userPcTokenAccount,
		userLpTokenAccount,
		userOwner,
		serumEventQueue,
		remaining__...,
	)
	return instruction_
}
