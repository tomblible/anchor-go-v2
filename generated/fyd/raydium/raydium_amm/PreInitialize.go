// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "pre_initialize" instruction.
type PreInitialize struct {
	// Params:
	Nonce uint8
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [2] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [4] = [writable] pool_withdraw_queue
	PoolWithdrawQueue solanago.PublicKey `bin:"-"`
	// [5] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable] lp_mint_address
	LpMintAddress solanago.PublicKey `bin:"-"`
	// [7] = [] coin_mint_address
	CoinMintAddress solanago.PublicKey `bin:"-"`
	// [8] = [] pc_mint_address
	PcMintAddress solanago.PublicKey `bin:"-"`
	// [9] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [writable] pool_temp_lp_token_account
	PoolTempLpTokenAccount solanago.PublicKey `bin:"-"`
	// [12] = [] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [13] = [writable,signer] user_wallet
	UserWallet solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj PreInitialize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `nonceParam`:
	if err = encoder.Encode(obj.Nonce); err != nil {
		return fmt.Errorf("error while marshaling nonceParam:%w", err)
	}
	return nil
}

func (obj *PreInitialize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	if err = decoder.Decode(&obj.Nonce); err != nil {
		return fmt.Errorf("error while unmarshaling Nonce:%w", err)
	}
	return nil
}

func (obj *PreInitialize) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.SystemProgram = accounts[1]
	obj.Rent = accounts[2]
	obj.AmmTargetOrders = accounts[3]
	obj.PoolWithdrawQueue = accounts[4]
	obj.AmmAuthority = accounts[5]
	obj.LpMintAddress = accounts[6]
	obj.CoinMintAddress = accounts[7]
	obj.PcMintAddress = accounts[8]
	obj.PoolCoinTokenAccount = accounts[9]
	obj.PoolPcTokenAccount = accounts[10]
	obj.PoolTempLpTokenAccount = accounts[11]
	obj.SerumMarket = accounts[12]
	obj.UserWallet = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *PreInitialize) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*PreInitialize) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_PreInitialize)
}

func (*PreInitialize) NewInstance() programparser.Instruction {
	return new(PreInitialize)
}

func (obj *PreInitialize) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[14:]
}

// Builds a "pre_initialize" instruction.
func NewPreInitializeInstruction(
	// Params:
	nonceParam uint8,

	// Accounts:
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	coinMintAddress solanago.PublicKey,
	pcMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_PreInitialize[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `nonceParam`:
		if err = enc__.Encode(nonceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling nonceParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] system_program
		metas_[1] = solanago.NewAccountMeta(systemProgram, false, false)
		// [2] = [] rent
		metas_[2] = solanago.NewAccountMeta(rent, false, false)
		// [3] = [writable] amm_target_orders
		metas_[3] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [4] = [writable] pool_withdraw_queue
		metas_[4] = solanago.NewAccountMeta(poolWithdrawQueue, true, false)
		// [5] = [] amm_authority
		metas_[5] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [6] = [writable] lp_mint_address
		metas_[6] = solanago.NewAccountMeta(lpMintAddress, true, false)
		// [7] = [] coin_mint_address
		metas_[7] = solanago.NewAccountMeta(coinMintAddress, false, false)
		// [8] = [] pc_mint_address
		metas_[8] = solanago.NewAccountMeta(pcMintAddress, false, false)
		// [9] = [writable] pool_coin_token_account
		metas_[9] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [10] = [writable] pool_pc_token_account
		metas_[10] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [11] = [writable] pool_temp_lp_token_account
		metas_[11] = solanago.NewAccountMeta(poolTempLpTokenAccount, true, false)
		// [12] = [] serum_market
		metas_[12] = solanago.NewAccountMeta(serumMarket, false, false)
		// [13] = [writable,signer] user_wallet
		metas_[13] = solanago.NewAccountMeta(userWallet, true, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildPreInitialize" instruction.
func BuildPreInitialize(
	// Params:
	nonceParam uint8,

	// Accounts:
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	coinMintAddress solanago.PublicKey,
	pcMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewPreInitializeInstruction(
		nonceParam,
		tokenProgram,
		systemProgram,
		rent,
		ammTargetOrders,
		poolWithdrawQueue,
		ammAuthority,
		lpMintAddress,
		coinMintAddress,
		pcMintAddress,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		poolTempLpTokenAccount,
		serumMarket,
		userWallet,
		remaining__...,
	)
	return instruction_
}
