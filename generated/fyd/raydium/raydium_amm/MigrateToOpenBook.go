// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_to_open_book" instruction.
type MigrateToOpenBook struct {
	// Params:
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [2] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [4] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [5] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [6] = [writable] amm_token_coin
	AmmTokenCoin solanago.PublicKey `bin:"-"`
	// [7] = [writable] amm_token_pc
	AmmTokenPc solanago.PublicKey `bin:"-"`
	// [8] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [9] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [10] = [writable] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [11] = [writable] serum_bids
	SerumBids solanago.PublicKey `bin:"-"`
	// [12] = [writable] serum_asks
	SerumAsks solanago.PublicKey `bin:"-"`
	// [13] = [writable] serum_event_queue
	SerumEventQueue solanago.PublicKey `bin:"-"`
	// [14] = [writable] serum_coin_vault
	SerumCoinVault solanago.PublicKey `bin:"-"`
	// [15] = [writable] serum_pc_vault
	SerumPcVault solanago.PublicKey `bin:"-"`
	// [16] = [] serum_vault_signer
	SerumVaultSigner solanago.PublicKey `bin:"-"`
	// [17] = [writable] new_amm_open_orders
	NewAmmOpenOrders solanago.PublicKey `bin:"-"`
	// [18] = [] new_serum_program
	NewSerumProgram solanago.PublicKey `bin:"-"`
	// [19] = [] new_serum_market
	NewSerumMarket solanago.PublicKey `bin:"-"`
	// [20] = [writable,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateToOpenBook) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrateToOpenBook) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrateToOpenBook) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 21 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 21, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.SystemProgram = accounts[1]
	obj.Rent = accounts[2]
	obj.Amm = accounts[3]
	obj.AmmAuthority = accounts[4]
	obj.AmmOpenOrders = accounts[5]
	obj.AmmTokenCoin = accounts[6]
	obj.AmmTokenPc = accounts[7]
	obj.AmmTargetOrders = accounts[8]
	obj.SerumProgram = accounts[9]
	obj.SerumMarket = accounts[10]
	obj.SerumBids = accounts[11]
	obj.SerumAsks = accounts[12]
	obj.SerumEventQueue = accounts[13]
	obj.SerumCoinVault = accounts[14]
	obj.SerumPcVault = accounts[15]
	obj.SerumVaultSigner = accounts[16]
	obj.NewAmmOpenOrders = accounts[17]
	obj.NewSerumProgram = accounts[18]
	obj.NewSerumMarket = accounts[19]
	obj.Admin = accounts[20]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateToOpenBook) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateToOpenBook) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateToOpenBook)
}

func (*MigrateToOpenBook) NewInstance() programparser.Instruction {
	return new(MigrateToOpenBook)
}

// Builds a "migrate_to_open_book" instruction.
func NewMigrateToOpenBookInstruction(
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTokenCoin solanago.PublicKey,
	ammTokenPc solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumCoinVault solanago.PublicKey,
	serumPcVault solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	newAmmOpenOrders solanago.PublicKey,
	newSerumProgram solanago.PublicKey,
	newSerumMarket solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 21, 21+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateToOpenBook[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] system_program
		metas_[1] = solanago.NewAccountMeta(systemProgram, false, false)
		// [2] = [] rent
		metas_[2] = solanago.NewAccountMeta(rent, false, false)
		// [3] = [writable] amm
		metas_[3] = solanago.NewAccountMeta(amm, true, false)
		// [4] = [] amm_authority
		metas_[4] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [5] = [writable] amm_open_orders
		metas_[5] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [6] = [writable] amm_token_coin
		metas_[6] = solanago.NewAccountMeta(ammTokenCoin, true, false)
		// [7] = [writable] amm_token_pc
		metas_[7] = solanago.NewAccountMeta(ammTokenPc, true, false)
		// [8] = [writable] amm_target_orders
		metas_[8] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [9] = [] serum_program
		metas_[9] = solanago.NewAccountMeta(serumProgram, false, false)
		// [10] = [writable] serum_market
		metas_[10] = solanago.NewAccountMeta(serumMarket, true, false)
		// [11] = [writable] serum_bids
		metas_[11] = solanago.NewAccountMeta(serumBids, true, false)
		// [12] = [writable] serum_asks
		metas_[12] = solanago.NewAccountMeta(serumAsks, true, false)
		// [13] = [writable] serum_event_queue
		metas_[13] = solanago.NewAccountMeta(serumEventQueue, true, false)
		// [14] = [writable] serum_coin_vault
		metas_[14] = solanago.NewAccountMeta(serumCoinVault, true, false)
		// [15] = [writable] serum_pc_vault
		metas_[15] = solanago.NewAccountMeta(serumPcVault, true, false)
		// [16] = [] serum_vault_signer
		metas_[16] = solanago.NewAccountMeta(serumVaultSigner, false, false)
		// [17] = [writable] new_amm_open_orders
		metas_[17] = solanago.NewAccountMeta(newAmmOpenOrders, true, false)
		// [18] = [] new_serum_program
		metas_[18] = solanago.NewAccountMeta(newSerumProgram, false, false)
		// [19] = [] new_serum_market
		metas_[19] = solanago.NewAccountMeta(newSerumMarket, false, false)
		// [20] = [writable,signer] admin
		metas_[20] = solanago.NewAccountMeta(admin, true, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateToOpenBook" instruction.
func BuildMigrateToOpenBook(
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTokenCoin solanago.PublicKey,
	ammTokenPc solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumCoinVault solanago.PublicKey,
	serumPcVault solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	newAmmOpenOrders solanago.PublicKey,
	newSerumProgram solanago.PublicKey,
	newSerumMarket solanago.PublicKey,
	admin solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateToOpenBookInstruction(
		tokenProgram,
		systemProgram,
		rent,
		amm,
		ammAuthority,
		ammOpenOrders,
		ammTokenCoin,
		ammTokenPc,
		ammTargetOrders,
		serumProgram,
		serumMarket,
		serumBids,
		serumAsks,
		serumEventQueue,
		serumCoinVault,
		serumPcVault,
		serumVaultSigner,
		newAmmOpenOrders,
		newSerumProgram,
		newSerumMarket,
		admin,
		remaining__...,
	)
	return instruction_
}
