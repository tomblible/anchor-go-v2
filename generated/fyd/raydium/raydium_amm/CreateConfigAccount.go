// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_config_account" instruction.
type CreateConfigAccount struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [2] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [4] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateConfigAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateConfigAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateConfigAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.Admin = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.Owner = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.Rent = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateConfigAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateConfigAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateConfigAccount)
}

func (*CreateConfigAccount) NewInstance() programparser.Instruction {
	return new(CreateConfigAccount)
}

// Builds a "create_config_account" instruction.
func NewCreateConfigAccountInstruction(
	admin solanago.PublicKey,
	ammConfig solanago.PublicKey,
	owner solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateConfigAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] admin
		metas_[0] = solanago.NewAccountMeta(admin, true, true)
		// [1] = [writable] amm_config
		metas_[1] = solanago.NewAccountMeta(ammConfig, true, false)
		// [2] = [] owner
		metas_[2] = solanago.NewAccountMeta(owner, false, false)
		// [3] = [] system_program
		metas_[3] = solanago.NewAccountMeta(systemProgram, false, false)
		// [4] = [] rent
		metas_[4] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateConfigAccount" instruction.
func BuildCreateConfigAccount(
	admin solanago.PublicKey,
	ammConfig solanago.PublicKey,
	owner solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateConfigAccountInstruction(
		admin,
		ammConfig,
		owner,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
