// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize" instruction.
type Initialize struct {
	// Params:
	Nonce    uint8
	OpenTime uint64
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [2] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [4] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [5] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [6] = [writable] lp_mint_address
	LpMintAddress solanago.PublicKey `bin:"-"`
	// [7] = [] coin_mint_address
	CoinMintAddress solanago.PublicKey `bin:"-"`
	// [8] = [] pc_mint_address
	PcMintAddress solanago.PublicKey `bin:"-"`
	// [9] = [] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [writable] pool_withdraw_queue
	PoolWithdrawQueue solanago.PublicKey `bin:"-"`
	// [12] = [writable] pool_target_orders_account
	PoolTargetOrdersAccount solanago.PublicKey `bin:"-"`
	// [13] = [writable] user_lp_token_account
	UserLpTokenAccount solanago.PublicKey `bin:"-"`
	// [14] = [] pool_temp_lp_token_account
	PoolTempLpTokenAccount solanago.PublicKey `bin:"-"`
	// [15] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [16] = [] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [17] = [writable,signer] user_wallet
	UserWallet solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Initialize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `nonceParam`:
	if err = encoder.Encode(obj.Nonce); err != nil {
		return fmt.Errorf("error while marshaling nonceParam:%w", err)
	}
	// Serialize `openTimeParam`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling openTimeParam:%w", err)
	}
	return nil
}

func (obj *Initialize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	if err = decoder.Decode(&obj.Nonce); err != nil {
		return fmt.Errorf("error while unmarshaling Nonce:%w", err)
	}
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	return nil
}

func (obj *Initialize) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 18 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 18, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.SystemProgram = accounts[1]
	obj.Rent = accounts[2]
	obj.Amm = accounts[3]
	obj.AmmAuthority = accounts[4]
	obj.AmmOpenOrders = accounts[5]
	obj.LpMintAddress = accounts[6]
	obj.CoinMintAddress = accounts[7]
	obj.PcMintAddress = accounts[8]
	obj.PoolCoinTokenAccount = accounts[9]
	obj.PoolPcTokenAccount = accounts[10]
	obj.PoolWithdrawQueue = accounts[11]
	obj.PoolTargetOrdersAccount = accounts[12]
	obj.UserLpTokenAccount = accounts[13]
	obj.PoolTempLpTokenAccount = accounts[14]
	obj.SerumProgram = accounts[15]
	obj.SerumMarket = accounts[16]
	obj.UserWallet = accounts[17]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Initialize) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Initialize) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Initialize)
}

func (*Initialize) NewInstance() programparser.Instruction {
	return new(Initialize)
}

func (obj *Initialize) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[18:]
}

// Builds a "initialize" instruction.
func NewInitializeInstruction(
	// Params:
	nonceParam uint8,
	openTimeParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	coinMintAddress solanago.PublicKey,
	pcMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	poolTargetOrdersAccount solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 18, 18+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Initialize[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `nonceParam`:
		if err = enc__.Encode(nonceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling nonceParam:%w", err)
		}
		// Serialize `openTimeParam`:
		if err = enc__.Encode(openTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling openTimeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] system_program
		metas_[1] = solanago.NewAccountMeta(systemProgram, false, false)
		// [2] = [] rent
		metas_[2] = solanago.NewAccountMeta(rent, false, false)
		// [3] = [writable] amm
		metas_[3] = solanago.NewAccountMeta(amm, true, false)
		// [4] = [] amm_authority
		metas_[4] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [5] = [writable] amm_open_orders
		metas_[5] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [6] = [writable] lp_mint_address
		metas_[6] = solanago.NewAccountMeta(lpMintAddress, true, false)
		// [7] = [] coin_mint_address
		metas_[7] = solanago.NewAccountMeta(coinMintAddress, false, false)
		// [8] = [] pc_mint_address
		metas_[8] = solanago.NewAccountMeta(pcMintAddress, false, false)
		// [9] = [] pool_coin_token_account
		metas_[9] = solanago.NewAccountMeta(poolCoinTokenAccount, false, false)
		// [10] = [] pool_pc_token_account
		metas_[10] = solanago.NewAccountMeta(poolPcTokenAccount, false, false)
		// [11] = [writable] pool_withdraw_queue
		metas_[11] = solanago.NewAccountMeta(poolWithdrawQueue, true, false)
		// [12] = [writable] pool_target_orders_account
		metas_[12] = solanago.NewAccountMeta(poolTargetOrdersAccount, true, false)
		// [13] = [writable] user_lp_token_account
		metas_[13] = solanago.NewAccountMeta(userLpTokenAccount, true, false)
		// [14] = [] pool_temp_lp_token_account
		metas_[14] = solanago.NewAccountMeta(poolTempLpTokenAccount, false, false)
		// [15] = [] serum_program
		metas_[15] = solanago.NewAccountMeta(serumProgram, false, false)
		// [16] = [] serum_market
		metas_[16] = solanago.NewAccountMeta(serumMarket, false, false)
		// [17] = [writable,signer] user_wallet
		metas_[17] = solanago.NewAccountMeta(userWallet, true, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitialize" instruction.
func BuildInitialize(
	// Params:
	nonceParam uint8,
	openTimeParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	coinMintAddress solanago.PublicKey,
	pcMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	poolTargetOrdersAccount solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeInstruction(
		nonceParam,
		openTimeParam,
		tokenProgram,
		systemProgram,
		rent,
		amm,
		ammAuthority,
		ammOpenOrders,
		lpMintAddress,
		coinMintAddress,
		pcMintAddress,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		poolWithdrawQueue,
		poolTargetOrdersAccount,
		userLpTokenAccount,
		poolTempLpTokenAccount,
		serumProgram,
		serumMarket,
		userWallet,
		remaining__...,
	)
	return instruction_
}
