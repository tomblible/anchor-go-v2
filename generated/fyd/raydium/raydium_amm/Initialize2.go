// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize2" instruction.
type Initialize2 struct {
	// Params:
	Nonce          uint8
	OpenTime       uint64
	InitPcAmount   uint64
	InitCoinAmount uint64
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] spl_associated_token_account
	SplAssociatedTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [3] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [5] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [7] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [8] = [] coin_mint
	CoinMint solanago.PublicKey `bin:"-"`
	// [9] = [] pc_mint
	PcMint solanago.PublicKey `bin:"-"`
	// [10] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [12] = [writable] pool_withdraw_queue
	PoolWithdrawQueue solanago.PublicKey `bin:"-"`
	// [13] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [14] = [writable] pool_temp_lp
	PoolTempLp solanago.PublicKey `bin:"-"`
	// [15] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [16] = [] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [17] = [writable,signer] user_wallet
	UserWallet solanago.PublicKey `bin:"-"`
	// [18] = [writable] user_token_coin
	UserTokenCoin solanago.PublicKey `bin:"-"`
	// [19] = [writable] user_token_pc
	UserTokenPc solanago.PublicKey `bin:"-"`
	// [20] = [writable] user_lp_token_account
	UserLpTokenAccount solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Initialize2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `nonceParam`:
	if err = encoder.Encode(obj.Nonce); err != nil {
		return fmt.Errorf("error while marshaling nonceParam:%w", err)
	}
	// Serialize `openTimeParam`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling openTimeParam:%w", err)
	}
	// Serialize `initPcAmountParam`:
	if err = encoder.Encode(obj.InitPcAmount); err != nil {
		return fmt.Errorf("error while marshaling initPcAmountParam:%w", err)
	}
	// Serialize `initCoinAmountParam`:
	if err = encoder.Encode(obj.InitCoinAmount); err != nil {
		return fmt.Errorf("error while marshaling initCoinAmountParam:%w", err)
	}
	return nil
}

func (obj *Initialize2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	if err = decoder.Decode(&obj.Nonce); err != nil {
		return fmt.Errorf("error while unmarshaling Nonce:%w", err)
	}
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	// Deserialize `InitPcAmount`:
	if err = decoder.Decode(&obj.InitPcAmount); err != nil {
		return fmt.Errorf("error while unmarshaling InitPcAmount:%w", err)
	}
	// Deserialize `InitCoinAmount`:
	if err = decoder.Decode(&obj.InitCoinAmount); err != nil {
		return fmt.Errorf("error while unmarshaling InitCoinAmount:%w", err)
	}
	return nil
}

func (obj *Initialize2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 21 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 21, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.SplAssociatedTokenAccount = accounts[1]
	obj.SystemProgram = accounts[2]
	obj.Rent = accounts[3]
	obj.Amm = accounts[4]
	obj.AmmAuthority = accounts[5]
	obj.AmmOpenOrders = accounts[6]
	obj.LpMint = accounts[7]
	obj.CoinMint = accounts[8]
	obj.PcMint = accounts[9]
	obj.PoolCoinTokenAccount = accounts[10]
	obj.PoolPcTokenAccount = accounts[11]
	obj.PoolWithdrawQueue = accounts[12]
	obj.AmmTargetOrders = accounts[13]
	obj.PoolTempLp = accounts[14]
	obj.SerumProgram = accounts[15]
	obj.SerumMarket = accounts[16]
	obj.UserWallet = accounts[17]
	obj.UserTokenCoin = accounts[18]
	obj.UserTokenPc = accounts[19]
	obj.UserLpTokenAccount = accounts[20]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Initialize2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Initialize2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Initialize2)
}

func (*Initialize2) NewInstance() programparser.Instruction {
	return new(Initialize2)
}

// Builds a "initialize2" instruction.
func NewInitialize2Instruction(
	// Params:
	nonceParam uint8,
	openTimeParam uint64,
	initPcAmountParam uint64,
	initCoinAmountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	splAssociatedTokenAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	lpMint solanago.PublicKey,
	coinMint solanago.PublicKey,
	pcMint solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolTempLp solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	userTokenCoin solanago.PublicKey,
	userTokenPc solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 21, 21+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Initialize2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `nonceParam`:
		if err = enc__.Encode(nonceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling nonceParam:%w", err)
		}
		// Serialize `openTimeParam`:
		if err = enc__.Encode(openTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling openTimeParam:%w", err)
		}
		// Serialize `initPcAmountParam`:
		if err = enc__.Encode(initPcAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initPcAmountParam:%w", err)
		}
		// Serialize `initCoinAmountParam`:
		if err = enc__.Encode(initCoinAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initCoinAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] spl_associated_token_account
		metas_[1] = solanago.NewAccountMeta(splAssociatedTokenAccount, false, false)
		// [2] = [] system_program
		metas_[2] = solanago.NewAccountMeta(systemProgram, false, false)
		// [3] = [] rent
		metas_[3] = solanago.NewAccountMeta(rent, false, false)
		// [4] = [writable] amm
		metas_[4] = solanago.NewAccountMeta(amm, true, false)
		// [5] = [] amm_authority
		metas_[5] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [6] = [writable] amm_open_orders
		metas_[6] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [7] = [writable] lp_mint
		metas_[7] = solanago.NewAccountMeta(lpMint, true, false)
		// [8] = [] coin_mint
		metas_[8] = solanago.NewAccountMeta(coinMint, false, false)
		// [9] = [] pc_mint
		metas_[9] = solanago.NewAccountMeta(pcMint, false, false)
		// [10] = [writable] pool_coin_token_account
		metas_[10] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [11] = [writable] pool_pc_token_account
		metas_[11] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [12] = [writable] pool_withdraw_queue
		metas_[12] = solanago.NewAccountMeta(poolWithdrawQueue, true, false)
		// [13] = [writable] amm_target_orders
		metas_[13] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [14] = [writable] pool_temp_lp
		metas_[14] = solanago.NewAccountMeta(poolTempLp, true, false)
		// [15] = [] serum_program
		metas_[15] = solanago.NewAccountMeta(serumProgram, false, false)
		// [16] = [] serum_market
		metas_[16] = solanago.NewAccountMeta(serumMarket, false, false)
		// [17] = [writable,signer] user_wallet
		metas_[17] = solanago.NewAccountMeta(userWallet, true, true)
		// [18] = [writable] user_token_coin
		metas_[18] = solanago.NewAccountMeta(userTokenCoin, true, false)
		// [19] = [writable] user_token_pc
		metas_[19] = solanago.NewAccountMeta(userTokenPc, true, false)
		// [20] = [writable] user_lp_token_account
		metas_[20] = solanago.NewAccountMeta(userLpTokenAccount, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitialize2" instruction.
func BuildInitialize2(
	// Params:
	nonceParam uint8,
	openTimeParam uint64,
	initPcAmountParam uint64,
	initCoinAmountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	splAssociatedTokenAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	lpMint solanago.PublicKey,
	coinMint solanago.PublicKey,
	pcMint solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolTempLp solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	userWallet solanago.PublicKey,
	userTokenCoin solanago.PublicKey,
	userTokenPc solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitialize2Instruction(
		nonceParam,
		openTimeParam,
		initPcAmountParam,
		initCoinAmountParam,
		tokenProgram,
		splAssociatedTokenAccount,
		systemProgram,
		rent,
		amm,
		ammAuthority,
		ammOpenOrders,
		lpMint,
		coinMint,
		pcMint,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		poolWithdrawQueue,
		ammTargetOrders,
		poolTempLp,
		serumProgram,
		serumMarket,
		userWallet,
		userTokenCoin,
		userTokenPc,
		userLpTokenAccount,
		remaining__...,
	)
	return instruction_
}
