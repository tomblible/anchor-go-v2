// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_pnl" instruction.
type WithdrawPnl struct {
	// Params:
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [3] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [5] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] coin_pnl_token_account
	CoinPnlTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] pc_pnl_token_account
	PcPnlTokenAccount solanago.PublicKey `bin:"-"`
	// [9] = [,signer] pnl_owner_account
	PnlOwnerAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [11] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [12] = [writable] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [13] = [] serum_event_queue
	SerumEventQueue solanago.PublicKey `bin:"-"`
	// [14] = [writable] serum_coin_vault_account
	SerumCoinVaultAccount solanago.PublicKey `bin:"-"`
	// [15] = [writable] serum_pc_vault_account
	SerumPcVaultAccount solanago.PublicKey `bin:"-"`
	// [16] = [] serum_vault_signer
	SerumVaultSigner solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawPnl) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *WithdrawPnl) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *WithdrawPnl) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 17 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 17, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmConfig = accounts[2]
	obj.AmmAuthority = accounts[3]
	obj.AmmOpenOrders = accounts[4]
	obj.PoolCoinTokenAccount = accounts[5]
	obj.PoolPcTokenAccount = accounts[6]
	obj.CoinPnlTokenAccount = accounts[7]
	obj.PcPnlTokenAccount = accounts[8]
	obj.PnlOwnerAccount = accounts[9]
	obj.AmmTargetOrders = accounts[10]
	obj.SerumProgram = accounts[11]
	obj.SerumMarket = accounts[12]
	obj.SerumEventQueue = accounts[13]
	obj.SerumCoinVaultAccount = accounts[14]
	obj.SerumPcVaultAccount = accounts[15]
	obj.SerumVaultSigner = accounts[16]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *WithdrawPnl) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawPnl) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawPnl)
}

func (*WithdrawPnl) NewInstance() programparser.Instruction {
	return new(WithdrawPnl)
}

func (obj *WithdrawPnl) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 17 {
		return nil
	}
	return obj.PublicKeySlice[17:]
}

// Builds a "withdraw_pnl" instruction.
func NewWithdrawPnlInstruction(
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammConfig solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	coinPnlTokenAccount solanago.PublicKey,
	pcPnlTokenAccount solanago.PublicKey,
	pnlOwnerAccount solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 17, 17+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawPnl[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [writable] amm
		metas_[1] = solanago.NewAccountMeta(amm, true, false)
		// [2] = [] amm_config
		metas_[2] = solanago.NewAccountMeta(ammConfig, false, false)
		// [3] = [] amm_authority
		metas_[3] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [4] = [writable] amm_open_orders
		metas_[4] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [5] = [writable] pool_coin_token_account
		metas_[5] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [6] = [writable] pool_pc_token_account
		metas_[6] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [7] = [writable] coin_pnl_token_account
		metas_[7] = solanago.NewAccountMeta(coinPnlTokenAccount, true, false)
		// [8] = [writable] pc_pnl_token_account
		metas_[8] = solanago.NewAccountMeta(pcPnlTokenAccount, true, false)
		// [9] = [,signer] pnl_owner_account
		metas_[9] = solanago.NewAccountMeta(pnlOwnerAccount, false, true)
		// [10] = [writable] amm_target_orders
		metas_[10] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [11] = [] serum_program
		metas_[11] = solanago.NewAccountMeta(serumProgram, false, false)
		// [12] = [writable] serum_market
		metas_[12] = solanago.NewAccountMeta(serumMarket, true, false)
		// [13] = [] serum_event_queue
		metas_[13] = solanago.NewAccountMeta(serumEventQueue, false, false)
		// [14] = [writable] serum_coin_vault_account
		metas_[14] = solanago.NewAccountMeta(serumCoinVaultAccount, true, false)
		// [15] = [writable] serum_pc_vault_account
		metas_[15] = solanago.NewAccountMeta(serumPcVaultAccount, true, false)
		// [16] = [] serum_vault_signer
		metas_[16] = solanago.NewAccountMeta(serumVaultSigner, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawPnl" instruction.
func BuildWithdrawPnl(
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammConfig solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	coinPnlTokenAccount solanago.PublicKey,
	pcPnlTokenAccount solanago.PublicKey,
	pnlOwnerAccount solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawPnlInstruction(
		tokenProgram,
		amm,
		ammConfig,
		ammAuthority,
		ammOpenOrders,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		coinPnlTokenAccount,
		pcPnlTokenAccount,
		pnlOwnerAccount,
		ammTargetOrders,
		serumProgram,
		serumMarket,
		serumEventQueue,
		serumCoinVaultAccount,
		serumPcVaultAccount,
		serumVaultSigner,
		remaining__...,
	)
	return instruction_
}
