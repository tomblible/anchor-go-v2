// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_params" instruction.
type SetParams struct {
	// Params:
	Param             uint8
	Value             *uint64             `bin:"optional"`
	NewPubkey         *solanago.PublicKey `bin:"optional"`
	Fees              *Fees               `bin:"optional"`
	LastOrderDistance *LastOrderDistance  `bin:"optional"`
	NeedTakeAmounts   *NeedTake           `bin:"optional"`
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [5] = [writable] amm_coin_vault
	AmmCoinVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] amm_pc_vault
	AmmPcVault solanago.PublicKey `bin:"-"`
	// [7] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [8] = [writable] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [9] = [writable] serum_coin_vault
	SerumCoinVault solanago.PublicKey `bin:"-"`
	// [10] = [writable] serum_pc_vault
	SerumPcVault solanago.PublicKey `bin:"-"`
	// [11] = [] serum_vault_signer
	SerumVaultSigner solanago.PublicKey `bin:"-"`
	// [12] = [writable] serum_event_queue
	SerumEventQueue solanago.PublicKey `bin:"-"`
	// [13] = [writable] serum_bids
	SerumBids solanago.PublicKey `bin:"-"`
	// [14] = [writable] serum_asks
	SerumAsks solanago.PublicKey `bin:"-"`
	// [15] = [,signer] amm_admin_account
	AmmAdminAccount solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	// Serialize `valueParam` (optional):
	{
		if obj.Value == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling valueParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling valueParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.Value); err != nil {
				return fmt.Errorf("error while marshaling valueParam: %w", err)
			}
		}
	}
	// Serialize `newPubkeyParam` (optional):
	{
		if obj.NewPubkey == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling newPubkeyParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling newPubkeyParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.NewPubkey); err != nil {
				return fmt.Errorf("error while marshaling newPubkeyParam: %w", err)
			}
		}
	}
	// Serialize `feesParam` (optional):
	{
		if obj.Fees == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling feesParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling feesParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.Fees); err != nil {
				return fmt.Errorf("error while marshaling feesParam: %w", err)
			}
		}
	}
	// Serialize `lastOrderDistanceParam` (optional):
	{
		if obj.LastOrderDistance == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling lastOrderDistanceParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling lastOrderDistanceParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.LastOrderDistance); err != nil {
				return fmt.Errorf("error while marshaling lastOrderDistanceParam: %w", err)
			}
		}
	}
	// Serialize `needTakeAmountsParam` (optional):
	{
		if obj.NeedTakeAmounts == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling needTakeAmountsParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling needTakeAmountsParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.NeedTakeAmounts); err != nil {
				return fmt.Errorf("error while marshaling needTakeAmountsParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *SetParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	// Deserialize `Value` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling Value:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.Value); err != nil {
				return fmt.Errorf("error while unmarshaling Value:%w", err)
			}
		}
	}
	// Deserialize `NewPubkey` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling NewPubkey:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.NewPubkey); err != nil {
				return fmt.Errorf("error while unmarshaling NewPubkey:%w", err)
			}
		}
	}
	// Deserialize `Fees` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling Fees:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.Fees); err != nil {
				return fmt.Errorf("error while unmarshaling Fees:%w", err)
			}
		}
	}
	// Deserialize `LastOrderDistance` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling LastOrderDistance:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.LastOrderDistance); err != nil {
				return fmt.Errorf("error while unmarshaling LastOrderDistance:%w", err)
			}
		}
	}
	// Deserialize `NeedTakeAmounts` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling NeedTakeAmounts:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.NeedTakeAmounts); err != nil {
				return fmt.Errorf("error while unmarshaling NeedTakeAmounts:%w", err)
			}
		}
	}
	return nil
}

func (obj *SetParams) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmAuthority = accounts[2]
	obj.AmmOpenOrders = accounts[3]
	obj.AmmTargetOrders = accounts[4]
	obj.AmmCoinVault = accounts[5]
	obj.AmmPcVault = accounts[6]
	obj.SerumProgram = accounts[7]
	obj.SerumMarket = accounts[8]
	obj.SerumCoinVault = accounts[9]
	obj.SerumPcVault = accounts[10]
	obj.SerumVaultSigner = accounts[11]
	obj.SerumEventQueue = accounts[12]
	obj.SerumBids = accounts[13]
	obj.SerumAsks = accounts[14]
	obj.AmmAdminAccount = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetParams) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetParams) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetParams)
}

func (*SetParams) NewInstance() programparser.Instruction {
	return new(SetParams)
}

func (obj *SetParams) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 16 {
		return nil
	}
	return obj.PublicKeySlice[16:]
}

// Builds a "set_params" instruction.
func NewSetParamsInstruction(
	// Params:
	paramParam uint8,
	valueParam *uint64,
	newPubkeyParam *solanago.PublicKey,
	feesParam *Fees,
	lastOrderDistanceParam *LastOrderDistance,
	needTakeAmountsParam *NeedTake,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	ammCoinVault solanago.PublicKey,
	ammPcVault solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVault solanago.PublicKey,
	serumPcVault solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	ammAdminAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetParams[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
		// Serialize `valueParam` (optional):
		{
			if valueParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling valueParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling valueParam optionality: %w", err)
				}
				if err = enc__.Encode(valueParam); err != nil {
					return nil, fmt.Errorf("error while marshaling valueParam: %w", err)
				}
			}
		}
		// Serialize `newPubkeyParam` (optional):
		{
			if newPubkeyParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling newPubkeyParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling newPubkeyParam optionality: %w", err)
				}
				if err = enc__.Encode(newPubkeyParam); err != nil {
					return nil, fmt.Errorf("error while marshaling newPubkeyParam: %w", err)
				}
			}
		}
		// Serialize `feesParam` (optional):
		{
			if feesParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling feesParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling feesParam optionality: %w", err)
				}
				if err = enc__.Encode(feesParam); err != nil {
					return nil, fmt.Errorf("error while marshaling feesParam: %w", err)
				}
			}
		}
		// Serialize `lastOrderDistanceParam` (optional):
		{
			if lastOrderDistanceParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling lastOrderDistanceParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling lastOrderDistanceParam optionality: %w", err)
				}
				if err = enc__.Encode(lastOrderDistanceParam); err != nil {
					return nil, fmt.Errorf("error while marshaling lastOrderDistanceParam: %w", err)
				}
			}
		}
		// Serialize `needTakeAmountsParam` (optional):
		{
			if needTakeAmountsParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling needTakeAmountsParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling needTakeAmountsParam optionality: %w", err)
				}
				if err = enc__.Encode(needTakeAmountsParam); err != nil {
					return nil, fmt.Errorf("error while marshaling needTakeAmountsParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [writable] amm
		metas_[1] = solanago.NewAccountMeta(amm, true, false)
		// [2] = [] amm_authority
		metas_[2] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [3] = [writable] amm_open_orders
		metas_[3] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [4] = [writable] amm_target_orders
		metas_[4] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [5] = [writable] amm_coin_vault
		metas_[5] = solanago.NewAccountMeta(ammCoinVault, true, false)
		// [6] = [writable] amm_pc_vault
		metas_[6] = solanago.NewAccountMeta(ammPcVault, true, false)
		// [7] = [] serum_program
		metas_[7] = solanago.NewAccountMeta(serumProgram, false, false)
		// [8] = [writable] serum_market
		metas_[8] = solanago.NewAccountMeta(serumMarket, true, false)
		// [9] = [writable] serum_coin_vault
		metas_[9] = solanago.NewAccountMeta(serumCoinVault, true, false)
		// [10] = [writable] serum_pc_vault
		metas_[10] = solanago.NewAccountMeta(serumPcVault, true, false)
		// [11] = [] serum_vault_signer
		metas_[11] = solanago.NewAccountMeta(serumVaultSigner, false, false)
		// [12] = [writable] serum_event_queue
		metas_[12] = solanago.NewAccountMeta(serumEventQueue, true, false)
		// [13] = [writable] serum_bids
		metas_[13] = solanago.NewAccountMeta(serumBids, true, false)
		// [14] = [writable] serum_asks
		metas_[14] = solanago.NewAccountMeta(serumAsks, true, false)
		// [15] = [,signer] amm_admin_account
		metas_[15] = solanago.NewAccountMeta(ammAdminAccount, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetParams" instruction.
func BuildSetParams(
	// Params:
	paramParam uint8,
	valueParam *uint64,
	newPubkeyParam *solanago.PublicKey,
	feesParam *Fees,
	lastOrderDistanceParam *LastOrderDistance,
	needTakeAmountsParam *NeedTake,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	ammCoinVault solanago.PublicKey,
	ammPcVault solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVault solanago.PublicKey,
	serumPcVault solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	serumEventQueue solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	ammAdminAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetParamsInstruction(
		paramParam,
		valueParam,
		newPubkeyParam,
		feesParam,
		lastOrderDistanceParam,
		needTakeAmountsParam,
		tokenProgram,
		amm,
		ammAuthority,
		ammOpenOrders,
		ammTargetOrders,
		ammCoinVault,
		ammPcVault,
		serumProgram,
		serumMarket,
		serumCoinVault,
		serumPcVault,
		serumVaultSigner,
		serumEventQueue,
		serumBids,
		serumAsks,
		ammAdminAccount,
		remaining__...,
	)
	return instruction_
}
