// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "admin_cancel_orders" instruction.
type AdminCancelOrders struct {
	// Params:
	Limit uint16
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [5] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [,signer] amm_owner_account
	AmmOwnerAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [9] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [10] = [writable] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [11] = [writable] serum_coin_vault_account
	SerumCoinVaultAccount solanago.PublicKey `bin:"-"`
	// [12] = [writable] serum_pc_vault_account
	SerumPcVaultAccount solanago.PublicKey `bin:"-"`
	// [13] = [] serum_vault_signer
	SerumVaultSigner solanago.PublicKey `bin:"-"`
	// [14] = [writable] serum_event_q
	SerumEventQ solanago.PublicKey `bin:"-"`
	// [15] = [writable] serum_bids
	SerumBids solanago.PublicKey `bin:"-"`
	// [16] = [writable] serum_asks
	SerumAsks solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj AdminCancelOrders) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `limitParam`:
	if err = encoder.Encode(obj.Limit); err != nil {
		return fmt.Errorf("error while marshaling limitParam:%w", err)
	}
	return nil
}

func (obj *AdminCancelOrders) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Limit`:
	if err = decoder.Decode(&obj.Limit); err != nil {
		return fmt.Errorf("error while unmarshaling Limit:%w", err)
	}
	return nil
}

func (obj *AdminCancelOrders) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 17 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 17, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmAuthority = accounts[2]
	obj.AmmOpenOrders = accounts[3]
	obj.AmmTargetOrders = accounts[4]
	obj.PoolCoinTokenAccount = accounts[5]
	obj.PoolPcTokenAccount = accounts[6]
	obj.AmmOwnerAccount = accounts[7]
	obj.AmmConfig = accounts[8]
	obj.SerumProgram = accounts[9]
	obj.SerumMarket = accounts[10]
	obj.SerumCoinVaultAccount = accounts[11]
	obj.SerumPcVaultAccount = accounts[12]
	obj.SerumVaultSigner = accounts[13]
	obj.SerumEventQ = accounts[14]
	obj.SerumBids = accounts[15]
	obj.SerumAsks = accounts[16]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *AdminCancelOrders) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*AdminCancelOrders) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_AdminCancelOrders)
}

func (*AdminCancelOrders) NewInstance() programparser.Instruction {
	return new(AdminCancelOrders)
}

func (obj *AdminCancelOrders) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[17:]
}

// Builds a "admin_cancel_orders" instruction.
func NewAdminCancelOrdersInstruction(
	// Params:
	limitParam uint16,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	ammOwnerAccount solanago.PublicKey,
	ammConfig solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	serumEventQ solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 17, 17+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_AdminCancelOrders[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `limitParam`:
		if err = enc__.Encode(limitParam); err != nil {
			return nil, fmt.Errorf("error while marshaling limitParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [] amm
		metas_[1] = solanago.NewAccountMeta(amm, false, false)
		// [2] = [] amm_authority
		metas_[2] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [3] = [writable] amm_open_orders
		metas_[3] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [4] = [writable] amm_target_orders
		metas_[4] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [5] = [writable] pool_coin_token_account
		metas_[5] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [6] = [writable] pool_pc_token_account
		metas_[6] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [7] = [,signer] amm_owner_account
		metas_[7] = solanago.NewAccountMeta(ammOwnerAccount, false, true)
		// [8] = [writable] amm_config
		metas_[8] = solanago.NewAccountMeta(ammConfig, true, false)
		// [9] = [] serum_program
		metas_[9] = solanago.NewAccountMeta(serumProgram, false, false)
		// [10] = [writable] serum_market
		metas_[10] = solanago.NewAccountMeta(serumMarket, true, false)
		// [11] = [writable] serum_coin_vault_account
		metas_[11] = solanago.NewAccountMeta(serumCoinVaultAccount, true, false)
		// [12] = [writable] serum_pc_vault_account
		metas_[12] = solanago.NewAccountMeta(serumPcVaultAccount, true, false)
		// [13] = [] serum_vault_signer
		metas_[13] = solanago.NewAccountMeta(serumVaultSigner, false, false)
		// [14] = [writable] serum_event_q
		metas_[14] = solanago.NewAccountMeta(serumEventQ, true, false)
		// [15] = [writable] serum_bids
		metas_[15] = solanago.NewAccountMeta(serumBids, true, false)
		// [16] = [writable] serum_asks
		metas_[16] = solanago.NewAccountMeta(serumAsks, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAdminCancelOrders" instruction.
func BuildAdminCancelOrders(
	// Params:
	limitParam uint16,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	ammOwnerAccount solanago.PublicKey,
	ammConfig solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	serumEventQ solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAdminCancelOrdersInstruction(
		limitParam,
		tokenProgram,
		amm,
		ammAuthority,
		ammOpenOrders,
		ammTargetOrders,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		ammOwnerAccount,
		ammConfig,
		serumProgram,
		serumMarket,
		serumCoinVaultAccount,
		serumPcVaultAccount,
		serumVaultSigner,
		serumEventQ,
		serumBids,
		serumAsks,
		remaining__...,
	)
	return instruction_
}
