// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw" instruction.
type Withdraw struct {
	// Params:
	Amount uint64
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm
	Amm solanago.PublicKey `bin:"-"`
	// [2] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [4] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [5] = [writable] lp_mint_address
	LpMintAddress solanago.PublicKey `bin:"-"`
	// [6] = [writable] pool_coin_token_account
	PoolCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] pool_pc_token_account
	PoolPcTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] pool_withdraw_queue
	PoolWithdrawQueue solanago.PublicKey `bin:"-"`
	// [9] = [writable] pool_temp_lp_token_account
	PoolTempLpTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [] serum_program
	SerumProgram solanago.PublicKey `bin:"-"`
	// [11] = [writable] serum_market
	SerumMarket solanago.PublicKey `bin:"-"`
	// [12] = [writable] serum_coin_vault_account
	SerumCoinVaultAccount solanago.PublicKey `bin:"-"`
	// [13] = [writable] serum_pc_vault_account
	SerumPcVaultAccount solanago.PublicKey `bin:"-"`
	// [14] = [] serum_vault_signer
	SerumVaultSigner solanago.PublicKey `bin:"-"`
	// [15] = [writable] user_lp_token_account
	UserLpTokenAccount solanago.PublicKey `bin:"-"`
	// [16] = [writable] uer_coin_token_account
	UerCoinTokenAccount solanago.PublicKey `bin:"-"`
	// [17] = [writable] uer_pc_token_account
	UerPcTokenAccount solanago.PublicKey `bin:"-"`
	// [18] = [,signer] user_owner
	UserOwner solanago.PublicKey `bin:"-"`
	// [19] = [writable] serum_event_q
	SerumEventQ solanago.PublicKey `bin:"-"`
	// [20] = [writable] serum_bids
	SerumBids solanago.PublicKey `bin:"-"`
	// [21] = [writable] serum_asks
	SerumAsks solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Withdraw) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	return nil
}

func (obj *Withdraw) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	return nil
}

func (obj *Withdraw) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 22 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 22, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.Amm = accounts[1]
	obj.AmmAuthority = accounts[2]
	obj.AmmOpenOrders = accounts[3]
	obj.AmmTargetOrders = accounts[4]
	obj.LpMintAddress = accounts[5]
	obj.PoolCoinTokenAccount = accounts[6]
	obj.PoolPcTokenAccount = accounts[7]
	obj.PoolWithdrawQueue = accounts[8]
	obj.PoolTempLpTokenAccount = accounts[9]
	obj.SerumProgram = accounts[10]
	obj.SerumMarket = accounts[11]
	obj.SerumCoinVaultAccount = accounts[12]
	obj.SerumPcVaultAccount = accounts[13]
	obj.SerumVaultSigner = accounts[14]
	obj.UserLpTokenAccount = accounts[15]
	obj.UerCoinTokenAccount = accounts[16]
	obj.UerPcTokenAccount = accounts[17]
	obj.UserOwner = accounts[18]
	obj.SerumEventQ = accounts[19]
	obj.SerumBids = accounts[20]
	obj.SerumAsks = accounts[21]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Withdraw) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Withdraw) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Withdraw)
}

func (*Withdraw) NewInstance() programparser.Instruction {
	return new(Withdraw)
}

// Builds a "withdraw" instruction.
func NewWithdrawInstruction(
	// Params:
	amountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	uerCoinTokenAccount solanago.PublicKey,
	uerPcTokenAccount solanago.PublicKey,
	userOwner solanago.PublicKey,
	serumEventQ solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 22, 22+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Withdraw[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [writable] amm
		metas_[1] = solanago.NewAccountMeta(amm, true, false)
		// [2] = [] amm_authority
		metas_[2] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [3] = [writable] amm_open_orders
		metas_[3] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [4] = [writable] amm_target_orders
		metas_[4] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [5] = [writable] lp_mint_address
		metas_[5] = solanago.NewAccountMeta(lpMintAddress, true, false)
		// [6] = [writable] pool_coin_token_account
		metas_[6] = solanago.NewAccountMeta(poolCoinTokenAccount, true, false)
		// [7] = [writable] pool_pc_token_account
		metas_[7] = solanago.NewAccountMeta(poolPcTokenAccount, true, false)
		// [8] = [writable] pool_withdraw_queue
		metas_[8] = solanago.NewAccountMeta(poolWithdrawQueue, true, false)
		// [9] = [writable] pool_temp_lp_token_account
		metas_[9] = solanago.NewAccountMeta(poolTempLpTokenAccount, true, false)
		// [10] = [] serum_program
		metas_[10] = solanago.NewAccountMeta(serumProgram, false, false)
		// [11] = [writable] serum_market
		metas_[11] = solanago.NewAccountMeta(serumMarket, true, false)
		// [12] = [writable] serum_coin_vault_account
		metas_[12] = solanago.NewAccountMeta(serumCoinVaultAccount, true, false)
		// [13] = [writable] serum_pc_vault_account
		metas_[13] = solanago.NewAccountMeta(serumPcVaultAccount, true, false)
		// [14] = [] serum_vault_signer
		metas_[14] = solanago.NewAccountMeta(serumVaultSigner, false, false)
		// [15] = [writable] user_lp_token_account
		metas_[15] = solanago.NewAccountMeta(userLpTokenAccount, true, false)
		// [16] = [writable] uer_coin_token_account
		metas_[16] = solanago.NewAccountMeta(uerCoinTokenAccount, true, false)
		// [17] = [writable] uer_pc_token_account
		metas_[17] = solanago.NewAccountMeta(uerPcTokenAccount, true, false)
		// [18] = [,signer] user_owner
		metas_[18] = solanago.NewAccountMeta(userOwner, false, true)
		// [19] = [writable] serum_event_q
		metas_[19] = solanago.NewAccountMeta(serumEventQ, true, false)
		// [20] = [writable] serum_bids
		metas_[20] = solanago.NewAccountMeta(serumBids, true, false)
		// [21] = [writable] serum_asks
		metas_[21] = solanago.NewAccountMeta(serumAsks, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdraw" instruction.
func BuildWithdraw(
	// Params:
	amountParam uint64,

	// Accounts:
	tokenProgram solanago.PublicKey,
	amm solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	lpMintAddress solanago.PublicKey,
	poolCoinTokenAccount solanago.PublicKey,
	poolPcTokenAccount solanago.PublicKey,
	poolWithdrawQueue solanago.PublicKey,
	poolTempLpTokenAccount solanago.PublicKey,
	serumProgram solanago.PublicKey,
	serumMarket solanago.PublicKey,
	serumCoinVaultAccount solanago.PublicKey,
	serumPcVaultAccount solanago.PublicKey,
	serumVaultSigner solanago.PublicKey,
	userLpTokenAccount solanago.PublicKey,
	uerCoinTokenAccount solanago.PublicKey,
	uerPcTokenAccount solanago.PublicKey,
	userOwner solanago.PublicKey,
	serumEventQ solanago.PublicKey,
	serumBids solanago.PublicKey,
	serumAsks solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawInstruction(
		amountParam,
		tokenProgram,
		amm,
		ammAuthority,
		ammOpenOrders,
		ammTargetOrders,
		lpMintAddress,
		poolCoinTokenAccount,
		poolPcTokenAccount,
		poolWithdrawQueue,
		poolTempLpTokenAccount,
		serumProgram,
		serumMarket,
		serumCoinVaultAccount,
		serumPcVaultAccount,
		serumVaultSigner,
		userLpTokenAccount,
		uerCoinTokenAccount,
		uerPcTokenAccount,
		userOwner,
		serumEventQ,
		serumBids,
		serumAsks,
		remaining__...,
	)
	return instruction_
}
