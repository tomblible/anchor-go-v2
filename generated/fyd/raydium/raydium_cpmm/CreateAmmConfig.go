// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_amm_config" instruction.

// # Arguments
//
// * `ctx`- The accounts needed by instruction.
// * `index` - The index of amm config, there may be multiple config.
// * `trade_fee_rate` - Trade fee rate, can be changed.
// * `protocol_fee_rate` - The rate of protocol fee within trade fee.
// * `fund_fee_rate` - The rate of fund fee within trade fee.
type CreateAmmConfig struct {
	// Params:
	Index           uint16
	TradeFeeRate    uint64
	ProtocolFeeRate uint64
	FundFeeRate     uint64
	CreatePoolFee   uint64
	// Accounts:
	// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [2] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateAmmConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `indexParam`:
	if err = encoder.Encode(obj.Index); err != nil {
		return fmt.Errorf("error while marshaling indexParam:%w", err)
	}
	// Serialize `tradeFeeRateParam`:
	if err = encoder.Encode(obj.TradeFeeRate); err != nil {
		return fmt.Errorf("error while marshaling tradeFeeRateParam:%w", err)
	}
	// Serialize `protocolFeeRateParam`:
	if err = encoder.Encode(obj.ProtocolFeeRate); err != nil {
		return fmt.Errorf("error while marshaling protocolFeeRateParam:%w", err)
	}
	// Serialize `fundFeeRateParam`:
	if err = encoder.Encode(obj.FundFeeRate); err != nil {
		return fmt.Errorf("error while marshaling fundFeeRateParam:%w", err)
	}
	// Serialize `createPoolFeeParam`:
	if err = encoder.Encode(obj.CreatePoolFee); err != nil {
		return fmt.Errorf("error while marshaling createPoolFeeParam:%w", err)
	}
	return nil
}

func (obj *CreateAmmConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Index`:
	if err = decoder.Decode(&obj.Index); err != nil {
		return fmt.Errorf("error while unmarshaling Index:%w", err)
	}
	// Deserialize `TradeFeeRate`:
	if err = decoder.Decode(&obj.TradeFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling TradeFeeRate:%w", err)
	}
	// Deserialize `ProtocolFeeRate`:
	if err = decoder.Decode(&obj.ProtocolFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFeeRate:%w", err)
	}
	// Deserialize `FundFeeRate`:
	if err = decoder.Decode(&obj.FundFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling FundFeeRate:%w", err)
	}
	// Deserialize `CreatePoolFee`:
	if err = decoder.Decode(&obj.CreatePoolFee); err != nil {
		return fmt.Errorf("error while unmarshaling CreatePoolFee:%w", err)
	}
	return nil
}

func (obj *CreateAmmConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.SystemProgram = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateAmmConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateAmmConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateAmmConfig)
}

func (*CreateAmmConfig) NewInstance() programparser.Instruction {
	return new(CreateAmmConfig)
}

func (obj *CreateAmmConfig) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[3:]
}

// Builds a "create_amm_config" instruction.
// # Arguments //  // * `ctx`- The accounts needed by instruction. // * `index` - The index of amm config, there may be multiple config. // * `trade_fee_rate` - Trade fee rate, can be changed. // * `protocol_fee_rate` - The rate of protocol fee within trade fee. // * `fund_fee_rate` - The rate of fund fee within trade fee. //
func NewCreateAmmConfigInstruction(
	// Params:
	indexParam uint16,
	tradeFeeRateParam uint64,
	protocolFeeRateParam uint64,
	fundFeeRateParam uint64,
	createPoolFeeParam uint64,

	// Accounts:
	ammConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateAmmConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `indexParam`:
		if err = enc__.Encode(indexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling indexParam:%w", err)
		}
		// Serialize `tradeFeeRateParam`:
		if err = enc__.Encode(tradeFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tradeFeeRateParam:%w", err)
		}
		// Serialize `protocolFeeRateParam`:
		if err = enc__.Encode(protocolFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling protocolFeeRateParam:%w", err)
		}
		// Serialize `fundFeeRateParam`:
		if err = enc__.Encode(fundFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling fundFeeRateParam:%w", err)
		}
		// Serialize `createPoolFeeParam`:
		if err = enc__.Encode(createPoolFeeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling createPoolFeeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// Address to be set as protocol owner.
		metas_[0] = solanago.NewAccountMeta(Owner, true, true)
		// [1] = [writable] amm_config
		// Initialize config state account to store protocol owner address and fee rates.
		metas_[1] = solanago.NewAccountMeta(ammConfig, true, false)
		// [2] = [] system_program
		metas_[2] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateAmmConfig" instruction.
// # Arguments //  // * `ctx`- The accounts needed by instruction. // * `index` - The index of amm config, there may be multiple config. // * `trade_fee_rate` - Trade fee rate, can be changed. // * `protocol_fee_rate` - The rate of protocol fee within trade fee. // * `fund_fee_rate` - The rate of fund fee within trade fee. //
func BuildCreateAmmConfig(
	// Params:
	indexParam uint16,
	tradeFeeRateParam uint64,
	protocolFeeRateParam uint64,
	fundFeeRateParam uint64,
	createPoolFeeParam uint64,

	// Accounts:
	ammConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateAmmConfigInstruction(
		indexParam,
		tradeFeeRateParam,
		protocolFeeRateParam,
		fundFeeRateParam,
		createPoolFeeParam,
		ammConfig,
		remaining__...,
	)
	return instruction_
}
