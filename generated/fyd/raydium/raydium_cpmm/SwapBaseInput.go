// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap_base_input" instruction.

// Swap the tokens in the pool base input amount
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `amount_in` -  input amount to transfer, output to DESTINATION is based on the exchange rate
// * `minimum_amount_out` -  Minimum amount of output token, prevents excessive slippage
type SwapBaseInput struct {
	// Params:
	AmountIn         uint64
	MinimumAmountOut uint64
	// Accounts:
	// [0] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [4] = [writable] input_token_account
	InputTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] output_token_account
	OutputTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [writable] input_vault
	InputVault solanago.PublicKey `bin:"-"`
	// [7] = [writable] output_vault
	OutputVault solanago.PublicKey `bin:"-"`
	// [8] = [] input_token_program
	InputTokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] output_token_program
	OutputTokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [] input_token_mint
	InputTokenMint solanago.PublicKey `bin:"-"`
	// [11] = [] output_token_mint
	OutputTokenMint solanago.PublicKey `bin:"-"`
	// [12] = [writable] observation_state
	ObservationState solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SwapBaseInput) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountInParam`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling amountInParam:%w", err)
	}
	// Serialize `minimumAmountOutParam`:
	if err = encoder.Encode(obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while marshaling minimumAmountOutParam:%w", err)
	}
	return nil
}

func (obj *SwapBaseInput) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `MinimumAmountOut`:
	if err = decoder.Decode(&obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumAmountOut:%w", err)
	}
	return nil
}

func (obj *SwapBaseInput) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.Authority = accounts[1]
	obj.AmmConfig = accounts[2]
	obj.PoolState = accounts[3]
	obj.InputTokenAccount = accounts[4]
	obj.OutputTokenAccount = accounts[5]
	obj.InputVault = accounts[6]
	obj.OutputVault = accounts[7]
	obj.InputTokenProgram = accounts[8]
	obj.OutputTokenProgram = accounts[9]
	obj.InputTokenMint = accounts[10]
	obj.OutputTokenMint = accounts[11]
	obj.ObservationState = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SwapBaseInput) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SwapBaseInput) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SwapBaseInput)
}

func (*SwapBaseInput) NewInstance() programparser.Instruction {
	return new(SwapBaseInput)
}

func (obj *SwapBaseInput) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[13:]
}

// Builds a "swap_base_input" instruction.
// Swap the tokens in the pool base input amount //  // # Arguments //  // * `ctx`- The context of accounts // * `amount_in` -  input amount to transfer, output to DESTINATION is based on the exchange rate // * `minimum_amount_out` -  Minimum amount of output token, prevents excessive slippage //
func NewSwapBaseInputInstruction(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	inputVault solanago.PublicKey,
	outputVault solanago.PublicKey,
	inputTokenProgram solanago.PublicKey,
	outputTokenProgram solanago.PublicKey,
	inputTokenMint solanago.PublicKey,
	outputTokenMint solanago.PublicKey,
	observationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SwapBaseInput[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountInParam`:
		if err = enc__.Encode(amountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountInParam:%w", err)
		}
		// Serialize `minimumAmountOutParam`:
		if err = enc__.Encode(minimumAmountOutParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minimumAmountOutParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] payer
		// The user performing the swap
		metas_[0] = solanago.NewAccountMeta(payer, false, true)
		// [1] = [] authority
		metas_[1] = solanago.NewAccountMeta(authority, false, false)
		// [2] = [] amm_config
		// The factory state to read protocol fees
		metas_[2] = solanago.NewAccountMeta(ammConfig, false, false)
		// [3] = [writable] pool_state
		// The program account of the pool in which the swap will be performed
		metas_[3] = solanago.NewAccountMeta(poolState, true, false)
		// [4] = [writable] input_token_account
		// The user token account for input token
		metas_[4] = solanago.NewAccountMeta(inputTokenAccount, true, false)
		// [5] = [writable] output_token_account
		// The user token account for output token
		metas_[5] = solanago.NewAccountMeta(outputTokenAccount, true, false)
		// [6] = [writable] input_vault
		// The vault token account for input token
		metas_[6] = solanago.NewAccountMeta(inputVault, true, false)
		// [7] = [writable] output_vault
		// The vault token account for output token
		metas_[7] = solanago.NewAccountMeta(outputVault, true, false)
		// [8] = [] input_token_program
		// SPL program for input token transfers
		metas_[8] = solanago.NewAccountMeta(inputTokenProgram, false, false)
		// [9] = [] output_token_program
		// SPL program for output token transfers
		metas_[9] = solanago.NewAccountMeta(outputTokenProgram, false, false)
		// [10] = [] input_token_mint
		// The mint of input token
		metas_[10] = solanago.NewAccountMeta(inputTokenMint, false, false)
		// [11] = [] output_token_mint
		// The mint of output token
		metas_[11] = solanago.NewAccountMeta(outputTokenMint, false, false)
		// [12] = [writable] observation_state
		// The program account for the most recent oracle observation
		metas_[12] = solanago.NewAccountMeta(observationState, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwapBaseInput" instruction.
// Swap the tokens in the pool base input amount //  // # Arguments //  // * `ctx`- The context of accounts // * `amount_in` -  input amount to transfer, output to DESTINATION is based on the exchange rate // * `minimum_amount_out` -  Minimum amount of output token, prevents excessive slippage //
func BuildSwapBaseInput(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	inputVault solanago.PublicKey,
	outputVault solanago.PublicKey,
	inputTokenProgram solanago.PublicKey,
	outputTokenProgram solanago.PublicKey,
	inputTokenMint solanago.PublicKey,
	outputTokenMint solanago.PublicKey,
	observationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapBaseInputInstruction(
		amountInParam,
		minimumAmountOutParam,
		payer,
		authority,
		ammConfig,
		poolState,
		inputTokenAccount,
		outputTokenAccount,
		inputVault,
		outputVault,
		inputTokenProgram,
		outputTokenProgram,
		inputTokenMint,
		outputTokenMint,
		observationState,
		remaining__...,
	)
	return instruction_
}
