// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_amm_config" instruction.

// Updates the owner of the amm config
// Must be called by the current owner or admin
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0
// * `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1
// * `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2
// * `new_owner`- The config's new owner, be set when `param` is 3
// * `new_fund_owner`- The config's new fund owner, be set when `param` is 4
// * `param`- The value can be 0 | 1 | 2 | 3 | 4, otherwise will report a error
type UpdateAmmConfig struct {
	// Params:
	Param uint8
	Value uint64
	// Accounts:
	// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateAmmConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	// Serialize `valueParam`:
	if err = encoder.Encode(obj.Value); err != nil {
		return fmt.Errorf("error while marshaling valueParam:%w", err)
	}
	return nil
}

func (obj *UpdateAmmConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	// Deserialize `Value`:
	if err = decoder.Decode(&obj.Value); err != nil {
		return fmt.Errorf("error while unmarshaling Value:%w", err)
	}
	return nil
}

func (obj *UpdateAmmConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateAmmConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateAmmConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateAmmConfig)
}

func (*UpdateAmmConfig) NewInstance() programparser.Instruction {
	return new(UpdateAmmConfig)
}

func (obj *UpdateAmmConfig) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[2:]
}

// Builds a "update_amm_config" instruction.
// Updates the owner of the amm config // Must be called by the current owner or admin //  // # Arguments //  // * `ctx`- The context of accounts // * `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0 // * `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1 // * `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2 // * `new_owner`- The config's new owner, be set when `param` is 3 // * `new_fund_owner`- The config's new fund owner, be set when `param` is 4 // * `param`- The value can be 0 | 1 | 2 | 3 | 4, otherwise will report a error //
func NewUpdateAmmConfigInstruction(
	// Params:
	paramParam uint8,
	valueParam uint64,

	// Accounts:
	ammConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateAmmConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
		// Serialize `valueParam`:
		if err = enc__.Encode(valueParam); err != nil {
			return nil, fmt.Errorf("error while marshaling valueParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// The amm config owner or admin
		metas_[0] = solanago.NewAccountMeta(Owner, false, true)
		// [1] = [writable] amm_config
		// Amm config account to be changed
		metas_[1] = solanago.NewAccountMeta(ammConfig, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateAmmConfig" instruction.
// Updates the owner of the amm config // Must be called by the current owner or admin //  // # Arguments //  // * `ctx`- The context of accounts // * `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0 // * `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1 // * `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2 // * `new_owner`- The config's new owner, be set when `param` is 3 // * `new_fund_owner`- The config's new fund owner, be set when `param` is 4 // * `param`- The value can be 0 | 1 | 2 | 3 | 4, otherwise will report a error //
func BuildUpdateAmmConfig(
	// Params:
	paramParam uint8,
	valueParam uint64,

	// Accounts:
	ammConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateAmmConfigInstruction(
		paramParam,
		valueParam,
		ammConfig,
		remaining__...,
	)
	return instruction_
}
