// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package raydium_cpmm

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{118, 97, 117, 108, 116, 95, 97, 110, 100, 95, 108, 112, 95, 109, 105, 110, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindAuthorityAddress()
	return
}

func FindAmmConfigAddress(index uint16) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{97, 109, 109, 95, 99, 111, 110, 102, 105, 103}
	if seeds[1], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindAmmConfigAddress(index uint16) (pda solanago.PublicKey) {
	pda, _, _ = FindAmmConfigAddress(index)
	return
}

func FindLpMintAddress(poolState solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116}
	seeds[1] = poolState.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindLpMintAddress(poolState solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindLpMintAddress(poolState)
	return
}

func FindToken0VaultAddress(poolState solanago.PublicKey, token0Mint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = token0Mint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindToken0VaultAddress(poolState solanago.PublicKey, token0Mint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindToken0VaultAddress(poolState, token0Mint)
	return
}

func FindToken1VaultAddress(poolState solanago.PublicKey, token1Mint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = token1Mint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindToken1VaultAddress(poolState solanago.PublicKey, token1Mint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindToken1VaultAddress(poolState, token1Mint)
	return
}

func FindObservationStateAddress(poolState solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110}
	seeds[1] = poolState.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindObservationStateAddress(poolState solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindObservationStateAddress(poolState)
	return
}
