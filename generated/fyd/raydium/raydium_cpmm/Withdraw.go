// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw" instruction.

// Withdraw lp for token0 and token1
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `lp_token_amount` - Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned.
// * `minimum_token_0_amount` -  Minimum amount of token 0 to receive, prevents excessive slippage
// * `minimum_token_1_amount` -  Minimum amount of token 1 to receive, prevents excessive slippage
type Withdraw struct {
	// Params:
	LpTokenAmount       uint64
	MinimumToken0Amount uint64
	MinimumToken1Amount uint64
	// Accounts:
	// [0] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [writable] owner_lp_token
	OwnerLpToken solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_0_account
	Token0Account solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_1_account
	Token1Account solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_0_vault
	Token0Vault solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_1_vault
	Token1Vault solanago.PublicKey `bin:"-"`
	// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// [10] = [] vault_0_mint
	Vault0Mint solanago.PublicKey `bin:"-"`
	// [11] = [] vault_1_mint
	Vault1Mint solanago.PublicKey `bin:"-"`
	// [12] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Withdraw) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `lpTokenAmountParam`:
	if err = encoder.Encode(obj.LpTokenAmount); err != nil {
		return fmt.Errorf("error while marshaling lpTokenAmountParam:%w", err)
	}
	// Serialize `minimumToken0AmountParam`:
	if err = encoder.Encode(obj.MinimumToken0Amount); err != nil {
		return fmt.Errorf("error while marshaling minimumToken0AmountParam:%w", err)
	}
	// Serialize `minimumToken1AmountParam`:
	if err = encoder.Encode(obj.MinimumToken1Amount); err != nil {
		return fmt.Errorf("error while marshaling minimumToken1AmountParam:%w", err)
	}
	return nil
}

func (obj *Withdraw) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpTokenAmount`:
	if err = decoder.Decode(&obj.LpTokenAmount); err != nil {
		return fmt.Errorf("error while unmarshaling LpTokenAmount:%w", err)
	}
	// Deserialize `MinimumToken0Amount`:
	if err = decoder.Decode(&obj.MinimumToken0Amount); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumToken0Amount:%w", err)
	}
	// Deserialize `MinimumToken1Amount`:
	if err = decoder.Decode(&obj.MinimumToken1Amount); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumToken1Amount:%w", err)
	}
	return nil
}

func (obj *Withdraw) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.Authority = accounts[1]
	obj.PoolState = accounts[2]
	obj.OwnerLpToken = accounts[3]
	obj.Token0Account = accounts[4]
	obj.Token1Account = accounts[5]
	obj.Token0Vault = accounts[6]
	obj.Token1Vault = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.TokenProgram2022 = accounts[9]
	obj.Vault0Mint = accounts[10]
	obj.Vault1Mint = accounts[11]
	obj.LpMint = accounts[12]
	obj.MemoProgram = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Withdraw) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Withdraw) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Withdraw)
}

func (*Withdraw) NewInstance() programparser.Instruction {
	return new(Withdraw)
}

func (obj *Withdraw) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[14:]
}

// Builds a "withdraw" instruction.
// Withdraw lp for token0 and token1 //  // # Arguments //  // * `ctx`- The context of accounts // * `lp_token_amount` - Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned. // * `minimum_token_0_amount` -  Minimum amount of token 0 to receive, prevents excessive slippage // * `minimum_token_1_amount` -  Minimum amount of token 1 to receive, prevents excessive slippage //
func NewWithdrawInstruction(
	// Params:
	lpTokenAmountParam uint64,
	minimumToken0AmountParam uint64,
	minimumToken1AmountParam uint64,

	// Accounts:
	owner solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	ownerLpToken solanago.PublicKey,
	token0Account solanago.PublicKey,
	token1Account solanago.PublicKey,
	token0Vault solanago.PublicKey,
	token1Vault solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	lpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Withdraw[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `lpTokenAmountParam`:
		if err = enc__.Encode(lpTokenAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling lpTokenAmountParam:%w", err)
		}
		// Serialize `minimumToken0AmountParam`:
		if err = enc__.Encode(minimumToken0AmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minimumToken0AmountParam:%w", err)
		}
		// Serialize `minimumToken1AmountParam`:
		if err = enc__.Encode(minimumToken1AmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minimumToken1AmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner
		// Pays to mint the position
		metas_[0] = solanago.NewAccountMeta(owner, false, true)
		// [1] = [] authority
		metas_[1] = solanago.NewAccountMeta(authority, false, false)
		// [2] = [writable] pool_state
		// Pool state account
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [writable] owner_lp_token
		// Owner lp token account
		metas_[3] = solanago.NewAccountMeta(ownerLpToken, true, false)
		// [4] = [writable] token_0_account
		// The token account for receive token_0,
		metas_[4] = solanago.NewAccountMeta(token0Account, true, false)
		// [5] = [writable] token_1_account
		// The token account for receive token_1
		metas_[5] = solanago.NewAccountMeta(token1Account, true, false)
		// [6] = [writable] token_0_vault
		// The address that holds pool tokens for token_0
		metas_[6] = solanago.NewAccountMeta(token0Vault, true, false)
		// [7] = [writable] token_1_vault
		// The address that holds pool tokens for token_1
		metas_[7] = solanago.NewAccountMeta(token1Vault, true, false)
		// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// token Program
		metas_[8] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [9] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Token program 2022
		metas_[9] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// [10] = [] vault_0_mint
		// The mint of token_0 vault
		metas_[10] = solanago.NewAccountMeta(vault0Mint, false, false)
		// [11] = [] vault_1_mint
		// The mint of token_1 vault
		metas_[11] = solanago.NewAccountMeta(vault1Mint, false, false)
		// [12] = [writable] lp_mint
		// Pool lp token mint
		metas_[12] = solanago.NewAccountMeta(lpMint, true, false)
		// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		// memo program
		metas_[13] = solanago.NewAccountMeta(MemoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdraw" instruction.
// Withdraw lp for token0 and token1 //  // # Arguments //  // * `ctx`- The context of accounts // * `lp_token_amount` - Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned. // * `minimum_token_0_amount` -  Minimum amount of token 0 to receive, prevents excessive slippage // * `minimum_token_1_amount` -  Minimum amount of token 1 to receive, prevents excessive slippage //
func BuildWithdraw(
	// Params:
	lpTokenAmountParam uint64,
	minimumToken0AmountParam uint64,
	minimumToken1AmountParam uint64,

	// Accounts:
	owner solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	ownerLpToken solanago.PublicKey,
	token0Account solanago.PublicKey,
	token1Account solanago.PublicKey,
	token0Vault solanago.PublicKey,
	token1Vault solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	lpMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawInstruction(
		lpTokenAmountParam,
		minimumToken0AmountParam,
		minimumToken1AmountParam,
		owner,
		authority,
		poolState,
		ownerLpToken,
		token0Account,
		token1Account,
		token0Vault,
		token1Vault,
		vault0Mint,
		vault1Mint,
		lpMint,
		remaining__...,
	)
	return instruction_
}
