// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "decrease_liquidity_v2" instruction.

// Decreases liquidity for an existing position, support Token2022
//
// # Arguments
//
// * `ctx` -  The context of accounts
// * `liquidity` - The amount by which liquidity will be decreased
// * `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity
// * `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity
type DecreaseLiquidityV2 struct {
	// Params:
	Liquidity  binary.Uint128
	Amount0Min uint64
	Amount1Min uint64
	// Accounts:
	// [0] = [,signer] nft_owner
	NftOwner solanago.PublicKey `bin:"-"`
	// [1] = [] nft_account
	NftAccount solanago.PublicKey `bin:"-"`
	// [2] = [writable] personal_position
	PersonalPosition solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [4] = [writable] protocol_position
	ProtocolPosition solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_vault_0
	TokenVault0 solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_vault_1
	TokenVault1 solanago.PublicKey `bin:"-"`
	// [7] = [writable] tick_array_lower
	TickArrayLower solanago.PublicKey `bin:"-"`
	// [8] = [writable] tick_array_upper
	TickArrayUpper solanago.PublicKey `bin:"-"`
	// [9] = [writable] recipient_token_account_0
	RecipientTokenAccount0 solanago.PublicKey `bin:"-"`
	// [10] = [writable] recipient_token_account_1
	RecipientTokenAccount1 solanago.PublicKey `bin:"-"`
	// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// [14] = [] vault_0_mint
	Vault0Mint solanago.PublicKey `bin:"-"`
	// [15] = [] vault_1_mint
	Vault1Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DecreaseLiquidityV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `liquidityParam`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling liquidityParam:%w", err)
	}
	// Serialize `amount0MinParam`:
	if err = encoder.Encode(obj.Amount0Min); err != nil {
		return fmt.Errorf("error while marshaling amount0MinParam:%w", err)
	}
	// Serialize `amount1MinParam`:
	if err = encoder.Encode(obj.Amount1Min); err != nil {
		return fmt.Errorf("error while marshaling amount1MinParam:%w", err)
	}
	return nil
}

func (obj *DecreaseLiquidityV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	// Deserialize `Amount0Min`:
	if err = decoder.Decode(&obj.Amount0Min); err != nil {
		return fmt.Errorf("error while unmarshaling Amount0Min:%w", err)
	}
	// Deserialize `Amount1Min`:
	if err = decoder.Decode(&obj.Amount1Min); err != nil {
		return fmt.Errorf("error while unmarshaling Amount1Min:%w", err)
	}
	return nil
}

func (obj *DecreaseLiquidityV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.NftOwner = accounts[0]
	obj.NftAccount = accounts[1]
	obj.PersonalPosition = accounts[2]
	obj.PoolState = accounts[3]
	obj.ProtocolPosition = accounts[4]
	obj.TokenVault0 = accounts[5]
	obj.TokenVault1 = accounts[6]
	obj.TickArrayLower = accounts[7]
	obj.TickArrayUpper = accounts[8]
	obj.RecipientTokenAccount0 = accounts[9]
	obj.RecipientTokenAccount1 = accounts[10]
	obj.TokenProgram = accounts[11]
	obj.TokenProgram2022 = accounts[12]
	obj.MemoProgram = accounts[13]
	obj.Vault0Mint = accounts[14]
	obj.Vault1Mint = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DecreaseLiquidityV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DecreaseLiquidityV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DecreaseLiquidityV2)
}

func (*DecreaseLiquidityV2) NewInstance() programparser.Instruction {
	return new(DecreaseLiquidityV2)
}

func (obj *DecreaseLiquidityV2) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[16:]
}

// Builds a "decrease_liquidity_v2" instruction.
// Decreases liquidity for an existing position, support Token2022 //  // # Arguments //  // * `ctx` -  The context of accounts // * `liquidity` - The amount by which liquidity will be decreased // * `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity // * `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity //
func NewDecreaseLiquidityV2Instruction(
	// Params:
	liquidityParam binary.Uint128,
	amount0MinParam uint64,
	amount1MinParam uint64,

	// Accounts:
	nftOwner solanago.PublicKey,
	nftAccount solanago.PublicKey,
	personalPosition solanago.PublicKey,
	poolState solanago.PublicKey,
	protocolPosition solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	recipientTokenAccount0 solanago.PublicKey,
	recipientTokenAccount1 solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DecreaseLiquidityV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `liquidityParam`:
		if err = enc__.Encode(liquidityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling liquidityParam:%w", err)
		}
		// Serialize `amount0MinParam`:
		if err = enc__.Encode(amount0MinParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount0MinParam:%w", err)
		}
		// Serialize `amount1MinParam`:
		if err = enc__.Encode(amount1MinParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount1MinParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] nft_owner
		// The position owner or delegated authority
		metas_[0] = solanago.NewAccountMeta(nftOwner, false, true)
		// [1] = [] nft_account
		// The token account for the tokenized position
		metas_[1] = solanago.NewAccountMeta(nftAccount, false, false)
		// [2] = [writable] personal_position
		// Decrease liquidity for this position
		metas_[2] = solanago.NewAccountMeta(personalPosition, true, false)
		// [3] = [writable] pool_state
		metas_[3] = solanago.NewAccountMeta(poolState, true, false)
		// [4] = [writable] protocol_position
		metas_[4] = solanago.NewAccountMeta(protocolPosition, true, false)
		// [5] = [writable] token_vault_0
		// Token_0 vault
		metas_[5] = solanago.NewAccountMeta(tokenVault0, true, false)
		// [6] = [writable] token_vault_1
		// Token_1 vault
		metas_[6] = solanago.NewAccountMeta(tokenVault1, true, false)
		// [7] = [writable] tick_array_lower
		// Stores init state for the lower tick
		metas_[7] = solanago.NewAccountMeta(tickArrayLower, true, false)
		// [8] = [writable] tick_array_upper
		// Stores init state for the upper tick
		metas_[8] = solanago.NewAccountMeta(tickArrayUpper, true, false)
		// [9] = [writable] recipient_token_account_0
		// The destination token account for receive amount_0
		metas_[9] = solanago.NewAccountMeta(recipientTokenAccount0, true, false)
		// [10] = [writable] recipient_token_account_1
		// The destination token account for receive amount_1
		metas_[10] = solanago.NewAccountMeta(recipientTokenAccount1, true, false)
		// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL program to transfer out tokens
		metas_[11] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [12] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Token program 2022
		metas_[12] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// [13] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		// memo program
		metas_[13] = solanago.NewAccountMeta(MemoProgram, false, false)
		// [14] = [] vault_0_mint
		// The mint of token vault 0
		metas_[14] = solanago.NewAccountMeta(vault0Mint, false, false)
		// [15] = [] vault_1_mint
		// The mint of token vault 1
		metas_[15] = solanago.NewAccountMeta(vault1Mint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDecreaseLiquidityV2" instruction.
// Decreases liquidity for an existing position, support Token2022 //  // # Arguments //  // * `ctx` -  The context of accounts // * `liquidity` - The amount by which liquidity will be decreased // * `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity // * `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity //
func BuildDecreaseLiquidityV2(
	// Params:
	liquidityParam binary.Uint128,
	amount0MinParam uint64,
	amount1MinParam uint64,

	// Accounts:
	nftOwner solanago.PublicKey,
	nftAccount solanago.PublicKey,
	personalPosition solanago.PublicKey,
	poolState solanago.PublicKey,
	protocolPosition solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	recipientTokenAccount0 solanago.PublicKey,
	recipientTokenAccount1 solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDecreaseLiquidityV2Instruction(
		liquidityParam,
		amount0MinParam,
		amount1MinParam,
		nftOwner,
		nftAccount,
		personalPosition,
		poolState,
		protocolPosition,
		tokenVault0,
		tokenVault1,
		tickArrayLower,
		tickArrayUpper,
		recipientTokenAccount0,
		recipientTokenAccount1,
		vault0Mint,
		vault1Mint,
		remaining__...,
	)
	return instruction_
}
