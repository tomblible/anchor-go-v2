// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "increase_liquidity" instruction.

// #[deprecated(note = "Use `increase_liquidity_v2` instead.")]
// Increases liquidity for an existing position, with amount paid by `payer`
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `liquidity` - The desired liquidity to be added, can't be zero
// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
type IncreaseLiquidity struct {
	// Params:
	Liquidity  binary.Uint128
	Amount0Max uint64
	Amount1Max uint64
	// Accounts:
	// [0] = [,signer] nft_owner
	NftOwner solanago.PublicKey `bin:"-"`
	// [1] = [] nft_account
	NftAccount solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [writable] protocol_position
	ProtocolPosition solanago.PublicKey `bin:"-"`
	// [4] = [writable] personal_position
	PersonalPosition solanago.PublicKey `bin:"-"`
	// [5] = [writable] tick_array_lower
	TickArrayLower solanago.PublicKey `bin:"-"`
	// [6] = [writable] tick_array_upper
	TickArrayUpper solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_account_0
	TokenAccount0 solanago.PublicKey `bin:"-"`
	// [8] = [writable] token_account_1
	TokenAccount1 solanago.PublicKey `bin:"-"`
	// [9] = [writable] token_vault_0
	TokenVault0 solanago.PublicKey `bin:"-"`
	// [10] = [writable] token_vault_1
	TokenVault1 solanago.PublicKey `bin:"-"`
	// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj IncreaseLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `liquidityParam`:
	if err = encoder.Encode(obj.Liquidity); err != nil {
		return fmt.Errorf("error while marshaling liquidityParam:%w", err)
	}
	// Serialize `amount0MaxParam`:
	if err = encoder.Encode(obj.Amount0Max); err != nil {
		return fmt.Errorf("error while marshaling amount0MaxParam:%w", err)
	}
	// Serialize `amount1MaxParam`:
	if err = encoder.Encode(obj.Amount1Max); err != nil {
		return fmt.Errorf("error while marshaling amount1MaxParam:%w", err)
	}
	return nil
}

func (obj *IncreaseLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	if err = decoder.Decode(&obj.Liquidity); err != nil {
		return fmt.Errorf("error while unmarshaling Liquidity:%w", err)
	}
	// Deserialize `Amount0Max`:
	if err = decoder.Decode(&obj.Amount0Max); err != nil {
		return fmt.Errorf("error while unmarshaling Amount0Max:%w", err)
	}
	// Deserialize `Amount1Max`:
	if err = decoder.Decode(&obj.Amount1Max); err != nil {
		return fmt.Errorf("error while unmarshaling Amount1Max:%w", err)
	}
	return nil
}

func (obj *IncreaseLiquidity) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.NftOwner = accounts[0]
	obj.NftAccount = accounts[1]
	obj.PoolState = accounts[2]
	obj.ProtocolPosition = accounts[3]
	obj.PersonalPosition = accounts[4]
	obj.TickArrayLower = accounts[5]
	obj.TickArrayUpper = accounts[6]
	obj.TokenAccount0 = accounts[7]
	obj.TokenAccount1 = accounts[8]
	obj.TokenVault0 = accounts[9]
	obj.TokenVault1 = accounts[10]
	obj.TokenProgram = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *IncreaseLiquidity) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*IncreaseLiquidity) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_IncreaseLiquidity)
}

func (*IncreaseLiquidity) NewInstance() programparser.Instruction {
	return new(IncreaseLiquidity)
}

// Builds a "increase_liquidity" instruction.
// #[deprecated(note = "Use `increase_liquidity_v2` instead.")] // Increases liquidity for an existing position, with amount paid by `payer` //  // # Arguments //  // * `ctx` - The context of accounts // * `liquidity` - The desired liquidity to be added, can't be zero // * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check // * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check //
func NewIncreaseLiquidityInstruction(
	// Params:
	liquidityParam binary.Uint128,
	amount0MaxParam uint64,
	amount1MaxParam uint64,

	// Accounts:
	nftOwner solanago.PublicKey,
	nftAccount solanago.PublicKey,
	poolState solanago.PublicKey,
	protocolPosition solanago.PublicKey,
	personalPosition solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	tokenAccount0 solanago.PublicKey,
	tokenAccount1 solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_IncreaseLiquidity[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `liquidityParam`:
		if err = enc__.Encode(liquidityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling liquidityParam:%w", err)
		}
		// Serialize `amount0MaxParam`:
		if err = enc__.Encode(amount0MaxParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount0MaxParam:%w", err)
		}
		// Serialize `amount1MaxParam`:
		if err = enc__.Encode(amount1MaxParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount1MaxParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] nft_owner
		// Pays to mint the position
		metas_[0] = solanago.NewAccountMeta(nftOwner, false, true)
		// [1] = [] nft_account
		// The token account for nft
		metas_[1] = solanago.NewAccountMeta(nftAccount, false, false)
		// [2] = [writable] pool_state
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [writable] protocol_position
		metas_[3] = solanago.NewAccountMeta(protocolPosition, true, false)
		// [4] = [writable] personal_position
		// Increase liquidity for this position
		metas_[4] = solanago.NewAccountMeta(personalPosition, true, false)
		// [5] = [writable] tick_array_lower
		// Stores init state for the lower tick
		metas_[5] = solanago.NewAccountMeta(tickArrayLower, true, false)
		// [6] = [writable] tick_array_upper
		// Stores init state for the upper tick
		metas_[6] = solanago.NewAccountMeta(tickArrayUpper, true, false)
		// [7] = [writable] token_account_0
		// The payer's token account for token_0
		metas_[7] = solanago.NewAccountMeta(tokenAccount0, true, false)
		// [8] = [writable] token_account_1
		// The token account spending token_1 to mint the position
		metas_[8] = solanago.NewAccountMeta(tokenAccount1, true, false)
		// [9] = [writable] token_vault_0
		// The address that holds pool tokens for token_0
		metas_[9] = solanago.NewAccountMeta(tokenVault0, true, false)
		// [10] = [writable] token_vault_1
		// The address that holds pool tokens for token_1
		metas_[10] = solanago.NewAccountMeta(tokenVault1, true, false)
		// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// Program to create mint account and mint tokens
		metas_[11] = solanago.NewAccountMeta(TokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildIncreaseLiquidity" instruction.
// #[deprecated(note = "Use `increase_liquidity_v2` instead.")] // Increases liquidity for an existing position, with amount paid by `payer` //  // # Arguments //  // * `ctx` - The context of accounts // * `liquidity` - The desired liquidity to be added, can't be zero // * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check // * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check //
func BuildIncreaseLiquidity(
	// Params:
	liquidityParam binary.Uint128,
	amount0MaxParam uint64,
	amount1MaxParam uint64,

	// Accounts:
	nftOwner solanago.PublicKey,
	nftAccount solanago.PublicKey,
	poolState solanago.PublicKey,
	protocolPosition solanago.PublicKey,
	personalPosition solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	tokenAccount0 solanago.PublicKey,
	tokenAccount1 solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewIncreaseLiquidityInstruction(
		liquidityParam,
		amount0MaxParam,
		amount1MaxParam,
		nftOwner,
		nftAccount,
		poolState,
		protocolPosition,
		personalPosition,
		tickArrayLower,
		tickArrayUpper,
		tokenAccount0,
		tokenAccount1,
		tokenVault0,
		tokenVault1,
		remaining__...,
	)
	return instruction_
}
