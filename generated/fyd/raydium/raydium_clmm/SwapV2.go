// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap_v2" instruction.

// Swaps one token for as much as possible of another token across a single pool, support token program 2022
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)
// * `other_amount_threshold` - For slippage check
// * `sqrt_price_limit` - The Q64.64 format √P limit price, and if it is 0, the maximum and minimum prices that can be reached are set by default according to the swap direction.
// * `is_base_input` - swap base input or swap base output
type SwapV2 struct {
	// Params:
	Amount               uint64
	OtherAmountThreshold uint64
	SqrtPriceLimitX64    binary.Uint128
	IsBaseInput          bool
	// Accounts:
	// [0] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [writable] input_token_account
	InputTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] output_token_account
	OutputTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] input_vault
	InputVault solanago.PublicKey `bin:"-"`
	// [6] = [writable] output_vault
	OutputVault solanago.PublicKey `bin:"-"`
	// [7] = [writable] observation_state
	ObservationState solanago.PublicKey `bin:"-"`
	// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// [10] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// [11] = [] input_vault_mint
	InputVaultMint solanago.PublicKey `bin:"-"`
	// [12] = [] output_vault_mint
	OutputVaultMint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SwapV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	// Serialize `otherAmountThresholdParam`:
	if err = encoder.Encode(obj.OtherAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling otherAmountThresholdParam:%w", err)
	}
	// Serialize `sqrtPriceLimitX64Param`:
	if err = encoder.Encode(obj.SqrtPriceLimitX64); err != nil {
		return fmt.Errorf("error while marshaling sqrtPriceLimitX64Param:%w", err)
	}
	// Serialize `isBaseInputParam`:
	if err = encoder.Encode(obj.IsBaseInput); err != nil {
		return fmt.Errorf("error while marshaling isBaseInputParam:%w", err)
	}
	return nil
}

func (obj *SwapV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	// Deserialize `OtherAmountThreshold`:
	if err = decoder.Decode(&obj.OtherAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling OtherAmountThreshold:%w", err)
	}
	// Deserialize `SqrtPriceLimitX64`:
	if err = decoder.Decode(&obj.SqrtPriceLimitX64); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPriceLimitX64:%w", err)
	}
	// Deserialize `IsBaseInput`:
	if err = decoder.Decode(&obj.IsBaseInput); err != nil {
		return fmt.Errorf("error while unmarshaling IsBaseInput:%w", err)
	}
	return nil
}

func (obj *SwapV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.PoolState = accounts[2]
	obj.InputTokenAccount = accounts[3]
	obj.OutputTokenAccount = accounts[4]
	obj.InputVault = accounts[5]
	obj.OutputVault = accounts[6]
	obj.ObservationState = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.TokenProgram2022 = accounts[9]
	obj.MemoProgram = accounts[10]
	obj.InputVaultMint = accounts[11]
	obj.OutputVaultMint = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SwapV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SwapV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SwapV2)
}

func (*SwapV2) NewInstance() programparser.Instruction {
	return new(SwapV2)
}

func (obj *SwapV2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 13 {
		return nil
	}
	return obj.PublicKeySlice[13:]
}

// Builds a "swap_v2" instruction.
// Swaps one token for as much as possible of another token across a single pool, support token program 2022 //  // # Arguments //  // * `ctx` - The context of accounts // * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum) // * `other_amount_threshold` - For slippage check // * `sqrt_price_limit` - The Q64.64 format √P limit price, and if it is 0, the maximum and minimum prices that can be reached are set by default according to the swap direction. // * `is_base_input` - swap base input or swap base output //
func NewSwapV2Instruction(
	// Params:
	amountParam uint64,
	otherAmountThresholdParam uint64,
	sqrtPriceLimitX64Param binary.Uint128,
	isBaseInputParam bool,

	// Accounts:
	payer solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	inputVault solanago.PublicKey,
	outputVault solanago.PublicKey,
	observationState solanago.PublicKey,
	inputVaultMint solanago.PublicKey,
	outputVaultMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SwapV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
		// Serialize `otherAmountThresholdParam`:
		if err = enc__.Encode(otherAmountThresholdParam); err != nil {
			return nil, fmt.Errorf("error while marshaling otherAmountThresholdParam:%w", err)
		}
		// Serialize `sqrtPriceLimitX64Param`:
		if err = enc__.Encode(sqrtPriceLimitX64Param); err != nil {
			return nil, fmt.Errorf("error while marshaling sqrtPriceLimitX64Param:%w", err)
		}
		// Serialize `isBaseInputParam`:
		if err = enc__.Encode(isBaseInputParam); err != nil {
			return nil, fmt.Errorf("error while marshaling isBaseInputParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] payer
		// The user performing the swap
		metas_[0] = solanago.NewAccountMeta(payer, false, true)
		// [1] = [] amm_config
		// The factory state to read protocol fees
		metas_[1] = solanago.NewAccountMeta(ammConfig, false, false)
		// [2] = [writable] pool_state
		// The program account of the pool in which the swap will be performed
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [writable] input_token_account
		// The user token account for input token
		metas_[3] = solanago.NewAccountMeta(inputTokenAccount, true, false)
		// [4] = [writable] output_token_account
		// The user token account for output token
		metas_[4] = solanago.NewAccountMeta(outputTokenAccount, true, false)
		// [5] = [writable] input_vault
		// The vault token account for input token
		metas_[5] = solanago.NewAccountMeta(inputVault, true, false)
		// [6] = [writable] output_vault
		// The vault token account for output token
		metas_[6] = solanago.NewAccountMeta(outputVault, true, false)
		// [7] = [writable] observation_state
		// The program account for the most recent oracle observation
		metas_[7] = solanago.NewAccountMeta(observationState, true, false)
		// [8] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL program for token transfers
		metas_[8] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [9] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// SPL program 2022 for token transfers
		metas_[9] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// [10] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		// Memo program
		metas_[10] = solanago.NewAccountMeta(MemoProgram, false, false)
		// [11] = [] input_vault_mint
		// The mint of token vault 0
		metas_[11] = solanago.NewAccountMeta(inputVaultMint, false, false)
		// [12] = [] output_vault_mint
		// The mint of token vault 1
		metas_[12] = solanago.NewAccountMeta(outputVaultMint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwapV2" instruction.
// Swaps one token for as much as possible of another token across a single pool, support token program 2022 //  // # Arguments //  // * `ctx` - The context of accounts // * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum) // * `other_amount_threshold` - For slippage check // * `sqrt_price_limit` - The Q64.64 format √P limit price, and if it is 0, the maximum and minimum prices that can be reached are set by default according to the swap direction. // * `is_base_input` - swap base input or swap base output //
func BuildSwapV2(
	// Params:
	amountParam uint64,
	otherAmountThresholdParam uint64,
	sqrtPriceLimitX64Param binary.Uint128,
	isBaseInputParam bool,

	// Accounts:
	payer solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	outputTokenAccount solanago.PublicKey,
	inputVault solanago.PublicKey,
	outputVault solanago.PublicKey,
	observationState solanago.PublicKey,
	inputVaultMint solanago.PublicKey,
	outputVaultMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapV2Instruction(
		amountParam,
		otherAmountThresholdParam,
		sqrtPriceLimitX64Param,
		isBaseInputParam,
		payer,
		ammConfig,
		poolState,
		inputTokenAccount,
		outputTokenAccount,
		inputVault,
		outputVault,
		observationState,
		inputVaultMint,
		outputVaultMint,
		remaining__...,
	)
	return instruction_
}
