// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_reward_params" instruction.

// Reset reward param, start a new reward cycle or extend the current cycle.
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `reward_index` - The index of reward token in the pool, it must be smaller than 3
// * `emissions_per_second_x64` - The per second emission reward, when extend the current cycle,
// new value can't be less than old value
// * `open_time` - reward open timestamp, must be set when starting a new cycle
// * `end_time` - reward end timestamp
type SetRewardParams struct {
	// Params:
	RewardIndex           uint8
	EmissionsPerSecondX64 binary.Uint128
	OpenTime              uint64
	EndTime               uint64
	// Accounts:
	// [0] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [] operation_state
	OperationState solanago.PublicKey `bin:"-"`
	// [4] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [5] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetRewardParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `emissionsPerSecondX64Param`:
	if err = encoder.Encode(obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while marshaling emissionsPerSecondX64Param:%w", err)
	}
	// Serialize `openTimeParam`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling openTimeParam:%w", err)
	}
	// Serialize `endTimeParam`:
	if err = encoder.Encode(obj.EndTime); err != nil {
		return fmt.Errorf("error while marshaling endTimeParam:%w", err)
	}
	return nil
}

func (obj *SetRewardParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `EmissionsPerSecondX64`:
	if err = decoder.Decode(&obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while unmarshaling EmissionsPerSecondX64:%w", err)
	}
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	// Deserialize `EndTime`:
	if err = decoder.Decode(&obj.EndTime); err != nil {
		return fmt.Errorf("error while unmarshaling EndTime:%w", err)
	}
	return nil
}

func (obj *SetRewardParams) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.PoolState = accounts[2]
	obj.OperationState = accounts[3]
	obj.TokenProgram = accounts[4]
	obj.TokenProgram2022 = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetRewardParams) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetRewardParams) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetRewardParams)
}

func (*SetRewardParams) NewInstance() programparser.Instruction {
	return new(SetRewardParams)
}

// Builds a "set_reward_params" instruction.
// Reset reward param, start a new reward cycle or extend the current cycle. //  // # Arguments //  // * `ctx` - The context of accounts // * `reward_index` - The index of reward token in the pool, it must be smaller than 3 // * `emissions_per_second_x64` - The per second emission reward, when extend the current cycle, // new value can't be less than old value // * `open_time` - reward open timestamp, must be set when starting a new cycle // * `end_time` - reward end timestamp //
func NewSetRewardParamsInstruction(
	// Params:
	rewardIndexParam uint8,
	emissionsPerSecondX64Param binary.Uint128,
	openTimeParam uint64,
	endTimeParam uint64,

	// Accounts:
	authority solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	operationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetRewardParams[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `emissionsPerSecondX64Param`:
		if err = enc__.Encode(emissionsPerSecondX64Param); err != nil {
			return nil, fmt.Errorf("error while marshaling emissionsPerSecondX64Param:%w", err)
		}
		// Serialize `openTimeParam`:
		if err = enc__.Encode(openTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling openTimeParam:%w", err)
		}
		// Serialize `endTimeParam`:
		if err = enc__.Encode(endTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling endTimeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] authority
		// Address to be set as protocol owner. It pays to create factory state account.
		metas_[0] = solanago.NewAccountMeta(authority, false, true)
		// [1] = [] amm_config
		metas_[1] = solanago.NewAccountMeta(ammConfig, false, false)
		// [2] = [writable] pool_state
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [] operation_state
		// load info from the account to judge reward permission
		metas_[3] = solanago.NewAccountMeta(operationState, false, false)
		// [4] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// Token program
		metas_[4] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [5] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Token program 2022
		metas_[5] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetRewardParams" instruction.
// Reset reward param, start a new reward cycle or extend the current cycle. //  // # Arguments //  // * `ctx` - The context of accounts // * `reward_index` - The index of reward token in the pool, it must be smaller than 3 // * `emissions_per_second_x64` - The per second emission reward, when extend the current cycle, // new value can't be less than old value // * `open_time` - reward open timestamp, must be set when starting a new cycle // * `end_time` - reward end timestamp //
func BuildSetRewardParams(
	// Params:
	rewardIndexParam uint8,
	emissionsPerSecondX64Param binary.Uint128,
	openTimeParam uint64,
	endTimeParam uint64,

	// Accounts:
	authority solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	operationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetRewardParamsInstruction(
		rewardIndexParam,
		emissionsPerSecondX64Param,
		openTimeParam,
		endTimeParam,
		authority,
		ammConfig,
		poolState,
		operationState,
		remaining__...,
	)
	return instruction_
}
