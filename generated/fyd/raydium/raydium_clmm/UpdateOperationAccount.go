// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_operation_account" instruction.

// Update the operation account
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `param`- The value can be 0 | 1 | 2 | 3, otherwise will report a error
// * `keys`- update operation owner when the `param` is 0
// remove operation owner when the `param` is 1
// update whitelist mint when the `param` is 2
// remove whitelist mint when the `param` is 3
type UpdateOperationAccount struct {
	// Params:
	Param uint8
	Keys  []solanago.PublicKey
	// Accounts:
	// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] operation_state
	OperationState solanago.PublicKey `bin:"-"`
	// [2] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateOperationAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	// Serialize `keysParam`:
	if err = encoder.Encode(obj.Keys); err != nil {
		return fmt.Errorf("error while marshaling keysParam:%w", err)
	}
	return nil
}

func (obj *UpdateOperationAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	// Deserialize `Keys`:
	if err = decoder.Decode(&obj.Keys); err != nil {
		return fmt.Errorf("error while unmarshaling Keys:%w", err)
	}
	return nil
}

func (obj *UpdateOperationAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.OperationState = accounts[1]
	obj.SystemProgram = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateOperationAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateOperationAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateOperationAccount)
}

func (*UpdateOperationAccount) NewInstance() programparser.Instruction {
	return new(UpdateOperationAccount)
}

func (obj *UpdateOperationAccount) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "update_operation_account" instruction.
// Update the operation account //  // # Arguments //  // * `ctx`- The context of accounts // * `param`- The value can be 0 | 1 | 2 | 3, otherwise will report a error // * `keys`- update operation owner when the `param` is 0 // remove operation owner when the `param` is 1 // update whitelist mint when the `param` is 2 // remove whitelist mint when the `param` is 3 //
func NewUpdateOperationAccountInstruction(
	// Params:
	paramParam uint8,
	keysParam []solanago.PublicKey,

	// Accounts:
	operationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateOperationAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
		// Serialize `keysParam`:
		if err = enc__.Encode(keysParam); err != nil {
			return nil, fmt.Errorf("error while marshaling keysParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// Address to be set as operation account owner.
		metas_[0] = solanago.NewAccountMeta(Owner, false, true)
		// [1] = [writable] operation_state
		// Initialize operation state account to store operation owner address and white list mint.
		metas_[1] = solanago.NewAccountMeta(operationState, true, false)
		// [2] = [] system_program
		metas_[2] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateOperationAccount" instruction.
// Update the operation account //  // # Arguments //  // * `ctx`- The context of accounts // * `param`- The value can be 0 | 1 | 2 | 3, otherwise will report a error // * `keys`- update operation owner when the `param` is 0 // remove operation owner when the `param` is 1 // update whitelist mint when the `param` is 2 // remove whitelist mint when the `param` is 3 //
func BuildUpdateOperationAccount(
	// Params:
	paramParam uint8,
	keysParam []solanago.PublicKey,

	// Accounts:
	operationState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateOperationAccountInstruction(
		paramParam,
		keysParam,
		operationState,
		remaining__...,
	)
	return instruction_
}
