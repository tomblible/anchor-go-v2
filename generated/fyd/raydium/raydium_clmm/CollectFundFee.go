// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_fund_fee" instruction.

// Collect the fund fee accrued to the pool
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_0_requested` - The maximum amount of token_0 to send
// * `amount_1_requested` - The maximum amount of token_1 to send
type CollectFundFee struct {
	// Params:
	Amount0Requested uint64
	Amount1Requested uint64
	// Accounts:
	// [0] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [2] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_vault_0
	TokenVault0 solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_vault_1
	TokenVault1 solanago.PublicKey `bin:"-"`
	// [5] = [] vault_0_mint
	Vault0Mint solanago.PublicKey `bin:"-"`
	// [6] = [] vault_1_mint
	Vault1Mint solanago.PublicKey `bin:"-"`
	// [7] = [writable] recipient_token_account_0
	RecipientTokenAccount0 solanago.PublicKey `bin:"-"`
	// [8] = [writable] recipient_token_account_1
	RecipientTokenAccount1 solanago.PublicKey `bin:"-"`
	// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectFundFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amount0RequestedParam`:
	if err = encoder.Encode(obj.Amount0Requested); err != nil {
		return fmt.Errorf("error while marshaling amount0RequestedParam:%w", err)
	}
	// Serialize `amount1RequestedParam`:
	if err = encoder.Encode(obj.Amount1Requested); err != nil {
		return fmt.Errorf("error while marshaling amount1RequestedParam:%w", err)
	}
	return nil
}

func (obj *CollectFundFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount0Requested`:
	if err = decoder.Decode(&obj.Amount0Requested); err != nil {
		return fmt.Errorf("error while unmarshaling Amount0Requested:%w", err)
	}
	// Deserialize `Amount1Requested`:
	if err = decoder.Decode(&obj.Amount1Requested); err != nil {
		return fmt.Errorf("error while unmarshaling Amount1Requested:%w", err)
	}
	return nil
}

func (obj *CollectFundFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.PoolState = accounts[1]
	obj.AmmConfig = accounts[2]
	obj.TokenVault0 = accounts[3]
	obj.TokenVault1 = accounts[4]
	obj.Vault0Mint = accounts[5]
	obj.Vault1Mint = accounts[6]
	obj.RecipientTokenAccount0 = accounts[7]
	obj.RecipientTokenAccount1 = accounts[8]
	obj.TokenProgram = accounts[9]
	obj.TokenProgram2022 = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectFundFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectFundFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectFundFee)
}

func (*CollectFundFee) NewInstance() programparser.Instruction {
	return new(CollectFundFee)
}

func (obj *CollectFundFee) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[11:]
}

// Builds a "collect_fund_fee" instruction.
// Collect the fund fee accrued to the pool //  // # Arguments //  // * `ctx` - The context of accounts // * `amount_0_requested` - The maximum amount of token_0 to send // * `amount_1_requested` - The maximum amount of token_1 to send //
func NewCollectFundFeeInstruction(
	// Params:
	amount0RequestedParam uint64,
	amount1RequestedParam uint64,

	// Accounts:
	owner solanago.PublicKey,
	poolState solanago.PublicKey,
	ammConfig solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	recipientTokenAccount0 solanago.PublicKey,
	recipientTokenAccount1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectFundFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amount0RequestedParam`:
		if err = enc__.Encode(amount0RequestedParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount0RequestedParam:%w", err)
		}
		// Serialize `amount1RequestedParam`:
		if err = enc__.Encode(amount1RequestedParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amount1RequestedParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner
		// Only admin or fund_owner can collect fee now
		metas_[0] = solanago.NewAccountMeta(owner, false, true)
		// [1] = [writable] pool_state
		// Pool state stores accumulated protocol fee amount
		metas_[1] = solanago.NewAccountMeta(poolState, true, false)
		// [2] = [] amm_config
		// Amm config account stores fund_owner
		metas_[2] = solanago.NewAccountMeta(ammConfig, false, false)
		// [3] = [writable] token_vault_0
		// The address that holds pool tokens for token_0
		metas_[3] = solanago.NewAccountMeta(tokenVault0, true, false)
		// [4] = [writable] token_vault_1
		// The address that holds pool tokens for token_1
		metas_[4] = solanago.NewAccountMeta(tokenVault1, true, false)
		// [5] = [] vault_0_mint
		// The mint of token vault 0
		metas_[5] = solanago.NewAccountMeta(vault0Mint, false, false)
		// [6] = [] vault_1_mint
		// The mint of token vault 1
		metas_[6] = solanago.NewAccountMeta(vault1Mint, false, false)
		// [7] = [writable] recipient_token_account_0
		// The address that receives the collected token_0 protocol fees
		metas_[7] = solanago.NewAccountMeta(recipientTokenAccount0, true, false)
		// [8] = [writable] recipient_token_account_1
		// The address that receives the collected token_1 protocol fees
		metas_[8] = solanago.NewAccountMeta(recipientTokenAccount1, true, false)
		// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// The SPL program to perform token transfers
		metas_[9] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [10] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// The SPL program 2022 to perform token transfers
		metas_[10] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectFundFee" instruction.
// Collect the fund fee accrued to the pool //  // # Arguments //  // * `ctx` - The context of accounts // * `amount_0_requested` - The maximum amount of token_0 to send // * `amount_1_requested` - The maximum amount of token_1 to send //
func BuildCollectFundFee(
	// Params:
	amount0RequestedParam uint64,
	amount1RequestedParam uint64,

	// Accounts:
	owner solanago.PublicKey,
	poolState solanago.PublicKey,
	ammConfig solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	vault0Mint solanago.PublicKey,
	vault1Mint solanago.PublicKey,
	recipientTokenAccount0 solanago.PublicKey,
	recipientTokenAccount1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectFundFeeInstruction(
		amount0RequestedParam,
		amount1RequestedParam,
		owner,
		poolState,
		ammConfig,
		tokenVault0,
		tokenVault1,
		vault0Mint,
		vault1Mint,
		recipientTokenAccount0,
		recipientTokenAccount1,
		remaining__...,
	)
	return instruction_
}
