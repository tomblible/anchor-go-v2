// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package raydium_clmm

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindPersonalPositionAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 115, 105, 116, 105, 111, 110}
	seeds[1] = positionNftMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPersonalPositionAddress(positionNftMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPersonalPositionAddress(positionNftMint)
	return
}

func FindAmmConfigAddress(index uint16) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{97, 109, 109, 95, 99, 111, 110, 102, 105, 103}
	if seeds[1], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindAmmConfigAddress(index uint16) (pda solanago.PublicKey) {
	pda, _, _ = FindAmmConfigAddress(index)
	return
}

func FindOperationStateAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{111, 112, 101, 114, 97, 116, 105, 111, 110}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindOperationStateAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindOperationStateAddress()
	return
}

func FindPoolStateAddress(ammConfig solanago.PublicKey, tokenMint0 solanago.PublicKey, tokenMint1 solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 4)
	seeds[0] = []byte{112, 111, 111, 108}
	seeds[1] = ammConfig.Bytes()
	seeds[2] = tokenMint0.Bytes()
	seeds[3] = tokenMint1.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolStateAddress(ammConfig solanago.PublicKey, tokenMint0 solanago.PublicKey, tokenMint1 solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPoolStateAddress(ammConfig, tokenMint0, tokenMint1)
	return
}

func FindTokenVault0Address(poolState solanago.PublicKey, tokenMint0 solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = tokenMint0.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenVault0Address(poolState solanago.PublicKey, tokenMint0 solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenVault0Address(poolState, tokenMint0)
	return
}

func FindTokenVault1Address(poolState solanago.PublicKey, tokenMint1 solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = tokenMint1.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenVault1Address(poolState solanago.PublicKey, tokenMint1 solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTokenVault1Address(poolState, tokenMint1)
	return
}

func FindObservationStateAddress(poolState solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110}
	seeds[1] = poolState.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindObservationStateAddress(poolState solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindObservationStateAddress(poolState)
	return
}

func FindTickArrayBitmapAddress(poolState solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 111, 108, 95, 116, 105, 99, 107, 95, 97, 114, 114, 97, 121, 95, 98, 105, 116, 109, 97, 112, 95, 101, 120, 116, 101, 110, 115, 105, 111, 110}
	seeds[1] = poolState.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayBitmapAddress(poolState solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTickArrayBitmapAddress(poolState)
	return
}

func FindSupportMintAssociatedAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{115, 117, 112, 112, 111, 114, 116, 95, 109, 105, 110, 116}
	seeds[1] = tokenMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindSupportMintAssociatedAddress(tokenMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindSupportMintAssociatedAddress(tokenMint)
	return
}

func FindProtocolPositionAddress(poolState solanago.PublicKey, personalPositionTickLowerIndex solanago.PublicKey, personalPositionTickUpperIndex solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 4)
	seeds[0] = []byte{112, 111, 115, 105, 116, 105, 111, 110}
	seeds[1] = poolState.Bytes()
	seeds[2] = personalPositionTickLowerIndex.Bytes()
	seeds[3] = personalPositionTickUpperIndex.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindProtocolPositionAddress(poolState solanago.PublicKey, personalPositionTickLowerIndex solanago.PublicKey, personalPositionTickUpperIndex solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindProtocolPositionAddress(poolState, personalPositionTickLowerIndex, personalPositionTickUpperIndex)
	return
}

func FindRewardTokenVaultAddress(poolState solanago.PublicKey, rewardTokenMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 114, 101, 119, 97, 114, 100, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = rewardTokenMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindRewardTokenVaultAddress(poolState solanago.PublicKey, rewardTokenMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindRewardTokenVaultAddress(poolState, rewardTokenMint)
	return
}

func FindTickArrayLowerAddress(poolState solanago.PublicKey, tickArrayLowerStartIndex int32) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 105, 99, 107, 95, 97, 114, 114, 97, 121}
	seeds[1] = poolState.Bytes()
	if seeds[2], err = binary.MarshalBorsh(tickArrayLowerStartIndex); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayLowerAddress(poolState solanago.PublicKey, tickArrayLowerStartIndex int32) (pda solanago.PublicKey) {
	pda, _, _ = FindTickArrayLowerAddress(poolState, tickArrayLowerStartIndex)
	return
}

func FindTickArrayUpperAddress(poolState solanago.PublicKey, tickArrayUpperStartIndex int32) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{116, 105, 99, 107, 95, 97, 114, 114, 97, 121}
	seeds[1] = poolState.Bytes()
	if seeds[2], err = binary.MarshalBorsh(tickArrayUpperStartIndex); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayUpperAddress(poolState solanago.PublicKey, tickArrayUpperStartIndex int32) (pda solanago.PublicKey) {
	pda, _, _ = FindTickArrayUpperAddress(poolState, tickArrayUpperStartIndex)
	return
}
