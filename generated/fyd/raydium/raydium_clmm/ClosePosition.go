// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "close_position" instruction.

// Close the user's position and NFT account. If the NFT mint belongs to token2022, it will also be closed and the funds returned to the NFT owner.
//
// # Arguments
//
// * `ctx` - The context of accounts
type ClosePosition struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] nft_owner
	NftOwner solanago.PublicKey `bin:"-"`
	// [1] = [writable] position_nft_mint
	PositionNftMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] position_nft_account
	PositionNftAccount solanago.PublicKey `bin:"-"`
	// [3] = [writable] personal_position
	PersonalPosition solanago.PublicKey `bin:"-"`
	// [4] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [5] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClosePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClosePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClosePosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.NftOwner = accounts[0]
	obj.PositionNftMint = accounts[1]
	obj.PositionNftAccount = accounts[2]
	obj.PersonalPosition = accounts[3]
	obj.SystemProgram = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClosePosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClosePosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClosePosition)
}

func (*ClosePosition) NewInstance() programparser.Instruction {
	return new(ClosePosition)
}

func (obj *ClosePosition) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 6 {
		return nil
	}
	return obj.PublicKeySlice[6:]
}

// Builds a "close_position" instruction.
// Close the user's position and NFT account. If the NFT mint belongs to token2022, it will also be closed and the funds returned to the NFT owner. //  // # Arguments //  // * `ctx` - The context of accounts //
func NewClosePositionInstruction(
	nftOwner solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	personalPosition solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClosePosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] nft_owner
		// The position nft owner
		metas_[0] = solanago.NewAccountMeta(nftOwner, true, true)
		// [1] = [writable] position_nft_mint
		// Mint address bound to the personal position.
		metas_[1] = solanago.NewAccountMeta(positionNftMint, true, false)
		// [2] = [writable] position_nft_account
		// User token account where position NFT be minted to
		metas_[2] = solanago.NewAccountMeta(positionNftAccount, true, false)
		// [3] = [writable] personal_position
		metas_[3] = solanago.NewAccountMeta(personalPosition, true, false)
		// [4] = [] system_program
		// System program to close the position state account
		metas_[4] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [5] = [] token_program
		// Token/Token2022 program to close token/mint account
		metas_[5] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClosePosition" instruction.
// Close the user's position and NFT account. If the NFT mint belongs to token2022, it will also be closed and the funds returned to the NFT owner. //  // # Arguments //  // * `ctx` - The context of accounts //
func BuildClosePosition(
	nftOwner solanago.PublicKey,
	positionNftMint solanago.PublicKey,
	positionNftAccount solanago.PublicKey,
	personalPosition solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClosePositionInstruction(
		nftOwner,
		positionNftMint,
		positionNftAccount,
		personalPosition,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
