// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "transfer_reward_owner" instruction.

// Transfer reward owner
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `new_owner`- new owner pubkey
type TransferRewardOwner struct {
	// Params:
	NewOwner solanago.PublicKey
	// Accounts:
	// [0] = [,signer] authority[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj TransferRewardOwner) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `newOwnerParam`:
	if err = encoder.Encode(obj.NewOwner); err != nil {
		return fmt.Errorf("error while marshaling newOwnerParam:%w", err)
	}
	return nil
}

func (obj *TransferRewardOwner) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NewOwner`:
	if err = decoder.Decode(&obj.NewOwner); err != nil {
		return fmt.Errorf("error while unmarshaling NewOwner:%w", err)
	}
	return nil
}

func (obj *TransferRewardOwner) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.PoolState = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *TransferRewardOwner) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*TransferRewardOwner) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_TransferRewardOwner)
}

func (*TransferRewardOwner) NewInstance() programparser.Instruction {
	return new(TransferRewardOwner)
}

// Builds a "transfer_reward_owner" instruction.
// Transfer reward owner //  // # Arguments //  // * `ctx`- The context of accounts // * `new_owner`- new owner pubkey //
func NewTransferRewardOwnerInstruction(
	// Params:
	newOwnerParam solanago.PublicKey,

	// Accounts:
	poolState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_TransferRewardOwner[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `newOwnerParam`:
		if err = enc__.Encode(newOwnerParam); err != nil {
			return nil, fmt.Errorf("error while marshaling newOwnerParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] authority[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// Address to be set as operation account owner.
		metas_[0] = solanago.NewAccountMeta(Authority, false, true)
		// [1] = [writable] pool_state
		metas_[1] = solanago.NewAccountMeta(poolState, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildTransferRewardOwner" instruction.
// Transfer reward owner //  // # Arguments //  // * `ctx`- The context of accounts // * `new_owner`- new owner pubkey //
func BuildTransferRewardOwner(
	// Params:
	newOwnerParam solanago.PublicKey,

	// Accounts:
	poolState solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewTransferRewardOwnerInstruction(
		newOwnerParam,
		poolState,
		remaining__...,
	)
	return instruction_
}
