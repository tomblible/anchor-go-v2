// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type InitializeRewardParam struct {
	// Reward open time
	OpenTime uint64

	// Reward end time
	EndTime uint64

	// Token reward per second are earned per unit of liquidity
	EmissionsPerSecondX64 binary.Uint128
}

func (obj InitializeRewardParam) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OpenTime`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling OpenTime:%w", err)
	}
	// Serialize `EndTime`:
	if err = encoder.Encode(obj.EndTime); err != nil {
		return fmt.Errorf("error while marshaling EndTime:%w", err)
	}
	// Serialize `EmissionsPerSecondX64`:
	if err = encoder.Encode(obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while marshaling EmissionsPerSecondX64:%w", err)
	}
	return nil
}

func (obj InitializeRewardParam) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializeRewardParam: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializeRewardParam) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	// Deserialize `EndTime`:
	if err = decoder.Decode(&obj.EndTime); err != nil {
		return fmt.Errorf("error while unmarshaling EndTime:%w", err)
	}
	// Deserialize `EmissionsPerSecondX64`:
	if err = decoder.Decode(&obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while unmarshaling EmissionsPerSecondX64:%w", err)
	}
	return nil
}

func (obj *InitializeRewardParam) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializeRewardParam: %w", err)
	}
	return nil
}

func UnmarshalInitializeRewardParam(buf []byte) (*InitializeRewardParam, error) {
	obj := new(InitializeRewardParam)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// The element of observations in ObservationState
type Observation struct {
	// The block timestamp of the observation
	BlockTimestamp uint32

	// the cumulative of tick during the duration time
	TickCumulative int64

	// padding for feature update
	Padding [4]uint64
}

func (obj Observation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BlockTimestamp`:
	if err = encoder.Encode(obj.BlockTimestamp); err != nil {
		return fmt.Errorf("error while marshaling BlockTimestamp:%w", err)
	}
	// Serialize `TickCumulative`:
	if err = encoder.Encode(obj.TickCumulative); err != nil {
		return fmt.Errorf("error while marshaling TickCumulative:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	return nil
}

func (obj Observation) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Observation: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BlockTimestamp`:
	if err = decoder.Decode(&obj.BlockTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling BlockTimestamp:%w", err)
	}
	// Deserialize `TickCumulative`:
	if err = decoder.Decode(&obj.TickCumulative); err != nil {
		return fmt.Errorf("error while unmarshaling TickCumulative:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	return nil
}

func (obj *Observation) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Observation: %w", err)
	}
	return nil
}

func UnmarshalObservation(buf []byte) (*Observation, error) {
	obj := new(Observation)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionRewardInfo struct {
	GrowthInsideLastX64 binary.Uint128
	RewardAmountOwed    uint64
}

func (obj PositionRewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `GrowthInsideLastX64`:
	if err = encoder.Encode(obj.GrowthInsideLastX64); err != nil {
		return fmt.Errorf("error while marshaling GrowthInsideLastX64:%w", err)
	}
	// Serialize `RewardAmountOwed`:
	if err = encoder.Encode(obj.RewardAmountOwed); err != nil {
		return fmt.Errorf("error while marshaling RewardAmountOwed:%w", err)
	}
	return nil
}

func (obj PositionRewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionRewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionRewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `GrowthInsideLastX64`:
	if err = decoder.Decode(&obj.GrowthInsideLastX64); err != nil {
		return fmt.Errorf("error while unmarshaling GrowthInsideLastX64:%w", err)
	}
	// Deserialize `RewardAmountOwed`:
	if err = decoder.Decode(&obj.RewardAmountOwed); err != nil {
		return fmt.Errorf("error while unmarshaling RewardAmountOwed:%w", err)
	}
	return nil
}

func (obj *PositionRewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionRewardInfo: %w", err)
	}
	return nil
}

func UnmarshalPositionRewardInfo(buf []byte) (*PositionRewardInfo, error) {
	obj := new(PositionRewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RewardInfo struct {
	// Reward state
	RewardState uint8

	// Reward open time
	OpenTime uint64

	// Reward end time
	EndTime uint64

	// Reward last update time
	LastUpdateTime uint64

	// Q64.64 number indicates how many tokens per second are earned per unit of liquidity.
	EmissionsPerSecondX64 binary.Uint128

	// The total amount of reward emissioned
	RewardTotalEmissioned uint64

	// The total amount of claimed reward
	RewardClaimed uint64

	// Reward token mint.
	TokenMint solanago.PublicKey

	// Reward vault token account.
	TokenVault solanago.PublicKey

	// The owner that has permission to set reward param
	Authority solanago.PublicKey

	// Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward
	// emissions were turned on.
	RewardGrowthGlobalX64 binary.Uint128
}

func (obj RewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RewardState`:
	if err = encoder.Encode(obj.RewardState); err != nil {
		return fmt.Errorf("error while marshaling RewardState:%w", err)
	}
	// Serialize `OpenTime`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling OpenTime:%w", err)
	}
	// Serialize `EndTime`:
	if err = encoder.Encode(obj.EndTime); err != nil {
		return fmt.Errorf("error while marshaling EndTime:%w", err)
	}
	// Serialize `LastUpdateTime`:
	if err = encoder.Encode(obj.LastUpdateTime); err != nil {
		return fmt.Errorf("error while marshaling LastUpdateTime:%w", err)
	}
	// Serialize `EmissionsPerSecondX64`:
	if err = encoder.Encode(obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while marshaling EmissionsPerSecondX64:%w", err)
	}
	// Serialize `RewardTotalEmissioned`:
	if err = encoder.Encode(obj.RewardTotalEmissioned); err != nil {
		return fmt.Errorf("error while marshaling RewardTotalEmissioned:%w", err)
	}
	// Serialize `RewardClaimed`:
	if err = encoder.Encode(obj.RewardClaimed); err != nil {
		return fmt.Errorf("error while marshaling RewardClaimed:%w", err)
	}
	// Serialize `TokenMint`:
	if err = encoder.Encode(obj.TokenMint); err != nil {
		return fmt.Errorf("error while marshaling TokenMint:%w", err)
	}
	// Serialize `TokenVault`:
	if err = encoder.Encode(obj.TokenVault); err != nil {
		return fmt.Errorf("error while marshaling TokenVault:%w", err)
	}
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `RewardGrowthGlobalX64`:
	if err = encoder.Encode(obj.RewardGrowthGlobalX64); err != nil {
		return fmt.Errorf("error while marshaling RewardGrowthGlobalX64:%w", err)
	}
	return nil
}

func (obj RewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardState`:
	if err = decoder.Decode(&obj.RewardState); err != nil {
		return fmt.Errorf("error while unmarshaling RewardState:%w", err)
	}
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	// Deserialize `EndTime`:
	if err = decoder.Decode(&obj.EndTime); err != nil {
		return fmt.Errorf("error while unmarshaling EndTime:%w", err)
	}
	// Deserialize `LastUpdateTime`:
	if err = decoder.Decode(&obj.LastUpdateTime); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdateTime:%w", err)
	}
	// Deserialize `EmissionsPerSecondX64`:
	if err = decoder.Decode(&obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while unmarshaling EmissionsPerSecondX64:%w", err)
	}
	// Deserialize `RewardTotalEmissioned`:
	if err = decoder.Decode(&obj.RewardTotalEmissioned); err != nil {
		return fmt.Errorf("error while unmarshaling RewardTotalEmissioned:%w", err)
	}
	// Deserialize `RewardClaimed`:
	if err = decoder.Decode(&obj.RewardClaimed); err != nil {
		return fmt.Errorf("error while unmarshaling RewardClaimed:%w", err)
	}
	// Deserialize `TokenMint`:
	if err = decoder.Decode(&obj.TokenMint); err != nil {
		return fmt.Errorf("error while unmarshaling TokenMint:%w", err)
	}
	// Deserialize `TokenVault`:
	if err = decoder.Decode(&obj.TokenVault); err != nil {
		return fmt.Errorf("error while unmarshaling TokenVault:%w", err)
	}
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `RewardGrowthGlobalX64`:
	if err = decoder.Decode(&obj.RewardGrowthGlobalX64); err != nil {
		return fmt.Errorf("error while unmarshaling RewardGrowthGlobalX64:%w", err)
	}
	return nil
}

func (obj *RewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RewardInfo: %w", err)
	}
	return nil
}

func UnmarshalRewardInfo(buf []byte) (*RewardInfo, error) {
	obj := new(RewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TickState struct {
	Tick int32

	// Amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)
	LiquidityNet binary.Int128

	// The total position liquidity that references this tick
	LiquidityGross binary.Uint128

	// Fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
	// only has relative meaning, not absolute — the value depends on when the tick is initialized
	FeeGrowthOutside0X64    binary.Uint128
	FeeGrowthOutside1X64    binary.Uint128
	RewardGrowthsOutsideX64 [3]binary.Uint128
	Padding                 [13]uint32
}

func (obj TickState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Tick`:
	if err = encoder.Encode(obj.Tick); err != nil {
		return fmt.Errorf("error while marshaling Tick:%w", err)
	}
	// Serialize `LiquidityNet`:
	if err = encoder.Encode(obj.LiquidityNet); err != nil {
		return fmt.Errorf("error while marshaling LiquidityNet:%w", err)
	}
	// Serialize `LiquidityGross`:
	if err = encoder.Encode(obj.LiquidityGross); err != nil {
		return fmt.Errorf("error while marshaling LiquidityGross:%w", err)
	}
	// Serialize `FeeGrowthOutside0X64`:
	if err = encoder.Encode(obj.FeeGrowthOutside0X64); err != nil {
		return fmt.Errorf("error while marshaling FeeGrowthOutside0X64:%w", err)
	}
	// Serialize `FeeGrowthOutside1X64`:
	if err = encoder.Encode(obj.FeeGrowthOutside1X64); err != nil {
		return fmt.Errorf("error while marshaling FeeGrowthOutside1X64:%w", err)
	}
	// Serialize `RewardGrowthsOutsideX64`:
	if err = encoder.Encode(obj.RewardGrowthsOutsideX64); err != nil {
		return fmt.Errorf("error while marshaling RewardGrowthsOutsideX64:%w", err)
	}
	// Serialize `Padding`:
	if err = encoder.Encode(obj.Padding); err != nil {
		return fmt.Errorf("error while marshaling Padding:%w", err)
	}
	return nil
}

func (obj TickState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TickState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TickState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Tick`:
	if err = decoder.Decode(&obj.Tick); err != nil {
		return fmt.Errorf("error while unmarshaling Tick:%w", err)
	}
	// Deserialize `LiquidityNet`:
	if err = decoder.Decode(&obj.LiquidityNet); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityNet:%w", err)
	}
	// Deserialize `LiquidityGross`:
	if err = decoder.Decode(&obj.LiquidityGross); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityGross:%w", err)
	}
	// Deserialize `FeeGrowthOutside0X64`:
	if err = decoder.Decode(&obj.FeeGrowthOutside0X64); err != nil {
		return fmt.Errorf("error while unmarshaling FeeGrowthOutside0X64:%w", err)
	}
	// Deserialize `FeeGrowthOutside1X64`:
	if err = decoder.Decode(&obj.FeeGrowthOutside1X64); err != nil {
		return fmt.Errorf("error while unmarshaling FeeGrowthOutside1X64:%w", err)
	}
	// Deserialize `RewardGrowthsOutsideX64`:
	if err = decoder.Decode(&obj.RewardGrowthsOutsideX64); err != nil {
		return fmt.Errorf("error while unmarshaling RewardGrowthsOutsideX64:%w", err)
	}
	// Deserialize `Padding`:
	if err = decoder.Decode(&obj.Padding); err != nil {
		return fmt.Errorf("error while unmarshaling Padding:%w", err)
	}
	return nil
}

func (obj *TickState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TickState: %w", err)
	}
	return nil
}

func UnmarshalTickState(buf []byte) (*TickState, error) {
	obj := new(TickState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
