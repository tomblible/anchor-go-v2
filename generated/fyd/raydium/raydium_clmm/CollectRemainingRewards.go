// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_remaining_rewards" instruction.

// Collect remaining reward token for reward founder
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `reward_index` - the index to reward info, it must be smaller than 3
type CollectRemainingRewards struct {
	// Params:
	RewardIndex uint8
	// Accounts:
	// [0] = [,signer] reward_funder
	RewardFunder solanago.PublicKey `bin:"-"`
	// [1] = [writable] funder_token_account
	FunderTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [] reward_token_vault
	RewardTokenVault solanago.PublicKey `bin:"-"`
	// [4] = [] reward_vault_mint
	RewardVaultMint solanago.PublicKey `bin:"-"`
	// [5] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [6] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// [7] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectRemainingRewards) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	return nil
}

func (obj *CollectRemainingRewards) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	return nil
}

func (obj *CollectRemainingRewards) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.RewardFunder = accounts[0]
	obj.FunderTokenAccount = accounts[1]
	obj.PoolState = accounts[2]
	obj.RewardTokenVault = accounts[3]
	obj.RewardVaultMint = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.TokenProgram2022 = accounts[6]
	obj.MemoProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectRemainingRewards) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectRemainingRewards) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectRemainingRewards)
}

func (*CollectRemainingRewards) NewInstance() programparser.Instruction {
	return new(CollectRemainingRewards)
}

// Builds a "collect_remaining_rewards" instruction.
// Collect remaining reward token for reward founder //  // # Arguments //  // * `ctx`- The context of accounts // * `reward_index` - the index to reward info, it must be smaller than 3 //
func NewCollectRemainingRewardsInstruction(
	// Params:
	rewardIndexParam uint8,

	// Accounts:
	rewardFunder solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	poolState solanago.PublicKey,
	rewardTokenVault solanago.PublicKey,
	rewardVaultMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectRemainingRewards[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] reward_funder
		// The founder who init reward info previously
		metas_[0] = solanago.NewAccountMeta(rewardFunder, false, true)
		// [1] = [writable] funder_token_account
		// The funder's reward token account
		metas_[1] = solanago.NewAccountMeta(funderTokenAccount, true, false)
		// [2] = [writable] pool_state
		// Set reward for this pool
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [] reward_token_vault
		// Reward vault transfer remaining token to founder token account
		metas_[3] = solanago.NewAccountMeta(rewardTokenVault, false, false)
		// [4] = [] reward_vault_mint
		// The mint of reward token vault
		metas_[4] = solanago.NewAccountMeta(rewardVaultMint, false, false)
		// [5] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[5] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [6] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// Token program 2022
		metas_[6] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// [7] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		// memo program
		metas_[7] = solanago.NewAccountMeta(MemoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectRemainingRewards" instruction.
// Collect remaining reward token for reward founder //  // # Arguments //  // * `ctx`- The context of accounts // * `reward_index` - the index to reward info, it must be smaller than 3 //
func BuildCollectRemainingRewards(
	// Params:
	rewardIndexParam uint8,

	// Accounts:
	rewardFunder solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	poolState solanago.PublicKey,
	rewardTokenVault solanago.PublicKey,
	rewardVaultMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectRemainingRewardsInstruction(
		rewardIndexParam,
		rewardFunder,
		funderTokenAccount,
		poolState,
		rewardTokenVault,
		rewardVaultMint,
		remaining__...,
	)
	return instruction_
}
