// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_support_mint_associated" instruction.

// Create support token22 mint account which can create pool and send rewards with ignoring the not support extensions.
type CreateSupportMintAssociated struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [] token_mint
	TokenMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] support_mint_associated
	SupportMintAssociated solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateSupportMintAssociated) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateSupportMintAssociated) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateSupportMintAssociated) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.TokenMint = accounts[1]
	obj.SupportMintAssociated = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateSupportMintAssociated) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateSupportMintAssociated) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateSupportMintAssociated)
}

func (*CreateSupportMintAssociated) NewInstance() programparser.Instruction {
	return new(CreateSupportMintAssociated)
}

func (obj *CreateSupportMintAssociated) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "create_support_mint_associated" instruction.
// Create support token22 mint account which can create pool and send rewards with ignoring the not support extensions.
func NewCreateSupportMintAssociatedInstruction(
	tokenMint solanago.PublicKey,
	supportMintAssociated solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateSupportMintAssociated[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// Address to be set as protocol owner.
		metas_[0] = solanago.NewAccountMeta(Owner, true, true)
		// [1] = [] token_mint
		// Support token mint
		metas_[1] = solanago.NewAccountMeta(tokenMint, false, false)
		// [2] = [writable] support_mint_associated
		// Initialize support mint state account to store support mint address and bump.
		metas_[2] = solanago.NewAccountMeta(supportMintAssociated, true, false)
		// [3] = [] system_program
		metas_[3] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateSupportMintAssociated" instruction.
// Create support token22 mint account which can create pool and send rewards with ignoring the not support extensions.
func BuildCreateSupportMintAssociated(
	tokenMint solanago.PublicKey,
	supportMintAssociated solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateSupportMintAssociatedInstruction(
		tokenMint,
		supportMintAssociated,
		remaining__...,
	)
	return instruction_
}
