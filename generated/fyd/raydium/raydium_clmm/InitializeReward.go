// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_reward" instruction.

// Initialize a reward info for a given pool and reward index
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `reward_index` - the index to reward info
// * `open_time` - reward open timestamp
// * `end_time` - reward end timestamp
// * `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity.
type InitializeReward struct {
	// Params:
	Param InitializeRewardParam
	// Accounts:
	// [0] = [writable,signer] reward_funder
	RewardFunder solanago.PublicKey `bin:"-"`
	// [1] = [writable] funder_token_account
	FunderTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [3] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [4] = [] operation_state
	OperationState solanago.PublicKey `bin:"-"`
	// [5] = [] reward_token_mint
	RewardTokenMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] reward_token_vault
	RewardTokenVault solanago.PublicKey `bin:"-"`
	// [7] = [] reward_token_program
	RewardTokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	return nil
}

func (obj *InitializeReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	return nil
}

func (obj *InitializeReward) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.RewardFunder = accounts[0]
	obj.FunderTokenAccount = accounts[1]
	obj.AmmConfig = accounts[2]
	obj.PoolState = accounts[3]
	obj.OperationState = accounts[4]
	obj.RewardTokenMint = accounts[5]
	obj.RewardTokenVault = accounts[6]
	obj.RewardTokenProgram = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.Rent = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeReward) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeReward) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeReward)
}

func (*InitializeReward) NewInstance() programparser.Instruction {
	return new(InitializeReward)
}

func (obj *InitializeReward) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 10 {
		return nil
	}
	return obj.PublicKeySlice[10:]
}

// Builds a "initialize_reward" instruction.
// Initialize a reward info for a given pool and reward index //  // # Arguments //  // * `ctx`- The context of accounts // * `reward_index` - the index to reward info // * `open_time` - reward open timestamp // * `end_time` - reward end timestamp // * `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity. //
func NewInitializeRewardInstruction(
	// Params:
	paramParam InitializeRewardParam,

	// Accounts:
	rewardFunder solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	operationState solanago.PublicKey,
	rewardTokenMint solanago.PublicKey,
	rewardTokenVault solanago.PublicKey,
	rewardTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeReward[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] reward_funder
		// The founder deposit reward token to vault
		metas_[0] = solanago.NewAccountMeta(rewardFunder, true, true)
		// [1] = [writable] funder_token_account
		metas_[1] = solanago.NewAccountMeta(funderTokenAccount, true, false)
		// [2] = [] amm_config
		// For check the reward_funder authority
		metas_[2] = solanago.NewAccountMeta(ammConfig, false, false)
		// [3] = [writable] pool_state
		// Set reward for this pool
		metas_[3] = solanago.NewAccountMeta(poolState, true, false)
		// [4] = [] operation_state
		// load info from the account to judge reward permission
		metas_[4] = solanago.NewAccountMeta(operationState, false, false)
		// [5] = [] reward_token_mint
		// Reward mint
		metas_[5] = solanago.NewAccountMeta(rewardTokenMint, false, false)
		// [6] = [writable] reward_token_vault
		// A pda, reward vault
		metas_[6] = solanago.NewAccountMeta(rewardTokenVault, true, false)
		// [7] = [] reward_token_program
		metas_[7] = solanago.NewAccountMeta(rewardTokenProgram, false, false)
		// [8] = [] system_program
		metas_[8] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [9] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[9] = solanago.NewAccountMeta(Rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeReward" instruction.
// Initialize a reward info for a given pool and reward index //  // # Arguments //  // * `ctx`- The context of accounts // * `reward_index` - the index to reward info // * `open_time` - reward open timestamp // * `end_time` - reward end timestamp // * `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity. //
func BuildInitializeReward(
	// Params:
	paramParam InitializeRewardParam,

	// Accounts:
	rewardFunder solanago.PublicKey,
	funderTokenAccount solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	operationState solanago.PublicKey,
	rewardTokenMint solanago.PublicKey,
	rewardTokenVault solanago.PublicKey,
	rewardTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeRewardInstruction(
		paramParam,
		rewardFunder,
		funderTokenAccount,
		ammConfig,
		poolState,
		operationState,
		rewardTokenMint,
		rewardTokenVault,
		rewardTokenProgram,
		remaining__...,
	)
	return instruction_
}
