// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap_router_base_in" instruction.

// Swap token for as much as possible of another token across the path provided, base input
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_in` - Token amount to be swapped in
// * `amount_out_minimum` - Minimum output amount for slip control
type SwapRouterBaseIn struct {
	// Params:
	AmountIn         uint64
	AmountOutMinimum uint64
	// Accounts:
	// [0] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [writable] input_token_account
	InputTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [writable] input_token_mint
	InputTokenMint solanago.PublicKey `bin:"-"`
	// [3] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [4] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	TokenProgram2022 solanago.PublicKey `bin:"-"`
	// [5] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SwapRouterBaseIn) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountInParam`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling amountInParam:%w", err)
	}
	// Serialize `amountOutMinimumParam`:
	if err = encoder.Encode(obj.AmountOutMinimum); err != nil {
		return fmt.Errorf("error while marshaling amountOutMinimumParam:%w", err)
	}
	return nil
}

func (obj *SwapRouterBaseIn) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `AmountOutMinimum`:
	if err = decoder.Decode(&obj.AmountOutMinimum); err != nil {
		return fmt.Errorf("error while unmarshaling AmountOutMinimum:%w", err)
	}
	return nil
}

func (obj *SwapRouterBaseIn) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.InputTokenAccount = accounts[1]
	obj.InputTokenMint = accounts[2]
	obj.TokenProgram = accounts[3]
	obj.TokenProgram2022 = accounts[4]
	obj.MemoProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SwapRouterBaseIn) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SwapRouterBaseIn) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SwapRouterBaseIn)
}

func (*SwapRouterBaseIn) NewInstance() programparser.Instruction {
	return new(SwapRouterBaseIn)
}

func (obj *SwapRouterBaseIn) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 6 {
		return nil
	}
	return obj.PublicKeySlice[6:]
}

// Builds a "swap_router_base_in" instruction.
// Swap token for as much as possible of another token across the path provided, base input //  // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Token amount to be swapped in // * `amount_out_minimum` - Minimum output amount for slip control
func NewSwapRouterBaseInInstruction(
	// Params:
	amountInParam uint64,
	amountOutMinimumParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	inputTokenMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SwapRouterBaseIn[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountInParam`:
		if err = enc__.Encode(amountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountInParam:%w", err)
		}
		// Serialize `amountOutMinimumParam`:
		if err = enc__.Encode(amountOutMinimumParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountOutMinimumParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] payer
		// The user performing the swap
		metas_[0] = solanago.NewAccountMeta(payer, false, true)
		// [1] = [writable] input_token_account
		// The token account that pays input tokens for the swap
		metas_[1] = solanago.NewAccountMeta(inputTokenAccount, true, false)
		// [2] = [writable] input_token_mint
		// The mint of input token
		metas_[2] = solanago.NewAccountMeta(inputTokenMint, true, false)
		// [3] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL program for token transfers
		metas_[3] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [4] = [] token_program_2022[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// SPL program 2022 for token transfers
		metas_[4] = solanago.NewAccountMeta(TokenProgram2022, false, false)
		// [5] = [] memo_program[MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr]
		// Memo program
		metas_[5] = solanago.NewAccountMeta(MemoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwapRouterBaseIn" instruction.
// Swap token for as much as possible of another token across the path provided, base input //  // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Token amount to be swapped in // * `amount_out_minimum` - Minimum output amount for slip control
func BuildSwapRouterBaseIn(
	// Params:
	amountInParam uint64,
	amountOutMinimumParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	inputTokenAccount solanago.PublicKey,
	inputTokenMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapRouterBaseInInstruction(
		amountInParam,
		amountOutMinimumParam,
		payer,
		inputTokenAccount,
		inputTokenMint,
		remaining__...,
	)
	return instruction_
}
