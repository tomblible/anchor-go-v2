// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_pool" instruction.

// Creates a pool for the given token pair and the initial price
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `sqrt_price_x64` - the initial sqrt price (amount_token_1 / amount_token_0) of the pool as a Q64.64
// Note: The open_time must be smaller than the current block_timestamp on chain.
type CreatePool struct {
	// Params:
	SqrtPriceX64 binary.Uint128
	OpenTime     uint64
	// Accounts:
	// [0] = [writable,signer] pool_creator
	PoolCreator solanago.PublicKey `bin:"-"`
	// [1] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [] token_mint_0
	TokenMint0 solanago.PublicKey `bin:"-"`
	// [4] = [] token_mint_1
	TokenMint1 solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_vault_0
	TokenVault0 solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_vault_1
	TokenVault1 solanago.PublicKey `bin:"-"`
	// [7] = [writable] observation_state
	ObservationState solanago.PublicKey `bin:"-"`
	// [8] = [writable] tick_array_bitmap
	TickArrayBitmap solanago.PublicKey `bin:"-"`
	// [9] = [] token_program_0
	TokenProgram0 solanago.PublicKey `bin:"-"`
	// [10] = [] token_program_1
	TokenProgram1 solanago.PublicKey `bin:"-"`
	// [11] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [12] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreatePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `sqrtPriceX64Param`:
	if err = encoder.Encode(obj.SqrtPriceX64); err != nil {
		return fmt.Errorf("error while marshaling sqrtPriceX64Param:%w", err)
	}
	// Serialize `openTimeParam`:
	if err = encoder.Encode(obj.OpenTime); err != nil {
		return fmt.Errorf("error while marshaling openTimeParam:%w", err)
	}
	return nil
}

func (obj *CreatePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SqrtPriceX64`:
	if err = decoder.Decode(&obj.SqrtPriceX64); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPriceX64:%w", err)
	}
	// Deserialize `OpenTime`:
	if err = decoder.Decode(&obj.OpenTime); err != nil {
		return fmt.Errorf("error while unmarshaling OpenTime:%w", err)
	}
	return nil
}

func (obj *CreatePool) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.PoolCreator = accounts[0]
	obj.AmmConfig = accounts[1]
	obj.PoolState = accounts[2]
	obj.TokenMint0 = accounts[3]
	obj.TokenMint1 = accounts[4]
	obj.TokenVault0 = accounts[5]
	obj.TokenVault1 = accounts[6]
	obj.ObservationState = accounts[7]
	obj.TickArrayBitmap = accounts[8]
	obj.TokenProgram0 = accounts[9]
	obj.TokenProgram1 = accounts[10]
	obj.SystemProgram = accounts[11]
	obj.Rent = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreatePool) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreatePool) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreatePool)
}

func (*CreatePool) NewInstance() programparser.Instruction {
	return new(CreatePool)
}

func (obj *CreatePool) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 13 {
		return nil
	}
	return obj.PublicKeySlice[13:]
}

// Builds a "create_pool" instruction.
// Creates a pool for the given token pair and the initial price //  // # Arguments //  // * `ctx`- The context of accounts // * `sqrt_price_x64` - the initial sqrt price (amount_token_1 / amount_token_0) of the pool as a Q64.64 // Note: The open_time must be smaller than the current block_timestamp on chain.
func NewCreatePoolInstruction(
	// Params:
	sqrtPriceX64Param binary.Uint128,
	openTimeParam uint64,

	// Accounts:
	poolCreator solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	tokenMint0 solanago.PublicKey,
	tokenMint1 solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	observationState solanago.PublicKey,
	tickArrayBitmap solanago.PublicKey,
	tokenProgram0 solanago.PublicKey,
	tokenProgram1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreatePool[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `sqrtPriceX64Param`:
		if err = enc__.Encode(sqrtPriceX64Param); err != nil {
			return nil, fmt.Errorf("error while marshaling sqrtPriceX64Param:%w", err)
		}
		// Serialize `openTimeParam`:
		if err = enc__.Encode(openTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling openTimeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] pool_creator
		// Address paying to create the pool. Can be anyone
		metas_[0] = solanago.NewAccountMeta(poolCreator, true, true)
		// [1] = [] amm_config
		// Which config the pool belongs to.
		metas_[1] = solanago.NewAccountMeta(ammConfig, false, false)
		// [2] = [writable] pool_state
		// Initialize an account to store the pool state
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [] token_mint_0
		// Token_0 mint, the key must be smaller then token_1 mint.
		metas_[3] = solanago.NewAccountMeta(tokenMint0, false, false)
		// [4] = [] token_mint_1
		// Token_1 mint
		metas_[4] = solanago.NewAccountMeta(tokenMint1, false, false)
		// [5] = [writable] token_vault_0
		// Token_0 vault for the pool
		metas_[5] = solanago.NewAccountMeta(tokenVault0, true, false)
		// [6] = [writable] token_vault_1
		// Token_1 vault for the pool
		metas_[6] = solanago.NewAccountMeta(tokenVault1, true, false)
		// [7] = [writable] observation_state
		// Initialize an account to store oracle observations
		metas_[7] = solanago.NewAccountMeta(observationState, true, false)
		// [8] = [writable] tick_array_bitmap
		// Initialize an account to store if a tick array is initialized.
		metas_[8] = solanago.NewAccountMeta(tickArrayBitmap, true, false)
		// [9] = [] token_program_0
		// Spl token program or token program 2022
		metas_[9] = solanago.NewAccountMeta(tokenProgram0, false, false)
		// [10] = [] token_program_1
		// Spl token program or token program 2022
		metas_[10] = solanago.NewAccountMeta(tokenProgram1, false, false)
		// [11] = [] system_program
		// To create a new program account
		metas_[11] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [12] = [] rent[SysvarRent111111111111111111111111111111111]
		// Sysvar for program account
		metas_[12] = solanago.NewAccountMeta(Rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreatePool" instruction.
// Creates a pool for the given token pair and the initial price //  // # Arguments //  // * `ctx`- The context of accounts // * `sqrt_price_x64` - the initial sqrt price (amount_token_1 / amount_token_0) of the pool as a Q64.64 // Note: The open_time must be smaller than the current block_timestamp on chain.
func BuildCreatePool(
	// Params:
	sqrtPriceX64Param binary.Uint128,
	openTimeParam uint64,

	// Accounts:
	poolCreator solanago.PublicKey,
	ammConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	tokenMint0 solanago.PublicKey,
	tokenMint1 solanago.PublicKey,
	tokenVault0 solanago.PublicKey,
	tokenVault1 solanago.PublicKey,
	observationState solanago.PublicKey,
	tickArrayBitmap solanago.PublicKey,
	tokenProgram0 solanago.PublicKey,
	tokenProgram1 solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreatePoolInstruction(
		sqrtPriceX64Param,
		openTimeParam,
		poolCreator,
		ammConfig,
		poolState,
		tokenMint0,
		tokenMint1,
		tokenVault0,
		tokenVault1,
		observationState,
		tickArrayBitmap,
		tokenProgram0,
		tokenProgram1,
		remaining__...,
	)
	return instruction_
}
