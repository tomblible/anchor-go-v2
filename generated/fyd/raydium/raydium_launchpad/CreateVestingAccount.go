// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_vesting_account" instruction.

// Create vesting account
// # Arguments
//
// * `ctx` - The context of accounts
// * `share` - The share amount of base token to be vested
type CreateVestingAccount struct {
	// Params:
	ShareAmount uint64
	// Accounts:
	// [0] = [writable,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [1] = [writable] beneficiary
	Beneficiary solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [writable] vesting_record
	VestingRecord solanago.PublicKey `bin:"-"`
	// [4] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateVestingAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `shareAmountParam`:
	if err = encoder.Encode(obj.ShareAmount); err != nil {
		return fmt.Errorf("error while marshaling shareAmountParam:%w", err)
	}
	return nil
}

func (obj *CreateVestingAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ShareAmount`:
	if err = decoder.Decode(&obj.ShareAmount); err != nil {
		return fmt.Errorf("error while unmarshaling ShareAmount:%w", err)
	}
	return nil
}

func (obj *CreateVestingAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.Creator = accounts[0]
	obj.Beneficiary = accounts[1]
	obj.PoolState = accounts[2]
	obj.VestingRecord = accounts[3]
	obj.SystemProgram = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateVestingAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateVestingAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateVestingAccount)
}

func (*CreateVestingAccount) NewInstance() programparser.Instruction {
	return new(CreateVestingAccount)
}

// Builds a "create_vesting_account" instruction.
// Create vesting account // # Arguments //  // * `ctx` - The context of accounts // * `share` - The share amount of base token to be vested //
func NewCreateVestingAccountInstruction(
	// Params:
	shareAmountParam uint64,

	// Accounts:
	creator solanago.PublicKey,
	beneficiary solanago.PublicKey,
	poolState solanago.PublicKey,
	vestingRecord solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateVestingAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `shareAmountParam`:
		if err = enc__.Encode(shareAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling shareAmountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] creator
		// The account paying for the initialization costs
		// This can be any account with sufficient SOL to cover the transaction
		metas_[0] = solanago.NewAccountMeta(creator, true, true)
		// [1] = [writable] beneficiary
		// The beneficiary is used to receive the allocated linear release of tokens.
		// Once this account is set, it cannot be modified, so please ensure the validity of this account,
		// otherwise, the unlocked tokens will not be claimable.
		metas_[1] = solanago.NewAccountMeta(beneficiary, true, false)
		// [2] = [writable] pool_state
		// The pool state account
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [writable] vesting_record
		// The vesting record account
		metas_[3] = solanago.NewAccountMeta(vestingRecord, true, false)
		// [4] = [] system_program
		// Required for account creation
		metas_[4] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateVestingAccount" instruction.
// Create vesting account // # Arguments //  // * `ctx` - The context of accounts // * `share` - The share amount of base token to be vested //
func BuildCreateVestingAccount(
	// Params:
	shareAmountParam uint64,

	// Accounts:
	creator solanago.PublicKey,
	beneficiary solanago.PublicKey,
	poolState solanago.PublicKey,
	vestingRecord solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateVestingAccountInstruction(
		shareAmountParam,
		creator,
		beneficiary,
		poolState,
		vestingRecord,
		remaining__...,
	)
	return instruction_
}
