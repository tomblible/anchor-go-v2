// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_to_cpswap" instruction.

// # Arguments
//
// * `ctx` - The context of accounts
type MigrateToCpswap struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [2] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [3] = [] platform_config
	PlatformConfig solanago.PublicKey `bin:"-"`
	// [4] = [] cpswap_program[CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C]
	CpswapProgram solanago.PublicKey `bin:"-"`
	// [5] = [writable] cpswap_pool
	CpswapPool solanago.PublicKey `bin:"-"`
	// [6] = [] cpswap_authority
	CpswapAuthority solanago.PublicKey `bin:"-"`
	// [7] = [writable] cpswap_lp_mint
	CpswapLpMint solanago.PublicKey `bin:"-"`
	// [8] = [writable] cpswap_base_vault
	CpswapBaseVault solanago.PublicKey `bin:"-"`
	// [9] = [writable] cpswap_quote_vault
	CpswapQuoteVault solanago.PublicKey `bin:"-"`
	// [10] = [] cpswap_config
	CpswapConfig solanago.PublicKey `bin:"-"`
	// [11] = [writable] cpswap_create_pool_fee
	CpswapCreatePoolFee solanago.PublicKey `bin:"-"`
	// [12] = [writable] cpswap_observation
	CpswapObservation solanago.PublicKey `bin:"-"`
	// [13] = [writable] cpswap_permission_pda
	CpswapPermissionPda solanago.PublicKey `bin:"-"`
	// [14] = [] lock_program[LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE]
	LockProgram solanago.PublicKey `bin:"-"`
	// [15] = [] lock_authority
	LockAuthority solanago.PublicKey `bin:"-"`
	// [16] = [writable] lock_lp_vault
	LockLpVault solanago.PublicKey `bin:"-"`
	// [17] = [writable] authority
	Authority solanago.PublicKey `bin:"-"`
	// [18] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [19] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [20] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [21] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [22] = [writable] pool_lp_token
	PoolLpToken solanago.PublicKey `bin:"-"`
	// [23] = [] base_token_program
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [24] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	QuoteTokenProgram solanago.PublicKey `bin:"-"`
	// [25] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [26] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [27] = [] rent_program[SysvarRent111111111111111111111111111111111]
	RentProgram solanago.PublicKey `bin:"-"`
	// [28] = [] metadata_program[metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s]
	MetadataProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateToCpswap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *MigrateToCpswap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *MigrateToCpswap) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 29 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 29, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.BaseMint = accounts[1]
	obj.QuoteMint = accounts[2]
	obj.PlatformConfig = accounts[3]
	obj.CpswapProgram = accounts[4]
	obj.CpswapPool = accounts[5]
	obj.CpswapAuthority = accounts[6]
	obj.CpswapLpMint = accounts[7]
	obj.CpswapBaseVault = accounts[8]
	obj.CpswapQuoteVault = accounts[9]
	obj.CpswapConfig = accounts[10]
	obj.CpswapCreatePoolFee = accounts[11]
	obj.CpswapObservation = accounts[12]
	obj.CpswapPermissionPda = accounts[13]
	obj.LockProgram = accounts[14]
	obj.LockAuthority = accounts[15]
	obj.LockLpVault = accounts[16]
	obj.Authority = accounts[17]
	obj.PoolState = accounts[18]
	obj.GlobalConfig = accounts[19]
	obj.BaseVault = accounts[20]
	obj.QuoteVault = accounts[21]
	obj.PoolLpToken = accounts[22]
	obj.BaseTokenProgram = accounts[23]
	obj.QuoteTokenProgram = accounts[24]
	obj.AssociatedTokenProgram = accounts[25]
	obj.SystemProgram = accounts[26]
	obj.RentProgram = accounts[27]
	obj.MetadataProgram = accounts[28]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateToCpswap) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateToCpswap) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateToCpswap)
}

func (*MigrateToCpswap) NewInstance() programparser.Instruction {
	return new(MigrateToCpswap)
}

func (obj *MigrateToCpswap) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 29 {
		return nil
	}
	return obj.PublicKeySlice[29:]
}

// Builds a "migrate_to_cpswap" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func NewMigrateToCpswapInstruction(
	payer solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	platformConfig solanago.PublicKey,
	cpswapPool solanago.PublicKey,
	cpswapAuthority solanago.PublicKey,
	cpswapLpMint solanago.PublicKey,
	cpswapBaseVault solanago.PublicKey,
	cpswapQuoteVault solanago.PublicKey,
	cpswapConfig solanago.PublicKey,
	cpswapCreatePoolFee solanago.PublicKey,
	cpswapObservation solanago.PublicKey,
	cpswapPermissionPda solanago.PublicKey,
	lockAuthority solanago.PublicKey,
	lockLpVault solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	poolLpToken solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 29, 29+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateToCpswap[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] payer
		// Only migrate_to_cpswap_wallet can migrate to cpswap pool
		// This signer must match the migrate_to_cpswap_wallet saved in global_config
		metas_[0] = solanago.NewAccountMeta(payer, true, true)
		// [1] = [] base_mint
		// The mint for the base token (token being sold)
		metas_[1] = solanago.NewAccountMeta(baseMint, false, false)
		// [2] = [] quote_mint
		// The mint for the quote token (token used to buy)
		metas_[2] = solanago.NewAccountMeta(quoteMint, false, false)
		// [3] = [] platform_config
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		metas_[3] = solanago.NewAccountMeta(platformConfig, false, false)
		// [4] = [] cpswap_program[CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C]
		metas_[4] = solanago.NewAccountMeta(CpswapProgram, false, false)
		// [5] = [writable] cpswap_pool
		// PDA account:
		// seeds = [
		// b"pool",
		// cpswap_config.key().as_ref(),
		// token_0_mint.key().as_ref(),
		// token_1_mint.key().as_ref(),
		// ],
		// seeds::program = cpswap_program,
		//
		// Or random account: must be signed by cli
		metas_[5] = solanago.NewAccountMeta(cpswapPool, true, false)
		// [6] = [] cpswap_authority
		metas_[6] = solanago.NewAccountMeta(cpswapAuthority, false, false)
		// [7] = [writable] cpswap_lp_mint
		metas_[7] = solanago.NewAccountMeta(cpswapLpMint, true, false)
		// [8] = [writable] cpswap_base_vault
		metas_[8] = solanago.NewAccountMeta(cpswapBaseVault, true, false)
		// [9] = [writable] cpswap_quote_vault
		metas_[9] = solanago.NewAccountMeta(cpswapQuoteVault, true, false)
		// [10] = [] cpswap_config
		metas_[10] = solanago.NewAccountMeta(cpswapConfig, false, false)
		// [11] = [writable] cpswap_create_pool_fee
		metas_[11] = solanago.NewAccountMeta(cpswapCreatePoolFee, true, false)
		// [12] = [writable] cpswap_observation
		metas_[12] = solanago.NewAccountMeta(cpswapObservation, true, false)
		// [13] = [writable] cpswap_permission_pda
		metas_[13] = solanago.NewAccountMeta(cpswapPermissionPda, true, false)
		// [14] = [] lock_program[LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE]
		metas_[14] = solanago.NewAccountMeta(LockProgram, false, false)
		// [15] = [] lock_authority
		metas_[15] = solanago.NewAccountMeta(lockAuthority, false, false)
		// [16] = [writable] lock_lp_vault
		metas_[16] = solanago.NewAccountMeta(lockLpVault, true, false)
		// [17] = [writable] authority
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		metas_[17] = solanago.NewAccountMeta(authority, true, false)
		// [18] = [writable] pool_state
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		metas_[18] = solanago.NewAccountMeta(poolState, true, false)
		// [19] = [] global_config
		// Global config account stores owner
		metas_[19] = solanago.NewAccountMeta(globalConfig, false, false)
		// [20] = [writable] base_vault
		// The pool's vault for base tokens
		// Will be fully drained during migration
		metas_[20] = solanago.NewAccountMeta(baseVault, true, false)
		// [21] = [writable] quote_vault
		// The pool's vault for quote tokens
		// Will be fully drained during migration
		metas_[21] = solanago.NewAccountMeta(quoteVault, true, false)
		// [22] = [writable] pool_lp_token
		metas_[22] = solanago.NewAccountMeta(poolLpToken, true, false)
		// [23] = [] base_token_program
		// SPL Token program for the base token
		// Must be the standard Token program
		metas_[23] = solanago.NewAccountMeta(baseTokenProgram, false, false)
		// [24] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for the quote token
		metas_[24] = solanago.NewAccountMeta(QuoteTokenProgram, false, false)
		// [25] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		// Program to create an ATA for receiving fee NFT
		metas_[25] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [26] = [] system_program
		// Required for account creation
		metas_[26] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [27] = [] rent_program[SysvarRent111111111111111111111111111111111]
		// Required for rent exempt calculations
		metas_[27] = solanago.NewAccountMeta(RentProgram, false, false)
		// [28] = [] metadata_program[metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s]
		// Program to create NFT metadata accunt
		metas_[28] = solanago.NewAccountMeta(MetadataProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateToCpswap" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func BuildMigrateToCpswap(
	payer solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	platformConfig solanago.PublicKey,
	cpswapPool solanago.PublicKey,
	cpswapAuthority solanago.PublicKey,
	cpswapLpMint solanago.PublicKey,
	cpswapBaseVault solanago.PublicKey,
	cpswapQuoteVault solanago.PublicKey,
	cpswapConfig solanago.PublicKey,
	cpswapCreatePoolFee solanago.PublicKey,
	cpswapObservation solanago.PublicKey,
	cpswapPermissionPda solanago.PublicKey,
	lockAuthority solanago.PublicKey,
	lockLpVault solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	poolLpToken solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateToCpswapInstruction(
		payer,
		baseMint,
		quoteMint,
		platformConfig,
		cpswapPool,
		cpswapAuthority,
		cpswapLpMint,
		cpswapBaseVault,
		cpswapQuoteVault,
		cpswapConfig,
		cpswapCreatePoolFee,
		cpswapObservation,
		cpswapPermissionPda,
		lockAuthority,
		lockLpVault,
		authority,
		poolState,
		globalConfig,
		baseVault,
		quoteVault,
		poolLpToken,
		baseTokenProgram,
		remaining__...,
	)
	return instruction_
}
