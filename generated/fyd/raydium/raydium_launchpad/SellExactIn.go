// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "sell_exact_in" instruction.

// Use the given amount of base tokens to sell for quote tokens.
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_in` - Amount of base token to sell
// * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)
// * `share_fee_rate` - Fee rate for the share
type SellExactIn struct {
	// Params:
	AmountIn         uint64
	MinimumAmountOut uint64
	ShareFeeRate     uint64
	// Accounts:
	// [0] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [3] = [] platform_config
	PlatformConfig solanago.PublicKey `bin:"-"`
	// [4] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_base_token
	UserBaseToken solanago.PublicKey `bin:"-"`
	// [6] = [writable] user_quote_token
	UserQuoteToken solanago.PublicKey `bin:"-"`
	// [7] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [8] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [9] = [] base_token_mint
	BaseTokenMint solanago.PublicKey `bin:"-"`
	// [10] = [] quote_token_mint
	QuoteTokenMint solanago.PublicKey `bin:"-"`
	// [11] = [] base_token_program
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	QuoteTokenProgram solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// [15] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [16] = [writable] creator_fee_vault_quote_token_account
	CreatorFeeVaultQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [17] = [writable] platform_fee_vault_quote_token_account
	PlatformFeeVaultQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SellExactIn) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountInParam`:
	if err = encoder.Encode(obj.AmountIn); err != nil {
		return fmt.Errorf("error while marshaling amountInParam:%w", err)
	}
	// Serialize `minimumAmountOutParam`:
	if err = encoder.Encode(obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while marshaling minimumAmountOutParam:%w", err)
	}
	// Serialize `shareFeeRateParam`:
	if err = encoder.Encode(obj.ShareFeeRate); err != nil {
		return fmt.Errorf("error while marshaling shareFeeRateParam:%w", err)
	}
	return nil
}

func (obj *SellExactIn) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	if err = decoder.Decode(&obj.AmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling AmountIn:%w", err)
	}
	// Deserialize `MinimumAmountOut`:
	if err = decoder.Decode(&obj.MinimumAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinimumAmountOut:%w", err)
	}
	// Deserialize `ShareFeeRate`:
	if err = decoder.Decode(&obj.ShareFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling ShareFeeRate:%w", err)
	}
	return nil
}

func (obj *SellExactIn) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 18 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 18, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.Authority = accounts[1]
	obj.GlobalConfig = accounts[2]
	obj.PlatformConfig = accounts[3]
	obj.PoolState = accounts[4]
	obj.UserBaseToken = accounts[5]
	obj.UserQuoteToken = accounts[6]
	obj.BaseVault = accounts[7]
	obj.QuoteVault = accounts[8]
	obj.BaseTokenMint = accounts[9]
	obj.QuoteTokenMint = accounts[10]
	obj.BaseTokenProgram = accounts[11]
	obj.QuoteTokenProgram = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.SystemProgram = accounts[15]
	obj.CreatorFeeVaultQuoteTokenAccount = accounts[16]
	obj.PlatformFeeVaultQuoteTokenAccount = accounts[17]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SellExactIn) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SellExactIn) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SellExactIn)
}

func (*SellExactIn) NewInstance() programparser.Instruction {
	return new(SellExactIn)
}

func (obj *SellExactIn) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 18 {
		return nil
	}
	return obj.PublicKeySlice[18:]
}

// Builds a "sell_exact_in" instruction.
// Use the given amount of base tokens to sell for quote tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Amount of base token to sell // * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection) // * `share_fee_rate` - Fee rate for the share //
func NewSellExactInInstruction(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	globalConfig solanago.PublicKey,
	platformConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	userBaseToken solanago.PublicKey,
	userQuoteToken solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseTokenMint solanago.PublicKey,
	quoteTokenMint solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	creatorFeeVaultQuoteTokenAccount solanago.PublicKey,
	platformFeeVaultQuoteTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 18, 18+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SellExactIn[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountInParam`:
		if err = enc__.Encode(amountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountInParam:%w", err)
		}
		// Serialize `minimumAmountOutParam`:
		if err = enc__.Encode(minimumAmountOutParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minimumAmountOutParam:%w", err)
		}
		// Serialize `shareFeeRateParam`:
		if err = enc__.Encode(shareFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling shareFeeRateParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] payer
		// The user performing the swap operation
		// Must sign the transaction and pay for fees
		metas_[0] = solanago.NewAccountMeta(payer, false, true)
		// [1] = [] authority
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		metas_[1] = solanago.NewAccountMeta(authority, false, false)
		// [2] = [] global_config
		// Global configuration account containing protocol-wide settings
		// Used to read protocol fee rates and curve type
		metas_[2] = solanago.NewAccountMeta(globalConfig, false, false)
		// [3] = [] platform_config
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		metas_[3] = solanago.NewAccountMeta(platformConfig, false, false)
		// [4] = [writable] pool_state
		// The pool state account where the swap will be performed
		// Contains current pool parameters and balances
		metas_[4] = solanago.NewAccountMeta(poolState, true, false)
		// [5] = [writable] user_base_token
		// The user's token account for base tokens (tokens being bought)
		// Will receive the output tokens after the swap
		metas_[5] = solanago.NewAccountMeta(userBaseToken, true, false)
		// [6] = [writable] user_quote_token
		// The user's token account for quote tokens (tokens being sold)
		// Will be debited for the input amount
		metas_[6] = solanago.NewAccountMeta(userQuoteToken, true, false)
		// [7] = [writable] base_vault
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		metas_[7] = solanago.NewAccountMeta(baseVault, true, false)
		// [8] = [writable] quote_vault
		// The pool's vault for quote tokens
		// Will receive the input tokens from the user
		metas_[8] = solanago.NewAccountMeta(quoteVault, true, false)
		// [9] = [] base_token_mint
		// The mint of the base token
		// Used for transfer fee calculations if applicable
		metas_[9] = solanago.NewAccountMeta(baseTokenMint, false, false)
		// [10] = [] quote_token_mint
		// The mint of the quote token
		metas_[10] = solanago.NewAccountMeta(quoteTokenMint, false, false)
		// [11] = [] base_token_program
		// SPL Token program for base token transfers
		metas_[11] = solanago.NewAccountMeta(baseTokenProgram, false, false)
		// [12] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for quote token transfers
		metas_[12] = solanago.NewAccountMeta(QuoteTokenProgram, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// [15] = [] system_program
		metas_[15] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [16] = [writable] creator_fee_vault_quote_token_account
		metas_[16] = solanago.NewAccountMeta(creatorFeeVaultQuoteTokenAccount, true, false)
		// [17] = [writable] platform_fee_vault_quote_token_account
		metas_[17] = solanago.NewAccountMeta(platformFeeVaultQuoteTokenAccount, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSellExactIn" instruction.
// Use the given amount of base tokens to sell for quote tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Amount of base token to sell // * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection) // * `share_fee_rate` - Fee rate for the share //
func BuildSellExactIn(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	globalConfig solanago.PublicKey,
	platformConfig solanago.PublicKey,
	poolState solanago.PublicKey,
	userBaseToken solanago.PublicKey,
	userQuoteToken solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	baseTokenMint solanago.PublicKey,
	quoteTokenMint solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	creatorFeeVaultQuoteTokenAccount solanago.PublicKey,
	platformFeeVaultQuoteTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSellExactInInstruction(
		amountInParam,
		minimumAmountOutParam,
		shareFeeRateParam,
		payer,
		authority,
		globalConfig,
		platformConfig,
		poolState,
		userBaseToken,
		userQuoteToken,
		baseVault,
		quoteVault,
		baseTokenMint,
		quoteTokenMint,
		baseTokenProgram,
		eventAuthority,
		program,
		creatorFeeVaultQuoteTokenAccount,
		platformFeeVaultQuoteTokenAccount,
		remaining__...,
	)
	return instruction_
}
