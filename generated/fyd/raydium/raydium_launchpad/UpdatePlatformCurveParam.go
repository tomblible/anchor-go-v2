// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_platform_curve_param" instruction.

// Update platform launch param
// # Arguments
//
// * `ctx` - The context of accounts
// * `param` - Parameter to update
type UpdatePlatformCurveParam struct {
	// Params:
	Index             uint8
	BondingCurveParam BondingCurveParam
	// Accounts:
	// [0] = [writable,signer] platform_admin
	PlatformAdmin solanago.PublicKey `bin:"-"`
	// [1] = [writable] platform_config
	PlatformConfig solanago.PublicKey `bin:"-"`
	// [2] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdatePlatformCurveParam) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `indexParam`:
	if err = encoder.Encode(obj.Index); err != nil {
		return fmt.Errorf("error while marshaling indexParam:%w", err)
	}
	// Serialize `bondingCurveParamParam`:
	if err = encoder.Encode(obj.BondingCurveParam); err != nil {
		return fmt.Errorf("error while marshaling bondingCurveParamParam:%w", err)
	}
	return nil
}

func (obj *UpdatePlatformCurveParam) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Index`:
	if err = decoder.Decode(&obj.Index); err != nil {
		return fmt.Errorf("error while unmarshaling Index:%w", err)
	}
	// Deserialize `BondingCurveParam`:
	if err = decoder.Decode(&obj.BondingCurveParam); err != nil {
		return fmt.Errorf("error while unmarshaling BondingCurveParam:%w", err)
	}
	return nil
}

func (obj *UpdatePlatformCurveParam) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.PlatformAdmin = accounts[0]
	obj.PlatformConfig = accounts[1]
	obj.GlobalConfig = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdatePlatformCurveParam) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdatePlatformCurveParam) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdatePlatformCurveParam)
}

func (*UpdatePlatformCurveParam) NewInstance() programparser.Instruction {
	return new(UpdatePlatformCurveParam)
}

// Builds a "update_platform_curve_param" instruction.
// Update platform launch param // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update //
func NewUpdatePlatformCurveParamInstruction(
	// Params:
	indexParam uint8,
	bondingCurveParamParam BondingCurveParam,

	// Accounts:
	platformAdmin solanago.PublicKey,
	platformConfig solanago.PublicKey,
	globalConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdatePlatformCurveParam[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `indexParam`:
		if err = enc__.Encode(indexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling indexParam:%w", err)
		}
		// Serialize `bondingCurveParamParam`:
		if err = enc__.Encode(bondingCurveParamParam); err != nil {
			return nil, fmt.Errorf("error while marshaling bondingCurveParamParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] platform_admin
		// The account paying for the initialization costs
		metas_[0] = solanago.NewAccountMeta(platformAdmin, true, true)
		// [1] = [writable] platform_config
		// Platform config account to be changed
		metas_[1] = solanago.NewAccountMeta(platformConfig, true, false)
		// [2] = [] global_config
		// Global configuration account containing protocol-wide settings
		// Includes settings like quote token mint and fee parameters
		metas_[2] = solanago.NewAccountMeta(globalConfig, false, false)
		// [3] = [] system_program
		// System program for lamport transfers
		metas_[3] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdatePlatformCurveParam" instruction.
// Update platform launch param // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update //
func BuildUpdatePlatformCurveParam(
	// Params:
	indexParam uint8,
	bondingCurveParamParam BondingCurveParam,

	// Accounts:
	platformAdmin solanago.PublicKey,
	platformConfig solanago.PublicKey,
	globalConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdatePlatformCurveParamInstruction(
		indexParam,
		bondingCurveParamParam,
		platformAdmin,
		platformConfig,
		globalConfig,
		remaining__...,
	)
	return instruction_
}
