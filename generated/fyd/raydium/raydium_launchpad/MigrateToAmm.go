// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate_to_amm" instruction.

// # Arguments
//
// * `ctx` - The context of accounts
type MigrateToAmm struct {
	// Params:
	BaseLotSize            uint64
	QuoteLotSize           uint64
	MarketVaultSignerNonce uint8
	// Accounts:
	// [0] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [2] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [3] = [] openbook_program[srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX]
	OpenbookProgram solanago.PublicKey `bin:"-"`
	// [4] = [writable] market
	Market solanago.PublicKey `bin:"-"`
	// [5] = [writable] request_queue
	RequestQueue solanago.PublicKey `bin:"-"`
	// [6] = [writable] event_queue
	EventQueue solanago.PublicKey `bin:"-"`
	// [7] = [writable] bids
	Bids solanago.PublicKey `bin:"-"`
	// [8] = [writable] asks
	Asks solanago.PublicKey `bin:"-"`
	// [9] = [] market_vault_signer
	MarketVaultSigner solanago.PublicKey `bin:"-"`
	// [10] = [writable] market_base_vault
	MarketBaseVault solanago.PublicKey `bin:"-"`
	// [11] = [writable] market_quote_vault
	MarketQuoteVault solanago.PublicKey `bin:"-"`
	// [12] = [] amm_program[675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8]
	AmmProgram solanago.PublicKey `bin:"-"`
	// [13] = [writable] amm_pool
	AmmPool solanago.PublicKey `bin:"-"`
	// [14] = [] amm_authority
	AmmAuthority solanago.PublicKey `bin:"-"`
	// [15] = [writable] amm_open_orders
	AmmOpenOrders solanago.PublicKey `bin:"-"`
	// [16] = [writable] amm_lp_mint
	AmmLpMint solanago.PublicKey `bin:"-"`
	// [17] = [writable] amm_base_vault
	AmmBaseVault solanago.PublicKey `bin:"-"`
	// [18] = [writable] amm_quote_vault
	AmmQuoteVault solanago.PublicKey `bin:"-"`
	// [19] = [writable] amm_target_orders
	AmmTargetOrders solanago.PublicKey `bin:"-"`
	// [20] = [] amm_config
	AmmConfig solanago.PublicKey `bin:"-"`
	// [21] = [writable] amm_create_fee_destination
	AmmCreateFeeDestination solanago.PublicKey `bin:"-"`
	// [22] = [writable] authority
	Authority solanago.PublicKey `bin:"-"`
	// [23] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [24] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [25] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [26] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [27] = [writable] pool_lp_token
	PoolLpToken solanago.PublicKey `bin:"-"`
	// [28] = [] spl_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [29] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [30] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [31] = [] rent_program[SysvarRent111111111111111111111111111111111]
	RentProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MigrateToAmm) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `baseLotSizeParam`:
	if err = encoder.Encode(obj.BaseLotSize); err != nil {
		return fmt.Errorf("error while marshaling baseLotSizeParam:%w", err)
	}
	// Serialize `quoteLotSizeParam`:
	if err = encoder.Encode(obj.QuoteLotSize); err != nil {
		return fmt.Errorf("error while marshaling quoteLotSizeParam:%w", err)
	}
	// Serialize `marketVaultSignerNonceParam`:
	if err = encoder.Encode(obj.MarketVaultSignerNonce); err != nil {
		return fmt.Errorf("error while marshaling marketVaultSignerNonceParam:%w", err)
	}
	return nil
}

func (obj *MigrateToAmm) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseLotSize`:
	if err = decoder.Decode(&obj.BaseLotSize); err != nil {
		return fmt.Errorf("error while unmarshaling BaseLotSize:%w", err)
	}
	// Deserialize `QuoteLotSize`:
	if err = decoder.Decode(&obj.QuoteLotSize); err != nil {
		return fmt.Errorf("error while unmarshaling QuoteLotSize:%w", err)
	}
	// Deserialize `MarketVaultSignerNonce`:
	if err = decoder.Decode(&obj.MarketVaultSignerNonce); err != nil {
		return fmt.Errorf("error while unmarshaling MarketVaultSignerNonce:%w", err)
	}
	return nil
}

func (obj *MigrateToAmm) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 32 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 32, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.BaseMint = accounts[1]
	obj.QuoteMint = accounts[2]
	obj.OpenbookProgram = accounts[3]
	obj.Market = accounts[4]
	obj.RequestQueue = accounts[5]
	obj.EventQueue = accounts[6]
	obj.Bids = accounts[7]
	obj.Asks = accounts[8]
	obj.MarketVaultSigner = accounts[9]
	obj.MarketBaseVault = accounts[10]
	obj.MarketQuoteVault = accounts[11]
	obj.AmmProgram = accounts[12]
	obj.AmmPool = accounts[13]
	obj.AmmAuthority = accounts[14]
	obj.AmmOpenOrders = accounts[15]
	obj.AmmLpMint = accounts[16]
	obj.AmmBaseVault = accounts[17]
	obj.AmmQuoteVault = accounts[18]
	obj.AmmTargetOrders = accounts[19]
	obj.AmmConfig = accounts[20]
	obj.AmmCreateFeeDestination = accounts[21]
	obj.Authority = accounts[22]
	obj.PoolState = accounts[23]
	obj.GlobalConfig = accounts[24]
	obj.BaseVault = accounts[25]
	obj.QuoteVault = accounts[26]
	obj.PoolLpToken = accounts[27]
	obj.SplTokenProgram = accounts[28]
	obj.AssociatedTokenProgram = accounts[29]
	obj.SystemProgram = accounts[30]
	obj.RentProgram = accounts[31]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MigrateToAmm) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MigrateToAmm) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MigrateToAmm)
}

func (*MigrateToAmm) NewInstance() programparser.Instruction {
	return new(MigrateToAmm)
}

func (obj *MigrateToAmm) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 32 {
		return nil
	}
	return obj.PublicKeySlice[32:]
}

// Builds a "migrate_to_amm" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func NewMigrateToAmmInstruction(
	// Params:
	baseLotSizeParam uint64,
	quoteLotSizeParam uint64,
	marketVaultSignerNonceParam uint8,

	// Accounts:
	payer solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	market solanago.PublicKey,
	requestQueue solanago.PublicKey,
	eventQueue solanago.PublicKey,
	bids solanago.PublicKey,
	asks solanago.PublicKey,
	marketVaultSigner solanago.PublicKey,
	marketBaseVault solanago.PublicKey,
	marketQuoteVault solanago.PublicKey,
	ammPool solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammLpMint solanago.PublicKey,
	ammBaseVault solanago.PublicKey,
	ammQuoteVault solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	ammConfig solanago.PublicKey,
	ammCreateFeeDestination solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	poolLpToken solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 32, 32+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MigrateToAmm[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `baseLotSizeParam`:
		if err = enc__.Encode(baseLotSizeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling baseLotSizeParam:%w", err)
		}
		// Serialize `quoteLotSizeParam`:
		if err = enc__.Encode(quoteLotSizeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling quoteLotSizeParam:%w", err)
		}
		// Serialize `marketVaultSignerNonceParam`:
		if err = enc__.Encode(marketVaultSignerNonceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling marketVaultSignerNonceParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] payer
		// Only migrate_to_amm_wallet can migrate to cpswap pool
		// This signer must match the migrate_to_amm_wallet saved in global_config
		metas_[0] = solanago.NewAccountMeta(payer, true, true)
		// [1] = [] base_mint
		// The mint for the base token (token being sold)
		metas_[1] = solanago.NewAccountMeta(baseMint, false, false)
		// [2] = [] quote_mint
		// The mint for the quote token (token used to buy)
		metas_[2] = solanago.NewAccountMeta(quoteMint, false, false)
		// [3] = [] openbook_program[srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX]
		metas_[3] = solanago.NewAccountMeta(OpenbookProgram, false, false)
		// [4] = [writable] market
		// Account created and asigned to openbook_program but not been initialized
		metas_[4] = solanago.NewAccountMeta(market, true, false)
		// [5] = [writable] request_queue
		// Account created and asigned to openbook_program but not been initialized
		metas_[5] = solanago.NewAccountMeta(requestQueue, true, false)
		// [6] = [writable] event_queue
		// Account created and asigned to openbook_program but not been initialized
		metas_[6] = solanago.NewAccountMeta(eventQueue, true, false)
		// [7] = [writable] bids
		// Account created and asigned to openbook_program but not been initialized
		metas_[7] = solanago.NewAccountMeta(bids, true, false)
		// [8] = [writable] asks
		// Account created and asigned to openbook_program but not been initialized
		metas_[8] = solanago.NewAccountMeta(asks, true, false)
		// [9] = [] market_vault_signer
		metas_[9] = solanago.NewAccountMeta(marketVaultSigner, false, false)
		// [10] = [writable] market_base_vault
		// Token account that holds the market's base tokens
		metas_[10] = solanago.NewAccountMeta(marketBaseVault, true, false)
		// [11] = [writable] market_quote_vault
		// Token account that holds the market's quote tokens
		metas_[11] = solanago.NewAccountMeta(marketQuoteVault, true, false)
		// [12] = [] amm_program[675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8]
		metas_[12] = solanago.NewAccountMeta(AmmProgram, false, false)
		// [13] = [writable] amm_pool
		metas_[13] = solanago.NewAccountMeta(ammPool, true, false)
		// [14] = [] amm_authority
		metas_[14] = solanago.NewAccountMeta(ammAuthority, false, false)
		// [15] = [writable] amm_open_orders
		metas_[15] = solanago.NewAccountMeta(ammOpenOrders, true, false)
		// [16] = [writable] amm_lp_mint
		metas_[16] = solanago.NewAccountMeta(ammLpMint, true, false)
		// [17] = [writable] amm_base_vault
		metas_[17] = solanago.NewAccountMeta(ammBaseVault, true, false)
		// [18] = [writable] amm_quote_vault
		metas_[18] = solanago.NewAccountMeta(ammQuoteVault, true, false)
		// [19] = [writable] amm_target_orders
		metas_[19] = solanago.NewAccountMeta(ammTargetOrders, true, false)
		// [20] = [] amm_config
		metas_[20] = solanago.NewAccountMeta(ammConfig, false, false)
		// [21] = [writable] amm_create_fee_destination
		metas_[21] = solanago.NewAccountMeta(ammCreateFeeDestination, true, false)
		// [22] = [writable] authority
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		metas_[22] = solanago.NewAccountMeta(authority, true, false)
		// [23] = [writable] pool_state
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		metas_[23] = solanago.NewAccountMeta(poolState, true, false)
		// [24] = [] global_config
		// Global config account stores owner
		metas_[24] = solanago.NewAccountMeta(globalConfig, false, false)
		// [25] = [writable] base_vault
		// The pool's vault for base tokens
		// Will be fully drained during migration
		metas_[25] = solanago.NewAccountMeta(baseVault, true, false)
		// [26] = [writable] quote_vault
		// The pool's vault for quote tokens
		// Will be fully drained during migration
		metas_[26] = solanago.NewAccountMeta(quoteVault, true, false)
		// [27] = [writable] pool_lp_token
		metas_[27] = solanago.NewAccountMeta(poolLpToken, true, false)
		// [28] = [] spl_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for the base token
		// Must be the standard Token program
		metas_[28] = solanago.NewAccountMeta(SplTokenProgram, false, false)
		// [29] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		// Program to create an ATA for receiving fee NFT
		metas_[29] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [30] = [] system_program
		// Required for account creation
		metas_[30] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [31] = [] rent_program[SysvarRent111111111111111111111111111111111]
		// Required for rent exempt calculations
		metas_[31] = solanago.NewAccountMeta(RentProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrateToAmm" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func BuildMigrateToAmm(
	// Params:
	baseLotSizeParam uint64,
	quoteLotSizeParam uint64,
	marketVaultSignerNonceParam uint8,

	// Accounts:
	payer solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	market solanago.PublicKey,
	requestQueue solanago.PublicKey,
	eventQueue solanago.PublicKey,
	bids solanago.PublicKey,
	asks solanago.PublicKey,
	marketVaultSigner solanago.PublicKey,
	marketBaseVault solanago.PublicKey,
	marketQuoteVault solanago.PublicKey,
	ammPool solanago.PublicKey,
	ammAuthority solanago.PublicKey,
	ammOpenOrders solanago.PublicKey,
	ammLpMint solanago.PublicKey,
	ammBaseVault solanago.PublicKey,
	ammQuoteVault solanago.PublicKey,
	ammTargetOrders solanago.PublicKey,
	ammConfig solanago.PublicKey,
	ammCreateFeeDestination solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	poolLpToken solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateToAmmInstruction(
		baseLotSizeParam,
		quoteLotSizeParam,
		marketVaultSignerNonceParam,
		payer,
		baseMint,
		quoteMint,
		market,
		requestQueue,
		eventQueue,
		bids,
		asks,
		marketVaultSigner,
		marketBaseVault,
		marketQuoteVault,
		ammPool,
		ammAuthority,
		ammOpenOrders,
		ammLpMint,
		ammBaseVault,
		ammQuoteVault,
		ammTargetOrders,
		ammConfig,
		ammCreateFeeDestination,
		authority,
		poolState,
		globalConfig,
		baseVault,
		quoteVault,
		poolLpToken,
		remaining__...,
	)
	return instruction_
}
