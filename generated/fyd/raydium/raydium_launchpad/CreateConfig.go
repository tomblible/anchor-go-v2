// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_config" instruction.

// Creates a new configuration
// # Arguments
//
// * `ctx` - The accounts needed by instruction
// * `curve_type` - The type of bonding curve (0: ConstantProduct)
// * `index` - The index of config, there may be multiple config with the same curve type.
// * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE
type CreateConfig struct {
	// Params:
	CurveType    uint8
	Index        uint16
	MigrateFee   uint64
	TradeFeeRate uint64
	// Accounts:
	// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [2] = [] quote_token_mint
	QuoteTokenMint solanago.PublicKey `bin:"-"`
	// [3] = [] protocol_fee_owner
	ProtocolFeeOwner solanago.PublicKey `bin:"-"`
	// [4] = [] migrate_fee_owner
	MigrateFeeOwner solanago.PublicKey `bin:"-"`
	// [5] = [] migrate_to_amm_wallet
	MigrateToAmmWallet solanago.PublicKey `bin:"-"`
	// [6] = [] migrate_to_cpswap_wallet
	MigrateToCpswapWallet solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `curveTypeParam`:
	if err = encoder.Encode(obj.CurveType); err != nil {
		return fmt.Errorf("error while marshaling curveTypeParam:%w", err)
	}
	// Serialize `indexParam`:
	if err = encoder.Encode(obj.Index); err != nil {
		return fmt.Errorf("error while marshaling indexParam:%w", err)
	}
	// Serialize `migrateFeeParam`:
	if err = encoder.Encode(obj.MigrateFee); err != nil {
		return fmt.Errorf("error while marshaling migrateFeeParam:%w", err)
	}
	// Serialize `tradeFeeRateParam`:
	if err = encoder.Encode(obj.TradeFeeRate); err != nil {
		return fmt.Errorf("error while marshaling tradeFeeRateParam:%w", err)
	}
	return nil
}

func (obj *CreateConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CurveType`:
	if err = decoder.Decode(&obj.CurveType); err != nil {
		return fmt.Errorf("error while unmarshaling CurveType:%w", err)
	}
	// Deserialize `Index`:
	if err = decoder.Decode(&obj.Index); err != nil {
		return fmt.Errorf("error while unmarshaling Index:%w", err)
	}
	// Deserialize `MigrateFee`:
	if err = decoder.Decode(&obj.MigrateFee); err != nil {
		return fmt.Errorf("error while unmarshaling MigrateFee:%w", err)
	}
	// Deserialize `TradeFeeRate`:
	if err = decoder.Decode(&obj.TradeFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling TradeFeeRate:%w", err)
	}
	return nil
}

func (obj *CreateConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.QuoteTokenMint = accounts[2]
	obj.ProtocolFeeOwner = accounts[3]
	obj.MigrateFeeOwner = accounts[4]
	obj.MigrateToAmmWallet = accounts[5]
	obj.MigrateToCpswapWallet = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateConfig)
}

func (*CreateConfig) NewInstance() programparser.Instruction {
	return new(CreateConfig)
}

func (obj *CreateConfig) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "create_config" instruction.
// Creates a new configuration // # Arguments //  // * `ctx` - The accounts needed by instruction // * `curve_type` - The type of bonding curve (0: ConstantProduct) // * `index` - The index of config, there may be multiple config with the same curve type. // * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE //
func NewCreateConfigInstruction(
	// Params:
	curveTypeParam uint8,
	indexParam uint16,
	migrateFeeParam uint64,
	tradeFeeRateParam uint64,

	// Accounts:
	globalConfig solanago.PublicKey,
	quoteTokenMint solanago.PublicKey,
	protocolFeeOwner solanago.PublicKey,
	migrateFeeOwner solanago.PublicKey,
	migrateToAmmWallet solanago.PublicKey,
	migrateToCpswapWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `curveTypeParam`:
		if err = enc__.Encode(curveTypeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling curveTypeParam:%w", err)
		}
		// Serialize `indexParam`:
		if err = enc__.Encode(indexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling indexParam:%w", err)
		}
		// Serialize `migrateFeeParam`:
		if err = enc__.Encode(migrateFeeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling migrateFeeParam:%w", err)
		}
		// Serialize `tradeFeeRateParam`:
		if err = enc__.Encode(tradeFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tradeFeeRateParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// The protocol owner/admin account
		// Must match the predefined admin address
		// Has authority to create and modify protocol configurations
		metas_[0] = solanago.NewAccountMeta(Owner, true, true)
		// [1] = [writable] global_config
		// Global configuration account that stores protocol-wide settings
		// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
		// Stores fee rates and protocol parameters
		metas_[1] = solanago.NewAccountMeta(globalConfig, true, false)
		// [2] = [] quote_token_mint
		// The mint address of the quote token (token used for buying)
		// This will be the standard token used for all pools with this config
		metas_[2] = solanago.NewAccountMeta(quoteTokenMint, false, false)
		// [3] = [] protocol_fee_owner
		// Account that will receive protocol fees
		metas_[3] = solanago.NewAccountMeta(protocolFeeOwner, false, false)
		// [4] = [] migrate_fee_owner
		// Account that will receive migrate fees
		metas_[4] = solanago.NewAccountMeta(migrateFeeOwner, false, false)
		// [5] = [] migrate_to_amm_wallet
		// The control wallet address for migrating to amm
		metas_[5] = solanago.NewAccountMeta(migrateToAmmWallet, false, false)
		// [6] = [] migrate_to_cpswap_wallet
		// The control wallet address for migrating to cpswap
		metas_[6] = solanago.NewAccountMeta(migrateToCpswapWallet, false, false)
		// [7] = [] system_program
		// Required for account creation
		metas_[7] = solanago.NewAccountMeta(SystemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateConfig" instruction.
// Creates a new configuration // # Arguments //  // * `ctx` - The accounts needed by instruction // * `curve_type` - The type of bonding curve (0: ConstantProduct) // * `index` - The index of config, there may be multiple config with the same curve type. // * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE //
func BuildCreateConfig(
	// Params:
	curveTypeParam uint8,
	indexParam uint16,
	migrateFeeParam uint64,
	tradeFeeRateParam uint64,

	// Accounts:
	globalConfig solanago.PublicKey,
	quoteTokenMint solanago.PublicKey,
	protocolFeeOwner solanago.PublicKey,
	migrateFeeOwner solanago.PublicKey,
	migrateToAmmWallet solanago.PublicKey,
	migrateToCpswapWallet solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateConfigInstruction(
		curveTypeParam,
		indexParam,
		migrateFeeParam,
		tradeFeeRateParam,
		globalConfig,
		quoteTokenMint,
		protocolFeeOwner,
		migrateFeeOwner,
		migrateToAmmWallet,
		migrateToCpswapWallet,
		remaining__...,
	)
	return instruction_
}
