// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_config" instruction.

// Updates configuration parameters
// # Arguments
//
// * `ctx` - The context of accounts
// * `param` - Parameter to update:
// - 0: Update trade_fee_rate
// - 1: Update fee owner
// * `value` - New value for the selected parameter
type UpdateConfig struct {
	// Params:
	Param uint8
	Value uint64
	// Accounts:
	// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [writable] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `paramParam`:
	if err = encoder.Encode(obj.Param); err != nil {
		return fmt.Errorf("error while marshaling paramParam:%w", err)
	}
	// Serialize `valueParam`:
	if err = encoder.Encode(obj.Value); err != nil {
		return fmt.Errorf("error while marshaling valueParam:%w", err)
	}
	return nil
}

func (obj *UpdateConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Param`:
	if err = decoder.Decode(&obj.Param); err != nil {
		return fmt.Errorf("error while unmarshaling Param:%w", err)
	}
	// Deserialize `Value`:
	if err = decoder.Decode(&obj.Value); err != nil {
		return fmt.Errorf("error while unmarshaling Value:%w", err)
	}
	return nil
}

func (obj *UpdateConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateConfig)
}

func (*UpdateConfig) NewInstance() programparser.Instruction {
	return new(UpdateConfig)
}

func (obj *UpdateConfig) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[2:]
}

// Builds a "update_config" instruction.
// Updates configuration parameters // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update: // - 0: Update trade_fee_rate // - 1: Update fee owner // * `value` - New value for the selected parameter //
func NewUpdateConfigInstruction(
	// Params:
	paramParam uint8,
	valueParam uint64,

	// Accounts:
	globalConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `paramParam`:
		if err = enc__.Encode(paramParam); err != nil {
			return nil, fmt.Errorf("error while marshaling paramParam:%w", err)
		}
		// Serialize `valueParam`:
		if err = enc__.Encode(valueParam); err != nil {
			return nil, fmt.Errorf("error while marshaling valueParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner[GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ]
		// The global config owner or admin
		metas_[0] = solanago.NewAccountMeta(Owner, false, true)
		// [1] = [writable] global_config
		// Global config account to be changed
		metas_[1] = solanago.NewAccountMeta(globalConfig, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateConfig" instruction.
// Updates configuration parameters // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update: // - 0: Update trade_fee_rate // - 1: Update fee owner // * `value` - New value for the selected parameter //
func BuildUpdateConfig(
	// Params:
	paramParam uint8,
	valueParam uint64,

	// Accounts:
	globalConfig solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateConfigInstruction(
		paramParam,
		valueParam,
		globalConfig,
		remaining__...,
	)
	return instruction_
}
