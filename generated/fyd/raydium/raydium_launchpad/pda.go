// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package raydium_launchpad

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindAuthorityAddress()
	return
}

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindFeeVaultAuthorityAddressForCreateFee() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{99, 114, 101, 97, 116, 111, 114, 95, 102, 101, 101, 95, 118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindFeeVaultAuthorityAddressByCreateFee() (pda solanago.PublicKey) {
	pda, _, _ = FindFeeVaultAuthorityAddressForCreateFee()
	return
}

func FindFeeVaultAuthorityAddressForPlatformfee() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{112, 108, 97, 116, 102, 111, 114, 109, 95, 102, 101, 101, 95, 118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindFeeVaultAuthorityAddressForPlatformfee() (pda solanago.PublicKey) {
	pda, _, _ = FindFeeVaultAuthorityAddressForPlatformfee()
	return
}

func FindCreatorFeeVaultAddress(creator solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = creator.Bytes()
	seeds[1] = quoteMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindCreatorFeeVaultAddress(creator solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindCreatorFeeVaultAddress(creator, quoteMint)
	return
}

func FindPlatformFeeVaultAddress(platformConfig solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = platformConfig.Bytes()
	seeds[1] = quoteMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPlatformFeeVaultAddress(platformConfig solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPlatformFeeVaultAddress(platformConfig, quoteMint)
	return
}

func FindVestingRecordAddress(poolState solanago.PublicKey, beneficiary solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 101, 115, 116, 105, 110, 103}
	seeds[1] = poolState.Bytes()
	seeds[2] = beneficiary.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindVestingRecordAddress(poolState solanago.PublicKey, beneficiary solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindVestingRecordAddress(poolState, beneficiary)
	return
}

func FindGlobalConfigAddress(quoteTokenMint solanago.PublicKey, curveType uint8, index uint16) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 4)
	seeds[0] = []byte{103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103}
	seeds[1] = quoteTokenMint.Bytes()
	if seeds[2], err = binary.MarshalBorsh(curveType); err != nil {
		return
	}
	if seeds[3], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalConfigAddress(quoteTokenMint solanago.PublicKey, curveType uint8, index uint16) (pda solanago.PublicKey) {
	pda, _, _ = FindGlobalConfigAddress(quoteTokenMint, curveType, index)
	return
}

func FindPlatformConfigAddress(platformAdmin solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 108, 97, 116, 102, 111, 114, 109, 95, 99, 111, 110, 102, 105, 103}
	seeds[1] = platformAdmin.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPlatformConfigAddress(platformAdmin solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPlatformConfigAddress(platformAdmin)
	return
}

func FindPoolStateAddress(baseMint solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108}
	seeds[1] = baseMint.Bytes()
	seeds[2] = quoteMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolStateAddress(baseMint solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPoolStateAddress(baseMint, quoteMint)
	return
}

func FindBaseVaultAddress(poolState solanago.PublicKey, baseMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = baseMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBaseVaultAddress(poolState solanago.PublicKey, baseMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindBaseVaultAddress(poolState, baseMint)
	return
}

func FindQuoteVaultAddress(poolState solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 3)
	seeds[0] = []byte{112, 111, 111, 108, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolState.Bytes()
	seeds[2] = quoteMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindQuoteVaultAddress(poolState solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindQuoteVaultAddress(poolState, quoteMint)
	return
}
