// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_fee" instruction.

// Collects accumulated fees from the pool
// # Arguments
//
// * `ctx` - The context of accounts
type CollectFee struct {
	// Params:
	// Accounts:
	// [0] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [1] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [4] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [5] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] recipient_token_account
	RecipientTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CollectFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CollectFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Owner = accounts[0]
	obj.Authority = accounts[1]
	obj.PoolState = accounts[2]
	obj.GlobalConfig = accounts[3]
	obj.QuoteVault = accounts[4]
	obj.QuoteMint = accounts[5]
	obj.RecipientTokenAccount = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectFee)
}

func (*CollectFee) NewInstance() programparser.Instruction {
	return new(CollectFee)
}

func (obj *CollectFee) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "collect_fee" instruction.
// Collects accumulated fees from the pool // # Arguments //  // * `ctx` - The context of accounts //
func NewCollectFeeInstruction(
	owner solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	quoteVault solanago.PublicKey,
	quoteMint solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] owner
		// Only protocol_fee_owner saved in global_config can collect protocol fee now
		metas_[0] = solanago.NewAccountMeta(owner, false, true)
		// [1] = [] authority
		metas_[1] = solanago.NewAccountMeta(authority, false, false)
		// [2] = [writable] pool_state
		// Pool state stores accumulated protocol fee amount
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [] global_config
		// Global config account stores owner
		metas_[3] = solanago.NewAccountMeta(globalConfig, false, false)
		// [4] = [writable] quote_vault
		// The address that holds pool tokens for quote token
		metas_[4] = solanago.NewAccountMeta(quoteVault, true, false)
		// [5] = [] quote_mint
		// The mint of quote token vault
		metas_[5] = solanago.NewAccountMeta(quoteMint, false, false)
		// [6] = [writable] recipient_token_account
		// The address that receives the collected quote token fees
		metas_[6] = solanago.NewAccountMeta(recipientTokenAccount, true, false)
		// [7] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL program for input token transfers
		metas_[7] = solanago.NewAccountMeta(TokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectFee" instruction.
// Collects accumulated fees from the pool // # Arguments //  // * `ctx` - The context of accounts //
func BuildCollectFee(
	owner solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	globalConfig solanago.PublicKey,
	quoteVault solanago.PublicKey,
	quoteMint solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectFeeInstruction(
		owner,
		authority,
		poolState,
		globalConfig,
		quoteVault,
		quoteMint,
		recipientTokenAccount,
		remaining__...,
	)
	return instruction_
}
