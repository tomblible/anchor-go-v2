// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_vested_token" instruction.

// Claim vested token
// # Arguments
type ClaimVestedToken struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] beneficiary
	Beneficiary solanago.PublicKey `bin:"-"`
	// [1] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [3] = [writable] vesting_record
	VestingRecord solanago.PublicKey `bin:"-"`
	// [4] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_base_token
	UserBaseToken solanago.PublicKey `bin:"-"`
	// [6] = [] base_token_mint
	BaseTokenMint solanago.PublicKey `bin:"-"`
	// [7] = [] base_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimVestedToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimVestedToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClaimVestedToken) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Beneficiary = accounts[0]
	obj.Authority = accounts[1]
	obj.PoolState = accounts[2]
	obj.VestingRecord = accounts[3]
	obj.BaseVault = accounts[4]
	obj.UserBaseToken = accounts[5]
	obj.BaseTokenMint = accounts[6]
	obj.BaseTokenProgram = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.AssociatedTokenProgram = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimVestedToken) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimVestedToken) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimVestedToken)
}

func (*ClaimVestedToken) NewInstance() programparser.Instruction {
	return new(ClaimVestedToken)
}

// Builds a "claim_vested_token" instruction.
// Claim vested token // # Arguments
func NewClaimVestedTokenInstruction(
	beneficiary solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	vestingRecord solanago.PublicKey,
	baseVault solanago.PublicKey,
	userBaseToken solanago.PublicKey,
	baseTokenMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimVestedToken[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] beneficiary
		// The beneficiary of the vesting account
		metas_[0] = solanago.NewAccountMeta(beneficiary, true, true)
		// [1] = [] authority
		// PDA that acts as the authority for pool vault and mint operations
		// Generated using AUTH_SEED
		metas_[1] = solanago.NewAccountMeta(authority, false, false)
		// [2] = [writable] pool_state
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		metas_[2] = solanago.NewAccountMeta(poolState, true, false)
		// [3] = [writable] vesting_record
		// The vesting record account
		metas_[3] = solanago.NewAccountMeta(vestingRecord, true, false)
		// [4] = [writable] base_vault
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		metas_[4] = solanago.NewAccountMeta(baseVault, true, false)
		// [5] = [writable] user_base_token
		metas_[5] = solanago.NewAccountMeta(userBaseToken, true, false)
		// [6] = [] base_token_mint
		// The mint for the base token (token being sold)
		// Created in this instruction with specified decimals
		metas_[6] = solanago.NewAccountMeta(baseTokenMint, false, false)
		// [7] = [] base_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for the base token
		// Must be the standard Token program
		metas_[7] = solanago.NewAccountMeta(BaseTokenProgram, false, false)
		// [8] = [] system_program
		// Required for account creation
		metas_[8] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [9] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		// Required for associated token program
		metas_[9] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimVestedToken" instruction.
// Claim vested token // # Arguments
func BuildClaimVestedToken(
	beneficiary solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	vestingRecord solanago.PublicKey,
	baseVault solanago.PublicKey,
	userBaseToken solanago.PublicKey,
	baseTokenMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimVestedTokenInstruction(
		beneficiary,
		authority,
		poolState,
		vestingRecord,
		baseVault,
		userBaseToken,
		baseTokenMint,
		remaining__...,
	)
	return instruction_
}
