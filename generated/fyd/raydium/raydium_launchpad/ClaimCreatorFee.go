// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_creator_fee" instruction.

// Claim the fee from the exclusive creator fee vault.
// # Arguments
//
// * `ctx` - The context of accounts
type ClaimCreatorFee struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [1] = [] fee_vault_authority
	FeeVaultAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] creator_fee_vault
	CreatorFeeVault solanago.PublicKey `bin:"-"`
	// [3] = [writable] recipient_token_account
	RecipientTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [5] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimCreatorFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimCreatorFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClaimCreatorFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Creator = accounts[0]
	obj.FeeVaultAuthority = accounts[1]
	obj.CreatorFeeVault = accounts[2]
	obj.RecipientTokenAccount = accounts[3]
	obj.QuoteMint = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.AssociatedTokenProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimCreatorFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimCreatorFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimCreatorFee)
}

func (*ClaimCreatorFee) NewInstance() programparser.Instruction {
	return new(ClaimCreatorFee)
}

func (obj *ClaimCreatorFee) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[8:]
}

// Builds a "claim_creator_fee" instruction.
// Claim the fee from the exclusive creator fee vault. // # Arguments //  // * `ctx` - The context of accounts //
func NewClaimCreatorFeeInstruction(
	creator solanago.PublicKey,
	feeVaultAuthority solanago.PublicKey,
	creatorFeeVault solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	quoteMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimCreatorFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] creator
		// The pool creator
		metas_[0] = solanago.NewAccountMeta(creator, true, true)
		// [1] = [] fee_vault_authority
		metas_[1] = solanago.NewAccountMeta(feeVaultAuthority, false, false)
		// [2] = [writable] creator_fee_vault
		// The creator fee vault
		metas_[2] = solanago.NewAccountMeta(creatorFeeVault, true, false)
		// [3] = [writable] recipient_token_account
		metas_[3] = solanago.NewAccountMeta(recipientTokenAccount, true, false)
		// [4] = [] quote_mint
		// The mint for the quote token
		metas_[4] = solanago.NewAccountMeta(quoteMint, false, false)
		// [5] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for the quote token
		metas_[5] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [6] = [] system_program
		// Required for account creation
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		// Required for associated token program
		metas_[7] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimCreatorFee" instruction.
// Claim the fee from the exclusive creator fee vault. // # Arguments //  // * `ctx` - The context of accounts //
func BuildClaimCreatorFee(
	creator solanago.PublicKey,
	feeVaultAuthority solanago.PublicKey,
	creatorFeeVault solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	quoteMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimCreatorFeeInstruction(
		creator,
		feeVaultAuthority,
		creatorFeeVault,
		recipientTokenAccount,
		quoteMint,
		remaining__...,
	)
	return instruction_
}
