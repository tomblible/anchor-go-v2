// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "claim_platform_fee_from_vault" instruction.

// Claim the fee from the exclusive platform fee vault.
// # Arguments
//
// * `ctx` - The context of accounts
type ClaimPlatformFeeFromVault struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] platform_fee_wallet
	PlatformFeeWallet solanago.PublicKey `bin:"-"`
	// [1] = [] fee_vault_authority
	FeeVaultAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] platform_config
	PlatformConfig solanago.PublicKey `bin:"-"`
	// [3] = [writable] platform_fee_vault
	PlatformFeeVault solanago.PublicKey `bin:"-"`
	// [4] = [writable] recipient_token_account
	RecipientTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [6] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClaimPlatformFeeFromVault) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimPlatformFeeFromVault) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClaimPlatformFeeFromVault) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.PlatformFeeWallet = accounts[0]
	obj.FeeVaultAuthority = accounts[1]
	obj.PlatformConfig = accounts[2]
	obj.PlatformFeeVault = accounts[3]
	obj.RecipientTokenAccount = accounts[4]
	obj.QuoteMint = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.AssociatedTokenProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClaimPlatformFeeFromVault) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClaimPlatformFeeFromVault) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClaimPlatformFeeFromVault)
}

func (*ClaimPlatformFeeFromVault) NewInstance() programparser.Instruction {
	return new(ClaimPlatformFeeFromVault)
}

func (obj *ClaimPlatformFeeFromVault) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "claim_platform_fee_from_vault" instruction.
// Claim the fee from the exclusive platform fee vault. // # Arguments //  // * `ctx` - The context of accounts //
func NewClaimPlatformFeeFromVaultInstruction(
	platformFeeWallet solanago.PublicKey,
	feeVaultAuthority solanago.PublicKey,
	platformConfig solanago.PublicKey,
	platformFeeVault solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	quoteMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClaimPlatformFeeFromVault[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] platform_fee_wallet
		// Only the wallet stored in platform_config can collect platform fees
		metas_[0] = solanago.NewAccountMeta(platformFeeWallet, true, true)
		// [1] = [] fee_vault_authority
		metas_[1] = solanago.NewAccountMeta(feeVaultAuthority, false, false)
		// [2] = [] platform_config
		// The platform config account
		metas_[2] = solanago.NewAccountMeta(platformConfig, false, false)
		// [3] = [writable] platform_fee_vault
		// The platform fee vault
		metas_[3] = solanago.NewAccountMeta(platformFeeVault, true, false)
		// [4] = [writable] recipient_token_account
		// The address that receives the collected quote token fees
		metas_[4] = solanago.NewAccountMeta(recipientTokenAccount, true, false)
		// [5] = [] quote_mint
		// The mint of quote token vault
		metas_[5] = solanago.NewAccountMeta(quoteMint, false, false)
		// [6] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL program for input token transfers
		metas_[6] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [7] = [] system_program
		// Required for account creation
		metas_[7] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [8] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		// Required for associated token program
		metas_[8] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClaimPlatformFeeFromVault" instruction.
// Claim the fee from the exclusive platform fee vault. // # Arguments //  // * `ctx` - The context of accounts //
func BuildClaimPlatformFeeFromVault(
	platformFeeWallet solanago.PublicKey,
	feeVaultAuthority solanago.PublicKey,
	platformConfig solanago.PublicKey,
	platformFeeVault solanago.PublicKey,
	recipientTokenAccount solanago.PublicKey,
	quoteMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClaimPlatformFeeFromVaultInstruction(
		platformFeeWallet,
		feeVaultAuthority,
		platformConfig,
		platformFeeVault,
		recipientTokenAccount,
		quoteMint,
		remaining__...,
	)
	return instruction_
}
