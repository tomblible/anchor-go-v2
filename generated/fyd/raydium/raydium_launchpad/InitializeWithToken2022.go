// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_with_token_2022" instruction.

// Initializes a new trading pool with base token belongs to spl-token-2022,
// pool created by this instruction must be migrated to cpswap after fundraising ends, i.e., curve_param.migrate_type = 1
// # Arguments
//
// * `ctx` - The context of accounts containing pool and token information
type InitializeWithToken2022 struct {
	// Params:
	BaseMintParam             MintParams
	CurveParam                CurveParams
	VestingParam              VestingParams
	AmmFeeOn                  AmmFeeOn
	TransferFeeExtensionParam *TransferFeeExtensionParams `bin:"optional"`
	// Accounts:
	// [0] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [] creator
	Creator solanago.PublicKey `bin:"-"`
	// [2] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [3] = [] platform_config
	PlatformConfig solanago.PublicKey `bin:"-"`
	// [4] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [5] = [writable] pool_state
	PoolState solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [7] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [8] = [writable] base_vault
	BaseVault solanago.PublicKey `bin:"-"`
	// [9] = [writable] quote_vault
	QuoteVault solanago.PublicKey `bin:"-"`
	// [10] = [] base_token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	QuoteTokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeWithToken2022) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `baseMintParamParam`:
	if err = encoder.Encode(obj.BaseMintParam); err != nil {
		return fmt.Errorf("error while marshaling baseMintParamParam:%w", err)
	}
	// Serialize `curveParamParam`:
	{
		if err = EncodeCurveParams(encoder, obj.CurveParam); err != nil {
			return fmt.Errorf("error while marshalingcurveParamParam:%w", err)
		}
	}
	// Serialize `vestingParamParam`:
	if err = encoder.Encode(obj.VestingParam); err != nil {
		return fmt.Errorf("error while marshaling vestingParamParam:%w", err)
	}
	// Serialize `ammFeeOnParam`:
	if err = encoder.Encode(obj.AmmFeeOn); err != nil {
		return fmt.Errorf("error while marshaling ammFeeOnParam:%w", err)
	}
	// Serialize `transferFeeExtensionParamParam` (optional):
	{
		if obj.TransferFeeExtensionParam == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling transferFeeExtensionParamParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling transferFeeExtensionParamParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.TransferFeeExtensionParam); err != nil {
				return fmt.Errorf("error while marshaling transferFeeExtensionParamParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *InitializeWithToken2022) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseMintParam`:
	if err = decoder.Decode(&obj.BaseMintParam); err != nil {
		return fmt.Errorf("error while unmarshaling BaseMintParam:%w", err)
	}
	// Deserialize `CurveParam`:
	{
		var err error
		obj.CurveParam, err = DecodeCurveParams(decoder)
		if err != nil {
			return err
		}
	}
	// Deserialize `VestingParam`:
	if err = decoder.Decode(&obj.VestingParam); err != nil {
		return fmt.Errorf("error while unmarshaling VestingParam:%w", err)
	}
	// Deserialize `AmmFeeOn`:
	if err = decoder.Decode(&obj.AmmFeeOn); err != nil {
		return fmt.Errorf("error while unmarshaling AmmFeeOn:%w", err)
	}
	// Deserialize `TransferFeeExtensionParam` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling TransferFeeExtensionParam:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.TransferFeeExtensionParam); err != nil {
				return fmt.Errorf("error while unmarshaling TransferFeeExtensionParam:%w", err)
			}
		}
	}
	return nil
}

func (obj *InitializeWithToken2022) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.Creator = accounts[1]
	obj.GlobalConfig = accounts[2]
	obj.PlatformConfig = accounts[3]
	obj.Authority = accounts[4]
	obj.PoolState = accounts[5]
	obj.BaseMint = accounts[6]
	obj.QuoteMint = accounts[7]
	obj.BaseVault = accounts[8]
	obj.QuoteVault = accounts[9]
	obj.BaseTokenProgram = accounts[10]
	obj.QuoteTokenProgram = accounts[11]
	obj.SystemProgram = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeWithToken2022) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeWithToken2022) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeWithToken2022)
}

func (*InitializeWithToken2022) NewInstance() programparser.Instruction {
	return new(InitializeWithToken2022)
}

func (obj *InitializeWithToken2022) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 15 {
		return nil
	}
	return obj.PublicKeySlice[15:]
}

// Builds a "initialize_with_token_2022" instruction.
// Initializes a new trading pool with base token belongs to spl-token-2022, // pool created by this instruction must be migrated to cpswap after fundraising ends, i.e., curve_param.migrate_type = 1 // # Arguments //  // * `ctx` - The context of accounts containing pool and token information //
func NewInitializeWithToken2022Instruction(
	// Params:
	baseMintParamParam MintParams,
	curveParamParam CurveParams,
	vestingParamParam VestingParams,
	ammFeeOnParam AmmFeeOn,
	transferFeeExtensionParamParam *TransferFeeExtensionParams,

	// Accounts:
	payer solanago.PublicKey,
	creator solanago.PublicKey,
	globalConfig solanago.PublicKey,
	platformConfig solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeWithToken2022[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `baseMintParamParam`:
		if err = enc__.Encode(baseMintParamParam); err != nil {
			return nil, fmt.Errorf("error while marshaling baseMintParamParam:%w", err)
		}
		// Serialize `curveParamParam`:
		{
			if err = EncodeCurveParams(enc__, curveParamParam); err != nil {
				return nil, fmt.Errorf("error while marshalingcurveParamParam:%w", err)
			}
		}
		// Serialize `vestingParamParam`:
		if err = enc__.Encode(vestingParamParam); err != nil {
			return nil, fmt.Errorf("error while marshaling vestingParamParam:%w", err)
		}
		// Serialize `ammFeeOnParam`:
		if err = enc__.Encode(ammFeeOnParam); err != nil {
			return nil, fmt.Errorf("error while marshaling ammFeeOnParam:%w", err)
		}
		// Serialize `transferFeeExtensionParamParam` (optional):
		{
			if transferFeeExtensionParamParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling transferFeeExtensionParamParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling transferFeeExtensionParamParam optionality: %w", err)
				}
				if err = enc__.Encode(transferFeeExtensionParamParam); err != nil {
					return nil, fmt.Errorf("error while marshaling transferFeeExtensionParamParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] payer
		// The account paying for the initialization costs
		// This can be any account with sufficient SOL to cover the transaction
		metas_[0] = solanago.NewAccountMeta(payer, true, true)
		// [1] = [] creator
		metas_[1] = solanago.NewAccountMeta(creator, false, false)
		// [2] = [] global_config
		// Global configuration account containing protocol-wide settings
		// Includes settings like quote token mint and fee parameters
		metas_[2] = solanago.NewAccountMeta(globalConfig, false, false)
		// [3] = [] platform_config
		// Platform configuration account containing platform info
		// Includes settings like the fee_rate, name, web, img of the platform
		metas_[3] = solanago.NewAccountMeta(platformConfig, false, false)
		// [4] = [] authority
		// PDA that acts as the authority for pool vault and mint operations
		// Generated using AUTH_SEED
		metas_[4] = solanago.NewAccountMeta(authority, false, false)
		// [5] = [writable] pool_state
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		metas_[5] = solanago.NewAccountMeta(poolState, true, false)
		// [6] = [writable,signer] base_mint
		// The mint for the base token (token being sold)
		// Created in this instruction with specified decimals
		metas_[6] = solanago.NewAccountMeta(baseMint, true, true)
		// [7] = [] quote_mint
		// The mint for the quote token (token used to buy)
		// Must match the quote_mint specified in global config
		metas_[7] = solanago.NewAccountMeta(quoteMint, false, false)
		// [8] = [writable] base_vault
		// Token account that holds the pool's base tokens
		// PDA generated using POOL_VAULT_SEED
		metas_[8] = solanago.NewAccountMeta(baseVault, true, false)
		// [9] = [writable] quote_vault
		// Token account that holds the pool's quote tokens
		// PDA generated using POOL_VAULT_SEED
		metas_[9] = solanago.NewAccountMeta(quoteVault, true, false)
		// [10] = [] base_token_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		// SPL Token program for the base token
		metas_[10] = solanago.NewAccountMeta(BaseTokenProgram, false, false)
		// [11] = [] quote_token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		// SPL Token program for the quote token
		metas_[11] = solanago.NewAccountMeta(QuoteTokenProgram, false, false)
		// [12] = [] system_program
		// Required for account creation
		metas_[12] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeWithToken2022" instruction.
// Initializes a new trading pool with base token belongs to spl-token-2022, // pool created by this instruction must be migrated to cpswap after fundraising ends, i.e., curve_param.migrate_type = 1 // # Arguments //  // * `ctx` - The context of accounts containing pool and token information //
func BuildInitializeWithToken2022(
	// Params:
	baseMintParamParam MintParams,
	curveParamParam CurveParams,
	vestingParamParam VestingParams,
	ammFeeOnParam AmmFeeOn,
	transferFeeExtensionParamParam *TransferFeeExtensionParams,

	// Accounts:
	payer solanago.PublicKey,
	creator solanago.PublicKey,
	globalConfig solanago.PublicKey,
	platformConfig solanago.PublicKey,
	authority solanago.PublicKey,
	poolState solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	baseVault solanago.PublicKey,
	quoteVault solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeWithToken2022Instruction(
		baseMintParamParam,
		curveParamParam,
		vestingParamParam,
		ammFeeOnParam,
		transferFeeExtensionParamParam,
		payer,
		creator,
		globalConfig,
		platformConfig,
		authority,
		poolState,
		baseMint,
		quoteMint,
		baseVault,
		quoteVault,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
