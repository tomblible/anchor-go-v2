// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_tick_array" instruction.

// Initializes a fixed-length tick_array account to represent a tick-range in a Whirlpool.
//
// ### Parameters
// - `start_tick_index` - The starting tick index for this tick-array.
// Has to be a multiple of TickArray size & the tick spacing of this pool.
//
// #### Special Errors
// - `InvalidStartTick` - if the provided start tick is out of bounds or is not a multiple of
// TICK_ARRAY_SIZE * tick spacing.
type InitializeTickArray struct {
	// Params:
	StartTickIndex int32
	// Accounts:
	// [0] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [2] = [writable] tick_array
	TickArray solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeTickArray) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `startTickIndexParam`:
	if err = encoder.Encode(obj.StartTickIndex); err != nil {
		return fmt.Errorf("error while marshaling startTickIndexParam:%w", err)
	}
	return nil
}

func (obj *InitializeTickArray) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `StartTickIndex`:
	if err = decoder.Decode(&obj.StartTickIndex); err != nil {
		return fmt.Errorf("error while unmarshaling StartTickIndex:%w", err)
	}
	return nil
}

func (obj *InitializeTickArray) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Whirlpool = accounts[0]
	obj.Funder = accounts[1]
	obj.TickArray = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeTickArray) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeTickArray) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeTickArray)
}

func (*InitializeTickArray) NewInstance() programparser.Instruction {
	return new(InitializeTickArray)
}

// Builds a "initialize_tick_array" instruction.
// Initializes a fixed-length tick_array account to represent a tick-range in a Whirlpool. //  // ### Parameters // - `start_tick_index` - The starting tick index for this tick-array. // Has to be a multiple of TickArray size & the tick spacing of this pool. //  // #### Special Errors // - `InvalidStartTick` - if the provided start tick is out of bounds or is not a multiple of // TICK_ARRAY_SIZE * tick spacing.
func NewInitializeTickArrayInstruction(
	// Params:
	startTickIndexParam int32,

	// Accounts:
	whirlpool solanago.PublicKey,
	funder solanago.PublicKey,
	tickArray solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeTickArray[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `startTickIndexParam`:
		if err = enc__.Encode(startTickIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling startTickIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpool
		metas_[0] = solanago.NewAccountMeta(whirlpool, false, false)
		// [1] = [writable,signer] funder
		metas_[1] = solanago.NewAccountMeta(funder, true, true)
		// [2] = [writable] tick_array
		metas_[2] = solanago.NewAccountMeta(tickArray, true, false)
		// [3] = [] system_program
		metas_[3] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeTickArray" instruction.
// Initializes a fixed-length tick_array account to represent a tick-range in a Whirlpool. //  // ### Parameters // - `start_tick_index` - The starting tick index for this tick-array. // Has to be a multiple of TickArray size & the tick spacing of this pool. //  // #### Special Errors // - `InvalidStartTick` - if the provided start tick is out of bounds or is not a multiple of // TICK_ARRAY_SIZE * tick spacing.
func BuildInitializeTickArray(
	// Params:
	startTickIndexParam int32,

	// Accounts:
	whirlpool solanago.PublicKey,
	funder solanago.PublicKey,
	tickArray solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeTickArrayInstruction(
		startTickIndexParam,
		whirlpool,
		funder,
		tickArray,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
