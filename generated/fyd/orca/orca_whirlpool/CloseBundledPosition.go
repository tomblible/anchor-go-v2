// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "close_bundled_position" instruction.

// Close a bundled position in a Whirlpool.
//
// ### Authority
// - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle.
//
// ### Parameters
// - `bundle_index` - The bundle index that we'd like to close.
//
// #### Special Errors
// - `InvalidBundleIndex` - If the provided bundle index is out of bounds.
// - `ClosePositionNotEmpty` - The provided position account is not empty.
type CloseBundledPosition struct {
	// Params:
	BundleIndex uint16
	// Accounts:
	// [0] = [writable] bundled_position
	BundledPosition solanago.PublicKey `bin:"-"`
	// [1] = [writable] position_bundle
	PositionBundle solanago.PublicKey `bin:"-"`
	// [2] = [] position_bundle_token_account
	PositionBundleTokenAccount solanago.PublicKey `bin:"-"`
	// [3] = [,signer] position_bundle_authority
	PositionBundleAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable] receiver
	Receiver solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CloseBundledPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `bundleIndexParam`:
	if err = encoder.Encode(obj.BundleIndex); err != nil {
		return fmt.Errorf("error while marshaling bundleIndexParam:%w", err)
	}
	return nil
}

func (obj *CloseBundledPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BundleIndex`:
	if err = decoder.Decode(&obj.BundleIndex); err != nil {
		return fmt.Errorf("error while unmarshaling BundleIndex:%w", err)
	}
	return nil
}

func (obj *CloseBundledPosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.BundledPosition = accounts[0]
	obj.PositionBundle = accounts[1]
	obj.PositionBundleTokenAccount = accounts[2]
	obj.PositionBundleAuthority = accounts[3]
	obj.Receiver = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CloseBundledPosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CloseBundledPosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CloseBundledPosition)
}

func (*CloseBundledPosition) NewInstance() programparser.Instruction {
	return new(CloseBundledPosition)
}

func (obj *CloseBundledPosition) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[5:]
}

// Builds a "close_bundled_position" instruction.
// Close a bundled position in a Whirlpool. //  // ### Authority // - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle. //  // ### Parameters // - `bundle_index` - The bundle index that we'd like to close. //  // #### Special Errors // - `InvalidBundleIndex` - If the provided bundle index is out of bounds. // - `ClosePositionNotEmpty` - The provided position account is not empty.
func NewCloseBundledPositionInstruction(
	// Params:
	bundleIndexParam uint16,

	// Accounts:
	bundledPosition solanago.PublicKey,
	positionBundle solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleAuthority solanago.PublicKey,
	receiver solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CloseBundledPosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `bundleIndexParam`:
		if err = enc__.Encode(bundleIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling bundleIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] bundled_position
		metas_[0] = solanago.NewAccountMeta(bundledPosition, true, false)
		// [1] = [writable] position_bundle
		metas_[1] = solanago.NewAccountMeta(positionBundle, true, false)
		// [2] = [] position_bundle_token_account
		metas_[2] = solanago.NewAccountMeta(positionBundleTokenAccount, false, false)
		// [3] = [,signer] position_bundle_authority
		metas_[3] = solanago.NewAccountMeta(positionBundleAuthority, false, true)
		// [4] = [writable] receiver
		metas_[4] = solanago.NewAccountMeta(receiver, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCloseBundledPosition" instruction.
// Close a bundled position in a Whirlpool. //  // ### Authority // - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle. //  // ### Parameters // - `bundle_index` - The bundle index that we'd like to close. //  // #### Special Errors // - `InvalidBundleIndex` - If the provided bundle index is out of bounds. // - `ClosePositionNotEmpty` - The provided position account is not empty.
func BuildCloseBundledPosition(
	// Params:
	bundleIndexParam uint16,

	// Accounts:
	bundledPosition solanago.PublicKey,
	positionBundle solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleAuthority solanago.PublicKey,
	receiver solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCloseBundledPositionInstruction(
		bundleIndexParam,
		bundledPosition,
		positionBundle,
		positionBundleTokenAccount,
		positionBundleAuthority,
		receiver,
		remaining__...,
	)
	return instruction_
}
