// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "lock_position" instruction.

// Lock the position to prevent any liquidity changes.
//
// ### Authority
// - `position_authority` - The authority that owns the position token.
//
// #### Special Errors
// - `PositionAlreadyLocked` - The provided position is already locked.
// - `PositionNotLockable` - The provided position is not lockable (e.g. An empty position).
type LockPosition struct {
	// Params:
	LockType LockType
	// Accounts:
	// [0] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [1] = [,signer] position_authority
	PositionAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [] position_mint
	PositionMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] lock_config
	LockConfig solanago.PublicKey `bin:"-"`
	// [6] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [7] = [] token2022_program
	Token2022Program solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj LockPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `lockTypeParam`:
	if err = encoder.Encode(obj.LockType); err != nil {
		return fmt.Errorf("error while marshaling lockTypeParam:%w", err)
	}
	return nil
}

func (obj *LockPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LockType`:
	if err = decoder.Decode(&obj.LockType); err != nil {
		return fmt.Errorf("error while unmarshaling LockType:%w", err)
	}
	return nil
}

func (obj *LockPosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Funder = accounts[0]
	obj.PositionAuthority = accounts[1]
	obj.Position = accounts[2]
	obj.PositionMint = accounts[3]
	obj.PositionTokenAccount = accounts[4]
	obj.LockConfig = accounts[5]
	obj.Whirlpool = accounts[6]
	obj.Token2022Program = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *LockPosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*LockPosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_LockPosition)
}

func (*LockPosition) NewInstance() programparser.Instruction {
	return new(LockPosition)
}

func (obj *LockPosition) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "lock_position" instruction.
// Lock the position to prevent any liquidity changes. //  // ### Authority // - `position_authority` - The authority that owns the position token. //  // #### Special Errors // - `PositionAlreadyLocked` - The provided position is already locked. // - `PositionNotLockable` - The provided position is not lockable (e.g. An empty position).
func NewLockPositionInstruction(
	// Params:
	lockTypeParam LockType,

	// Accounts:
	funder solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	lockConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	token2022Program solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_LockPosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `lockTypeParam`:
		if err = enc__.Encode(lockTypeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling lockTypeParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] funder
		metas_[0] = solanago.NewAccountMeta(funder, true, true)
		// [1] = [,signer] position_authority
		metas_[1] = solanago.NewAccountMeta(positionAuthority, false, true)
		// [2] = [] position
		metas_[2] = solanago.NewAccountMeta(position, false, false)
		// [3] = [] position_mint
		metas_[3] = solanago.NewAccountMeta(positionMint, false, false)
		// [4] = [writable] position_token_account
		metas_[4] = solanago.NewAccountMeta(positionTokenAccount, true, false)
		// [5] = [writable] lock_config
		metas_[5] = solanago.NewAccountMeta(lockConfig, true, false)
		// [6] = [] whirlpool
		metas_[6] = solanago.NewAccountMeta(whirlpool, false, false)
		// [7] = [] token2022_program
		metas_[7] = solanago.NewAccountMeta(token2022Program, false, false)
		// [8] = [] system_program
		metas_[8] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildLockPosition" instruction.
// Lock the position to prevent any liquidity changes. //  // ### Authority // - `position_authority` - The authority that owns the position token. //  // #### Special Errors // - `PositionAlreadyLocked` - The provided position is already locked. // - `PositionNotLockable` - The provided position is not lockable (e.g. An empty position).
func BuildLockPosition(
	// Params:
	lockTypeParam LockType,

	// Accounts:
	funder solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	lockConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	token2022Program solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewLockPositionInstruction(
		lockTypeParam,
		funder,
		positionAuthority,
		position,
		positionMint,
		positionTokenAccount,
		lockConfig,
		whirlpool,
		token2022Program,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
