// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_position_bundle_with_metadata" instruction.

// Initializes a PositionBundle account that bundles several positions.
// A unique token will be minted to represent the position bundle in the users wallet.
// Additional Metaplex metadata is appended to identify the token.
type InitializePositionBundleWithMetadata struct {
	// Params:
	// Accounts:
	// [0] = [writable] position_bundle
	PositionBundle solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] position_bundle_mint
	PositionBundleMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] position_bundle_metadata
	PositionBundleMetadata solanago.PublicKey `bin:"-"`
	// [3] = [writable] position_bundle_token_account
	PositionBundleTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [] position_bundle_owner
	PositionBundleOwner solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [6] = [] metadata_update_auth
	MetadataUpdateAuth solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [10] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] metadata_program
	MetadataProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializePositionBundleWithMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *InitializePositionBundleWithMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *InitializePositionBundleWithMetadata) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.PositionBundle = accounts[0]
	obj.PositionBundleMint = accounts[1]
	obj.PositionBundleMetadata = accounts[2]
	obj.PositionBundleTokenAccount = accounts[3]
	obj.PositionBundleOwner = accounts[4]
	obj.Funder = accounts[5]
	obj.MetadataUpdateAuth = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.Rent = accounts[9]
	obj.AssociatedTokenProgram = accounts[10]
	obj.MetadataProgram = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializePositionBundleWithMetadata) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializePositionBundleWithMetadata) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializePositionBundleWithMetadata)
}

func (*InitializePositionBundleWithMetadata) NewInstance() programparser.Instruction {
	return new(InitializePositionBundleWithMetadata)
}

// Builds a "initialize_position_bundle_with_metadata" instruction.
// Initializes a PositionBundle account that bundles several positions. // A unique token will be minted to represent the position bundle in the users wallet. // Additional Metaplex metadata is appended to identify the token.
func NewInitializePositionBundleWithMetadataInstruction(
	positionBundle solanago.PublicKey,
	positionBundleMint solanago.PublicKey,
	positionBundleMetadata solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleOwner solanago.PublicKey,
	funder solanago.PublicKey,
	metadataUpdateAuth solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializePositionBundleWithMetadata[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] position_bundle
		metas_[0] = solanago.NewAccountMeta(positionBundle, true, false)
		// [1] = [writable,signer] position_bundle_mint
		metas_[1] = solanago.NewAccountMeta(positionBundleMint, true, true)
		// [2] = [writable] position_bundle_metadata
		// https://github.com/metaplex-foundation/metaplex-program-library/blob/773a574c4b34e5b9f248a81306ec24db064e255f/token-metadata/program/src/utils/metadata.rs#L100
		metas_[2] = solanago.NewAccountMeta(positionBundleMetadata, true, false)
		// [3] = [writable] position_bundle_token_account
		metas_[3] = solanago.NewAccountMeta(positionBundleTokenAccount, true, false)
		// [4] = [] position_bundle_owner
		metas_[4] = solanago.NewAccountMeta(positionBundleOwner, false, false)
		// [5] = [writable,signer] funder
		metas_[5] = solanago.NewAccountMeta(funder, true, true)
		// [6] = [] metadata_update_auth
		metas_[6] = solanago.NewAccountMeta(metadataUpdateAuth, false, false)
		// [7] = [] token_program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [8] = [] system_program
		metas_[8] = solanago.NewAccountMeta(systemProgram, false, false)
		// [9] = [] rent
		metas_[9] = solanago.NewAccountMeta(rent, false, false)
		// [10] = [] associated_token_program
		metas_[10] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [11] = [] metadata_program
		metas_[11] = solanago.NewAccountMeta(metadataProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializePositionBundleWithMetadata" instruction.
// Initializes a PositionBundle account that bundles several positions. // A unique token will be minted to represent the position bundle in the users wallet. // Additional Metaplex metadata is appended to identify the token.
func BuildInitializePositionBundleWithMetadata(
	positionBundle solanago.PublicKey,
	positionBundleMint solanago.PublicKey,
	positionBundleMetadata solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleOwner solanago.PublicKey,
	funder solanago.PublicKey,
	metadataUpdateAuth solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	metadataProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializePositionBundleWithMetadataInstruction(
		positionBundle,
		positionBundleMint,
		positionBundleMetadata,
		positionBundleTokenAccount,
		positionBundleOwner,
		funder,
		metadataUpdateAuth,
		tokenProgram,
		systemProgram,
		rent,
		associatedTokenProgram,
		metadataProgram,
		remaining__...,
	)
	return instruction_
}
