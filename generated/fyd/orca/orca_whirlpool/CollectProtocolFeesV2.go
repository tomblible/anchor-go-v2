// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_protocol_fees_v2" instruction.

// Collect the protocol fees accrued in this Whirlpool
//
// ### Authority
// - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
type CollectProtocolFeesV2 struct {
	// Params:
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [2] = [,signer] collect_protocol_fees_authority
	CollectProtocolFeesAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] token_mint_a
	TokenMintA solanago.PublicKey `bin:"-"`
	// [4] = [] token_mint_b
	TokenMintB solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_destination_a
	TokenDestinationA solanago.PublicKey `bin:"-"`
	// [8] = [writable] token_destination_b
	TokenDestinationB solanago.PublicKey `bin:"-"`
	// [9] = [] token_program_a
	TokenProgramA solanago.PublicKey `bin:"-"`
	// [10] = [] token_program_b
	TokenProgramB solanago.PublicKey `bin:"-"`
	// [11] = [] memo_program
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectProtocolFeesV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `remainingAccountsInfoParam` (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.RemainingAccountsInfo); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *CollectProtocolFeesV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.RemainingAccountsInfo); err != nil {
				return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
			}
		}
	}
	return nil
}

func (obj *CollectProtocolFeesV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.Whirlpool = accounts[1]
	obj.CollectProtocolFeesAuthority = accounts[2]
	obj.TokenMintA = accounts[3]
	obj.TokenMintB = accounts[4]
	obj.TokenVaultA = accounts[5]
	obj.TokenVaultB = accounts[6]
	obj.TokenDestinationA = accounts[7]
	obj.TokenDestinationB = accounts[8]
	obj.TokenProgramA = accounts[9]
	obj.TokenProgramB = accounts[10]
	obj.MemoProgram = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectProtocolFeesV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectProtocolFeesV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectProtocolFeesV2)
}

func (*CollectProtocolFeesV2) NewInstance() programparser.Instruction {
	return new(CollectProtocolFeesV2)
}

func (obj *CollectProtocolFeesV2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 12 {
		return nil
	}
	return obj.PublicKeySlice[12:]
}

// Builds a "collect_protocol_fees_v2" instruction.
// Collect the protocol fees accrued in this Whirlpool //  // ### Authority // - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
func NewCollectProtocolFeesV2Instruction(
	// Params:
	remainingAccountsInfoParam *RemainingAccountsInfo,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	collectProtocolFeesAuthority solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tokenDestinationA solanago.PublicKey,
	tokenDestinationB solanago.PublicKey,
	tokenProgramA solanago.PublicKey,
	tokenProgramB solanago.PublicKey,
	memoProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectProtocolFeesV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `remainingAccountsInfoParam` (optional):
		{
			if remainingAccountsInfoParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
				}
				if err = enc__.Encode(remainingAccountsInfoParam); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [writable] whirlpool
		metas_[1] = solanago.NewAccountMeta(whirlpool, true, false)
		// [2] = [,signer] collect_protocol_fees_authority
		metas_[2] = solanago.NewAccountMeta(collectProtocolFeesAuthority, false, true)
		// [3] = [] token_mint_a
		metas_[3] = solanago.NewAccountMeta(tokenMintA, false, false)
		// [4] = [] token_mint_b
		metas_[4] = solanago.NewAccountMeta(tokenMintB, false, false)
		// [5] = [writable] token_vault_a
		metas_[5] = solanago.NewAccountMeta(tokenVaultA, true, false)
		// [6] = [writable] token_vault_b
		metas_[6] = solanago.NewAccountMeta(tokenVaultB, true, false)
		// [7] = [writable] token_destination_a
		metas_[7] = solanago.NewAccountMeta(tokenDestinationA, true, false)
		// [8] = [writable] token_destination_b
		metas_[8] = solanago.NewAccountMeta(tokenDestinationB, true, false)
		// [9] = [] token_program_a
		metas_[9] = solanago.NewAccountMeta(tokenProgramA, false, false)
		// [10] = [] token_program_b
		metas_[10] = solanago.NewAccountMeta(tokenProgramB, false, false)
		// [11] = [] memo_program
		metas_[11] = solanago.NewAccountMeta(memoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectProtocolFeesV2" instruction.
// Collect the protocol fees accrued in this Whirlpool //  // ### Authority // - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
func BuildCollectProtocolFeesV2(
	// Params:
	remainingAccountsInfoParam *RemainingAccountsInfo,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	collectProtocolFeesAuthority solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tokenDestinationA solanago.PublicKey,
	tokenDestinationB solanago.PublicKey,
	tokenProgramA solanago.PublicKey,
	tokenProgramB solanago.PublicKey,
	memoProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectProtocolFeesV2Instruction(
		remainingAccountsInfoParam,
		whirlpoolsConfig,
		whirlpool,
		collectProtocolFeesAuthority,
		tokenMintA,
		tokenMintB,
		tokenVaultA,
		tokenVaultB,
		tokenDestinationA,
		tokenDestinationB,
		tokenProgramA,
		tokenProgramB,
		memoProgram,
		remaining__...,
	)
	return instruction_
}
