// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_adaptive_fee_tier" instruction.

// Initializes an adaptive_fee_tier account usable by Whirlpools in a WhirlpoolConfig space.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
//
// ### Parameters
// - `fee_tier_index` - The index of the fee-tier that this adaptive fee tier will be initialized.
// - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for.
// - `initialize_pool_authority` - The authority that can initialize pools with this adaptive fee-tier.
// - `delegated_fee_authority` - The authority that can set the base fee rate for pools using this adaptive fee-tier.
// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
// fee tier during initialization.
// - `filter_period` - Period determine high frequency trading time window. (seconds)
// - `decay_period` - Period determine when the adaptive fee start decrease. (seconds)
// - `reduction_factor` - Adaptive fee rate decrement rate.
// - `adaptive_fee_control_factor` - Adaptive fee control factor.
// - `max_volatility_accumulator` - Max volatility accumulator.
// - `tick_group_size` - Tick group size to define tick group index.
// - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap.
//
// #### Special Errors
// - `InvalidTickSpacing` - If the provided tick_spacing is 0.
// - `InvalidFeeTierIndex` - If the provided fee_tier_index is same to tick_spacing.
// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
// - `InvalidAdaptiveFeeConstants` - If the provided adaptive fee constants are invalid.
type InitializeAdaptiveFeeTier struct {
	// Params:
	FeeTierIndex             uint16
	TickSpacing              uint16
	InitializePoolAuthority  solanago.PublicKey
	DelegatedFeeAuthority    solanago.PublicKey
	DefaultBaseFeeRate       uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	AdaptiveFeeControlFactor uint32
	MaxVolatilityAccumulator uint32
	TickGroupSize            uint16
	MajorSwapThresholdTicks  uint16
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [writable] adaptive_fee_tier
	AdaptiveFeeTier solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [3] = [,signer] fee_authority
	FeeAuthority solanago.PublicKey `bin:"-"`
	// [4] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeAdaptiveFeeTier) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `feeTierIndexParam`:
	if err = encoder.Encode(obj.FeeTierIndex); err != nil {
		return fmt.Errorf("error while marshaling feeTierIndexParam:%w", err)
	}
	// Serialize `tickSpacingParam`:
	if err = encoder.Encode(obj.TickSpacing); err != nil {
		return fmt.Errorf("error while marshaling tickSpacingParam:%w", err)
	}
	// Serialize `initializePoolAuthorityParam`:
	if err = encoder.Encode(obj.InitializePoolAuthority); err != nil {
		return fmt.Errorf("error while marshaling initializePoolAuthorityParam:%w", err)
	}
	// Serialize `delegatedFeeAuthorityParam`:
	if err = encoder.Encode(obj.DelegatedFeeAuthority); err != nil {
		return fmt.Errorf("error while marshaling delegatedFeeAuthorityParam:%w", err)
	}
	// Serialize `defaultBaseFeeRateParam`:
	if err = encoder.Encode(obj.DefaultBaseFeeRate); err != nil {
		return fmt.Errorf("error while marshaling defaultBaseFeeRateParam:%w", err)
	}
	// Serialize `filterPeriodParam`:
	if err = encoder.Encode(obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while marshaling filterPeriodParam:%w", err)
	}
	// Serialize `decayPeriodParam`:
	if err = encoder.Encode(obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while marshaling decayPeriodParam:%w", err)
	}
	// Serialize `reductionFactorParam`:
	if err = encoder.Encode(obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while marshaling reductionFactorParam:%w", err)
	}
	// Serialize `adaptiveFeeControlFactorParam`:
	if err = encoder.Encode(obj.AdaptiveFeeControlFactor); err != nil {
		return fmt.Errorf("error while marshaling adaptiveFeeControlFactorParam:%w", err)
	}
	// Serialize `maxVolatilityAccumulatorParam`:
	if err = encoder.Encode(obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while marshaling maxVolatilityAccumulatorParam:%w", err)
	}
	// Serialize `tickGroupSizeParam`:
	if err = encoder.Encode(obj.TickGroupSize); err != nil {
		return fmt.Errorf("error while marshaling tickGroupSizeParam:%w", err)
	}
	// Serialize `majorSwapThresholdTicksParam`:
	if err = encoder.Encode(obj.MajorSwapThresholdTicks); err != nil {
		return fmt.Errorf("error while marshaling majorSwapThresholdTicksParam:%w", err)
	}
	return nil
}

func (obj *InitializeAdaptiveFeeTier) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeTierIndex`:
	if err = decoder.Decode(&obj.FeeTierIndex); err != nil {
		return fmt.Errorf("error while unmarshaling FeeTierIndex:%w", err)
	}
	// Deserialize `TickSpacing`:
	if err = decoder.Decode(&obj.TickSpacing); err != nil {
		return fmt.Errorf("error while unmarshaling TickSpacing:%w", err)
	}
	// Deserialize `InitializePoolAuthority`:
	if err = decoder.Decode(&obj.InitializePoolAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling InitializePoolAuthority:%w", err)
	}
	// Deserialize `DelegatedFeeAuthority`:
	if err = decoder.Decode(&obj.DelegatedFeeAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling DelegatedFeeAuthority:%w", err)
	}
	// Deserialize `DefaultBaseFeeRate`:
	if err = decoder.Decode(&obj.DefaultBaseFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling DefaultBaseFeeRate:%w", err)
	}
	// Deserialize `FilterPeriod`:
	if err = decoder.Decode(&obj.FilterPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling FilterPeriod:%w", err)
	}
	// Deserialize `DecayPeriod`:
	if err = decoder.Decode(&obj.DecayPeriod); err != nil {
		return fmt.Errorf("error while unmarshaling DecayPeriod:%w", err)
	}
	// Deserialize `ReductionFactor`:
	if err = decoder.Decode(&obj.ReductionFactor); err != nil {
		return fmt.Errorf("error while unmarshaling ReductionFactor:%w", err)
	}
	// Deserialize `AdaptiveFeeControlFactor`:
	if err = decoder.Decode(&obj.AdaptiveFeeControlFactor); err != nil {
		return fmt.Errorf("error while unmarshaling AdaptiveFeeControlFactor:%w", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	if err = decoder.Decode(&obj.MaxVolatilityAccumulator); err != nil {
		return fmt.Errorf("error while unmarshaling MaxVolatilityAccumulator:%w", err)
	}
	// Deserialize `TickGroupSize`:
	if err = decoder.Decode(&obj.TickGroupSize); err != nil {
		return fmt.Errorf("error while unmarshaling TickGroupSize:%w", err)
	}
	// Deserialize `MajorSwapThresholdTicks`:
	if err = decoder.Decode(&obj.MajorSwapThresholdTicks); err != nil {
		return fmt.Errorf("error while unmarshaling MajorSwapThresholdTicks:%w", err)
	}
	return nil
}

func (obj *InitializeAdaptiveFeeTier) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.AdaptiveFeeTier = accounts[1]
	obj.Funder = accounts[2]
	obj.FeeAuthority = accounts[3]
	obj.SystemProgram = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeAdaptiveFeeTier) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeAdaptiveFeeTier) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeAdaptiveFeeTier)
}

func (*InitializeAdaptiveFeeTier) NewInstance() programparser.Instruction {
	return new(InitializeAdaptiveFeeTier)
}

func (obj *InitializeAdaptiveFeeTier) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[5:]
}

// Builds a "initialize_adaptive_fee_tier" instruction.
// Initializes an adaptive_fee_tier account usable by Whirlpools in a WhirlpoolConfig space. //  // ### Authority // - "fee_authority" - Set authority in the WhirlpoolConfig //  // ### Parameters // - `fee_tier_index` - The index of the fee-tier that this adaptive fee tier will be initialized. // - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for. // - `initialize_pool_authority` - The authority that can initialize pools with this adaptive fee-tier. // - `delegated_fee_authority` - The authority that can set the base fee rate for pools using this adaptive fee-tier. // - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this // fee tier during initialization. // - `filter_period` - Period determine high frequency trading time window. (seconds) // - `decay_period` - Period determine when the adaptive fee start decrease. (seconds) // - `reduction_factor` - Adaptive fee rate decrement rate. // - `adaptive_fee_control_factor` - Adaptive fee control factor. // - `max_volatility_accumulator` - Max volatility accumulator. // - `tick_group_size` - Tick group size to define tick group index. // - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap. //  // #### Special Errors // - `InvalidTickSpacing` - If the provided tick_spacing is 0. // - `InvalidFeeTierIndex` - If the provided fee_tier_index is same to tick_spacing. // - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE. // - `InvalidAdaptiveFeeConstants` - If the provided adaptive fee constants are invalid.
func NewInitializeAdaptiveFeeTierInstruction(
	// Params:
	feeTierIndexParam uint16,
	tickSpacingParam uint16,
	initializePoolAuthorityParam solanago.PublicKey,
	delegatedFeeAuthorityParam solanago.PublicKey,
	defaultBaseFeeRateParam uint16,
	filterPeriodParam uint16,
	decayPeriodParam uint16,
	reductionFactorParam uint16,
	adaptiveFeeControlFactorParam uint32,
	maxVolatilityAccumulatorParam uint32,
	tickGroupSizeParam uint16,
	majorSwapThresholdTicksParam uint16,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	funder solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeAdaptiveFeeTier[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `feeTierIndexParam`:
		if err = enc__.Encode(feeTierIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling feeTierIndexParam:%w", err)
		}
		// Serialize `tickSpacingParam`:
		if err = enc__.Encode(tickSpacingParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickSpacingParam:%w", err)
		}
		// Serialize `initializePoolAuthorityParam`:
		if err = enc__.Encode(initializePoolAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initializePoolAuthorityParam:%w", err)
		}
		// Serialize `delegatedFeeAuthorityParam`:
		if err = enc__.Encode(delegatedFeeAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling delegatedFeeAuthorityParam:%w", err)
		}
		// Serialize `defaultBaseFeeRateParam`:
		if err = enc__.Encode(defaultBaseFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling defaultBaseFeeRateParam:%w", err)
		}
		// Serialize `filterPeriodParam`:
		if err = enc__.Encode(filterPeriodParam); err != nil {
			return nil, fmt.Errorf("error while marshaling filterPeriodParam:%w", err)
		}
		// Serialize `decayPeriodParam`:
		if err = enc__.Encode(decayPeriodParam); err != nil {
			return nil, fmt.Errorf("error while marshaling decayPeriodParam:%w", err)
		}
		// Serialize `reductionFactorParam`:
		if err = enc__.Encode(reductionFactorParam); err != nil {
			return nil, fmt.Errorf("error while marshaling reductionFactorParam:%w", err)
		}
		// Serialize `adaptiveFeeControlFactorParam`:
		if err = enc__.Encode(adaptiveFeeControlFactorParam); err != nil {
			return nil, fmt.Errorf("error while marshaling adaptiveFeeControlFactorParam:%w", err)
		}
		// Serialize `maxVolatilityAccumulatorParam`:
		if err = enc__.Encode(maxVolatilityAccumulatorParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxVolatilityAccumulatorParam:%w", err)
		}
		// Serialize `tickGroupSizeParam`:
		if err = enc__.Encode(tickGroupSizeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickGroupSizeParam:%w", err)
		}
		// Serialize `majorSwapThresholdTicksParam`:
		if err = enc__.Encode(majorSwapThresholdTicksParam); err != nil {
			return nil, fmt.Errorf("error while marshaling majorSwapThresholdTicksParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [writable] adaptive_fee_tier
		metas_[1] = solanago.NewAccountMeta(adaptiveFeeTier, true, false)
		// [2] = [writable,signer] funder
		metas_[2] = solanago.NewAccountMeta(funder, true, true)
		// [3] = [,signer] fee_authority
		metas_[3] = solanago.NewAccountMeta(feeAuthority, false, true)
		// [4] = [] system_program
		metas_[4] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeAdaptiveFeeTier" instruction.
// Initializes an adaptive_fee_tier account usable by Whirlpools in a WhirlpoolConfig space. //  // ### Authority // - "fee_authority" - Set authority in the WhirlpoolConfig //  // ### Parameters // - `fee_tier_index` - The index of the fee-tier that this adaptive fee tier will be initialized. // - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for. // - `initialize_pool_authority` - The authority that can initialize pools with this adaptive fee-tier. // - `delegated_fee_authority` - The authority that can set the base fee rate for pools using this adaptive fee-tier. // - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this // fee tier during initialization. // - `filter_period` - Period determine high frequency trading time window. (seconds) // - `decay_period` - Period determine when the adaptive fee start decrease. (seconds) // - `reduction_factor` - Adaptive fee rate decrement rate. // - `adaptive_fee_control_factor` - Adaptive fee control factor. // - `max_volatility_accumulator` - Max volatility accumulator. // - `tick_group_size` - Tick group size to define tick group index. // - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap. //  // #### Special Errors // - `InvalidTickSpacing` - If the provided tick_spacing is 0. // - `InvalidFeeTierIndex` - If the provided fee_tier_index is same to tick_spacing. // - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE. // - `InvalidAdaptiveFeeConstants` - If the provided adaptive fee constants are invalid.
func BuildInitializeAdaptiveFeeTier(
	// Params:
	feeTierIndexParam uint16,
	tickSpacingParam uint16,
	initializePoolAuthorityParam solanago.PublicKey,
	delegatedFeeAuthorityParam solanago.PublicKey,
	defaultBaseFeeRateParam uint16,
	filterPeriodParam uint16,
	decayPeriodParam uint16,
	reductionFactorParam uint16,
	adaptiveFeeControlFactorParam uint32,
	maxVolatilityAccumulatorParam uint32,
	tickGroupSizeParam uint16,
	majorSwapThresholdTicksParam uint16,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	funder solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeAdaptiveFeeTierInstruction(
		feeTierIndexParam,
		tickSpacingParam,
		initializePoolAuthorityParam,
		delegatedFeeAuthorityParam,
		defaultBaseFeeRateParam,
		filterPeriodParam,
		decayPeriodParam,
		reductionFactorParam,
		adaptiveFeeControlFactorParam,
		maxVolatilityAccumulatorParam,
		tickGroupSizeParam,
		majorSwapThresholdTicksParam,
		whirlpoolsConfig,
		adaptiveFeeTier,
		funder,
		feeAuthority,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
