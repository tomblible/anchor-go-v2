// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "open_bundled_position" instruction.

// Open a bundled position in a Whirlpool. No new tokens are issued
// because the owner of the position bundle becomes the owner of the position.
// The position will start off with 0 liquidity.
//
// ### Authority
// - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle.
//
// ### Parameters
// - `bundle_index` - The bundle index that we'd like to open.
// - `tick_lower_index` - The tick specifying the lower end of the position range.
// - `tick_upper_index` - The tick specifying the upper end of the position range.
//
// #### Special Errors
// - `InvalidBundleIndex` - If the provided bundle index is out of bounds.
// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
// the tick-spacing in this pool.
type OpenBundledPosition struct {
	// Params:
	BundleIndex    uint16
	TickLowerIndex int32
	TickUpperIndex int32
	// Accounts:
	// [0] = [writable] bundled_position
	BundledPosition solanago.PublicKey `bin:"-"`
	// [1] = [writable] position_bundle
	PositionBundle solanago.PublicKey `bin:"-"`
	// [2] = [] position_bundle_token_account
	PositionBundleTokenAccount solanago.PublicKey `bin:"-"`
	// [3] = [,signer] position_bundle_authority
	PositionBundleAuthority solanago.PublicKey `bin:"-"`
	// [4] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj OpenBundledPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `bundleIndexParam`:
	if err = encoder.Encode(obj.BundleIndex); err != nil {
		return fmt.Errorf("error while marshaling bundleIndexParam:%w", err)
	}
	// Serialize `tickLowerIndexParam`:
	if err = encoder.Encode(obj.TickLowerIndex); err != nil {
		return fmt.Errorf("error while marshaling tickLowerIndexParam:%w", err)
	}
	// Serialize `tickUpperIndexParam`:
	if err = encoder.Encode(obj.TickUpperIndex); err != nil {
		return fmt.Errorf("error while marshaling tickUpperIndexParam:%w", err)
	}
	return nil
}

func (obj *OpenBundledPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BundleIndex`:
	if err = decoder.Decode(&obj.BundleIndex); err != nil {
		return fmt.Errorf("error while unmarshaling BundleIndex:%w", err)
	}
	// Deserialize `TickLowerIndex`:
	if err = decoder.Decode(&obj.TickLowerIndex); err != nil {
		return fmt.Errorf("error while unmarshaling TickLowerIndex:%w", err)
	}
	// Deserialize `TickUpperIndex`:
	if err = decoder.Decode(&obj.TickUpperIndex); err != nil {
		return fmt.Errorf("error while unmarshaling TickUpperIndex:%w", err)
	}
	return nil
}

func (obj *OpenBundledPosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.BundledPosition = accounts[0]
	obj.PositionBundle = accounts[1]
	obj.PositionBundleTokenAccount = accounts[2]
	obj.PositionBundleAuthority = accounts[3]
	obj.Whirlpool = accounts[4]
	obj.Funder = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.Rent = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *OpenBundledPosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*OpenBundledPosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_OpenBundledPosition)
}

func (*OpenBundledPosition) NewInstance() programparser.Instruction {
	return new(OpenBundledPosition)
}

func (obj *OpenBundledPosition) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[8:]
}

// Builds a "open_bundled_position" instruction.
// Open a bundled position in a Whirlpool. No new tokens are issued // because the owner of the position bundle becomes the owner of the position. // The position will start off with 0 liquidity. //  // ### Authority // - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle. //  // ### Parameters // - `bundle_index` - The bundle index that we'd like to open. // - `tick_lower_index` - The tick specifying the lower end of the position range. // - `tick_upper_index` - The tick specifying the upper end of the position range. //  // #### Special Errors // - `InvalidBundleIndex` - If the provided bundle index is out of bounds. // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool.
func NewOpenBundledPositionInstruction(
	// Params:
	bundleIndexParam uint16,
	tickLowerIndexParam int32,
	tickUpperIndexParam int32,

	// Accounts:
	bundledPosition solanago.PublicKey,
	positionBundle solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	funder solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_OpenBundledPosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `bundleIndexParam`:
		if err = enc__.Encode(bundleIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling bundleIndexParam:%w", err)
		}
		// Serialize `tickLowerIndexParam`:
		if err = enc__.Encode(tickLowerIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickLowerIndexParam:%w", err)
		}
		// Serialize `tickUpperIndexParam`:
		if err = enc__.Encode(tickUpperIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickUpperIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] bundled_position
		metas_[0] = solanago.NewAccountMeta(bundledPosition, true, false)
		// [1] = [writable] position_bundle
		metas_[1] = solanago.NewAccountMeta(positionBundle, true, false)
		// [2] = [] position_bundle_token_account
		metas_[2] = solanago.NewAccountMeta(positionBundleTokenAccount, false, false)
		// [3] = [,signer] position_bundle_authority
		metas_[3] = solanago.NewAccountMeta(positionBundleAuthority, false, true)
		// [4] = [] whirlpool
		metas_[4] = solanago.NewAccountMeta(whirlpool, false, false)
		// [5] = [writable,signer] funder
		metas_[5] = solanago.NewAccountMeta(funder, true, true)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(systemProgram, false, false)
		// [7] = [] rent
		metas_[7] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildOpenBundledPosition" instruction.
// Open a bundled position in a Whirlpool. No new tokens are issued // because the owner of the position bundle becomes the owner of the position. // The position will start off with 0 liquidity. //  // ### Authority // - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle. //  // ### Parameters // - `bundle_index` - The bundle index that we'd like to open. // - `tick_lower_index` - The tick specifying the lower end of the position range. // - `tick_upper_index` - The tick specifying the upper end of the position range. //  // #### Special Errors // - `InvalidBundleIndex` - If the provided bundle index is out of bounds. // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool.
func BuildOpenBundledPosition(
	// Params:
	bundleIndexParam uint16,
	tickLowerIndexParam int32,
	tickUpperIndexParam int32,

	// Accounts:
	bundledPosition solanago.PublicKey,
	positionBundle solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	funder solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewOpenBundledPositionInstruction(
		bundleIndexParam,
		tickLowerIndexParam,
		tickUpperIndexParam,
		bundledPosition,
		positionBundle,
		positionBundleTokenAccount,
		positionBundleAuthority,
		whirlpool,
		funder,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
