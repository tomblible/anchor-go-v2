// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "swap" instruction.

// Perform a swap in this Whirlpool
//
// ### Authority
// - "token_authority" - The authority to withdraw tokens from the input token account.
//
// ### Parameters
// - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input).
// - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input).
// - `sqrt_price_limit` - The maximum/minimum price the swap will swap to.
// - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap.
// - `a_to_b` - The direction of the swap. True if swapping from A to B. False if swapping from B to A.
//
// #### Special Errors
// - `ZeroTradableAmount` - User provided parameter `amount` is 0.
// - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade.
// - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price.
// - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction.
// - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick.
// - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing.
// - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing.
// - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
type Swap struct {
	// Params:
	Amount                 uint64
	OtherAmountThreshold   uint64
	SqrtPriceLimit         binary.Uint128
	AmountSpecifiedIsInput bool
	AToB                   bool
	// Accounts:
	// [0] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [1] = [,signer] token_authority
	TokenAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_owner_account_a
	TokenOwnerAccountA solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_owner_account_b
	TokenOwnerAccountB solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [7] = [writable] tick_array0
	TickArray0 solanago.PublicKey `bin:"-"`
	// [8] = [writable] tick_array1
	TickArray1 solanago.PublicKey `bin:"-"`
	// [9] = [writable] tick_array2
	TickArray2 solanago.PublicKey `bin:"-"`
	// [10] = [] oracle
	Oracle solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Swap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	// Serialize `otherAmountThresholdParam`:
	if err = encoder.Encode(obj.OtherAmountThreshold); err != nil {
		return fmt.Errorf("error while marshaling otherAmountThresholdParam:%w", err)
	}
	// Serialize `sqrtPriceLimitParam`:
	if err = encoder.Encode(obj.SqrtPriceLimit); err != nil {
		return fmt.Errorf("error while marshaling sqrtPriceLimitParam:%w", err)
	}
	// Serialize `amountSpecifiedIsInputParam`:
	if err = encoder.Encode(obj.AmountSpecifiedIsInput); err != nil {
		return fmt.Errorf("error while marshaling amountSpecifiedIsInputParam:%w", err)
	}
	// Serialize `aToBParam`:
	if err = encoder.Encode(obj.AToB); err != nil {
		return fmt.Errorf("error while marshaling aToBParam:%w", err)
	}
	return nil
}

func (obj *Swap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	// Deserialize `OtherAmountThreshold`:
	if err = decoder.Decode(&obj.OtherAmountThreshold); err != nil {
		return fmt.Errorf("error while unmarshaling OtherAmountThreshold:%w", err)
	}
	// Deserialize `SqrtPriceLimit`:
	if err = decoder.Decode(&obj.SqrtPriceLimit); err != nil {
		return fmt.Errorf("error while unmarshaling SqrtPriceLimit:%w", err)
	}
	// Deserialize `AmountSpecifiedIsInput`:
	if err = decoder.Decode(&obj.AmountSpecifiedIsInput); err != nil {
		return fmt.Errorf("error while unmarshaling AmountSpecifiedIsInput:%w", err)
	}
	// Deserialize `AToB`:
	if err = decoder.Decode(&obj.AToB); err != nil {
		return fmt.Errorf("error while unmarshaling AToB:%w", err)
	}
	return nil
}

func (obj *Swap) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.TokenProgram = accounts[0]
	obj.TokenAuthority = accounts[1]
	obj.Whirlpool = accounts[2]
	obj.TokenOwnerAccountA = accounts[3]
	obj.TokenVaultA = accounts[4]
	obj.TokenOwnerAccountB = accounts[5]
	obj.TokenVaultB = accounts[6]
	obj.TickArray0 = accounts[7]
	obj.TickArray1 = accounts[8]
	obj.TickArray2 = accounts[9]
	obj.Oracle = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Swap) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Swap) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Swap)
}

func (*Swap) NewInstance() programparser.Instruction {
	return new(Swap)
}

// Builds a "swap" instruction.
// Perform a swap in this Whirlpool //  // ### Authority // - "token_authority" - The authority to withdraw tokens from the input token account. //  // ### Parameters // - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input). // - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input). // - `sqrt_price_limit` - The maximum/minimum price the swap will swap to. // - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap. // - `a_to_b` - The direction of the swap. True if swapping from A to B. False if swapping from B to A. //  // #### Special Errors // - `ZeroTradableAmount` - User provided parameter `amount` is 0. // - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade. // - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price. // - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction. // - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick. // - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing. // - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing. // - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
func NewSwapInstruction(
	// Params:
	amountParam uint64,
	otherAmountThresholdParam uint64,
	sqrtPriceLimitParam binary.Uint128,
	amountSpecifiedIsInputParam bool,
	aToBParam bool,

	// Accounts:
	tokenProgram solanago.PublicKey,
	tokenAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	tokenOwnerAccountA solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenOwnerAccountB solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tickArray0 solanago.PublicKey,
	tickArray1 solanago.PublicKey,
	tickArray2 solanago.PublicKey,
	oracle solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Swap[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
		// Serialize `otherAmountThresholdParam`:
		if err = enc__.Encode(otherAmountThresholdParam); err != nil {
			return nil, fmt.Errorf("error while marshaling otherAmountThresholdParam:%w", err)
		}
		// Serialize `sqrtPriceLimitParam`:
		if err = enc__.Encode(sqrtPriceLimitParam); err != nil {
			return nil, fmt.Errorf("error while marshaling sqrtPriceLimitParam:%w", err)
		}
		// Serialize `amountSpecifiedIsInputParam`:
		if err = enc__.Encode(amountSpecifiedIsInputParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountSpecifiedIsInputParam:%w", err)
		}
		// Serialize `aToBParam`:
		if err = enc__.Encode(aToBParam); err != nil {
			return nil, fmt.Errorf("error while marshaling aToBParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] token_program
		metas_[0] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [1] = [,signer] token_authority
		metas_[1] = solanago.NewAccountMeta(tokenAuthority, false, true)
		// [2] = [writable] whirlpool
		metas_[2] = solanago.NewAccountMeta(whirlpool, true, false)
		// [3] = [writable] token_owner_account_a
		metas_[3] = solanago.NewAccountMeta(tokenOwnerAccountA, true, false)
		// [4] = [writable] token_vault_a
		metas_[4] = solanago.NewAccountMeta(tokenVaultA, true, false)
		// [5] = [writable] token_owner_account_b
		metas_[5] = solanago.NewAccountMeta(tokenOwnerAccountB, true, false)
		// [6] = [writable] token_vault_b
		metas_[6] = solanago.NewAccountMeta(tokenVaultB, true, false)
		// [7] = [writable] tick_array0
		metas_[7] = solanago.NewAccountMeta(tickArray0, true, false)
		// [8] = [writable] tick_array1
		metas_[8] = solanago.NewAccountMeta(tickArray1, true, false)
		// [9] = [writable] tick_array2
		metas_[9] = solanago.NewAccountMeta(tickArray2, true, false)
		// [10] = [] oracle
		metas_[10] = solanago.NewAccountMeta(oracle, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSwap" instruction.
// Perform a swap in this Whirlpool //  // ### Authority // - "token_authority" - The authority to withdraw tokens from the input token account. //  // ### Parameters // - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input). // - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input). // - `sqrt_price_limit` - The maximum/minimum price the swap will swap to. // - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap. // - `a_to_b` - The direction of the swap. True if swapping from A to B. False if swapping from B to A. //  // #### Special Errors // - `ZeroTradableAmount` - User provided parameter `amount` is 0. // - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade. // - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price. // - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction. // - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick. // - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing. // - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing. // - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
func BuildSwap(
	// Params:
	amountParam uint64,
	otherAmountThresholdParam uint64,
	sqrtPriceLimitParam binary.Uint128,
	amountSpecifiedIsInputParam bool,
	aToBParam bool,

	// Accounts:
	tokenProgram solanago.PublicKey,
	tokenAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	tokenOwnerAccountA solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenOwnerAccountB solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tickArray0 solanago.PublicKey,
	tickArray1 solanago.PublicKey,
	tickArray2 solanago.PublicKey,
	oracle solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSwapInstruction(
		amountParam,
		otherAmountThresholdParam,
		sqrtPriceLimitParam,
		amountSpecifiedIsInputParam,
		aToBParam,
		tokenProgram,
		tokenAuthority,
		whirlpool,
		tokenOwnerAccountA,
		tokenVaultA,
		tokenOwnerAccountB,
		tokenVaultB,
		tickArray0,
		tickArray1,
		tickArray2,
		oracle,
		remaining__...,
	)
	return instruction_
}
