// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "increase_liquidity" instruction.

// Add liquidity to a position in the Whirlpool. This call also updates the position's accrued fees and rewards.
//
// ### Authority
// - `position_authority` - authority that owns the token corresponding to this desired position.
//
// ### Parameters
// - `liquidity_amount` - The total amount of Liquidity the user is willing to deposit.
// - `token_max_a` - The maximum amount of tokenA the user is willing to deposit.
// - `token_max_b` - The maximum amount of tokenB the user is willing to deposit.
//
// #### Special Errors
// - `LiquidityZero` - Provided liquidity amount is zero.
// - `LiquidityTooHigh` - Provided liquidity exceeds u128::max.
// - `TokenMaxExceeded` - The required token to perform this operation exceeds the user defined amount.
type IncreaseLiquidity struct {
	// Params:
	LiquidityAmount binary.Uint128
	TokenMaxA       uint64
	TokenMaxB       uint64
	// Accounts:
	// [0] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [1] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [2] = [,signer] position_authority
	PositionAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [4] = [] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_owner_account_a
	TokenOwnerAccountA solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_owner_account_b
	TokenOwnerAccountB solanago.PublicKey `bin:"-"`
	// [7] = [writable] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [8] = [writable] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [9] = [writable] tick_array_lower
	TickArrayLower solanago.PublicKey `bin:"-"`
	// [10] = [writable] tick_array_upper
	TickArrayUpper solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj IncreaseLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `liquidityAmountParam`:
	if err = encoder.Encode(obj.LiquidityAmount); err != nil {
		return fmt.Errorf("error while marshaling liquidityAmountParam:%w", err)
	}
	// Serialize `tokenMaxAParam`:
	if err = encoder.Encode(obj.TokenMaxA); err != nil {
		return fmt.Errorf("error while marshaling tokenMaxAParam:%w", err)
	}
	// Serialize `tokenMaxBParam`:
	if err = encoder.Encode(obj.TokenMaxB); err != nil {
		return fmt.Errorf("error while marshaling tokenMaxBParam:%w", err)
	}
	return nil
}

func (obj *IncreaseLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityAmount`:
	if err = decoder.Decode(&obj.LiquidityAmount); err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityAmount:%w", err)
	}
	// Deserialize `TokenMaxA`:
	if err = decoder.Decode(&obj.TokenMaxA); err != nil {
		return fmt.Errorf("error while unmarshaling TokenMaxA:%w", err)
	}
	// Deserialize `TokenMaxB`:
	if err = decoder.Decode(&obj.TokenMaxB); err != nil {
		return fmt.Errorf("error while unmarshaling TokenMaxB:%w", err)
	}
	return nil
}

func (obj *IncreaseLiquidity) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.Whirlpool = accounts[0]
	obj.TokenProgram = accounts[1]
	obj.PositionAuthority = accounts[2]
	obj.Position = accounts[3]
	obj.PositionTokenAccount = accounts[4]
	obj.TokenOwnerAccountA = accounts[5]
	obj.TokenOwnerAccountB = accounts[6]
	obj.TokenVaultA = accounts[7]
	obj.TokenVaultB = accounts[8]
	obj.TickArrayLower = accounts[9]
	obj.TickArrayUpper = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *IncreaseLiquidity) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*IncreaseLiquidity) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_IncreaseLiquidity)
}

func (*IncreaseLiquidity) NewInstance() programparser.Instruction {
	return new(IncreaseLiquidity)
}

// Builds a "increase_liquidity" instruction.
// Add liquidity to a position in the Whirlpool. This call also updates the position's accrued fees and rewards. //  // ### Authority // - `position_authority` - authority that owns the token corresponding to this desired position. //  // ### Parameters // - `liquidity_amount` - The total amount of Liquidity the user is willing to deposit. // - `token_max_a` - The maximum amount of tokenA the user is willing to deposit. // - `token_max_b` - The maximum amount of tokenB the user is willing to deposit. //  // #### Special Errors // - `LiquidityZero` - Provided liquidity amount is zero. // - `LiquidityTooHigh` - Provided liquidity exceeds u128::max. // - `TokenMaxExceeded` - The required token to perform this operation exceeds the user defined amount.
func NewIncreaseLiquidityInstruction(
	// Params:
	liquidityAmountParam binary.Uint128,
	tokenMaxAParam uint64,
	tokenMaxBParam uint64,

	// Accounts:
	whirlpool solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	tokenOwnerAccountA solanago.PublicKey,
	tokenOwnerAccountB solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_IncreaseLiquidity[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `liquidityAmountParam`:
		if err = enc__.Encode(liquidityAmountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling liquidityAmountParam:%w", err)
		}
		// Serialize `tokenMaxAParam`:
		if err = enc__.Encode(tokenMaxAParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenMaxAParam:%w", err)
		}
		// Serialize `tokenMaxBParam`:
		if err = enc__.Encode(tokenMaxBParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenMaxBParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] whirlpool
		metas_[0] = solanago.NewAccountMeta(whirlpool, true, false)
		// [1] = [] token_program
		metas_[1] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [2] = [,signer] position_authority
		metas_[2] = solanago.NewAccountMeta(positionAuthority, false, true)
		// [3] = [writable] position
		metas_[3] = solanago.NewAccountMeta(position, true, false)
		// [4] = [] position_token_account
		metas_[4] = solanago.NewAccountMeta(positionTokenAccount, false, false)
		// [5] = [writable] token_owner_account_a
		metas_[5] = solanago.NewAccountMeta(tokenOwnerAccountA, true, false)
		// [6] = [writable] token_owner_account_b
		metas_[6] = solanago.NewAccountMeta(tokenOwnerAccountB, true, false)
		// [7] = [writable] token_vault_a
		metas_[7] = solanago.NewAccountMeta(tokenVaultA, true, false)
		// [8] = [writable] token_vault_b
		metas_[8] = solanago.NewAccountMeta(tokenVaultB, true, false)
		// [9] = [writable] tick_array_lower
		metas_[9] = solanago.NewAccountMeta(tickArrayLower, true, false)
		// [10] = [writable] tick_array_upper
		metas_[10] = solanago.NewAccountMeta(tickArrayUpper, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildIncreaseLiquidity" instruction.
// Add liquidity to a position in the Whirlpool. This call also updates the position's accrued fees and rewards. //  // ### Authority // - `position_authority` - authority that owns the token corresponding to this desired position. //  // ### Parameters // - `liquidity_amount` - The total amount of Liquidity the user is willing to deposit. // - `token_max_a` - The maximum amount of tokenA the user is willing to deposit. // - `token_max_b` - The maximum amount of tokenB the user is willing to deposit. //  // #### Special Errors // - `LiquidityZero` - Provided liquidity amount is zero. // - `LiquidityTooHigh` - Provided liquidity exceeds u128::max. // - `TokenMaxExceeded` - The required token to perform this operation exceeds the user defined amount.
func BuildIncreaseLiquidity(
	// Params:
	liquidityAmountParam binary.Uint128,
	tokenMaxAParam uint64,
	tokenMaxBParam uint64,

	// Accounts:
	whirlpool solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	tokenOwnerAccountA solanago.PublicKey,
	tokenOwnerAccountB solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tickArrayLower solanago.PublicKey,
	tickArrayUpper solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewIncreaseLiquidityInstruction(
		liquidityAmountParam,
		tokenMaxAParam,
		tokenMaxBParam,
		whirlpool,
		tokenProgram,
		positionAuthority,
		position,
		positionTokenAccount,
		tokenOwnerAccountA,
		tokenOwnerAccountB,
		tokenVaultA,
		tokenVaultB,
		tickArrayLower,
		tickArrayUpper,
		remaining__...,
	)
	return instruction_
}
