// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_config" instruction.

// Initializes a WhirlpoolsConfig account that hosts info & authorities
// required to govern a set of Whirlpools.
//
// ### Parameters
// - `fee_authority` - Authority authorized to initialize fee-tiers and set customs fees.
// - `collect_protocol_fees_authority` - Authority authorized to collect protocol fees.
// - `reward_emissions_super_authority` - Authority authorized to set reward authorities in pools.
type InitializeConfig struct {
	// Params:
	FeeAuthority                  solanago.PublicKey
	CollectProtocolFeesAuthority  solanago.PublicKey
	RewardEmissionsSuperAuthority solanago.PublicKey
	DefaultProtocolFeeRate        uint16
	// Accounts:
	// [0] = [writable,signer] config
	Config solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [2] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `feeAuthorityParam`:
	if err = encoder.Encode(obj.FeeAuthority); err != nil {
		return fmt.Errorf("error while marshaling feeAuthorityParam:%w", err)
	}
	// Serialize `collectProtocolFeesAuthorityParam`:
	if err = encoder.Encode(obj.CollectProtocolFeesAuthority); err != nil {
		return fmt.Errorf("error while marshaling collectProtocolFeesAuthorityParam:%w", err)
	}
	// Serialize `rewardEmissionsSuperAuthorityParam`:
	if err = encoder.Encode(obj.RewardEmissionsSuperAuthority); err != nil {
		return fmt.Errorf("error while marshaling rewardEmissionsSuperAuthorityParam:%w", err)
	}
	// Serialize `defaultProtocolFeeRateParam`:
	if err = encoder.Encode(obj.DefaultProtocolFeeRate); err != nil {
		return fmt.Errorf("error while marshaling defaultProtocolFeeRateParam:%w", err)
	}
	return nil
}

func (obj *InitializeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeAuthority`:
	if err = decoder.Decode(&obj.FeeAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling FeeAuthority:%w", err)
	}
	// Deserialize `CollectProtocolFeesAuthority`:
	if err = decoder.Decode(&obj.CollectProtocolFeesAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling CollectProtocolFeesAuthority:%w", err)
	}
	// Deserialize `RewardEmissionsSuperAuthority`:
	if err = decoder.Decode(&obj.RewardEmissionsSuperAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling RewardEmissionsSuperAuthority:%w", err)
	}
	// Deserialize `DefaultProtocolFeeRate`:
	if err = decoder.Decode(&obj.DefaultProtocolFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling DefaultProtocolFeeRate:%w", err)
	}
	return nil
}

func (obj *InitializeConfig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Config = accounts[0]
	obj.Funder = accounts[1]
	obj.SystemProgram = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeConfig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeConfig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeConfig)
}

func (*InitializeConfig) NewInstance() programparser.Instruction {
	return new(InitializeConfig)
}

// Builds a "initialize_config" instruction.
// Initializes a WhirlpoolsConfig account that hosts info & authorities // required to govern a set of Whirlpools. //  // ### Parameters // - `fee_authority` - Authority authorized to initialize fee-tiers and set customs fees. // - `collect_protocol_fees_authority` - Authority authorized to collect protocol fees. // - `reward_emissions_super_authority` - Authority authorized to set reward authorities in pools.
func NewInitializeConfigInstruction(
	// Params:
	feeAuthorityParam solanago.PublicKey,
	collectProtocolFeesAuthorityParam solanago.PublicKey,
	rewardEmissionsSuperAuthorityParam solanago.PublicKey,
	defaultProtocolFeeRateParam uint16,

	// Accounts:
	config solanago.PublicKey,
	funder solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeConfig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `feeAuthorityParam`:
		if err = enc__.Encode(feeAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling feeAuthorityParam:%w", err)
		}
		// Serialize `collectProtocolFeesAuthorityParam`:
		if err = enc__.Encode(collectProtocolFeesAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling collectProtocolFeesAuthorityParam:%w", err)
		}
		// Serialize `rewardEmissionsSuperAuthorityParam`:
		if err = enc__.Encode(rewardEmissionsSuperAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardEmissionsSuperAuthorityParam:%w", err)
		}
		// Serialize `defaultProtocolFeeRateParam`:
		if err = enc__.Encode(defaultProtocolFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling defaultProtocolFeeRateParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] config
		metas_[0] = solanago.NewAccountMeta(config, true, true)
		// [1] = [writable,signer] funder
		metas_[1] = solanago.NewAccountMeta(funder, true, true)
		// [2] = [] system_program
		metas_[2] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeConfig" instruction.
// Initializes a WhirlpoolsConfig account that hosts info & authorities // required to govern a set of Whirlpools. //  // ### Parameters // - `fee_authority` - Authority authorized to initialize fee-tiers and set customs fees. // - `collect_protocol_fees_authority` - Authority authorized to collect protocol fees. // - `reward_emissions_super_authority` - Authority authorized to set reward authorities in pools.
func BuildInitializeConfig(
	// Params:
	feeAuthorityParam solanago.PublicKey,
	collectProtocolFeesAuthorityParam solanago.PublicKey,
	rewardEmissionsSuperAuthorityParam solanago.PublicKey,
	defaultProtocolFeeRateParam uint16,

	// Accounts:
	config solanago.PublicKey,
	funder solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeConfigInstruction(
		feeAuthorityParam,
		collectProtocolFeesAuthorityParam,
		rewardEmissionsSuperAuthorityParam,
		defaultProtocolFeeRateParam,
		config,
		funder,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
