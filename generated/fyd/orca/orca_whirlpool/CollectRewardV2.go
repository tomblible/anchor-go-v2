// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_reward_v2" instruction.

// Collect rewards accrued for this position.
//
// ### Authority
// - `position_authority` - authority that owns the token corresponding to this desired position.
type CollectRewardV2 struct {
	// Params:
	RewardIndex           uint8
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`
	// Accounts:
	// [0] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [1] = [,signer] position_authority
	PositionAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] reward_owner_account
	RewardOwnerAccount solanago.PublicKey `bin:"-"`
	// [5] = [] reward_mint
	RewardMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] reward_vault
	RewardVault solanago.PublicKey `bin:"-"`
	// [7] = [] reward_token_program
	RewardTokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] memo_program
	MemoProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectRewardV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `remainingAccountsInfoParam` (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.RemainingAccountsInfo); err != nil {
				return fmt.Errorf("error while marshaling remainingAccountsInfoParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *CollectRewardV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.RemainingAccountsInfo); err != nil {
				return fmt.Errorf("error while unmarshaling RemainingAccountsInfo:%w", err)
			}
		}
	}
	return nil
}

func (obj *CollectRewardV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Whirlpool = accounts[0]
	obj.PositionAuthority = accounts[1]
	obj.Position = accounts[2]
	obj.PositionTokenAccount = accounts[3]
	obj.RewardOwnerAccount = accounts[4]
	obj.RewardMint = accounts[5]
	obj.RewardVault = accounts[6]
	obj.RewardTokenProgram = accounts[7]
	obj.MemoProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectRewardV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectRewardV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectRewardV2)
}

func (*CollectRewardV2) NewInstance() programparser.Instruction {
	return new(CollectRewardV2)
}

func (obj *CollectRewardV2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "collect_reward_v2" instruction.
// Collect rewards accrued for this position. //  // ### Authority // - `position_authority` - authority that owns the token corresponding to this desired position.
func NewCollectRewardV2Instruction(
	// Params:
	rewardIndexParam uint8,
	remainingAccountsInfoParam *RemainingAccountsInfo,

	// Accounts:
	whirlpool solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	rewardOwnerAccount solanago.PublicKey,
	rewardMint solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardTokenProgram solanago.PublicKey,
	memoProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectRewardV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `remainingAccountsInfoParam` (optional):
		{
			if remainingAccountsInfoParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam optionality: %w", err)
				}
				if err = enc__.Encode(remainingAccountsInfoParam); err != nil {
					return nil, fmt.Errorf("error while marshaling remainingAccountsInfoParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpool
		metas_[0] = solanago.NewAccountMeta(whirlpool, false, false)
		// [1] = [,signer] position_authority
		metas_[1] = solanago.NewAccountMeta(positionAuthority, false, true)
		// [2] = [writable] position
		metas_[2] = solanago.NewAccountMeta(position, true, false)
		// [3] = [] position_token_account
		metas_[3] = solanago.NewAccountMeta(positionTokenAccount, false, false)
		// [4] = [writable] reward_owner_account
		metas_[4] = solanago.NewAccountMeta(rewardOwnerAccount, true, false)
		// [5] = [] reward_mint
		metas_[5] = solanago.NewAccountMeta(rewardMint, false, false)
		// [6] = [writable] reward_vault
		metas_[6] = solanago.NewAccountMeta(rewardVault, true, false)
		// [7] = [] reward_token_program
		metas_[7] = solanago.NewAccountMeta(rewardTokenProgram, false, false)
		// [8] = [] memo_program
		metas_[8] = solanago.NewAccountMeta(memoProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectRewardV2" instruction.
// Collect rewards accrued for this position. //  // ### Authority // - `position_authority` - authority that owns the token corresponding to this desired position.
func BuildCollectRewardV2(
	// Params:
	rewardIndexParam uint8,
	remainingAccountsInfoParam *RemainingAccountsInfo,

	// Accounts:
	whirlpool solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	rewardOwnerAccount solanago.PublicKey,
	rewardMint solanago.PublicKey,
	rewardVault solanago.PublicKey,
	rewardTokenProgram solanago.PublicKey,
	memoProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectRewardV2Instruction(
		rewardIndexParam,
		remainingAccountsInfoParam,
		whirlpool,
		positionAuthority,
		position,
		positionTokenAccount,
		rewardOwnerAccount,
		rewardMint,
		rewardVault,
		rewardTokenProgram,
		memoProgram,
		remaining__...,
	)
	return instruction_
}
