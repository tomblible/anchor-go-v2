// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_pool" instruction.

// Initializes a Whirlpool account.
// Fee rate is set to the default values on the config and supplied fee_tier.
//
// ### Parameters
// - `bumps` - The bump value when deriving the PDA of the Whirlpool address.
// - `tick_spacing` - The desired tick spacing for this pool.
// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
//
// #### Special Errors
// `InvalidTokenMintOrder` - The order of mints have to be ordered by
// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
type InitializePool struct {
	// Params:
	Bumps            WhirlpoolBumps
	TickSpacing      uint16
	InitialSqrtPrice binary.Uint128
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [] token_mint_a
	TokenMintA solanago.PublicKey `bin:"-"`
	// [2] = [] token_mint_b
	TokenMintB solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [4] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [7] = [] fee_tier
	FeeTier solanago.PublicKey `bin:"-"`
	// [8] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [10] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `bumpsParam`:
	if err = encoder.Encode(obj.Bumps); err != nil {
		return fmt.Errorf("error while marshaling bumpsParam:%w", err)
	}
	// Serialize `tickSpacingParam`:
	if err = encoder.Encode(obj.TickSpacing); err != nil {
		return fmt.Errorf("error while marshaling tickSpacingParam:%w", err)
	}
	// Serialize `initialSqrtPriceParam`:
	if err = encoder.Encode(obj.InitialSqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling initialSqrtPriceParam:%w", err)
	}
	return nil
}

func (obj *InitializePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Bumps`:
	if err = decoder.Decode(&obj.Bumps); err != nil {
		return fmt.Errorf("error while unmarshaling Bumps:%w", err)
	}
	// Deserialize `TickSpacing`:
	if err = decoder.Decode(&obj.TickSpacing); err != nil {
		return fmt.Errorf("error while unmarshaling TickSpacing:%w", err)
	}
	// Deserialize `InitialSqrtPrice`:
	if err = decoder.Decode(&obj.InitialSqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling InitialSqrtPrice:%w", err)
	}
	return nil
}

func (obj *InitializePool) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 11 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 11, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.TokenMintA = accounts[1]
	obj.TokenMintB = accounts[2]
	obj.Funder = accounts[3]
	obj.Whirlpool = accounts[4]
	obj.TokenVaultA = accounts[5]
	obj.TokenVaultB = accounts[6]
	obj.FeeTier = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.SystemProgram = accounts[9]
	obj.Rent = accounts[10]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializePool) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializePool) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializePool)
}

func (*InitializePool) NewInstance() programparser.Instruction {
	return new(InitializePool)
}

func (obj *InitializePool) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[11:]
}

// Builds a "initialize_pool" instruction.
// Initializes a Whirlpool account. // Fee rate is set to the default values on the config and supplied fee_tier. //  // ### Parameters // - `bumps` - The bump value when deriving the PDA of the Whirlpool address. // - `tick_spacing` - The desired tick spacing for this pool. // - `initial_sqrt_price` - The desired initial sqrt-price for this pool //  // #### Special Errors // `InvalidTokenMintOrder` - The order of mints have to be ordered by // `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64 //
func NewInitializePoolInstruction(
	// Params:
	bumpsParam WhirlpoolBumps,
	tickSpacingParam uint16,
	initialSqrtPriceParam binary.Uint128,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	funder solanago.PublicKey,
	whirlpool solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	feeTier solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 11, 11+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializePool[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `bumpsParam`:
		if err = enc__.Encode(bumpsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling bumpsParam:%w", err)
		}
		// Serialize `tickSpacingParam`:
		if err = enc__.Encode(tickSpacingParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickSpacingParam:%w", err)
		}
		// Serialize `initialSqrtPriceParam`:
		if err = enc__.Encode(initialSqrtPriceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initialSqrtPriceParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [] token_mint_a
		metas_[1] = solanago.NewAccountMeta(tokenMintA, false, false)
		// [2] = [] token_mint_b
		metas_[2] = solanago.NewAccountMeta(tokenMintB, false, false)
		// [3] = [writable,signer] funder
		metas_[3] = solanago.NewAccountMeta(funder, true, true)
		// [4] = [writable] whirlpool
		metas_[4] = solanago.NewAccountMeta(whirlpool, true, false)
		// [5] = [writable,signer] token_vault_a
		metas_[5] = solanago.NewAccountMeta(tokenVaultA, true, true)
		// [6] = [writable,signer] token_vault_b
		metas_[6] = solanago.NewAccountMeta(tokenVaultB, true, true)
		// [7] = [] fee_tier
		metas_[7] = solanago.NewAccountMeta(feeTier, false, false)
		// [8] = [] token_program
		metas_[8] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [9] = [] system_program
		metas_[9] = solanago.NewAccountMeta(systemProgram, false, false)
		// [10] = [] rent
		metas_[10] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializePool" instruction.
// Initializes a Whirlpool account. // Fee rate is set to the default values on the config and supplied fee_tier. //  // ### Parameters // - `bumps` - The bump value when deriving the PDA of the Whirlpool address. // - `tick_spacing` - The desired tick spacing for this pool. // - `initial_sqrt_price` - The desired initial sqrt-price for this pool //  // #### Special Errors // `InvalidTokenMintOrder` - The order of mints have to be ordered by // `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64 //
func BuildInitializePool(
	// Params:
	bumpsParam WhirlpoolBumps,
	tickSpacingParam uint16,
	initialSqrtPriceParam binary.Uint128,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	funder solanago.PublicKey,
	whirlpool solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	feeTier solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializePoolInstruction(
		bumpsParam,
		tickSpacingParam,
		initialSqrtPriceParam,
		whirlpoolsConfig,
		tokenMintA,
		tokenMintB,
		funder,
		whirlpool,
		tokenVaultA,
		tokenVaultB,
		feeTier,
		tokenProgram,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
