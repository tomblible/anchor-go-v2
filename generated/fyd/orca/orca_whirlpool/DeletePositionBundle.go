// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "delete_position_bundle" instruction.

// Delete a PositionBundle account. Burns the position bundle token in the owner's wallet.
//
// ### Authority
// - `position_bundle_owner` - The owner that owns the position bundle token.
//
// ### Special Errors
// - `PositionBundleNotDeletable` - The provided position bundle has open positions.
type DeletePositionBundle struct {
	// Params:
	// Accounts:
	// [0] = [writable] position_bundle
	PositionBundle solanago.PublicKey `bin:"-"`
	// [1] = [writable] position_bundle_mint
	PositionBundleMint solanago.PublicKey `bin:"-"`
	// [2] = [writable] position_bundle_token_account
	PositionBundleTokenAccount solanago.PublicKey `bin:"-"`
	// [3] = [,signer] position_bundle_owner
	PositionBundleOwner solanago.PublicKey `bin:"-"`
	// [4] = [writable] receiver
	Receiver solanago.PublicKey `bin:"-"`
	// [5] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DeletePositionBundle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *DeletePositionBundle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DeletePositionBundle) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.PositionBundle = accounts[0]
	obj.PositionBundleMint = accounts[1]
	obj.PositionBundleTokenAccount = accounts[2]
	obj.PositionBundleOwner = accounts[3]
	obj.Receiver = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DeletePositionBundle) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DeletePositionBundle) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DeletePositionBundle)
}

func (*DeletePositionBundle) NewInstance() programparser.Instruction {
	return new(DeletePositionBundle)
}

// Builds a "delete_position_bundle" instruction.
// Delete a PositionBundle account. Burns the position bundle token in the owner's wallet. //  // ### Authority // - `position_bundle_owner` - The owner that owns the position bundle token. //  // ### Special Errors // - `PositionBundleNotDeletable` - The provided position bundle has open positions.
func NewDeletePositionBundleInstruction(
	positionBundle solanago.PublicKey,
	positionBundleMint solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleOwner solanago.PublicKey,
	receiver solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DeletePositionBundle[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] position_bundle
		metas_[0] = solanago.NewAccountMeta(positionBundle, true, false)
		// [1] = [writable] position_bundle_mint
		metas_[1] = solanago.NewAccountMeta(positionBundleMint, true, false)
		// [2] = [writable] position_bundle_token_account
		metas_[2] = solanago.NewAccountMeta(positionBundleTokenAccount, true, false)
		// [3] = [,signer] position_bundle_owner
		metas_[3] = solanago.NewAccountMeta(positionBundleOwner, false, true)
		// [4] = [writable] receiver
		metas_[4] = solanago.NewAccountMeta(receiver, true, false)
		// [5] = [] token_program
		metas_[5] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeletePositionBundle" instruction.
// Delete a PositionBundle account. Burns the position bundle token in the owner's wallet. //  // ### Authority // - `position_bundle_owner` - The owner that owns the position bundle token. //  // ### Special Errors // - `PositionBundleNotDeletable` - The provided position bundle has open positions.
func BuildDeletePositionBundle(
	positionBundle solanago.PublicKey,
	positionBundleMint solanago.PublicKey,
	positionBundleTokenAccount solanago.PublicKey,
	positionBundleOwner solanago.PublicKey,
	receiver solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDeletePositionBundleInstruction(
		positionBundle,
		positionBundleMint,
		positionBundleTokenAccount,
		positionBundleOwner,
		receiver,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
