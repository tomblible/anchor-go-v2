// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "open_position_with_token_extensions" instruction.

// Open a position in a Whirlpool. A unique token will be minted to represent the position
// in the users wallet. Additional TokenMetadata extension is initialized to identify the token.
// Mint and TokenAccount are based on Token-2022.
// The position will start off with 0 liquidity.
//
// ### Parameters
// - `tick_lower_index` - The tick specifying the lower end of the position range.
// - `tick_upper_index` - The tick specifying the upper end of the position range.
// - `with_token_metadata_extension` - If true, the token metadata extension will be initialized.
//
// #### Special Errors
// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
// the tick-spacing in this pool.
type OpenPositionWithTokenExtensions struct {
	// Params:
	TickLowerIndex             int32
	TickUpperIndex             int32
	WithTokenMetadataExtension bool
	// Accounts:
	// [0] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [1] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [2] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] position_mint
	PositionMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [6] = [] token2022_program
	Token2022Program solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] associated_token_program
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [9] = [] metadata_update_auth
	MetadataUpdateAuth solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj OpenPositionWithTokenExtensions) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `tickLowerIndexParam`:
	if err = encoder.Encode(obj.TickLowerIndex); err != nil {
		return fmt.Errorf("error while marshaling tickLowerIndexParam:%w", err)
	}
	// Serialize `tickUpperIndexParam`:
	if err = encoder.Encode(obj.TickUpperIndex); err != nil {
		return fmt.Errorf("error while marshaling tickUpperIndexParam:%w", err)
	}
	// Serialize `withTokenMetadataExtensionParam`:
	if err = encoder.Encode(obj.WithTokenMetadataExtension); err != nil {
		return fmt.Errorf("error while marshaling withTokenMetadataExtensionParam:%w", err)
	}
	return nil
}

func (obj *OpenPositionWithTokenExtensions) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TickLowerIndex`:
	if err = decoder.Decode(&obj.TickLowerIndex); err != nil {
		return fmt.Errorf("error while unmarshaling TickLowerIndex:%w", err)
	}
	// Deserialize `TickUpperIndex`:
	if err = decoder.Decode(&obj.TickUpperIndex); err != nil {
		return fmt.Errorf("error while unmarshaling TickUpperIndex:%w", err)
	}
	// Deserialize `WithTokenMetadataExtension`:
	if err = decoder.Decode(&obj.WithTokenMetadataExtension); err != nil {
		return fmt.Errorf("error while unmarshaling WithTokenMetadataExtension:%w", err)
	}
	return nil
}

func (obj *OpenPositionWithTokenExtensions) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Funder = accounts[0]
	obj.Owner = accounts[1]
	obj.Position = accounts[2]
	obj.PositionMint = accounts[3]
	obj.PositionTokenAccount = accounts[4]
	obj.Whirlpool = accounts[5]
	obj.Token2022Program = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.AssociatedTokenProgram = accounts[8]
	obj.MetadataUpdateAuth = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *OpenPositionWithTokenExtensions) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*OpenPositionWithTokenExtensions) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_OpenPositionWithTokenExtensions)
}

func (*OpenPositionWithTokenExtensions) NewInstance() programparser.Instruction {
	return new(OpenPositionWithTokenExtensions)
}

func (obj *OpenPositionWithTokenExtensions) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[10:]
}

// Builds a "open_position_with_token_extensions" instruction.
// Open a position in a Whirlpool. A unique token will be minted to represent the position // in the users wallet. Additional TokenMetadata extension is initialized to identify the token. // Mint and TokenAccount are based on Token-2022. // The position will start off with 0 liquidity. //  // ### Parameters // - `tick_lower_index` - The tick specifying the lower end of the position range. // - `tick_upper_index` - The tick specifying the upper end of the position range. // - `with_token_metadata_extension` - If true, the token metadata extension will be initialized. //  // #### Special Errors // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool.
func NewOpenPositionWithTokenExtensionsInstruction(
	// Params:
	tickLowerIndexParam int32,
	tickUpperIndexParam int32,
	withTokenMetadataExtensionParam bool,

	// Accounts:
	funder solanago.PublicKey,
	owner solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	whirlpool solanago.PublicKey,
	token2022Program solanago.PublicKey,
	systemProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	metadataUpdateAuth solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_OpenPositionWithTokenExtensions[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `tickLowerIndexParam`:
		if err = enc__.Encode(tickLowerIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickLowerIndexParam:%w", err)
		}
		// Serialize `tickUpperIndexParam`:
		if err = enc__.Encode(tickUpperIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tickUpperIndexParam:%w", err)
		}
		// Serialize `withTokenMetadataExtensionParam`:
		if err = enc__.Encode(withTokenMetadataExtensionParam); err != nil {
			return nil, fmt.Errorf("error while marshaling withTokenMetadataExtensionParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] funder
		metas_[0] = solanago.NewAccountMeta(funder, true, true)
		// [1] = [] owner
		metas_[1] = solanago.NewAccountMeta(owner, false, false)
		// [2] = [writable] position
		metas_[2] = solanago.NewAccountMeta(position, true, false)
		// [3] = [writable,signer] position_mint
		metas_[3] = solanago.NewAccountMeta(positionMint, true, true)
		// [4] = [writable] position_token_account
		metas_[4] = solanago.NewAccountMeta(positionTokenAccount, true, false)
		// [5] = [] whirlpool
		metas_[5] = solanago.NewAccountMeta(whirlpool, false, false)
		// [6] = [] token2022_program
		metas_[6] = solanago.NewAccountMeta(token2022Program, false, false)
		// [7] = [] system_program
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// [8] = [] associated_token_program
		metas_[8] = solanago.NewAccountMeta(associatedTokenProgram, false, false)
		// [9] = [] metadata_update_auth
		metas_[9] = solanago.NewAccountMeta(metadataUpdateAuth, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildOpenPositionWithTokenExtensions" instruction.
// Open a position in a Whirlpool. A unique token will be minted to represent the position // in the users wallet. Additional TokenMetadata extension is initialized to identify the token. // Mint and TokenAccount are based on Token-2022. // The position will start off with 0 liquidity. //  // ### Parameters // - `tick_lower_index` - The tick specifying the lower end of the position range. // - `tick_upper_index` - The tick specifying the upper end of the position range. // - `with_token_metadata_extension` - If true, the token metadata extension will be initialized. //  // #### Special Errors // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool.
func BuildOpenPositionWithTokenExtensions(
	// Params:
	tickLowerIndexParam int32,
	tickUpperIndexParam int32,
	withTokenMetadataExtensionParam bool,

	// Accounts:
	funder solanago.PublicKey,
	owner solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	whirlpool solanago.PublicKey,
	token2022Program solanago.PublicKey,
	systemProgram solanago.PublicKey,
	associatedTokenProgram solanago.PublicKey,
	metadataUpdateAuth solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewOpenPositionWithTokenExtensionsInstruction(
		tickLowerIndexParam,
		tickUpperIndexParam,
		withTokenMetadataExtensionParam,
		funder,
		owner,
		position,
		positionMint,
		positionTokenAccount,
		whirlpool,
		token2022Program,
		systemProgram,
		associatedTokenProgram,
		metadataUpdateAuth,
		remaining__...,
	)
	return instruction_
}
