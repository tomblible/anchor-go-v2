// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "reset_position_range" instruction.

// Reset the position range to a new range.
//
// ### Authority
// - `position_authority` - The authority that owns the position token.
//
// ### Parameters
// - `new_tick_lower_index` - The new tick specifying the lower end of the position range.
// - `new_tick_upper_index` - The new tick specifying the upper end of the position range.
//
// #### Special Errors
// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
// the tick-spacing in this pool.
// - `ClosePositionNotEmpty` - The provided position account is not empty.
// - `SameTickRangeNotAllowed` - The provided tick range is the same as the current tick range.
type ResetPositionRange struct {
	// Params:
	NewTickLowerIndex int32
	NewTickUpperIndex int32
	// Accounts:
	// [0] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [1] = [,signer] position_authority
	PositionAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [3] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [4] = [] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ResetPositionRange) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `newTickLowerIndexParam`:
	if err = encoder.Encode(obj.NewTickLowerIndex); err != nil {
		return fmt.Errorf("error while marshaling newTickLowerIndexParam:%w", err)
	}
	// Serialize `newTickUpperIndexParam`:
	if err = encoder.Encode(obj.NewTickUpperIndex); err != nil {
		return fmt.Errorf("error while marshaling newTickUpperIndexParam:%w", err)
	}
	return nil
}

func (obj *ResetPositionRange) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NewTickLowerIndex`:
	if err = decoder.Decode(&obj.NewTickLowerIndex); err != nil {
		return fmt.Errorf("error while unmarshaling NewTickLowerIndex:%w", err)
	}
	// Deserialize `NewTickUpperIndex`:
	if err = decoder.Decode(&obj.NewTickUpperIndex); err != nil {
		return fmt.Errorf("error while unmarshaling NewTickUpperIndex:%w", err)
	}
	return nil
}

func (obj *ResetPositionRange) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.Funder = accounts[0]
	obj.PositionAuthority = accounts[1]
	obj.Whirlpool = accounts[2]
	obj.Position = accounts[3]
	obj.PositionTokenAccount = accounts[4]
	obj.SystemProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ResetPositionRange) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ResetPositionRange) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ResetPositionRange)
}

func (*ResetPositionRange) NewInstance() programparser.Instruction {
	return new(ResetPositionRange)
}

func (obj *ResetPositionRange) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 6 {
		return nil
	}
	return obj.PublicKeySlice[6:]
}

// Builds a "reset_position_range" instruction.
// Reset the position range to a new range. //  // ### Authority // - `position_authority` - The authority that owns the position token. //  // ### Parameters // - `new_tick_lower_index` - The new tick specifying the lower end of the position range. // - `new_tick_upper_index` - The new tick specifying the upper end of the position range. //  // #### Special Errors // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool. // - `ClosePositionNotEmpty` - The provided position account is not empty. // - `SameTickRangeNotAllowed` - The provided tick range is the same as the current tick range.
func NewResetPositionRangeInstruction(
	// Params:
	newTickLowerIndexParam int32,
	newTickUpperIndexParam int32,

	// Accounts:
	funder solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ResetPositionRange[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `newTickLowerIndexParam`:
		if err = enc__.Encode(newTickLowerIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling newTickLowerIndexParam:%w", err)
		}
		// Serialize `newTickUpperIndexParam`:
		if err = enc__.Encode(newTickUpperIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling newTickUpperIndexParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] funder
		metas_[0] = solanago.NewAccountMeta(funder, true, true)
		// [1] = [,signer] position_authority
		metas_[1] = solanago.NewAccountMeta(positionAuthority, false, true)
		// [2] = [] whirlpool
		metas_[2] = solanago.NewAccountMeta(whirlpool, false, false)
		// [3] = [writable] position
		metas_[3] = solanago.NewAccountMeta(position, true, false)
		// [4] = [] position_token_account
		metas_[4] = solanago.NewAccountMeta(positionTokenAccount, false, false)
		// [5] = [] system_program
		metas_[5] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildResetPositionRange" instruction.
// Reset the position range to a new range. //  // ### Authority // - `position_authority` - The authority that owns the position token. //  // ### Parameters // - `new_tick_lower_index` - The new tick specifying the lower end of the position range. // - `new_tick_upper_index` - The new tick specifying the upper end of the position range. //  // #### Special Errors // - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of // the tick-spacing in this pool. // - `ClosePositionNotEmpty` - The provided position account is not empty. // - `SameTickRangeNotAllowed` - The provided tick range is the same as the current tick range.
func BuildResetPositionRange(
	// Params:
	newTickLowerIndexParam int32,
	newTickUpperIndexParam int32,

	// Accounts:
	funder solanago.PublicKey,
	positionAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	position solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewResetPositionRangeInstruction(
		newTickLowerIndexParam,
		newTickUpperIndexParam,
		funder,
		positionAuthority,
		whirlpool,
		position,
		positionTokenAccount,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
