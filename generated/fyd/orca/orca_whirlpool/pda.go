// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package orca_whirlpool

import  solanago "github.com/gagliardetto/solana-go"

func FindTickArrayAddress(whirlpool solanago.PublicKey, argsStartTickIndex solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x7469636b5f6172726179
	seeds = append(seeds, []byte{byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x5f), byte(0x61), byte(0x72), byte(0x72), byte(0x61), byte(0x79)})
	// path: whirlpool
	seeds = append(seeds, whirlpool.Bytes())
	// path: argsStartTickIndex
	seeds = append(seeds, argsStartTickIndex.Bytes())

	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayAddress(whirlpool solanago.PublicKey, argsStartTickIndex solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindTickArrayAddress(whirlpool, argsStartTickIndex)
	return
}

func FindOracleAddress(whirlpool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x6f7261636c65
	seeds = append(seeds, []byte{byte(0x6f), byte(0x72), byte(0x61), byte(0x63), byte(0x6c), byte(0x65)})
	// path: whirlpool
	seeds = append(seeds, whirlpool.Bytes())

	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindOracleAddress(whirlpool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindOracleAddress(whirlpool)
	return
}
