// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_delegated_fee_authority" instruction.

// Sets the delegated fee authority for an AdaptiveFeeTier.
// The delegated fee authority can set the fee rate for individual pools initialized with the adaptive fee-tier.
// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
type SetDelegatedFeeAuthority struct {
	// Params:
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [writable] adaptive_fee_tier
	AdaptiveFeeTier solanago.PublicKey `bin:"-"`
	// [2] = [,signer] fee_authority
	FeeAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] new_delegated_fee_authority
	NewDelegatedFeeAuthority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetDelegatedFeeAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *SetDelegatedFeeAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *SetDelegatedFeeAuthority) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.AdaptiveFeeTier = accounts[1]
	obj.FeeAuthority = accounts[2]
	obj.NewDelegatedFeeAuthority = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetDelegatedFeeAuthority) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetDelegatedFeeAuthority) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetDelegatedFeeAuthority)
}

func (*SetDelegatedFeeAuthority) NewInstance() programparser.Instruction {
	return new(SetDelegatedFeeAuthority)
}

func (obj *SetDelegatedFeeAuthority) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "set_delegated_fee_authority" instruction.
// Sets the delegated fee authority for an AdaptiveFeeTier. // The delegated fee authority can set the fee rate for individual pools initialized with the adaptive fee-tier. // Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction. //  // ### Authority // - "fee_authority" - Set authority in the WhirlpoolConfig
func NewSetDelegatedFeeAuthorityInstruction(
	whirlpoolsConfig solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	newDelegatedFeeAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetDelegatedFeeAuthority[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [writable] adaptive_fee_tier
		metas_[1] = solanago.NewAccountMeta(adaptiveFeeTier, true, false)
		// [2] = [,signer] fee_authority
		metas_[2] = solanago.NewAccountMeta(feeAuthority, false, true)
		// [3] = [] new_delegated_fee_authority
		metas_[3] = solanago.NewAccountMeta(newDelegatedFeeAuthority, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetDelegatedFeeAuthority" instruction.
// Sets the delegated fee authority for an AdaptiveFeeTier. // The delegated fee authority can set the fee rate for individual pools initialized with the adaptive fee-tier. // Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction. //  // ### Authority // - "fee_authority" - Set authority in the WhirlpoolConfig
func BuildSetDelegatedFeeAuthority(
	whirlpoolsConfig solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	newDelegatedFeeAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetDelegatedFeeAuthorityInstruction(
		whirlpoolsConfig,
		adaptiveFeeTier,
		feeAuthority,
		newDelegatedFeeAuthority,
		remaining__...,
	)
	return instruction_
}
