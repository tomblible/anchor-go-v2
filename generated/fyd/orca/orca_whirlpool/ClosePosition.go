// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "close_position" instruction.

// Close a position in a Whirlpool. Burns the position token in the owner's wallet.
//
// ### Authority
// - "position_authority" - The authority that owns the position token.
//
// #### Special Errors
// - `ClosePositionNotEmpty` - The provided position account is not empty.
type ClosePosition struct {
	// Params:
	// Accounts:
	// [0] = [,signer] position_authority
	PositionAuthority solanago.PublicKey `bin:"-"`
	// [1] = [writable] receiver
	Receiver solanago.PublicKey `bin:"-"`
	// [2] = [writable] position
	Position solanago.PublicKey `bin:"-"`
	// [3] = [writable] position_mint
	PositionMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] position_token_account
	PositionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ClosePosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ClosePosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClosePosition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.PositionAuthority = accounts[0]
	obj.Receiver = accounts[1]
	obj.Position = accounts[2]
	obj.PositionMint = accounts[3]
	obj.PositionTokenAccount = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ClosePosition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ClosePosition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ClosePosition)
}

func (*ClosePosition) NewInstance() programparser.Instruction {
	return new(ClosePosition)
}

func (obj *ClosePosition) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[6:]
}

// Builds a "close_position" instruction.
// Close a position in a Whirlpool. Burns the position token in the owner's wallet. //  // ### Authority // - "position_authority" - The authority that owns the position token. //  // #### Special Errors // - `ClosePositionNotEmpty` - The provided position account is not empty.
func NewClosePositionInstruction(
	positionAuthority solanago.PublicKey,
	receiver solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ClosePosition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] position_authority
		metas_[0] = solanago.NewAccountMeta(positionAuthority, false, true)
		// [1] = [writable] receiver
		metas_[1] = solanago.NewAccountMeta(receiver, true, false)
		// [2] = [writable] position
		metas_[2] = solanago.NewAccountMeta(position, true, false)
		// [3] = [writable] position_mint
		metas_[3] = solanago.NewAccountMeta(positionMint, true, false)
		// [4] = [writable] position_token_account
		metas_[4] = solanago.NewAccountMeta(positionTokenAccount, true, false)
		// [5] = [] token_program
		metas_[5] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildClosePosition" instruction.
// Close a position in a Whirlpool. Burns the position token in the owner's wallet. //  // ### Authority // - "position_authority" - The authority that owns the position token. //  // #### Special Errors // - `ClosePositionNotEmpty` - The provided position account is not empty.
func BuildClosePosition(
	positionAuthority solanago.PublicKey,
	receiver solanago.PublicKey,
	position solanago.PublicKey,
	positionMint solanago.PublicKey,
	positionTokenAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewClosePositionInstruction(
		positionAuthority,
		receiver,
		position,
		positionMint,
		positionTokenAccount,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
