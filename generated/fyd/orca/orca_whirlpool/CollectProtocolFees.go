// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "collect_protocol_fees" instruction.

// Collect the protocol fees accrued in this Whirlpool
//
// ### Authority
// - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
type CollectProtocolFees struct {
	// Params:
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [2] = [,signer] collect_protocol_fees_authority
	CollectProtocolFeesAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [4] = [writable] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [5] = [writable] token_destination_a
	TokenDestinationA solanago.PublicKey `bin:"-"`
	// [6] = [writable] token_destination_b
	TokenDestinationB solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CollectProtocolFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CollectProtocolFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CollectProtocolFees) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.Whirlpool = accounts[1]
	obj.CollectProtocolFeesAuthority = accounts[2]
	obj.TokenVaultA = accounts[3]
	obj.TokenVaultB = accounts[4]
	obj.TokenDestinationA = accounts[5]
	obj.TokenDestinationB = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CollectProtocolFees) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CollectProtocolFees) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CollectProtocolFees)
}

func (*CollectProtocolFees) NewInstance() programparser.Instruction {
	return new(CollectProtocolFees)
}

func (obj *CollectProtocolFees) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "collect_protocol_fees" instruction.
// Collect the protocol fees accrued in this Whirlpool //  // ### Authority // - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
func NewCollectProtocolFeesInstruction(
	whirlpoolsConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	collectProtocolFeesAuthority solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tokenDestinationA solanago.PublicKey,
	tokenDestinationB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CollectProtocolFees[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [writable] whirlpool
		metas_[1] = solanago.NewAccountMeta(whirlpool, true, false)
		// [2] = [,signer] collect_protocol_fees_authority
		metas_[2] = solanago.NewAccountMeta(collectProtocolFeesAuthority, false, true)
		// [3] = [writable] token_vault_a
		metas_[3] = solanago.NewAccountMeta(tokenVaultA, true, false)
		// [4] = [writable] token_vault_b
		metas_[4] = solanago.NewAccountMeta(tokenVaultB, true, false)
		// [5] = [writable] token_destination_a
		metas_[5] = solanago.NewAccountMeta(tokenDestinationA, true, false)
		// [6] = [writable] token_destination_b
		metas_[6] = solanago.NewAccountMeta(tokenDestinationB, true, false)
		// [7] = [] token_program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCollectProtocolFees" instruction.
// Collect the protocol fees accrued in this Whirlpool //  // ### Authority // - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
func BuildCollectProtocolFees(
	whirlpoolsConfig solanago.PublicKey,
	whirlpool solanago.PublicKey,
	collectProtocolFeesAuthority solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	tokenDestinationA solanago.PublicKey,
	tokenDestinationB solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCollectProtocolFeesInstruction(
		whirlpoolsConfig,
		whirlpool,
		collectProtocolFeesAuthority,
		tokenVaultA,
		tokenVaultB,
		tokenDestinationA,
		tokenDestinationB,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
