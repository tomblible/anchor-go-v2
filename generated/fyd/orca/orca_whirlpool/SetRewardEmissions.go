// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_reward_emissions" instruction.

// Set the reward emissions for a reward in a Whirlpool.
//
// ### Authority
// - "reward_authority" - assigned authority by the reward_super_authority for the specified
// reward-index in this Whirlpool
//
// ### Parameters
// - `reward_index` - The reward index (0 <= index <= NUM_REWARDS) that we'd like to modify.
// - `emissions_per_second_x64` - The amount of rewards emitted in this pool.
//
// #### Special Errors
// - `RewardVaultAmountInsufficient` - The amount of rewards in the reward vault cannot emit
// more than a day of desired emissions.
// - `InvalidTimestamp` - Provided timestamp is not in order with the previous timestamp.
// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
// index in this pool, or exceeds NUM_REWARDS, or
// all reward slots for this pool has been initialized.
type SetRewardEmissions struct {
	// Params:
	RewardIndex           uint8
	EmissionsPerSecondX64 binary.Uint128
	// Accounts:
	// [0] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [1] = [,signer] reward_authority
	RewardAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] reward_vault
	RewardVault solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetRewardEmissions) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `rewardIndexParam`:
	if err = encoder.Encode(obj.RewardIndex); err != nil {
		return fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
	}
	// Serialize `emissionsPerSecondX64Param`:
	if err = encoder.Encode(obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while marshaling emissionsPerSecondX64Param:%w", err)
	}
	return nil
}

func (obj *SetRewardEmissions) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	if err = decoder.Decode(&obj.RewardIndex); err != nil {
		return fmt.Errorf("error while unmarshaling RewardIndex:%w", err)
	}
	// Deserialize `EmissionsPerSecondX64`:
	if err = decoder.Decode(&obj.EmissionsPerSecondX64); err != nil {
		return fmt.Errorf("error while unmarshaling EmissionsPerSecondX64:%w", err)
	}
	return nil
}

func (obj *SetRewardEmissions) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Whirlpool = accounts[0]
	obj.RewardAuthority = accounts[1]
	obj.RewardVault = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetRewardEmissions) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetRewardEmissions) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetRewardEmissions)
}

func (*SetRewardEmissions) NewInstance() programparser.Instruction {
	return new(SetRewardEmissions)
}

func (obj *SetRewardEmissions) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "set_reward_emissions" instruction.
// Set the reward emissions for a reward in a Whirlpool. //  // ### Authority // - "reward_authority" - assigned authority by the reward_super_authority for the specified // reward-index in this Whirlpool //  // ### Parameters // - `reward_index` - The reward index (0 <= index <= NUM_REWARDS) that we'd like to modify. // - `emissions_per_second_x64` - The amount of rewards emitted in this pool. //  // #### Special Errors // - `RewardVaultAmountInsufficient` - The amount of rewards in the reward vault cannot emit // more than a day of desired emissions. // - `InvalidTimestamp` - Provided timestamp is not in order with the previous timestamp. // - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized // index in this pool, or exceeds NUM_REWARDS, or // all reward slots for this pool has been initialized.
func NewSetRewardEmissionsInstruction(
	// Params:
	rewardIndexParam uint8,
	emissionsPerSecondX64Param binary.Uint128,

	// Accounts:
	whirlpool solanago.PublicKey,
	rewardAuthority solanago.PublicKey,
	rewardVault solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetRewardEmissions[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `rewardIndexParam`:
		if err = enc__.Encode(rewardIndexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling rewardIndexParam:%w", err)
		}
		// Serialize `emissionsPerSecondX64Param`:
		if err = enc__.Encode(emissionsPerSecondX64Param); err != nil {
			return nil, fmt.Errorf("error while marshaling emissionsPerSecondX64Param:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] whirlpool
		metas_[0] = solanago.NewAccountMeta(whirlpool, true, false)
		// [1] = [,signer] reward_authority
		metas_[1] = solanago.NewAccountMeta(rewardAuthority, false, true)
		// [2] = [] reward_vault
		metas_[2] = solanago.NewAccountMeta(rewardVault, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetRewardEmissions" instruction.
// Set the reward emissions for a reward in a Whirlpool. //  // ### Authority // - "reward_authority" - assigned authority by the reward_super_authority for the specified // reward-index in this Whirlpool //  // ### Parameters // - `reward_index` - The reward index (0 <= index <= NUM_REWARDS) that we'd like to modify. // - `emissions_per_second_x64` - The amount of rewards emitted in this pool. //  // #### Special Errors // - `RewardVaultAmountInsufficient` - The amount of rewards in the reward vault cannot emit // more than a day of desired emissions. // - `InvalidTimestamp` - Provided timestamp is not in order with the previous timestamp. // - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized // index in this pool, or exceeds NUM_REWARDS, or // all reward slots for this pool has been initialized.
func BuildSetRewardEmissions(
	// Params:
	rewardIndexParam uint8,
	emissionsPerSecondX64Param binary.Uint128,

	// Accounts:
	whirlpool solanago.PublicKey,
	rewardAuthority solanago.PublicKey,
	rewardVault solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetRewardEmissionsInstruction(
		rewardIndexParam,
		emissionsPerSecondX64Param,
		whirlpool,
		rewardAuthority,
		rewardVault,
		remaining__...,
	)
	return instruction_
}
