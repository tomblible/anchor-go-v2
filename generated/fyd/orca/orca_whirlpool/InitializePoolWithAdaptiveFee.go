// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_pool_with_adaptive_fee" instruction.

// Initializes a Whirlpool account and Oracle account with adaptive fee.
//
// ### Parameters
// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
// - `trade_enable_timestamp` - The timestamp when trading is enabled for this pool (within 72 hours)
//
// #### Special Errors
// `InvalidTokenMintOrder` - The order of mints have to be ordered by
// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
// `InvalidTradeEnableTimestamp` - provided trade_enable_timestamp is not within 72 hours or the adaptive fee-tier is permission-less
// `UnsupportedTokenMint` - The provided token mint is not supported by the program (e.g. it has risky token extensions)
type InitializePoolWithAdaptiveFee struct {
	// Params:
	InitialSqrtPrice     binary.Uint128
	TradeEnableTimestamp *uint64 `bin:"optional"`
	// Accounts:
	// [0] = [] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [] token_mint_a
	TokenMintA solanago.PublicKey `bin:"-"`
	// [2] = [] token_mint_b
	TokenMintB solanago.PublicKey `bin:"-"`
	// [3] = [] token_badge_a
	TokenBadgeA solanago.PublicKey `bin:"-"`
	// [4] = [] token_badge_b
	TokenBadgeB solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] funder
	Funder solanago.PublicKey `bin:"-"`
	// [6] = [,signer] initialize_pool_authority
	InitializePoolAuthority solanago.PublicKey `bin:"-"`
	// [7] = [writable] whirlpool
	Whirlpool solanago.PublicKey `bin:"-"`
	// [8] = [writable] oracle
	Oracle solanago.PublicKey `bin:"-"`
	// [9] = [writable,signer] token_vault_a
	TokenVaultA solanago.PublicKey `bin:"-"`
	// [10] = [writable,signer] token_vault_b
	TokenVaultB solanago.PublicKey `bin:"-"`
	// [11] = [] adaptive_fee_tier
	AdaptiveFeeTier solanago.PublicKey `bin:"-"`
	// [12] = [] token_program_a
	TokenProgramA solanago.PublicKey `bin:"-"`
	// [13] = [] token_program_b
	TokenProgramB solanago.PublicKey `bin:"-"`
	// [14] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [15] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializePoolWithAdaptiveFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `initialSqrtPriceParam`:
	if err = encoder.Encode(obj.InitialSqrtPrice); err != nil {
		return fmt.Errorf("error while marshaling initialSqrtPriceParam:%w", err)
	}
	// Serialize `tradeEnableTimestampParam` (optional):
	{
		if obj.TradeEnableTimestamp == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling tradeEnableTimestampParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling tradeEnableTimestampParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.TradeEnableTimestamp); err != nil {
				return fmt.Errorf("error while marshaling tradeEnableTimestampParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *InitializePoolWithAdaptiveFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `InitialSqrtPrice`:
	if err = decoder.Decode(&obj.InitialSqrtPrice); err != nil {
		return fmt.Errorf("error while unmarshaling InitialSqrtPrice:%w", err)
	}
	// Deserialize `TradeEnableTimestamp` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling TradeEnableTimestamp:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.TradeEnableTimestamp); err != nil {
				return fmt.Errorf("error while unmarshaling TradeEnableTimestamp:%w", err)
			}
		}
	}
	return nil
}

func (obj *InitializePoolWithAdaptiveFee) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.TokenMintA = accounts[1]
	obj.TokenMintB = accounts[2]
	obj.TokenBadgeA = accounts[3]
	obj.TokenBadgeB = accounts[4]
	obj.Funder = accounts[5]
	obj.InitializePoolAuthority = accounts[6]
	obj.Whirlpool = accounts[7]
	obj.Oracle = accounts[8]
	obj.TokenVaultA = accounts[9]
	obj.TokenVaultB = accounts[10]
	obj.AdaptiveFeeTier = accounts[11]
	obj.TokenProgramA = accounts[12]
	obj.TokenProgramB = accounts[13]
	obj.SystemProgram = accounts[14]
	obj.Rent = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializePoolWithAdaptiveFee) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializePoolWithAdaptiveFee) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializePoolWithAdaptiveFee)
}

func (*InitializePoolWithAdaptiveFee) NewInstance() programparser.Instruction {
	return new(InitializePoolWithAdaptiveFee)
}

// Builds a "initialize_pool_with_adaptive_fee" instruction.
// Initializes a Whirlpool account and Oracle account with adaptive fee. //  // ### Parameters // - `initial_sqrt_price` - The desired initial sqrt-price for this pool // - `trade_enable_timestamp` - The timestamp when trading is enabled for this pool (within 72 hours) //  // #### Special Errors // `InvalidTokenMintOrder` - The order of mints have to be ordered by // `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64 // `InvalidTradeEnableTimestamp` - provided trade_enable_timestamp is not within 72 hours or the adaptive fee-tier is permission-less // `UnsupportedTokenMint` - The provided token mint is not supported by the program (e.g. it has risky token extensions) //
func NewInitializePoolWithAdaptiveFeeInstruction(
	// Params:
	initialSqrtPriceParam binary.Uint128,
	tradeEnableTimestampParam *uint64,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	tokenBadgeA solanago.PublicKey,
	tokenBadgeB solanago.PublicKey,
	funder solanago.PublicKey,
	initializePoolAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	oracle solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	tokenProgramA solanago.PublicKey,
	tokenProgramB solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializePoolWithAdaptiveFee[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `initialSqrtPriceParam`:
		if err = enc__.Encode(initialSqrtPriceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initialSqrtPriceParam:%w", err)
		}
		// Serialize `tradeEnableTimestampParam` (optional):
		{
			if tradeEnableTimestampParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling tradeEnableTimestampParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling tradeEnableTimestampParam optionality: %w", err)
				}
				if err = enc__.Encode(tradeEnableTimestampParam); err != nil {
					return nil, fmt.Errorf("error while marshaling tradeEnableTimestampParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, false, false)
		// [1] = [] token_mint_a
		metas_[1] = solanago.NewAccountMeta(tokenMintA, false, false)
		// [2] = [] token_mint_b
		metas_[2] = solanago.NewAccountMeta(tokenMintB, false, false)
		// [3] = [] token_badge_a
		metas_[3] = solanago.NewAccountMeta(tokenBadgeA, false, false)
		// [4] = [] token_badge_b
		metas_[4] = solanago.NewAccountMeta(tokenBadgeB, false, false)
		// [5] = [writable,signer] funder
		metas_[5] = solanago.NewAccountMeta(funder, true, true)
		// [6] = [,signer] initialize_pool_authority
		metas_[6] = solanago.NewAccountMeta(initializePoolAuthority, false, true)
		// [7] = [writable] whirlpool
		metas_[7] = solanago.NewAccountMeta(whirlpool, true, false)
		// [8] = [writable] oracle
		metas_[8] = solanago.NewAccountMeta(oracle, true, false)
		// [9] = [writable,signer] token_vault_a
		metas_[9] = solanago.NewAccountMeta(tokenVaultA, true, true)
		// [10] = [writable,signer] token_vault_b
		metas_[10] = solanago.NewAccountMeta(tokenVaultB, true, true)
		// [11] = [] adaptive_fee_tier
		metas_[11] = solanago.NewAccountMeta(adaptiveFeeTier, false, false)
		// [12] = [] token_program_a
		metas_[12] = solanago.NewAccountMeta(tokenProgramA, false, false)
		// [13] = [] token_program_b
		metas_[13] = solanago.NewAccountMeta(tokenProgramB, false, false)
		// [14] = [] system_program
		metas_[14] = solanago.NewAccountMeta(systemProgram, false, false)
		// [15] = [] rent
		metas_[15] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializePoolWithAdaptiveFee" instruction.
// Initializes a Whirlpool account and Oracle account with adaptive fee. //  // ### Parameters // - `initial_sqrt_price` - The desired initial sqrt-price for this pool // - `trade_enable_timestamp` - The timestamp when trading is enabled for this pool (within 72 hours) //  // #### Special Errors // `InvalidTokenMintOrder` - The order of mints have to be ordered by // `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64 // `InvalidTradeEnableTimestamp` - provided trade_enable_timestamp is not within 72 hours or the adaptive fee-tier is permission-less // `UnsupportedTokenMint` - The provided token mint is not supported by the program (e.g. it has risky token extensions) //
func BuildInitializePoolWithAdaptiveFee(
	// Params:
	initialSqrtPriceParam binary.Uint128,
	tradeEnableTimestampParam *uint64,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	tokenMintA solanago.PublicKey,
	tokenMintB solanago.PublicKey,
	tokenBadgeA solanago.PublicKey,
	tokenBadgeB solanago.PublicKey,
	funder solanago.PublicKey,
	initializePoolAuthority solanago.PublicKey,
	whirlpool solanago.PublicKey,
	oracle solanago.PublicKey,
	tokenVaultA solanago.PublicKey,
	tokenVaultB solanago.PublicKey,
	adaptiveFeeTier solanago.PublicKey,
	tokenProgramA solanago.PublicKey,
	tokenProgramB solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializePoolWithAdaptiveFeeInstruction(
		initialSqrtPriceParam,
		tradeEnableTimestampParam,
		whirlpoolsConfig,
		tokenMintA,
		tokenMintB,
		tokenBadgeA,
		tokenBadgeB,
		funder,
		initializePoolAuthority,
		whirlpool,
		oracle,
		tokenVaultA,
		tokenVaultB,
		adaptiveFeeTier,
		tokenProgramA,
		tokenProgramB,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
