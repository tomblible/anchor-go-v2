// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_default_protocol_fee_rate" instruction.

// Sets the default protocol fee rate for a WhirlpoolConfig
// Protocol fee rate is represented as a basis point.
// Only the current fee authority has permission to invoke this instruction.
//
// ### Authority
// - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig
//
// ### Parameters
// - `default_protocol_fee_rate` - Rate that is referenced during the initialization of a Whirlpool using this config.
//
// #### Special Errors
// - `ProtocolFeeRateMaxExceeded` - If the provided default_protocol_fee_rate exceeds MAX_PROTOCOL_FEE_RATE.
type SetDefaultProtocolFeeRate struct {
	// Params:
	DefaultProtocolFeeRate uint16
	// Accounts:
	// [0] = [writable] whirlpools_config
	WhirlpoolsConfig solanago.PublicKey `bin:"-"`
	// [1] = [,signer] fee_authority
	FeeAuthority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetDefaultProtocolFeeRate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `defaultProtocolFeeRateParam`:
	if err = encoder.Encode(obj.DefaultProtocolFeeRate); err != nil {
		return fmt.Errorf("error while marshaling defaultProtocolFeeRateParam:%w", err)
	}
	return nil
}

func (obj *SetDefaultProtocolFeeRate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `DefaultProtocolFeeRate`:
	if err = decoder.Decode(&obj.DefaultProtocolFeeRate); err != nil {
		return fmt.Errorf("error while unmarshaling DefaultProtocolFeeRate:%w", err)
	}
	return nil
}

func (obj *SetDefaultProtocolFeeRate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.WhirlpoolsConfig = accounts[0]
	obj.FeeAuthority = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetDefaultProtocolFeeRate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetDefaultProtocolFeeRate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetDefaultProtocolFeeRate)
}

func (*SetDefaultProtocolFeeRate) NewInstance() programparser.Instruction {
	return new(SetDefaultProtocolFeeRate)
}

// Builds a "set_default_protocol_fee_rate" instruction.
// Sets the default protocol fee rate for a WhirlpoolConfig // Protocol fee rate is represented as a basis point. // Only the current fee authority has permission to invoke this instruction. //  // ### Authority // - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig //  // ### Parameters // - `default_protocol_fee_rate` - Rate that is referenced during the initialization of a Whirlpool using this config. //  // #### Special Errors // - `ProtocolFeeRateMaxExceeded` - If the provided default_protocol_fee_rate exceeds MAX_PROTOCOL_FEE_RATE.
func NewSetDefaultProtocolFeeRateInstruction(
	// Params:
	defaultProtocolFeeRateParam uint16,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetDefaultProtocolFeeRate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `defaultProtocolFeeRateParam`:
		if err = enc__.Encode(defaultProtocolFeeRateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling defaultProtocolFeeRateParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] whirlpools_config
		metas_[0] = solanago.NewAccountMeta(whirlpoolsConfig, true, false)
		// [1] = [,signer] fee_authority
		metas_[1] = solanago.NewAccountMeta(feeAuthority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetDefaultProtocolFeeRate" instruction.
// Sets the default protocol fee rate for a WhirlpoolConfig // Protocol fee rate is represented as a basis point. // Only the current fee authority has permission to invoke this instruction. //  // ### Authority // - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig //  // ### Parameters // - `default_protocol_fee_rate` - Rate that is referenced during the initialization of a Whirlpool using this config. //  // #### Special Errors // - `ProtocolFeeRateMaxExceeded` - If the provided default_protocol_fee_rate exceeds MAX_PROTOCOL_FEE_RATE.
func BuildSetDefaultProtocolFeeRate(
	// Params:
	defaultProtocolFeeRateParam uint16,

	// Accounts:
	whirlpoolsConfig solanago.PublicKey,
	feeAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetDefaultProtocolFeeRateInstruction(
		defaultProtocolFeeRateParam,
		whirlpoolsConfig,
		feeAuthority,
		remaining__...,
	)
	return instruction_
}
