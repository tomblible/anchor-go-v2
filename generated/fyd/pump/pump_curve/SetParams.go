// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_params" instruction.

// Sets the global state parameters.
type SetParams struct {
	// Params:
	InitialVirtualTokenReserves uint64
	InitialVirtualSolReserves   uint64
	InitialRealTokenReserves    uint64
	TokenTotalSupply            uint64
	FeeBasisPoints              uint64
	WithdrawAuthority           solanago.PublicKey
	EnableMigrate               bool
	PoolMigrationFee            uint64
	CreatorFeeBasisPoints       uint64
	SetCreatorAuthority         solanago.PublicKey
	AdminSetCreatorAuthority    solanago.PublicKey
	// Accounts:
	// [0] = [writable] global
	Global solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [2] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `initialVirtualTokenReservesParam`:
	if err = encoder.Encode(obj.InitialVirtualTokenReserves); err != nil {
		return fmt.Errorf("error while marshaling initialVirtualTokenReservesParam:%w", err)
	}
	// Serialize `initialVirtualSolReservesParam`:
	if err = encoder.Encode(obj.InitialVirtualSolReserves); err != nil {
		return fmt.Errorf("error while marshaling initialVirtualSolReservesParam:%w", err)
	}
	// Serialize `initialRealTokenReservesParam`:
	if err = encoder.Encode(obj.InitialRealTokenReserves); err != nil {
		return fmt.Errorf("error while marshaling initialRealTokenReservesParam:%w", err)
	}
	// Serialize `tokenTotalSupplyParam`:
	if err = encoder.Encode(obj.TokenTotalSupply); err != nil {
		return fmt.Errorf("error while marshaling tokenTotalSupplyParam:%w", err)
	}
	// Serialize `feeBasisPointsParam`:
	if err = encoder.Encode(obj.FeeBasisPoints); err != nil {
		return fmt.Errorf("error while marshaling feeBasisPointsParam:%w", err)
	}
	// Serialize `withdrawAuthorityParam`:
	if err = encoder.Encode(obj.WithdrawAuthority); err != nil {
		return fmt.Errorf("error while marshaling withdrawAuthorityParam:%w", err)
	}
	// Serialize `enableMigrateParam`:
	if err = encoder.Encode(obj.EnableMigrate); err != nil {
		return fmt.Errorf("error while marshaling enableMigrateParam:%w", err)
	}
	// Serialize `poolMigrationFeeParam`:
	if err = encoder.Encode(obj.PoolMigrationFee); err != nil {
		return fmt.Errorf("error while marshaling poolMigrationFeeParam:%w", err)
	}
	// Serialize `creatorFeeBasisPointsParam`:
	if err = encoder.Encode(obj.CreatorFeeBasisPoints); err != nil {
		return fmt.Errorf("error while marshaling creatorFeeBasisPointsParam:%w", err)
	}
	// Serialize `setCreatorAuthorityParam`:
	if err = encoder.Encode(obj.SetCreatorAuthority); err != nil {
		return fmt.Errorf("error while marshaling setCreatorAuthorityParam:%w", err)
	}
	// Serialize `adminSetCreatorAuthorityParam`:
	if err = encoder.Encode(obj.AdminSetCreatorAuthority); err != nil {
		return fmt.Errorf("error while marshaling adminSetCreatorAuthorityParam:%w", err)
	}
	return nil
}

func (obj *SetParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `InitialVirtualTokenReserves`:
	if err = decoder.Decode(&obj.InitialVirtualTokenReserves); err != nil {
		return fmt.Errorf("error while unmarshaling InitialVirtualTokenReserves:%w", err)
	}
	// Deserialize `InitialVirtualSolReserves`:
	if err = decoder.Decode(&obj.InitialVirtualSolReserves); err != nil {
		return fmt.Errorf("error while unmarshaling InitialVirtualSolReserves:%w", err)
	}
	// Deserialize `InitialRealTokenReserves`:
	if err = decoder.Decode(&obj.InitialRealTokenReserves); err != nil {
		return fmt.Errorf("error while unmarshaling InitialRealTokenReserves:%w", err)
	}
	// Deserialize `TokenTotalSupply`:
	if err = decoder.Decode(&obj.TokenTotalSupply); err != nil {
		return fmt.Errorf("error while unmarshaling TokenTotalSupply:%w", err)
	}
	// Deserialize `FeeBasisPoints`:
	if err = decoder.Decode(&obj.FeeBasisPoints); err != nil {
		return fmt.Errorf("error while unmarshaling FeeBasisPoints:%w", err)
	}
	// Deserialize `WithdrawAuthority`:
	if err = decoder.Decode(&obj.WithdrawAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawAuthority:%w", err)
	}
	// Deserialize `EnableMigrate`:
	if err = decoder.Decode(&obj.EnableMigrate); err != nil {
		return fmt.Errorf("error while unmarshaling EnableMigrate:%w", err)
	}
	// Deserialize `PoolMigrationFee`:
	if err = decoder.Decode(&obj.PoolMigrationFee); err != nil {
		return fmt.Errorf("error while unmarshaling PoolMigrationFee:%w", err)
	}
	// Deserialize `CreatorFeeBasisPoints`:
	if err = decoder.Decode(&obj.CreatorFeeBasisPoints); err != nil {
		return fmt.Errorf("error while unmarshaling CreatorFeeBasisPoints:%w", err)
	}
	// Deserialize `SetCreatorAuthority`:
	if err = decoder.Decode(&obj.SetCreatorAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling SetCreatorAuthority:%w", err)
	}
	// Deserialize `AdminSetCreatorAuthority`:
	if err = decoder.Decode(&obj.AdminSetCreatorAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling AdminSetCreatorAuthority:%w", err)
	}
	return nil
}

func (obj *SetParams) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Global = accounts[0]
	obj.Authority = accounts[1]
	obj.EventAuthority = accounts[2]
	obj.Program = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetParams) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetParams) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetParams)
}

func (*SetParams) NewInstance() programparser.Instruction {
	return new(SetParams)
}

func (obj *SetParams) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "set_params" instruction.
// Sets the global state parameters.
func NewSetParamsInstruction(
	// Params:
	initialVirtualTokenReservesParam uint64,
	initialVirtualSolReservesParam uint64,
	initialRealTokenReservesParam uint64,
	tokenTotalSupplyParam uint64,
	feeBasisPointsParam uint64,
	withdrawAuthorityParam solanago.PublicKey,
	enableMigrateParam bool,
	poolMigrationFeeParam uint64,
	creatorFeeBasisPointsParam uint64,
	setCreatorAuthorityParam solanago.PublicKey,
	adminSetCreatorAuthorityParam solanago.PublicKey,

	// Accounts:
	global solanago.PublicKey,
	authority solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetParams[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `initialVirtualTokenReservesParam`:
		if err = enc__.Encode(initialVirtualTokenReservesParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initialVirtualTokenReservesParam:%w", err)
		}
		// Serialize `initialVirtualSolReservesParam`:
		if err = enc__.Encode(initialVirtualSolReservesParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initialVirtualSolReservesParam:%w", err)
		}
		// Serialize `initialRealTokenReservesParam`:
		if err = enc__.Encode(initialRealTokenReservesParam); err != nil {
			return nil, fmt.Errorf("error while marshaling initialRealTokenReservesParam:%w", err)
		}
		// Serialize `tokenTotalSupplyParam`:
		if err = enc__.Encode(tokenTotalSupplyParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenTotalSupplyParam:%w", err)
		}
		// Serialize `feeBasisPointsParam`:
		if err = enc__.Encode(feeBasisPointsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling feeBasisPointsParam:%w", err)
		}
		// Serialize `withdrawAuthorityParam`:
		if err = enc__.Encode(withdrawAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling withdrawAuthorityParam:%w", err)
		}
		// Serialize `enableMigrateParam`:
		if err = enc__.Encode(enableMigrateParam); err != nil {
			return nil, fmt.Errorf("error while marshaling enableMigrateParam:%w", err)
		}
		// Serialize `poolMigrationFeeParam`:
		if err = enc__.Encode(poolMigrationFeeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling poolMigrationFeeParam:%w", err)
		}
		// Serialize `creatorFeeBasisPointsParam`:
		if err = enc__.Encode(creatorFeeBasisPointsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling creatorFeeBasisPointsParam:%w", err)
		}
		// Serialize `setCreatorAuthorityParam`:
		if err = enc__.Encode(setCreatorAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling setCreatorAuthorityParam:%w", err)
		}
		// Serialize `adminSetCreatorAuthorityParam`:
		if err = enc__.Encode(adminSetCreatorAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling adminSetCreatorAuthorityParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] global
		metas_[0] = solanago.NewAccountMeta(global, true, false)
		// [1] = [writable,signer] authority
		metas_[1] = solanago.NewAccountMeta(authority, true, true)
		// [2] = [] event_authority
		metas_[2] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [3] = [] program
		metas_[3] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetParams" instruction.
// Sets the global state parameters.
func BuildSetParams(
	// Params:
	initialVirtualTokenReservesParam uint64,
	initialVirtualSolReservesParam uint64,
	initialRealTokenReservesParam uint64,
	tokenTotalSupplyParam uint64,
	feeBasisPointsParam uint64,
	withdrawAuthorityParam solanago.PublicKey,
	enableMigrateParam bool,
	poolMigrationFeeParam uint64,
	creatorFeeBasisPointsParam uint64,
	setCreatorAuthorityParam solanago.PublicKey,
	adminSetCreatorAuthorityParam solanago.PublicKey,

	// Accounts:
	global solanago.PublicKey,
	authority solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetParamsInstruction(
		initialVirtualTokenReservesParam,
		initialVirtualSolReservesParam,
		initialRealTokenReservesParam,
		tokenTotalSupplyParam,
		feeBasisPointsParam,
		withdrawAuthorityParam,
		enableMigrateParam,
		poolMigrationFeeParam,
		creatorFeeBasisPointsParam,
		setCreatorAuthorityParam,
		adminSetCreatorAuthorityParam,
		global,
		authority,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
