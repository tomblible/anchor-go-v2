// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create" instruction.

// Creates a new coin and bonding curve.
type Create struct {
	// Params:
	Name    string
	Symbol  string
	Uri     string
	Creator solanago.PublicKey
	// Accounts:
	// [0] = [writable,signer] mint
	Mint solanago.PublicKey `bin:"-"`
	// [1] = [] mint_authority
	MintAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable] bonding_curve
	BondingCurve solanago.PublicKey `bin:"-"`
	// [3] = [writable] associated_bonding_curve
	AssociatedBondingCurve solanago.PublicKey `bin:"-"`
	// [4] = [] global
	Global solanago.PublicKey `bin:"-"`
	// [5] = [] mpl_token_metadata[metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s]
	MplTokenMetadata solanago.PublicKey `bin:"-"`
	// [6] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [7] = [writable,signer] user
	User solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// [12] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [13] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Create) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `nameParam`:
	if err = encoder.Encode(obj.Name); err != nil {
		return fmt.Errorf("error while marshaling nameParam:%w", err)
	}
	// Serialize `symbolParam`:
	if err = encoder.Encode(obj.Symbol); err != nil {
		return fmt.Errorf("error while marshaling symbolParam:%w", err)
	}
	// Serialize `uriParam`:
	if err = encoder.Encode(obj.Uri); err != nil {
		return fmt.Errorf("error while marshaling uriParam:%w", err)
	}
	// Serialize `creatorParam`:
	if err = encoder.Encode(obj.Creator); err != nil {
		return fmt.Errorf("error while marshaling creatorParam:%w", err)
	}
	return nil
}

func (obj *Create) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	if err = decoder.Decode(&obj.Name); err != nil {
		return fmt.Errorf("error while unmarshaling Name:%w", err)
	}
	// Deserialize `Symbol`:
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return fmt.Errorf("error while unmarshaling Symbol:%w", err)
	}
	// Deserialize `Uri`:
	if err = decoder.Decode(&obj.Uri); err != nil {
		return fmt.Errorf("error while unmarshaling Uri:%w", err)
	}
	// Deserialize `Creator`:
	if err = decoder.Decode(&obj.Creator); err != nil {
		return fmt.Errorf("error while unmarshaling Creator:%w", err)
	}
	return nil
}

func (obj *Create) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.Mint = accounts[0]
	obj.MintAuthority = accounts[1]
	obj.BondingCurve = accounts[2]
	obj.AssociatedBondingCurve = accounts[3]
	obj.Global = accounts[4]
	obj.MplTokenMetadata = accounts[5]
	obj.Metadata = accounts[6]
	obj.User = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.TokenProgram = accounts[9]
	obj.AssociatedTokenProgram = accounts[10]
	obj.Rent = accounts[11]
	obj.EventAuthority = accounts[12]
	obj.Program = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Create) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Create) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Create)
}

func (*Create) NewInstance() programparser.Instruction {
	return new(Create)
}

// Builds a "create" instruction.
// Creates a new coin and bonding curve.
func NewCreateInstruction(
	// Params:
	nameParam string,
	symbolParam string,
	uriParam string,
	creatorParam solanago.PublicKey,

	// Accounts:
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	global solanago.PublicKey,
	metadata solanago.PublicKey,
	user solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Create[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `nameParam`:
		if err = enc__.Encode(nameParam); err != nil {
			return nil, fmt.Errorf("error while marshaling nameParam:%w", err)
		}
		// Serialize `symbolParam`:
		if err = enc__.Encode(symbolParam); err != nil {
			return nil, fmt.Errorf("error while marshaling symbolParam:%w", err)
		}
		// Serialize `uriParam`:
		if err = enc__.Encode(uriParam); err != nil {
			return nil, fmt.Errorf("error while marshaling uriParam:%w", err)
		}
		// Serialize `creatorParam`:
		if err = enc__.Encode(creatorParam); err != nil {
			return nil, fmt.Errorf("error while marshaling creatorParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] mint
		metas_[0] = solanago.NewAccountMeta(mint, true, true)
		// [1] = [] mint_authority
		metas_[1] = solanago.NewAccountMeta(mintAuthority, false, false)
		// [2] = [writable] bonding_curve
		metas_[2] = solanago.NewAccountMeta(bondingCurve, true, false)
		// [3] = [writable] associated_bonding_curve
		metas_[3] = solanago.NewAccountMeta(associatedBondingCurve, true, false)
		// [4] = [] global
		metas_[4] = solanago.NewAccountMeta(global, false, false)
		// [5] = [] mpl_token_metadata[metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s]
		metas_[5] = solanago.NewAccountMeta(MplTokenMetadata, false, false)
		// [6] = [writable] metadata
		metas_[6] = solanago.NewAccountMeta(metadata, true, false)
		// [7] = [writable,signer] user
		metas_[7] = solanago.NewAccountMeta(user, true, true)
		// [8] = [] system_program
		metas_[8] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[9] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [10] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		metas_[10] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [11] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[11] = solanago.NewAccountMeta(Rent, false, false)
		// [12] = [] event_authority
		metas_[12] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [13] = [] program
		metas_[13] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreate" instruction.
// Creates a new coin and bonding curve.
func BuildCreate(
	// Params:
	nameParam string,
	symbolParam string,
	uriParam string,
	creatorParam solanago.PublicKey,

	// Accounts:
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	global solanago.PublicKey,
	metadata solanago.PublicKey,
	user solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateInstruction(
		nameParam,
		symbolParam,
		uriParam,
		creatorParam,
		mint,
		mintAuthority,
		bondingCurve,
		associatedBondingCurve,
		global,
		metadata,
		user,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
