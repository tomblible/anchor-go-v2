// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "sell" instruction.

// Sells tokens into a bonding curve.
type Sell struct {
	// Params:
	Amount       uint64
	MinSolOutput uint64
	// Accounts:
	// [0] = [] global
	Global solanago.PublicKey `bin:"-"`
	// [1] = [writable] fee_recipient
	FeeRecipient solanago.PublicKey `bin:"-"`
	// [2] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [writable] bonding_curve
	BondingCurve solanago.PublicKey `bin:"-"`
	// [4] = [writable] associated_bonding_curve
	AssociatedBondingCurve solanago.PublicKey `bin:"-"`
	// [5] = [writable] associated_user
	AssociatedUser solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] user
	User solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [writable] creator_vault
	CreatorVault solanago.PublicKey `bin:"-"`
	// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [11] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Sell) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	// Serialize `minSolOutputParam`:
	if err = encoder.Encode(obj.MinSolOutput); err != nil {
		return fmt.Errorf("error while marshaling minSolOutputParam:%w", err)
	}
	return nil
}

func (obj *Sell) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	// Deserialize `MinSolOutput`:
	if err = decoder.Decode(&obj.MinSolOutput); err != nil {
		return fmt.Errorf("error while unmarshaling MinSolOutput:%w", err)
	}
	return nil
}

func (obj *Sell) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.Global = accounts[0]
	obj.FeeRecipient = accounts[1]
	obj.Mint = accounts[2]
	obj.BondingCurve = accounts[3]
	obj.AssociatedBondingCurve = accounts[4]
	obj.AssociatedUser = accounts[5]
	obj.User = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.CreatorVault = accounts[8]
	obj.TokenProgram = accounts[9]
	obj.EventAuthority = accounts[10]
	obj.Program = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Sell) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Sell) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Sell)
}

func (*Sell) NewInstance() programparser.Instruction {
	return new(Sell)
}

// Builds a "sell" instruction.
// Sells tokens into a bonding curve.
func NewSellInstruction(
	// Params:
	amountParam uint64,
	minSolOutputParam uint64,

	// Accounts:
	global solanago.PublicKey,
	feeRecipient solanago.PublicKey,
	mint solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	associatedUser solanago.PublicKey,
	user solanago.PublicKey,
	creatorVault solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Sell[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
		// Serialize `minSolOutputParam`:
		if err = enc__.Encode(minSolOutputParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minSolOutputParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] global
		metas_[0] = solanago.NewAccountMeta(global, false, false)
		// [1] = [writable] fee_recipient
		metas_[1] = solanago.NewAccountMeta(feeRecipient, true, false)
		// [2] = [] mint
		metas_[2] = solanago.NewAccountMeta(mint, false, false)
		// [3] = [writable] bonding_curve
		metas_[3] = solanago.NewAccountMeta(bondingCurve, true, false)
		// [4] = [writable] associated_bonding_curve
		metas_[4] = solanago.NewAccountMeta(associatedBondingCurve, true, false)
		// [5] = [writable] associated_user
		metas_[5] = solanago.NewAccountMeta(associatedUser, true, false)
		// [6] = [writable,signer] user
		metas_[6] = solanago.NewAccountMeta(user, true, true)
		// [7] = [] system_program
		metas_[7] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [8] = [writable] creator_vault
		metas_[8] = solanago.NewAccountMeta(creatorVault, true, false)
		// [9] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[9] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [10] = [] event_authority
		metas_[10] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [11] = [] program
		metas_[11] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSell" instruction.
// Sells tokens into a bonding curve.
func BuildSell(
	// Params:
	amountParam uint64,
	minSolOutputParam uint64,

	// Accounts:
	global solanago.PublicKey,
	feeRecipient solanago.PublicKey,
	mint solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	associatedUser solanago.PublicKey,
	user solanago.PublicKey,
	creatorVault solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSellInstruction(
		amountParam,
		minSolOutputParam,
		global,
		feeRecipient,
		mint,
		bondingCurve,
		associatedBondingCurve,
		associatedUser,
		user,
		creatorVault,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
