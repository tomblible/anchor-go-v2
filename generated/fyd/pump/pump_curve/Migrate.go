// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate" instruction.

// Migrates liquidity to pump_amm if the bonding curve is complete
type Migrate struct {
	// Params:
	// Accounts:
	// [0] = [] global
	Global solanago.PublicKey `bin:"-"`
	// [1] = [writable] withdraw_authority
	WithdrawAuthority solanago.PublicKey `bin:"-"`
	// [2] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [writable] bonding_curve
	BondingCurve solanago.PublicKey `bin:"-"`
	// [4] = [writable] associated_bonding_curve
	AssociatedBondingCurve solanago.PublicKey `bin:"-"`
	// [5] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] pump_amm[pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA]
	PumpAmm solanago.PublicKey `bin:"-"`
	// [9] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [10] = [writable] pool_authority
	PoolAuthority solanago.PublicKey `bin:"-"`
	// [11] = [writable] pool_authority_mint_account
	PoolAuthorityMintAccount solanago.PublicKey `bin:"-"`
	// [12] = [writable] pool_authority_wsol_account
	PoolAuthorityWsolAccount solanago.PublicKey `bin:"-"`
	// [13] = [] amm_global_config
	AmmGlobalConfig solanago.PublicKey `bin:"-"`
	// [14] = [] wsol_mint[So11111111111111111111111111111111111111112]
	WsolMint solanago.PublicKey `bin:"-"`
	// [15] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [16] = [writable] user_pool_token_account
	UserPoolTokenAccount solanago.PublicKey `bin:"-"`
	// [17] = [writable] pool_base_token_account
	PoolBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [18] = [writable] pool_quote_token_account
	PoolQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [19] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	Token2022Program solanago.PublicKey `bin:"-"`
	// [20] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [21] = [] pump_amm_event_authority
	PumpAmmEventAuthority solanago.PublicKey `bin:"-"`
	// [22] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [23] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Migrate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Migrate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *Migrate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 24 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 24, len(accounts))
	}
	obj.Global = accounts[0]
	obj.WithdrawAuthority = accounts[1]
	obj.Mint = accounts[2]
	obj.BondingCurve = accounts[3]
	obj.AssociatedBondingCurve = accounts[4]
	obj.User = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.PumpAmm = accounts[8]
	obj.Pool = accounts[9]
	obj.PoolAuthority = accounts[10]
	obj.PoolAuthorityMintAccount = accounts[11]
	obj.PoolAuthorityWsolAccount = accounts[12]
	obj.AmmGlobalConfig = accounts[13]
	obj.WsolMint = accounts[14]
	obj.LpMint = accounts[15]
	obj.UserPoolTokenAccount = accounts[16]
	obj.PoolBaseTokenAccount = accounts[17]
	obj.PoolQuoteTokenAccount = accounts[18]
	obj.Token2022Program = accounts[19]
	obj.AssociatedTokenProgram = accounts[20]
	obj.PumpAmmEventAuthority = accounts[21]
	obj.EventAuthority = accounts[22]
	obj.Program = accounts[23]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Migrate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Migrate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Migrate)
}

func (*Migrate) NewInstance() programparser.Instruction {
	return new(Migrate)
}

func (obj *Migrate) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 24 {
		return nil
	}
	return obj.PublicKeySlice[24:]
}

// Builds a "migrate" instruction.
// Migrates liquidity to pump_amm if the bonding curve is complete
func NewMigrateInstruction(
	global solanago.PublicKey,
	withdrawAuthority solanago.PublicKey,
	mint solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	user solanago.PublicKey,
	pool solanago.PublicKey,
	poolAuthority solanago.PublicKey,
	poolAuthorityMintAccount solanago.PublicKey,
	poolAuthorityWsolAccount solanago.PublicKey,
	ammGlobalConfig solanago.PublicKey,
	lpMint solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	pumpAmmEventAuthority solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 24, 24+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Migrate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] global
		metas_[0] = solanago.NewAccountMeta(global, false, false)
		// [1] = [writable] withdraw_authority
		metas_[1] = solanago.NewAccountMeta(withdrawAuthority, true, false)
		// [2] = [] mint
		metas_[2] = solanago.NewAccountMeta(mint, false, false)
		// [3] = [writable] bonding_curve
		metas_[3] = solanago.NewAccountMeta(bondingCurve, true, false)
		// [4] = [writable] associated_bonding_curve
		metas_[4] = solanago.NewAccountMeta(associatedBondingCurve, true, false)
		// [5] = [,signer] user
		metas_[5] = solanago.NewAccountMeta(user, false, true)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[7] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [8] = [] pump_amm[pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA]
		metas_[8] = solanago.NewAccountMeta(PumpAmm, false, false)
		// [9] = [writable] pool
		metas_[9] = solanago.NewAccountMeta(pool, true, false)
		// [10] = [writable] pool_authority
		metas_[10] = solanago.NewAccountMeta(poolAuthority, true, false)
		// [11] = [writable] pool_authority_mint_account
		metas_[11] = solanago.NewAccountMeta(poolAuthorityMintAccount, true, false)
		// [12] = [writable] pool_authority_wsol_account
		metas_[12] = solanago.NewAccountMeta(poolAuthorityWsolAccount, true, false)
		// [13] = [] amm_global_config
		metas_[13] = solanago.NewAccountMeta(ammGlobalConfig, false, false)
		// [14] = [] wsol_mint[So11111111111111111111111111111111111111112]
		metas_[14] = solanago.NewAccountMeta(WsolMint, false, false)
		// [15] = [writable] lp_mint
		metas_[15] = solanago.NewAccountMeta(lpMint, true, false)
		// [16] = [writable] user_pool_token_account
		metas_[16] = solanago.NewAccountMeta(userPoolTokenAccount, true, false)
		// [17] = [writable] pool_base_token_account
		metas_[17] = solanago.NewAccountMeta(poolBaseTokenAccount, true, false)
		// [18] = [writable] pool_quote_token_account
		metas_[18] = solanago.NewAccountMeta(poolQuoteTokenAccount, true, false)
		// [19] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		metas_[19] = solanago.NewAccountMeta(Token2022Program, false, false)
		// [20] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		metas_[20] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [21] = [] pump_amm_event_authority
		metas_[21] = solanago.NewAccountMeta(pumpAmmEventAuthority, false, false)
		// [22] = [] event_authority
		metas_[22] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [23] = [] program
		metas_[23] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrate" instruction.
// Migrates liquidity to pump_amm if the bonding curve is complete
func BuildMigrate(
	global solanago.PublicKey,
	withdrawAuthority solanago.PublicKey,
	mint solanago.PublicKey,
	bondingCurve solanago.PublicKey,
	associatedBondingCurve solanago.PublicKey,
	user solanago.PublicKey,
	pool solanago.PublicKey,
	poolAuthority solanago.PublicKey,
	poolAuthorityMintAccount solanago.PublicKey,
	poolAuthorityWsolAccount solanago.PublicKey,
	ammGlobalConfig solanago.PublicKey,
	lpMint solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	pumpAmmEventAuthority solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateInstruction(
		global,
		withdrawAuthority,
		mint,
		bondingCurve,
		associatedBondingCurve,
		user,
		pool,
		poolAuthority,
		poolAuthorityMintAccount,
		poolAuthorityWsolAccount,
		ammGlobalConfig,
		lpMint,
		userPoolTokenAccount,
		poolBaseTokenAccount,
		poolQuoteTokenAccount,
		pumpAmmEventAuthority,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
