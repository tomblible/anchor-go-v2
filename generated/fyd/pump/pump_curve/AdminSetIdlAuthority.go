// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "admin_set_idl_authority" instruction.
type AdminSetIdlAuthority struct {
	// Params:
	IdlAuthority solanago.PublicKey
	// Accounts:
	// [0] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [] global
	Global solanago.PublicKey `bin:"-"`
	// [2] = [writable] idl_account
	IdlAccount solanago.PublicKey `bin:"-"`
	// [3] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [4] = [] program_signer
	ProgramSigner solanago.PublicKey `bin:"-"`
	// [5] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [6] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj AdminSetIdlAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `idlAuthorityParam`:
	if err = encoder.Encode(obj.IdlAuthority); err != nil {
		return fmt.Errorf("error while marshaling idlAuthorityParam:%w", err)
	}
	return nil
}

func (obj *AdminSetIdlAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `IdlAuthority`:
	if err = decoder.Decode(&obj.IdlAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling IdlAuthority:%w", err)
	}
	return nil
}

func (obj *AdminSetIdlAuthority) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.Global = accounts[1]
	obj.IdlAccount = accounts[2]
	obj.SystemProgram = accounts[3]
	obj.ProgramSigner = accounts[4]
	obj.EventAuthority = accounts[5]
	obj.Program = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *AdminSetIdlAuthority) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*AdminSetIdlAuthority) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_AdminSetIdlAuthority)
}

func (*AdminSetIdlAuthority) NewInstance() programparser.Instruction {
	return new(AdminSetIdlAuthority)
}

func (obj *AdminSetIdlAuthority) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "admin_set_idl_authority" instruction.
func NewAdminSetIdlAuthorityInstruction(
	// Params:
	idlAuthorityParam solanago.PublicKey,

	// Accounts:
	authority solanago.PublicKey,
	global solanago.PublicKey,
	idlAccount solanago.PublicKey,
	programSigner solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_AdminSetIdlAuthority[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `idlAuthorityParam`:
		if err = enc__.Encode(idlAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling idlAuthorityParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] authority
		metas_[0] = solanago.NewAccountMeta(authority, false, true)
		// [1] = [] global
		metas_[1] = solanago.NewAccountMeta(global, false, false)
		// [2] = [writable] idl_account
		metas_[2] = solanago.NewAccountMeta(idlAccount, true, false)
		// [3] = [] system_program
		metas_[3] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [4] = [] program_signer
		metas_[4] = solanago.NewAccountMeta(programSigner, false, false)
		// [5] = [] event_authority
		metas_[5] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [6] = [] program
		metas_[6] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAdminSetIdlAuthority" instruction.
func BuildAdminSetIdlAuthority(
	// Params:
	idlAuthorityParam solanago.PublicKey,

	// Accounts:
	authority solanago.PublicKey,
	global solanago.PublicKey,
	idlAccount solanago.PublicKey,
	programSigner solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAdminSetIdlAuthorityInstruction(
		idlAuthorityParam,
		authority,
		global,
		idlAccount,
		programSigner,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
