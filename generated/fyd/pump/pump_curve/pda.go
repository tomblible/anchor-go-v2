// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package pump_curve

import solanago "github.com/gagliardetto/solana-go"

func FindGlobalAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{103, 108, 111, 98, 97, 108}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindGlobalAddress()
	return
}

func FindBondingCurveAddress(mint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101}
	seeds[1] = mint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBondingCurveAddress(mint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindBondingCurveAddress(mint)
	return
}

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindGlobalVolumeAccumulatorAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalVolumeAccumulatorAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindGlobalVolumeAccumulatorAddress()
	return
}

func FindCreatorVaultAddress(bondingCurveCreator solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 114, 101, 97, 116, 111, 114, 45, 118, 97, 117, 108, 116}
	seeds[1] = bondingCurveCreator.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindCreatorVaultAddress(bondingCurveCreator solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindCreatorVaultAddress(bondingCurveCreator)
	return
}

func FindUserVolumeAccumulatorAddress(user solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114}
	seeds[1] = user.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindUserVolumeAccumulatorAddress(user solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindUserVolumeAccumulatorAddress(user)
	return
}

func FindMintAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{109, 105, 110, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindMintAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindMintAuthorityAddress()
	return
}

func FindPoolAuthorityAddress(mint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 111, 108, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	seeds[1] = mint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolAuthorityAddress(mint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPoolAuthorityAddress(mint)
	return
}
