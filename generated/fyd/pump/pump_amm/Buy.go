// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "buy" instruction.
type Buy struct {
	// Params:
	BaseAmountOut    uint64
	MaxQuoteAmountIn uint64
	// Accounts:
	// [0] = [] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] user
	User solanago.PublicKey `bin:"-"`
	// [2] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [3] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [4] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] user_base_token_account
	UserBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [writable] user_quote_token_account
	UserQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] pool_base_token_account
	PoolBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] pool_quote_token_account
	PoolQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [9] = [] protocol_fee_recipient
	ProtocolFeeRecipient solanago.PublicKey `bin:"-"`
	// [10] = [writable] protocol_fee_recipient_token_account
	ProtocolFeeRecipientTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [] base_token_program
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] quote_token_program
	QuoteTokenProgram solanago.PublicKey `bin:"-"`
	// [13] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [14] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [15] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [16] = [] program
	Program solanago.PublicKey `bin:"-"`
	// [17] = [writable] coin_creator_vault_ata
	CoinCreatorVaultAta solanago.PublicKey `bin:"-"`
	// [18] = [] coin_creator_vault_authority
	CoinCreatorVaultAuthority solanago.PublicKey `bin:"-"`
	// [19] = [writable] global_volume_accumulator
	GlobalVolumeAccumulator solanago.PublicKey `bin:"-"`
	// [20] = [writable] user_volume_accumulator
	UserVolumeAccumulator solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Buy) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `baseAmountOutParam`:
	if err = encoder.Encode(obj.BaseAmountOut); err != nil {
		return fmt.Errorf("error while marshaling baseAmountOutParam:%w", err)
	}
	// Serialize `maxQuoteAmountInParam`:
	if err = encoder.Encode(obj.MaxQuoteAmountIn); err != nil {
		return fmt.Errorf("error while marshaling maxQuoteAmountInParam:%w", err)
	}
	return nil
}

func (obj *Buy) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseAmountOut`:
	if err = decoder.Decode(&obj.BaseAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling BaseAmountOut:%w", err)
	}
	// Deserialize `MaxQuoteAmountIn`:
	if err = decoder.Decode(&obj.MaxQuoteAmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling MaxQuoteAmountIn:%w", err)
	}
	return nil
}

func (obj *Buy) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 21 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 21, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.User = accounts[1]
	obj.GlobalConfig = accounts[2]
	obj.BaseMint = accounts[3]
	obj.QuoteMint = accounts[4]
	obj.UserBaseTokenAccount = accounts[5]
	obj.UserQuoteTokenAccount = accounts[6]
	obj.PoolBaseTokenAccount = accounts[7]
	obj.PoolQuoteTokenAccount = accounts[8]
	obj.ProtocolFeeRecipient = accounts[9]
	obj.ProtocolFeeRecipientTokenAccount = accounts[10]
	obj.BaseTokenProgram = accounts[11]
	obj.QuoteTokenProgram = accounts[12]
	obj.SystemProgram = accounts[13]
	obj.AssociatedTokenProgram = accounts[14]
	obj.EventAuthority = accounts[15]
	obj.Program = accounts[16]
	obj.CoinCreatorVaultAta = accounts[17]
	obj.CoinCreatorVaultAuthority = accounts[18]
	obj.GlobalVolumeAccumulator = accounts[19]
	obj.UserVolumeAccumulator = accounts[20]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Buy) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Buy) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Buy)
}

func (*Buy) NewInstance() programparser.Instruction {
	return new(Buy)
}

// Builds a "buy" instruction.
func NewBuyInstruction(
	// Params:
	baseAmountOutParam uint64,
	maxQuoteAmountInParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	user solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	protocolFeeRecipient solanago.PublicKey,
	protocolFeeRecipientTokenAccount solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	quoteTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	coinCreatorVaultAta solanago.PublicKey,
	coinCreatorVaultAuthority solanago.PublicKey,
	globalVolumeAccumulator solanago.PublicKey,
	userVolumeAccumulator solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 21, 21+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Buy[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `baseAmountOutParam`:
		if err = enc__.Encode(baseAmountOutParam); err != nil {
			return nil, fmt.Errorf("error while marshaling baseAmountOutParam:%w", err)
		}
		// Serialize `maxQuoteAmountInParam`:
		if err = enc__.Encode(maxQuoteAmountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling maxQuoteAmountInParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] pool
		metas_[0] = solanago.NewAccountMeta(pool, false, false)
		// [1] = [writable,signer] user
		metas_[1] = solanago.NewAccountMeta(user, true, true)
		// [2] = [] global_config
		metas_[2] = solanago.NewAccountMeta(globalConfig, false, false)
		// [3] = [] base_mint
		metas_[3] = solanago.NewAccountMeta(baseMint, false, false)
		// [4] = [] quote_mint
		metas_[4] = solanago.NewAccountMeta(quoteMint, false, false)
		// [5] = [writable] user_base_token_account
		metas_[5] = solanago.NewAccountMeta(userBaseTokenAccount, true, false)
		// [6] = [writable] user_quote_token_account
		metas_[6] = solanago.NewAccountMeta(userQuoteTokenAccount, true, false)
		// [7] = [writable] pool_base_token_account
		metas_[7] = solanago.NewAccountMeta(poolBaseTokenAccount, true, false)
		// [8] = [writable] pool_quote_token_account
		metas_[8] = solanago.NewAccountMeta(poolQuoteTokenAccount, true, false)
		// [9] = [] protocol_fee_recipient
		metas_[9] = solanago.NewAccountMeta(protocolFeeRecipient, false, false)
		// [10] = [writable] protocol_fee_recipient_token_account
		metas_[10] = solanago.NewAccountMeta(protocolFeeRecipientTokenAccount, true, false)
		// [11] = [] base_token_program
		metas_[11] = solanago.NewAccountMeta(baseTokenProgram, false, false)
		// [12] = [] quote_token_program
		metas_[12] = solanago.NewAccountMeta(quoteTokenProgram, false, false)
		// [13] = [] system_program
		metas_[13] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [14] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		metas_[14] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [15] = [] event_authority
		metas_[15] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [16] = [] program
		metas_[16] = solanago.NewAccountMeta(program, false, false)
		// [17] = [writable] coin_creator_vault_ata
		metas_[17] = solanago.NewAccountMeta(coinCreatorVaultAta, true, false)
		// [18] = [] coin_creator_vault_authority
		metas_[18] = solanago.NewAccountMeta(coinCreatorVaultAuthority, false, false)
		// [19] = [writable] global_volume_accumulator
		metas_[19] = solanago.NewAccountMeta(globalVolumeAccumulator, true, false)
		// [20] = [writable] user_volume_accumulator
		metas_[20] = solanago.NewAccountMeta(userVolumeAccumulator, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildBuy" instruction.
func BuildBuy(
	// Params:
	baseAmountOutParam uint64,
	maxQuoteAmountInParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	user solanago.PublicKey,
	globalConfig solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	protocolFeeRecipient solanago.PublicKey,
	protocolFeeRecipientTokenAccount solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	quoteTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	coinCreatorVaultAta solanago.PublicKey,
	coinCreatorVaultAuthority solanago.PublicKey,
	globalVolumeAccumulator solanago.PublicKey,
	userVolumeAccumulator solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewBuyInstruction(
		baseAmountOutParam,
		maxQuoteAmountInParam,
		pool,
		user,
		globalConfig,
		baseMint,
		quoteMint,
		userBaseTokenAccount,
		userQuoteTokenAccount,
		poolBaseTokenAccount,
		poolQuoteTokenAccount,
		protocolFeeRecipient,
		protocolFeeRecipientTokenAccount,
		baseTokenProgram,
		quoteTokenProgram,
		eventAuthority,
		program,
		coinCreatorVaultAta,
		coinCreatorVaultAuthority,
		globalVolumeAccumulator,
		userVolumeAccumulator,
		remaining__...,
	)
	return instruction_
}
