// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "admin_update_token_incentives" instruction.
type AdminUpdateTokenIncentives struct {
	// Params:
	StartTime         int64
	EndTime           int64
	SecondsInADay     int64
	DayNumber         uint64
	TokenSupplyPerDay uint64
	// Accounts:
	// [0] = [writable,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [1] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [2] = [writable] global_volume_accumulator
	GlobalVolumeAccumulator solanago.PublicKey `bin:"-"`
	// [3] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [4] = [writable] global_incentive_token_account
	GlobalIncentiveTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [9] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj AdminUpdateTokenIncentives) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `startTimeParam`:
	if err = encoder.Encode(obj.StartTime); err != nil {
		return fmt.Errorf("error while marshaling startTimeParam:%w", err)
	}
	// Serialize `endTimeParam`:
	if err = encoder.Encode(obj.EndTime); err != nil {
		return fmt.Errorf("error while marshaling endTimeParam:%w", err)
	}
	// Serialize `secondsInADayParam`:
	if err = encoder.Encode(obj.SecondsInADay); err != nil {
		return fmt.Errorf("error while marshaling secondsInADayParam:%w", err)
	}
	// Serialize `dayNumberParam`:
	if err = encoder.Encode(obj.DayNumber); err != nil {
		return fmt.Errorf("error while marshaling dayNumberParam:%w", err)
	}
	// Serialize `tokenSupplyPerDayParam`:
	if err = encoder.Encode(obj.TokenSupplyPerDay); err != nil {
		return fmt.Errorf("error while marshaling tokenSupplyPerDayParam:%w", err)
	}
	return nil
}

func (obj *AdminUpdateTokenIncentives) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `StartTime`:
	if err = decoder.Decode(&obj.StartTime); err != nil {
		return fmt.Errorf("error while unmarshaling StartTime:%w", err)
	}
	// Deserialize `EndTime`:
	if err = decoder.Decode(&obj.EndTime); err != nil {
		return fmt.Errorf("error while unmarshaling EndTime:%w", err)
	}
	// Deserialize `SecondsInADay`:
	if err = decoder.Decode(&obj.SecondsInADay); err != nil {
		return fmt.Errorf("error while unmarshaling SecondsInADay:%w", err)
	}
	// Deserialize `DayNumber`:
	if err = decoder.Decode(&obj.DayNumber); err != nil {
		return fmt.Errorf("error while unmarshaling DayNumber:%w", err)
	}
	// Deserialize `TokenSupplyPerDay`:
	if err = decoder.Decode(&obj.TokenSupplyPerDay); err != nil {
		return fmt.Errorf("error while unmarshaling TokenSupplyPerDay:%w", err)
	}
	return nil
}

func (obj *AdminUpdateTokenIncentives) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Admin = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.GlobalVolumeAccumulator = accounts[2]
	obj.Mint = accounts[3]
	obj.GlobalIncentiveTokenAccount = accounts[4]
	obj.AssociatedTokenProgram = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.EventAuthority = accounts[8]
	obj.Program = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *AdminUpdateTokenIncentives) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*AdminUpdateTokenIncentives) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_AdminUpdateTokenIncentives)
}

func (*AdminUpdateTokenIncentives) NewInstance() programparser.Instruction {
	return new(AdminUpdateTokenIncentives)
}

// Builds a "admin_update_token_incentives" instruction.
func NewAdminUpdateTokenIncentivesInstruction(
	// Params:
	startTimeParam int64,
	endTimeParam int64,
	secondsInADayParam int64,
	dayNumberParam uint64,
	tokenSupplyPerDayParam uint64,

	// Accounts:
	admin solanago.PublicKey,
	globalConfig solanago.PublicKey,
	globalVolumeAccumulator solanago.PublicKey,
	mint solanago.PublicKey,
	globalIncentiveTokenAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_AdminUpdateTokenIncentives[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `startTimeParam`:
		if err = enc__.Encode(startTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling startTimeParam:%w", err)
		}
		// Serialize `endTimeParam`:
		if err = enc__.Encode(endTimeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling endTimeParam:%w", err)
		}
		// Serialize `secondsInADayParam`:
		if err = enc__.Encode(secondsInADayParam); err != nil {
			return nil, fmt.Errorf("error while marshaling secondsInADayParam:%w", err)
		}
		// Serialize `dayNumberParam`:
		if err = enc__.Encode(dayNumberParam); err != nil {
			return nil, fmt.Errorf("error while marshaling dayNumberParam:%w", err)
		}
		// Serialize `tokenSupplyPerDayParam`:
		if err = enc__.Encode(tokenSupplyPerDayParam); err != nil {
			return nil, fmt.Errorf("error while marshaling tokenSupplyPerDayParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] admin
		metas_[0] = solanago.NewAccountMeta(admin, true, true)
		// [1] = [] global_config
		metas_[1] = solanago.NewAccountMeta(globalConfig, false, false)
		// [2] = [writable] global_volume_accumulator
		metas_[2] = solanago.NewAccountMeta(globalVolumeAccumulator, true, false)
		// [3] = [] mint
		metas_[3] = solanago.NewAccountMeta(mint, false, false)
		// [4] = [writable] global_incentive_token_account
		metas_[4] = solanago.NewAccountMeta(globalIncentiveTokenAccount, true, false)
		// [5] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		metas_[5] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [6] = [] system_program
		metas_[6] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [7] = [] token_program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [8] = [] event_authority
		metas_[8] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [9] = [] program
		metas_[9] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAdminUpdateTokenIncentives" instruction.
func BuildAdminUpdateTokenIncentives(
	// Params:
	startTimeParam int64,
	endTimeParam int64,
	secondsInADayParam int64,
	dayNumberParam uint64,
	tokenSupplyPerDayParam uint64,

	// Accounts:
	admin solanago.PublicKey,
	globalConfig solanago.PublicKey,
	globalVolumeAccumulator solanago.PublicKey,
	mint solanago.PublicKey,
	globalIncentiveTokenAccount solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAdminUpdateTokenIncentivesInstruction(
		startTimeParam,
		endTimeParam,
		secondsInADayParam,
		dayNumberParam,
		tokenSupplyPerDayParam,
		admin,
		globalConfig,
		globalVolumeAccumulator,
		mint,
		globalIncentiveTokenAccount,
		tokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
