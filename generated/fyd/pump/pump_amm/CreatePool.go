// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_pool" instruction.
type CreatePool struct {
	// Params:
	Index         uint16
	BaseAmountIn  uint64
	QuoteAmountIn uint64
	CoinCreator   solanago.PublicKey
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] creator
	Creator solanago.PublicKey `bin:"-"`
	// [3] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [4] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] user_base_token_account
	UserBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] user_quote_token_account
	UserQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] user_pool_token_account
	UserPoolTokenAccount solanago.PublicKey `bin:"-"`
	// [9] = [writable] pool_base_token_account
	PoolBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable] pool_quote_token_account
	PoolQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	Token2022Program solanago.PublicKey `bin:"-"`
	// [13] = [] base_token_program
	BaseTokenProgram solanago.PublicKey `bin:"-"`
	// [14] = [] quote_token_program
	QuoteTokenProgram solanago.PublicKey `bin:"-"`
	// [15] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
	AssociatedTokenProgram solanago.PublicKey `bin:"-"`
	// [16] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [17] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreatePool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `indexParam`:
	if err = encoder.Encode(obj.Index); err != nil {
		return fmt.Errorf("error while marshaling indexParam:%w", err)
	}
	// Serialize `baseAmountInParam`:
	if err = encoder.Encode(obj.BaseAmountIn); err != nil {
		return fmt.Errorf("error while marshaling baseAmountInParam:%w", err)
	}
	// Serialize `quoteAmountInParam`:
	if err = encoder.Encode(obj.QuoteAmountIn); err != nil {
		return fmt.Errorf("error while marshaling quoteAmountInParam:%w", err)
	}
	// Serialize `coinCreatorParam`:
	if err = encoder.Encode(obj.CoinCreator); err != nil {
		return fmt.Errorf("error while marshaling coinCreatorParam:%w", err)
	}
	return nil
}

func (obj *CreatePool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Index`:
	if err = decoder.Decode(&obj.Index); err != nil {
		return fmt.Errorf("error while unmarshaling Index:%w", err)
	}
	// Deserialize `BaseAmountIn`:
	if err = decoder.Decode(&obj.BaseAmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling BaseAmountIn:%w", err)
	}
	// Deserialize `QuoteAmountIn`:
	if err = decoder.Decode(&obj.QuoteAmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling QuoteAmountIn:%w", err)
	}
	// Deserialize `CoinCreator`:
	if err = decoder.Decode(&obj.CoinCreator); err != nil {
		return fmt.Errorf("error while unmarshaling CoinCreator:%w", err)
	}
	return nil
}

func (obj *CreatePool) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 18 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 18, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.Creator = accounts[2]
	obj.BaseMint = accounts[3]
	obj.QuoteMint = accounts[4]
	obj.LpMint = accounts[5]
	obj.UserBaseTokenAccount = accounts[6]
	obj.UserQuoteTokenAccount = accounts[7]
	obj.UserPoolTokenAccount = accounts[8]
	obj.PoolBaseTokenAccount = accounts[9]
	obj.PoolQuoteTokenAccount = accounts[10]
	obj.SystemProgram = accounts[11]
	obj.Token2022Program = accounts[12]
	obj.BaseTokenProgram = accounts[13]
	obj.QuoteTokenProgram = accounts[14]
	obj.AssociatedTokenProgram = accounts[15]
	obj.EventAuthority = accounts[16]
	obj.Program = accounts[17]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreatePool) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreatePool) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreatePool)
}

func (*CreatePool) NewInstance() programparser.Instruction {
	return new(CreatePool)
}

func (obj *CreatePool) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[18:]
}

// Builds a "create_pool" instruction.
func NewCreatePoolInstruction(
	// Params:
	indexParam uint16,
	baseAmountInParam uint64,
	quoteAmountInParam uint64,
	coinCreatorParam solanago.PublicKey,

	// Accounts:
	pool solanago.PublicKey,
	globalConfig solanago.PublicKey,
	creator solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	quoteTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 18, 18+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreatePool[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `indexParam`:
		if err = enc__.Encode(indexParam); err != nil {
			return nil, fmt.Errorf("error while marshaling indexParam:%w", err)
		}
		// Serialize `baseAmountInParam`:
		if err = enc__.Encode(baseAmountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling baseAmountInParam:%w", err)
		}
		// Serialize `quoteAmountInParam`:
		if err = enc__.Encode(quoteAmountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling quoteAmountInParam:%w", err)
		}
		// Serialize `coinCreatorParam`:
		if err = enc__.Encode(coinCreatorParam); err != nil {
			return nil, fmt.Errorf("error while marshaling coinCreatorParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [] global_config
		metas_[1] = solanago.NewAccountMeta(globalConfig, false, false)
		// [2] = [writable,signer] creator
		metas_[2] = solanago.NewAccountMeta(creator, true, true)
		// [3] = [] base_mint
		metas_[3] = solanago.NewAccountMeta(baseMint, false, false)
		// [4] = [] quote_mint
		metas_[4] = solanago.NewAccountMeta(quoteMint, false, false)
		// [5] = [writable] lp_mint
		metas_[5] = solanago.NewAccountMeta(lpMint, true, false)
		// [6] = [writable] user_base_token_account
		metas_[6] = solanago.NewAccountMeta(userBaseTokenAccount, true, false)
		// [7] = [writable] user_quote_token_account
		metas_[7] = solanago.NewAccountMeta(userQuoteTokenAccount, true, false)
		// [8] = [writable] user_pool_token_account
		metas_[8] = solanago.NewAccountMeta(userPoolTokenAccount, true, false)
		// [9] = [writable] pool_base_token_account
		metas_[9] = solanago.NewAccountMeta(poolBaseTokenAccount, true, false)
		// [10] = [writable] pool_quote_token_account
		metas_[10] = solanago.NewAccountMeta(poolQuoteTokenAccount, true, false)
		// [11] = [] system_program
		metas_[11] = solanago.NewAccountMeta(SystemProgram, false, false)
		// [12] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		metas_[12] = solanago.NewAccountMeta(Token2022Program, false, false)
		// [13] = [] base_token_program
		metas_[13] = solanago.NewAccountMeta(baseTokenProgram, false, false)
		// [14] = [] quote_token_program
		metas_[14] = solanago.NewAccountMeta(quoteTokenProgram, false, false)
		// [15] = [] associated_token_program[ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL]
		metas_[15] = solanago.NewAccountMeta(AssociatedTokenProgram, false, false)
		// [16] = [] event_authority
		metas_[16] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [17] = [] program
		metas_[17] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreatePool" instruction.
func BuildCreatePool(
	// Params:
	indexParam uint16,
	baseAmountInParam uint64,
	quoteAmountInParam uint64,
	coinCreatorParam solanago.PublicKey,

	// Accounts:
	pool solanago.PublicKey,
	globalConfig solanago.PublicKey,
	creator solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	baseTokenProgram solanago.PublicKey,
	quoteTokenProgram solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreatePoolInstruction(
		indexParam,
		baseAmountInParam,
		quoteAmountInParam,
		coinCreatorParam,
		pool,
		globalConfig,
		creator,
		baseMint,
		quoteMint,
		lpMint,
		userBaseTokenAccount,
		userQuoteTokenAccount,
		userPoolTokenAccount,
		poolBaseTokenAccount,
		poolQuoteTokenAccount,
		baseTokenProgram,
		quoteTokenProgram,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
