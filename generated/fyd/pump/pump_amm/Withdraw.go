// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw" instruction.
type Withdraw struct {
	// Params:
	LpTokenAmountIn   uint64
	MinBaseAmountOut  uint64
	MinQuoteAmountOut uint64
	// Accounts:
	// [0] = [writable] pool
	Pool solanago.PublicKey `bin:"-"`
	// [1] = [] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [2] = [,signer] user
	User solanago.PublicKey `bin:"-"`
	// [3] = [] base_mint
	BaseMint solanago.PublicKey `bin:"-"`
	// [4] = [] quote_mint
	QuoteMint solanago.PublicKey `bin:"-"`
	// [5] = [writable] lp_mint
	LpMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] user_base_token_account
	UserBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] user_quote_token_account
	UserQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] user_pool_token_account
	UserPoolTokenAccount solanago.PublicKey `bin:"-"`
	// [9] = [writable] pool_base_token_account
	PoolBaseTokenAccount solanago.PublicKey `bin:"-"`
	// [10] = [writable] pool_quote_token_account
	PoolQuoteTokenAccount solanago.PublicKey `bin:"-"`
	// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
	TokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
	Token2022Program solanago.PublicKey `bin:"-"`
	// [13] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Withdraw) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `lpTokenAmountInParam`:
	if err = encoder.Encode(obj.LpTokenAmountIn); err != nil {
		return fmt.Errorf("error while marshaling lpTokenAmountInParam:%w", err)
	}
	// Serialize `minBaseAmountOutParam`:
	if err = encoder.Encode(obj.MinBaseAmountOut); err != nil {
		return fmt.Errorf("error while marshaling minBaseAmountOutParam:%w", err)
	}
	// Serialize `minQuoteAmountOutParam`:
	if err = encoder.Encode(obj.MinQuoteAmountOut); err != nil {
		return fmt.Errorf("error while marshaling minQuoteAmountOutParam:%w", err)
	}
	return nil
}

func (obj *Withdraw) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpTokenAmountIn`:
	if err = decoder.Decode(&obj.LpTokenAmountIn); err != nil {
		return fmt.Errorf("error while unmarshaling LpTokenAmountIn:%w", err)
	}
	// Deserialize `MinBaseAmountOut`:
	if err = decoder.Decode(&obj.MinBaseAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinBaseAmountOut:%w", err)
	}
	// Deserialize `MinQuoteAmountOut`:
	if err = decoder.Decode(&obj.MinQuoteAmountOut); err != nil {
		return fmt.Errorf("error while unmarshaling MinQuoteAmountOut:%w", err)
	}
	return nil
}

func (obj *Withdraw) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.Pool = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.User = accounts[2]
	obj.BaseMint = accounts[3]
	obj.QuoteMint = accounts[4]
	obj.LpMint = accounts[5]
	obj.UserBaseTokenAccount = accounts[6]
	obj.UserQuoteTokenAccount = accounts[7]
	obj.UserPoolTokenAccount = accounts[8]
	obj.PoolBaseTokenAccount = accounts[9]
	obj.PoolQuoteTokenAccount = accounts[10]
	obj.TokenProgram = accounts[11]
	obj.Token2022Program = accounts[12]
	obj.EventAuthority = accounts[13]
	obj.Program = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Withdraw) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Withdraw) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Withdraw)
}

func (*Withdraw) NewInstance() programparser.Instruction {
	return new(Withdraw)
}

func (obj *Withdraw) GetRemainingAccounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice[15:]
}

// Builds a "withdraw" instruction.
func NewWithdrawInstruction(
	// Params:
	lpTokenAmountInParam uint64,
	minBaseAmountOutParam uint64,
	minQuoteAmountOutParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	globalConfig solanago.PublicKey,
	user solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Withdraw[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `lpTokenAmountInParam`:
		if err = enc__.Encode(lpTokenAmountInParam); err != nil {
			return nil, fmt.Errorf("error while marshaling lpTokenAmountInParam:%w", err)
		}
		// Serialize `minBaseAmountOutParam`:
		if err = enc__.Encode(minBaseAmountOutParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minBaseAmountOutParam:%w", err)
		}
		// Serialize `minQuoteAmountOutParam`:
		if err = enc__.Encode(minQuoteAmountOutParam); err != nil {
			return nil, fmt.Errorf("error while marshaling minQuoteAmountOutParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] pool
		metas_[0] = solanago.NewAccountMeta(pool, true, false)
		// [1] = [] global_config
		metas_[1] = solanago.NewAccountMeta(globalConfig, false, false)
		// [2] = [,signer] user
		metas_[2] = solanago.NewAccountMeta(user, false, true)
		// [3] = [] base_mint
		metas_[3] = solanago.NewAccountMeta(baseMint, false, false)
		// [4] = [] quote_mint
		metas_[4] = solanago.NewAccountMeta(quoteMint, false, false)
		// [5] = [writable] lp_mint
		metas_[5] = solanago.NewAccountMeta(lpMint, true, false)
		// [6] = [writable] user_base_token_account
		metas_[6] = solanago.NewAccountMeta(userBaseTokenAccount, true, false)
		// [7] = [writable] user_quote_token_account
		metas_[7] = solanago.NewAccountMeta(userQuoteTokenAccount, true, false)
		// [8] = [writable] user_pool_token_account
		metas_[8] = solanago.NewAccountMeta(userPoolTokenAccount, true, false)
		// [9] = [writable] pool_base_token_account
		metas_[9] = solanago.NewAccountMeta(poolBaseTokenAccount, true, false)
		// [10] = [writable] pool_quote_token_account
		metas_[10] = solanago.NewAccountMeta(poolQuoteTokenAccount, true, false)
		// [11] = [] token_program[TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA]
		metas_[11] = solanago.NewAccountMeta(TokenProgram, false, false)
		// [12] = [] token_2022_program[TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb]
		metas_[12] = solanago.NewAccountMeta(Token2022Program, false, false)
		// [13] = [] event_authority
		metas_[13] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [14] = [] program
		metas_[14] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdraw" instruction.
func BuildWithdraw(
	// Params:
	lpTokenAmountInParam uint64,
	minBaseAmountOutParam uint64,
	minQuoteAmountOutParam uint64,

	// Accounts:
	pool solanago.PublicKey,
	globalConfig solanago.PublicKey,
	user solanago.PublicKey,
	baseMint solanago.PublicKey,
	quoteMint solanago.PublicKey,
	lpMint solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	userPoolTokenAccount solanago.PublicKey,
	poolBaseTokenAccount solanago.PublicKey,
	poolQuoteTokenAccount solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawInstruction(
		lpTokenAmountInParam,
		minBaseAmountOutParam,
		minQuoteAmountOutParam,
		pool,
		globalConfig,
		user,
		baseMint,
		quoteMint,
		lpMint,
		userBaseTokenAccount,
		userQuoteTokenAccount,
		userPoolTokenAccount,
		poolBaseTokenAccount,
		poolQuoteTokenAccount,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
