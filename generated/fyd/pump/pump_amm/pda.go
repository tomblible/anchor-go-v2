// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains documentation and example usage for the generated code.

package pump_amm

import (
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

func FindEventAuthorityAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindEventAuthorityAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindEventAuthorityAddress()
	return
}

func FindGlobalVolumeAccumulatorAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalVolumeAccumulatorAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindGlobalVolumeAccumulatorAddress()
	return
}

func FindCoinCreatorVaultAuthorityAddress(poolCoinCreator solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116}
	seeds[1] = poolCoinCreator.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindCoinCreatorVaultAuthorityAddress(poolCoinCreator solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindCoinCreatorVaultAuthorityAddress(poolCoinCreator)
	return
}

func FindUserVolumeAccumulatorAddress(user solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114}
	seeds[1] = user.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindUserVolumeAccumulatorAddress(user solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindUserVolumeAccumulatorAddress(user)
	return
}

func FindGlobalConfigAddress() (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 1)
	seeds[0] = []byte{103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103}
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalConfigAddress() (pda solanago.PublicKey) {
	pda, _, _ = FindGlobalConfigAddress()
	return
}

func FindPoolAddress(index uint16, creator solanago.PublicKey, baseMint solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 5)
	seeds[0] = []byte{112, 111, 111, 108}
	if seeds[1], err = binary.MarshalBorsh(index); err != nil {
		return
	}
	seeds[2] = creator.Bytes()
	seeds[3] = baseMint.Bytes()
	seeds[4] = quoteMint.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolAddress(index uint16, creator solanago.PublicKey, baseMint solanago.PublicKey, quoteMint solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindPoolAddress(index, creator, baseMint, quoteMint)
	return
}

func FindLpMintAddress(pool solanago.PublicKey) (pda solanago.PublicKey, bumpSeed uint8, err error) {
	seeds := make([][]byte, 2)
	seeds[0] = []byte{112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116}
	seeds[1] = pool.Bytes()
	pda, bumpSeed, err = solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindLpMintAddress(pool solanago.PublicKey) (pda solanago.PublicKey) {
	pda, _, _ = FindLpMintAddress(pool)
	return
}
