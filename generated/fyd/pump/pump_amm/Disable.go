// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "disable" instruction.
type Disable struct {
	// Params:
	DisableCreatePool bool
	DisableDeposit    bool
	DisableWithdraw   bool
	DisableBuy        bool
	DisableSell       bool
	// Accounts:
	// [0] = [,signer] admin
	Admin solanago.PublicKey `bin:"-"`
	// [1] = [writable] global_config
	GlobalConfig solanago.PublicKey `bin:"-"`
	// [2] = [] event_authority
	EventAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] program
	Program solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Disable) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `disableCreatePoolParam`:
	if err = encoder.Encode(obj.DisableCreatePool); err != nil {
		return fmt.Errorf("error while marshaling disableCreatePoolParam:%w", err)
	}
	// Serialize `disableDepositParam`:
	if err = encoder.Encode(obj.DisableDeposit); err != nil {
		return fmt.Errorf("error while marshaling disableDepositParam:%w", err)
	}
	// Serialize `disableWithdrawParam`:
	if err = encoder.Encode(obj.DisableWithdraw); err != nil {
		return fmt.Errorf("error while marshaling disableWithdrawParam:%w", err)
	}
	// Serialize `disableBuyParam`:
	if err = encoder.Encode(obj.DisableBuy); err != nil {
		return fmt.Errorf("error while marshaling disableBuyParam:%w", err)
	}
	// Serialize `disableSellParam`:
	if err = encoder.Encode(obj.DisableSell); err != nil {
		return fmt.Errorf("error while marshaling disableSellParam:%w", err)
	}
	return nil
}

func (obj *Disable) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `DisableCreatePool`:
	if err = decoder.Decode(&obj.DisableCreatePool); err != nil {
		return fmt.Errorf("error while unmarshaling DisableCreatePool:%w", err)
	}
	// Deserialize `DisableDeposit`:
	if err = decoder.Decode(&obj.DisableDeposit); err != nil {
		return fmt.Errorf("error while unmarshaling DisableDeposit:%w", err)
	}
	// Deserialize `DisableWithdraw`:
	if err = decoder.Decode(&obj.DisableWithdraw); err != nil {
		return fmt.Errorf("error while unmarshaling DisableWithdraw:%w", err)
	}
	// Deserialize `DisableBuy`:
	if err = decoder.Decode(&obj.DisableBuy); err != nil {
		return fmt.Errorf("error while unmarshaling DisableBuy:%w", err)
	}
	// Deserialize `DisableSell`:
	if err = decoder.Decode(&obj.DisableSell); err != nil {
		return fmt.Errorf("error while unmarshaling DisableSell:%w", err)
	}
	return nil
}

func (obj *Disable) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Admin = accounts[0]
	obj.GlobalConfig = accounts[1]
	obj.EventAuthority = accounts[2]
	obj.Program = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Disable) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Disable) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Disable)
}

func (*Disable) NewInstance() programparser.Instruction {
	return new(Disable)
}

func (obj *Disable) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "disable" instruction.
func NewDisableInstruction(
	// Params:
	disableCreatePoolParam bool,
	disableDepositParam bool,
	disableWithdrawParam bool,
	disableBuyParam bool,
	disableSellParam bool,

	// Accounts:
	admin solanago.PublicKey,
	globalConfig solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Disable[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `disableCreatePoolParam`:
		if err = enc__.Encode(disableCreatePoolParam); err != nil {
			return nil, fmt.Errorf("error while marshaling disableCreatePoolParam:%w", err)
		}
		// Serialize `disableDepositParam`:
		if err = enc__.Encode(disableDepositParam); err != nil {
			return nil, fmt.Errorf("error while marshaling disableDepositParam:%w", err)
		}
		// Serialize `disableWithdrawParam`:
		if err = enc__.Encode(disableWithdrawParam); err != nil {
			return nil, fmt.Errorf("error while marshaling disableWithdrawParam:%w", err)
		}
		// Serialize `disableBuyParam`:
		if err = enc__.Encode(disableBuyParam); err != nil {
			return nil, fmt.Errorf("error while marshaling disableBuyParam:%w", err)
		}
		// Serialize `disableSellParam`:
		if err = enc__.Encode(disableSellParam); err != nil {
			return nil, fmt.Errorf("error while marshaling disableSellParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] admin
		metas_[0] = solanago.NewAccountMeta(admin, false, true)
		// [1] = [writable] global_config
		metas_[1] = solanago.NewAccountMeta(globalConfig, true, false)
		// [2] = [] event_authority
		metas_[2] = solanago.NewAccountMeta(eventAuthority, false, false)
		// [3] = [] program
		metas_[3] = solanago.NewAccountMeta(program, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDisable" instruction.
func BuildDisable(
	// Params:
	disableCreatePoolParam bool,
	disableDepositParam bool,
	disableWithdrawParam bool,
	disableBuyParam bool,
	disableSellParam bool,

	// Accounts:
	admin solanago.PublicKey,
	globalConfig solanago.PublicKey,
	eventAuthority solanago.PublicKey,
	program solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDisableInstruction(
		disableCreatePoolParam,
		disableDepositParam,
		disableWithdrawParam,
		disableBuyParam,
		disableSellParam,
		admin,
		globalConfig,
		eventAuthority,
		program,
		remaining__...,
	)
	return instruction_
}
