// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_account" instruction.

// Initializes a new account to hold tokens.  If this account is associated
// with the native mint then the token balance of the initialized account
// will be equal to the amount of SOL in the account. If this account is
// associated with another mint, that mint must be initialized before this
// command can succeed.
//
// The `InitializeAccount` instruction requires no signers and MUST be
// included within the same Transaction as the system program's
// `CreateAccount` instruction that creates the account being initialized.
// Otherwise another party can acquire ownership of the uninitialized
// account.
type InitializeAccount struct {
	// Params:
	// Accounts:
	// [0] = [writable] account
	Account solanago.PublicKey `bin:"-"`
	// [1] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [2] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [3] = [] sys_var_rent_pubkey
	SysVarRentPubkey solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *InitializeAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *InitializeAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Account = accounts[0]
	obj.Mint = accounts[1]
	obj.Owner = accounts[2]
	obj.SysVarRentPubkey = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeAccount)
}

func (*InitializeAccount) NewInstance() programparser.Instruction {
	return new(InitializeAccount)
}

func (obj *InitializeAccount) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "initialize_account" instruction.
// Initializes a new account to hold tokens.  If this account is associated // with the native mint then the token balance of the initialized account // will be equal to the amount of SOL in the account. If this account is // associated with another mint, that mint must be initialized before this // command can succeed. //  // The `InitializeAccount` instruction requires no signers and MUST be // included within the same Transaction as the system program's // `CreateAccount` instruction that creates the account being initialized. // Otherwise another party can acquire ownership of the uninitialized // account.
func NewInitializeAccountInstruction(
	account solanago.PublicKey,
	mint solanago.PublicKey,
	owner solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] account
		// The account to initialize.
		metas_[0] = solanago.NewAccountMeta(account, true, false)
		// [1] = [] mint
		// The mint this account will be associated with.
		metas_[1] = solanago.NewAccountMeta(mint, false, false)
		// [2] = [] owner
		// The new account's owner/multisignature.
		metas_[2] = solanago.NewAccountMeta(owner, false, false)
		// [3] = [] sys_var_rent_pubkey
		// Rent sysvar.
		metas_[3] = solanago.NewAccountMeta(sysVarRentPubkey, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeAccount" instruction.
// Initializes a new account to hold tokens.  If this account is associated // with the native mint then the token balance of the initialized account // will be equal to the amount of SOL in the account. If this account is // associated with another mint, that mint must be initialized before this // command can succeed. //  // The `InitializeAccount` instruction requires no signers and MUST be // included within the same Transaction as the system program's // `CreateAccount` instruction that creates the account being initialized. // Otherwise another party can acquire ownership of the uninitialized // account.
func BuildInitializeAccount(
	account solanago.PublicKey,
	mint solanago.PublicKey,
	owner solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeAccountInstruction(
		account,
		mint,
		owner,
		sysVarRentPubkey,
		remaining__...,
	)
	return instruction_
}
