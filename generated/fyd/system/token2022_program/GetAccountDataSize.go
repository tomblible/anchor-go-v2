// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "get_account_data_size" instruction.

// Gets the required size of an account for the given mint as a little-endian `u64`
type GetAccountDataSize struct {
	// Params:
	ExtensionTypes []Extension
	// Accounts:
	// [0] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj GetAccountDataSize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `extensionTypesParam`:
	{
		if err = encoder.WriteLength(len(obj.ExtensionTypes)); err != nil {
			return fmt.Errorf("error while marshaling extensionTypesParam length: %w", err)
		}
		for i := 0; i < len(obj.ExtensionTypes); i++ {
			if err = EncodeExtension(encoder, obj.ExtensionTypes[i]); err != nil {
				return fmt.Errorf("error while marshaling extensionTypesParam-%d: %w", i, err)
			}
		}
	}
	return nil
}

func (obj *GetAccountDataSize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ExtensionTypes`:
	{
		vecLen, err := decoder.ReadLength()
		if err != nil {
			return fmt.Errorf("error while unmarshalingExtensionTypes:%w", err)
		}
		obj.ExtensionTypes = make([]Extension, vecLen)
		for i := 0; i < vecLen; i++ {
			if obj.ExtensionTypes[i], err = DecodeExtension(decoder); err != nil {
				return fmt.Errorf("error while unmarshaling ExtensionTypes-%d:%w", i, err)
			}
		}
	}
	return nil
}

func (obj *GetAccountDataSize) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 1 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 1, len(accounts))
	}
	obj.Mint = accounts[0]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *GetAccountDataSize) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*GetAccountDataSize) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_GetAccountDataSize)
}

func (*GetAccountDataSize) NewInstance() programparser.Instruction {
	return new(GetAccountDataSize)
}

func (obj *GetAccountDataSize) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 1 {
		return nil
	}
	return obj.PublicKeySlice[1:]
}

// Builds a "get_account_data_size" instruction.
// Gets the required size of an account for the given mint as a little-endian `u64`
func NewGetAccountDataSizeInstruction(
	// Params:
	extensionTypesParam []Extension,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 1, 1+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_GetAccountDataSize[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `extensionTypesParam`:
		{
			if err = enc__.WriteLength(len(extensionTypesParam)); err != nil {
				return nil, fmt.Errorf("error while marshaling extensionTypesParam length: %w", err)
			}
			for i := 0; i < len(extensionTypesParam); i++ {
				if err = EncodeExtension(enc__, extensionTypesParam[i]); err != nil {
					return nil, fmt.Errorf("error while marshaling extensionTypesParam-%d: %w", i, err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] mint
		metas_[0] = solanago.NewAccountMeta(mint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildGetAccountDataSize" instruction.
// Gets the required size of an account for the given mint as a little-endian `u64`
func BuildGetAccountDataSize(
	// Params:
	extensionTypesParam []Extension,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewGetAccountDataSizeInstruction(
		extensionTypesParam,
		mint,
		remaining__...,
	)
	return instruction_
}
