// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_account2" instruction.

// Like InitializeAccount, but the owner pubkey is passed via instruction data
// rather than the accounts list. This variant may be preferable when using
// Cross Program Invocation from an instruction that does not need the owner's
// `AccountInfo` otherwise.
type InitializeAccount2 struct {
	// Params:
	Owner solanago.PublicKey
	// Accounts:
	// [0] = [writable] account
	Account solanago.PublicKey `bin:"-"`
	// [1] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [2] = [] sys_var_rent_pubkey
	SysVarRentPubkey solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeAccount2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ownerParam`:
	if err = encoder.Encode(obj.Owner); err != nil {
		return fmt.Errorf("error while marshaling ownerParam:%w", err)
	}
	return nil
}

func (obj *InitializeAccount2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	if err = decoder.Decode(&obj.Owner); err != nil {
		return fmt.Errorf("error while unmarshaling Owner:%w", err)
	}
	return nil
}

func (obj *InitializeAccount2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Account = accounts[0]
	obj.Mint = accounts[1]
	obj.SysVarRentPubkey = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *InitializeAccount2) Accounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (obj *InitializeAccount2) SignerAccounts() solanago.PublicKeySlice {
	return solanago.PublicKeySlice{}
}

func (obj *InitializeAccount2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeAccount2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeAccount2)
}

func (*InitializeAccount2) NewInstance() programparser.Instruction {
	return new(InitializeAccount2)
}

// Builds a "initialize_account2" instruction.
// Like InitializeAccount, but the owner pubkey is passed via instruction data // rather than the accounts list. This variant may be preferable when using // Cross Program Invocation from an instruction that does not need the owner's // `AccountInfo` otherwise.
func NewInitializeAccount2Instruction(
	// Params:
	ownerParam solanago.PublicKey,

	// Accounts:
	account solanago.PublicKey,
	mint solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeAccount2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `ownerParam`:
		if err = enc__.Encode(ownerParam); err != nil {
			return nil, fmt.Errorf("error while marshaling ownerParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] account
		// The account to initialize.
		metas_[0] = solanago.NewAccountMeta(account, true, false)
		// [1] = [] mint
		// The mint this account will be associated with.
		metas_[1] = solanago.NewAccountMeta(mint, false, false)
		// [2] = [] sys_var_rent_pubkey
		// Rent sysvar.
		metas_[2] = solanago.NewAccountMeta(sysVarRentPubkey, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeAccount2" instruction.
// Like InitializeAccount, but the owner pubkey is passed via instruction data // rather than the accounts list. This variant may be preferable when using // Cross Program Invocation from an instruction that does not need the owner's // `AccountInfo` otherwise.
func BuildInitializeAccount2(
	// Params:
	ownerParam solanago.PublicKey,

	// Accounts:
	account solanago.PublicKey,
	mint solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeAccount2Instruction(
		ownerParam,
		account,
		mint,
		sysVarRentPubkey,
		remaining__...,
	)
	return instruction_
}
