// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_multisig" instruction.

// Initializes a multisignature account with N provided signers.
//
// Multisignature accounts can used in place of any single owner/delegate
// accounts in any token instruction that require an owner/delegate to be
// present.  The variant field represents the number of signers (M)
// required to validate this multisignature account.
//
// The `InitializeMultisig` instruction requires no signers and MUST be
// included within the same Transaction as the system program's
// `CreateAccount` instruction that creates the account being initialized.
// Otherwise another party can acquire ownership of the uninitialized
// account.
type InitializeMultisig struct {
	// Params:
	M uint8
	// Accounts:
	// [0] = [writable] account
	Account solanago.PublicKey `bin:"-"`
	// [1] = [] sys_var_rent_pubkey
	SysVarRentPubkey solanago.PublicKey `bin:"-"`
	// [2] = [,signer] signers
	Signers solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeMultisig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `mParam`:
	if err = encoder.Encode(obj.M); err != nil {
		return fmt.Errorf("error while marshaling mParam:%w", err)
	}
	return nil
}

func (obj *InitializeMultisig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `M`:
	if err = decoder.Decode(&obj.M); err != nil {
		return fmt.Errorf("error while unmarshaling M:%w", err)
	}
	return nil
}

func (obj *InitializeMultisig) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Account = accounts[0]
	obj.SysVarRentPubkey = accounts[1]
	obj.Signers = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *InitializeMultisig) Accounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (obj *InitializeMultisig) SignerAccounts() solanago.PublicKeySlice {
	return solanago.PublicKeySlice{obj.Signers}
}

func (obj *InitializeMultisig) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeMultisig) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeMultisig)
}

func (*InitializeMultisig) NewInstance() programparser.Instruction {
	return new(InitializeMultisig)
}

// Builds a "initialize_multisig" instruction.
// Initializes a multisignature account with N provided signers. //  // Multisignature accounts can used in place of any single owner/delegate // accounts in any token instruction that require an owner/delegate to be // present.  The variant field represents the number of signers (M) // required to validate this multisignature account. //  // The `InitializeMultisig` instruction requires no signers and MUST be // included within the same Transaction as the system program's // `CreateAccount` instruction that creates the account being initialized. // Otherwise another party can acquire ownership of the uninitialized // account.
func NewInitializeMultisigInstruction(
	// Params:
	mParam uint8,

	// Accounts:
	account solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	signers solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeMultisig[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `mParam`:
		if err = enc__.Encode(mParam); err != nil {
			return nil, fmt.Errorf("error while marshaling mParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] account
		// The multisignature account to initialize.
		metas_[0] = solanago.NewAccountMeta(account, true, false)
		// [1] = [] sys_var_rent_pubkey
		// Rent sysvar.
		metas_[1] = solanago.NewAccountMeta(sysVarRentPubkey, false, false)
		// [2] = [,signer] signers
		// ..2+N The signer accounts, must equal to N where 1 <= N <=11
		metas_[2] = solanago.NewAccountMeta(signers, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeMultisig" instruction.
// Initializes a multisignature account with N provided signers. //  // Multisignature accounts can used in place of any single owner/delegate // accounts in any token instruction that require an owner/delegate to be // present.  The variant field represents the number of signers (M) // required to validate this multisignature account. //  // The `InitializeMultisig` instruction requires no signers and MUST be // included within the same Transaction as the system program's // `CreateAccount` instruction that creates the account being initialized. // Otherwise another party can acquire ownership of the uninitialized // account.
func BuildInitializeMultisig(
	// Params:
	mParam uint8,

	// Accounts:
	account solanago.PublicKey,
	sysVarRentPubkey solanago.PublicKey,
	signers solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeMultisigInstruction(
		mParam,
		account,
		sysVarRentPubkey,
		signers,
		remaining__...,
	)
	return instruction_
}
