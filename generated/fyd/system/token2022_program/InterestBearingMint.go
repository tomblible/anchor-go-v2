// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "interest_bearing_mint" instruction.

// The common instruction prefix for Interest Bearing extension instructions.
type InterestBearingMint struct {
	// Params:
	Arg InterestBearingMintArg
	// Accounts:
	// [0] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InterestBearingMint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `argParam`:
	{
		if err = EncodeInterestBearingMintArg(encoder, obj.Arg); err != nil {
			return fmt.Errorf("error while marshalingargParam:%w", err)
		}
	}
	return nil
}

func (obj *InterestBearingMint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Arg`:
	{
		var err error
		obj.Arg, err = DecodeInterestBearingMintArg(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *InterestBearingMint) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 1 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 1, len(accounts))
	}
	obj.Mint = accounts[0]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *InterestBearingMint) Accounts() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (obj *InterestBearingMint) SignerAccounts() solanago.PublicKeySlice {
	return solanago.PublicKeySlice{}
}

func (obj *InterestBearingMint) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InterestBearingMint) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InterestBearingMint)
}

func (*InterestBearingMint) NewInstance() programparser.Instruction {
	return new(InterestBearingMint)
}

// Builds a "interest_bearing_mint" instruction.
// The common instruction prefix for Interest Bearing extension instructions.
func NewInterestBearingMintInstruction(
	// Params:
	argParam InterestBearingMintArg,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 1, 1+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InterestBearingMint[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `argParam`:
		{
			if err = EncodeInterestBearingMintArg(enc__, argParam); err != nil {
				return nil, fmt.Errorf("error while marshalingargParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] mint
		metas_[0] = solanago.NewAccountMeta(mint, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInterestBearingMint" instruction.
// The common instruction prefix for Interest Bearing extension instructions.
func BuildInterestBearingMint(
	// Params:
	argParam InterestBearingMintArg,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInterestBearingMintInstruction(
		argParam,
		mint,
		remaining__...,
	)
	return instruction_
}
