// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "mint_to" instruction.

// Mints new tokens to an account.  The native mint does not support
// minting.
type MintTo struct {
	// Params:
	Amount uint64
	// Accounts:
	// [0] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [1] = [writable] destination
	Destination solanago.PublicKey `bin:"-"`
	// [2] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MintTo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `amountParam`:
	if err = encoder.Encode(obj.Amount); err != nil {
		return fmt.Errorf("error while marshaling amountParam:%w", err)
	}
	return nil
}

func (obj *MintTo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	if err = decoder.Decode(&obj.Amount); err != nil {
		return fmt.Errorf("error while unmarshaling Amount:%w", err)
	}
	return nil
}

func (obj *MintTo) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Mint = accounts[0]
	obj.Destination = accounts[1]
	obj.Authority = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MintTo) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MintTo) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MintTo)
}

func (*MintTo) NewInstance() programparser.Instruction {
	return new(MintTo)
}

func (obj *MintTo) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "mint_to" instruction.
// Mints new tokens to an account.  The native mint does not support // minting.
func NewMintToInstruction(
	// Params:
	amountParam uint64,

	// Accounts:
	mint solanago.PublicKey,
	destination solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MintTo[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `amountParam`:
		if err = enc__.Encode(amountParam); err != nil {
			return nil, fmt.Errorf("error while marshaling amountParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] mint
		// The mint.
		metas_[0] = solanago.NewAccountMeta(mint, true, false)
		// [1] = [writable] destination
		// The account to mint tokens to.
		metas_[1] = solanago.NewAccountMeta(destination, true, false)
		// [2] = [,signer] authority
		// The mint's minting authority.
		metas_[2] = solanago.NewAccountMeta(authority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMintTo" instruction.
// Mints new tokens to an account.  The native mint does not support // minting.
func BuildMintTo(
	// Params:
	amountParam uint64,

	// Accounts:
	mint solanago.PublicKey,
	destination solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMintToInstruction(
		amountParam,
		mint,
		destination,
		authority,
		remaining__...,
	)
	return instruction_
}
