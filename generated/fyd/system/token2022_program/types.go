// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package token2022_program

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type AccountType binary.BorshEnum

const (
	AccountType_Uninitialized AccountType = iota
	AccountType_Mint
	AccountType_Account
)

func (value AccountType) String() string {
	switch value {
	case AccountType_Uninitialized:
		return "Uninitialized"
	case AccountType_Mint:
		return "Mint"
	case AccountType_Account:
		return "Account"
	default:
		return ""
	}
}

type AccountState binary.BorshEnum

const (
	AccountState_Uninitialized AccountState = iota
	AccountState_Initialized
	AccountState_Frozen
)

func (value AccountState) String() string {
	switch value {
	case AccountState_Uninitialized:
		return "Uninitialized"
	case AccountState_Initialized:
		return "Initialized"
	case AccountState_Frozen:
		return "Frozen"
	default:
		return ""
	}
}

type AuthorityType binary.BorshEnum

const (
	AuthorityType_MintTokens AuthorityType = iota
	AuthorityType_FreezeAccount
	AuthorityType_AccountOwner
	AuthorityType_CloseAccount
	AuthorityType_TransferFeeConfig
	AuthorityType_WithheldWithdraw
	AuthorityType_CloseMint
	AuthorityType_InterestRate
	AuthorityType_PermanentDelegate
	AuthorityType_ConfidentialTransferMint
	AuthorityType_TransferHookProgramId
	AuthorityType_ConfidentialTransferFeeConfig
	AuthorityType_MetadataPointer
	AuthorityType_GroupPointer
	AuthorityType_GroupMemberPointer
	AuthorityType_ScaledUiAmount
	AuthorityType_Pause
)

func (value AuthorityType) String() string {
	switch value {
	case AuthorityType_MintTokens:
		return "mintTokens"
	case AuthorityType_FreezeAccount:
		return "freezeAccount"
	case AuthorityType_AccountOwner:
		return "accountOwner"
	case AuthorityType_CloseAccount:
		return "closeAccount"
	case AuthorityType_TransferFeeConfig:
		return "transferFeeConfig"
	case AuthorityType_WithheldWithdraw:
		return "withheldWithdraw"
	case AuthorityType_CloseMint:
		return "closeMint"
	case AuthorityType_InterestRate:
		return "interestRate"
	case AuthorityType_PermanentDelegate:
		return "permanentDelegate"
	case AuthorityType_ConfidentialTransferMint:
		return "confidentialTransferMint"
	case AuthorityType_TransferHookProgramId:
		return "transferHookProgramId"
	case AuthorityType_ConfidentialTransferFeeConfig:
		return "confidentialTransferFeeConfig"
	case AuthorityType_MetadataPointer:
		return "metadataPointer"
	case AuthorityType_GroupPointer:
		return "groupPointer"
	case AuthorityType_GroupMemberPointer:
		return "groupMemberPointer"
	case AuthorityType_ScaledUiAmount:
		return "scaledUiAmount"
	case AuthorityType_Pause:
		return "pause"
	default:
		return ""
	}
}

type TransferFee struct {
	Epoch                  uint64
	MaximumFee             uint64
	TransferFeeBasisPoints uint16
}

func (obj TransferFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Epoch`:
	if err = encoder.Encode(obj.Epoch); err != nil {
		return fmt.Errorf("error while marshaling Epoch:%w", err)
	}
	// Serialize `MaximumFee`:
	if err = encoder.Encode(obj.MaximumFee); err != nil {
		return fmt.Errorf("error while marshaling MaximumFee:%w", err)
	}
	// Serialize `TransferFeeBasisPoints`:
	if err = encoder.Encode(obj.TransferFeeBasisPoints); err != nil {
		return fmt.Errorf("error while marshaling TransferFeeBasisPoints:%w", err)
	}
	return nil
}

func (obj TransferFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TransferFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TransferFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	if err = decoder.Decode(&obj.Epoch); err != nil {
		return fmt.Errorf("error while unmarshaling Epoch:%w", err)
	}
	// Deserialize `MaximumFee`:
	if err = decoder.Decode(&obj.MaximumFee); err != nil {
		return fmt.Errorf("error while unmarshaling MaximumFee:%w", err)
	}
	// Deserialize `TransferFeeBasisPoints`:
	if err = decoder.Decode(&obj.TransferFeeBasisPoints); err != nil {
		return fmt.Errorf("error while unmarshaling TransferFeeBasisPoints:%w", err)
	}
	return nil
}

func (obj *TransferFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TransferFee: %w", err)
	}
	return nil
}

func UnmarshalTransferFee(buf []byte) (*TransferFee, error) {
	obj := new(TransferFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type EncryptedBalance struct{}

func (obj EncryptedBalance) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj EncryptedBalance) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding EncryptedBalance: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *EncryptedBalance) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *EncryptedBalance) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling EncryptedBalance: %w", err)
	}
	return nil
}

func UnmarshalEncryptedBalance(buf []byte) (*EncryptedBalance, error) {
	obj := new(EncryptedBalance)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecryptableBalance struct{}

func (obj DecryptableBalance) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj DecryptableBalance) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecryptableBalance: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecryptableBalance) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DecryptableBalance) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecryptableBalance: %w", err)
	}
	return nil
}

func UnmarshalDecryptableBalance(buf []byte) (*DecryptableBalance, error) {
	obj := new(DecryptableBalance)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// The "isExtension" interface for the "Extension" complex enum.
type Extension interface {
	isExtension()
}

type extensionEnumContainer struct {
	Enum                          binary.BorshEnum `bin:"enum"`
	Uninitialized                 Extension_Uninitialized
	TransferFeeConfig             Extension_TransferFeeConfig
	TransferFeeAmount             Extension_TransferFeeAmount
	MintCloseAuthority            Extension_MintCloseAuthority
	ConfidentialTransferMint      Extension_ConfidentialTransferMint
	ConfidentialTransferAccount   Extension_ConfidentialTransferAccount
	DefaultAccountState           Extension_DefaultAccountState
	ImmutableOwner                Extension_ImmutableOwner
	MemoTransfer                  Extension_MemoTransfer
	NonTransferable               Extension_NonTransferable
	InterestBearingConfig         Extension_InterestBearingConfig
	CpiGuard                      Extension_CpiGuard
	PermanentDelegate             Extension_PermanentDelegate
	NonTransferableAccount        Extension_NonTransferableAccount
	TransferHook                  Extension_TransferHook
	TransferHookAccount           Extension_TransferHookAccount
	ConfidentialTransferFee       Extension_ConfidentialTransferFee
	ConfidentialTransferFeeAmount Extension_ConfidentialTransferFeeAmount
	MetadataPointer               Extension_MetadataPointer
	TokenMetadata                 Extension_TokenMetadata
	GroupPointer                  Extension_GroupPointer
	TokenGroup                    Extension_TokenGroup
	GroupMemberPointer            Extension_GroupMemberPointer
	TokenGroupMember              Extension_TokenGroupMember
	ConfidentialMintBurn          Extension_ConfidentialMintBurn
	ScaledUiAmountConfig          Extension_ScaledUiAmountConfig
	PausableConfig                Extension_PausableConfig
	PausableAccount               Extension_PausableAccount
}

func DecodeExtension(decoder *binary.Decoder) (Extension, error) {
	{
		tmp := new(extensionEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing Extension: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*Extension_Uninitialized)(&tmp.Enum), nil
		case 1:
			return &tmp.TransferFeeConfig, nil
		case 2:
			return &tmp.TransferFeeAmount, nil
		case 3:
			return &tmp.MintCloseAuthority, nil
		case 4:
			return &tmp.ConfidentialTransferMint, nil
		case 5:
			return &tmp.ConfidentialTransferAccount, nil
		case 6:
			return &tmp.DefaultAccountState, nil
		case 7:
			return (*Extension_ImmutableOwner)(&tmp.Enum), nil
		case 8:
			return &tmp.MemoTransfer, nil
		case 9:
			return (*Extension_NonTransferable)(&tmp.Enum), nil
		case 10:
			return &tmp.InterestBearingConfig, nil
		case 11:
			return &tmp.CpiGuard, nil
		case 12:
			return &tmp.PermanentDelegate, nil
		case 13:
			return (*Extension_NonTransferableAccount)(&tmp.Enum), nil
		case 14:
			return &tmp.TransferHook, nil
		case 15:
			return &tmp.TransferHookAccount, nil
		case 16:
			return &tmp.ConfidentialTransferFee, nil
		case 17:
			return &tmp.ConfidentialTransferFeeAmount, nil
		case 18:
			return &tmp.MetadataPointer, nil
		case 19:
			return &tmp.TokenMetadata, nil
		case 20:
			return &tmp.GroupPointer, nil
		case 21:
			return &tmp.TokenGroup, nil
		case 22:
			return &tmp.GroupMemberPointer, nil
		case 23:
			return &tmp.TokenGroupMember, nil
		case 24:
			return (*Extension_ConfidentialMintBurn)(&tmp.Enum), nil
		case 25:
			return &tmp.ScaledUiAmountConfig, nil
		case 26:
			return &tmp.PausableConfig, nil
		case 27:
			return (*Extension_PausableAccount)(&tmp.Enum), nil
		default:
			return nil, fmt.Errorf("Extension: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeExtension(encoder *binary.Encoder, value Extension) error {
	{
		tmp := extensionEnumContainer{}
		switch realvalue := value.(type) {
		case *Extension_Uninitialized:
			tmp.Enum = 0
			tmp.Uninitialized = *realvalue
		case *Extension_TransferFeeConfig:
			tmp.Enum = 1
			tmp.TransferFeeConfig = *realvalue
		case *Extension_TransferFeeAmount:
			tmp.Enum = 2
			tmp.TransferFeeAmount = *realvalue
		case *Extension_MintCloseAuthority:
			tmp.Enum = 3
			tmp.MintCloseAuthority = *realvalue
		case *Extension_ConfidentialTransferMint:
			tmp.Enum = 4
			tmp.ConfidentialTransferMint = *realvalue
		case *Extension_ConfidentialTransferAccount:
			tmp.Enum = 5
			tmp.ConfidentialTransferAccount = *realvalue
		case *Extension_DefaultAccountState:
			tmp.Enum = 6
			tmp.DefaultAccountState = *realvalue
		case *Extension_ImmutableOwner:
			tmp.Enum = 7
			tmp.ImmutableOwner = *realvalue
		case *Extension_MemoTransfer:
			tmp.Enum = 8
			tmp.MemoTransfer = *realvalue
		case *Extension_NonTransferable:
			tmp.Enum = 9
			tmp.NonTransferable = *realvalue
		case *Extension_InterestBearingConfig:
			tmp.Enum = 10
			tmp.InterestBearingConfig = *realvalue
		case *Extension_CpiGuard:
			tmp.Enum = 11
			tmp.CpiGuard = *realvalue
		case *Extension_PermanentDelegate:
			tmp.Enum = 12
			tmp.PermanentDelegate = *realvalue
		case *Extension_NonTransferableAccount:
			tmp.Enum = 13
			tmp.NonTransferableAccount = *realvalue
		case *Extension_TransferHook:
			tmp.Enum = 14
			tmp.TransferHook = *realvalue
		case *Extension_TransferHookAccount:
			tmp.Enum = 15
			tmp.TransferHookAccount = *realvalue
		case *Extension_ConfidentialTransferFee:
			tmp.Enum = 16
			tmp.ConfidentialTransferFee = *realvalue
		case *Extension_ConfidentialTransferFeeAmount:
			tmp.Enum = 17
			tmp.ConfidentialTransferFeeAmount = *realvalue
		case *Extension_MetadataPointer:
			tmp.Enum = 18
			tmp.MetadataPointer = *realvalue
		case *Extension_TokenMetadata:
			tmp.Enum = 19
			tmp.TokenMetadata = *realvalue
		case *Extension_GroupPointer:
			tmp.Enum = 20
			tmp.GroupPointer = *realvalue
		case *Extension_TokenGroup:
			tmp.Enum = 21
			tmp.TokenGroup = *realvalue
		case *Extension_GroupMemberPointer:
			tmp.Enum = 22
			tmp.GroupMemberPointer = *realvalue
		case *Extension_TokenGroupMember:
			tmp.Enum = 23
			tmp.TokenGroupMember = *realvalue
		case *Extension_ConfidentialMintBurn:
			tmp.Enum = 24
			tmp.ConfidentialMintBurn = *realvalue
		case *Extension_ScaledUiAmountConfig:
			tmp.Enum = 25
			tmp.ScaledUiAmountConfig = *realvalue
		case *Extension_PausableConfig:
			tmp.Enum = 26
			tmp.PausableConfig = *realvalue
		case *Extension_PausableAccount:
			tmp.Enum = 27
			tmp.PausableAccount = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type Extension_Uninitialized uint8

func (obj Extension_Uninitialized) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_Uninitialized) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_Uninitialized) isExtension() {}

// Variant "transferFeeConfig" of enum "Extension"
type Extension_TransferFeeConfig struct {
	TransferFeeConfigAuthority solanago.PublicKey `json:"transferFeeConfigAuthority"`
	WithdrawWithheldAuthority  solanago.PublicKey `json:"withdrawWithheldAuthority"`
	WithheldAmount             uint64             `json:"withheldAmount"`
	OlderTransferFee           TransferFee        `json:"olderTransferFee"`
	NewerTransferFee           TransferFee        `json:"newerTransferFee"`
}

func (obj Extension_TransferFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TransferFeeConfigAuthority`:
	if err = encoder.Encode(obj.TransferFeeConfigAuthority); err != nil {
		return fmt.Errorf("error while marshaling TransferFeeConfigAuthority:%w", err)
	}
	// Serialize `WithdrawWithheldAuthority`:
	if err = encoder.Encode(obj.WithdrawWithheldAuthority); err != nil {
		return fmt.Errorf("error while marshaling WithdrawWithheldAuthority:%w", err)
	}
	// Serialize `WithheldAmount`:
	if err = encoder.Encode(obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while marshaling WithheldAmount:%w", err)
	}
	// Serialize `OlderTransferFee`:
	if err = encoder.Encode(obj.OlderTransferFee); err != nil {
		return fmt.Errorf("error while marshaling OlderTransferFee:%w", err)
	}
	// Serialize `NewerTransferFee`:
	if err = encoder.Encode(obj.NewerTransferFee); err != nil {
		return fmt.Errorf("error while marshaling NewerTransferFee:%w", err)
	}
	return nil
}

func (obj Extension_TransferFeeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TransferFeeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TransferFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TransferFeeConfigAuthority`:
	if err = decoder.Decode(&obj.TransferFeeConfigAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling TransferFeeConfigAuthority:%w", err)
	}
	// Deserialize `WithdrawWithheldAuthority`:
	if err = decoder.Decode(&obj.WithdrawWithheldAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawWithheldAuthority:%w", err)
	}
	// Deserialize `WithheldAmount`:
	if err = decoder.Decode(&obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while unmarshaling WithheldAmount:%w", err)
	}
	// Deserialize `OlderTransferFee`:
	if err = decoder.Decode(&obj.OlderTransferFee); err != nil {
		return fmt.Errorf("error while unmarshaling OlderTransferFee:%w", err)
	}
	// Deserialize `NewerTransferFee`:
	if err = decoder.Decode(&obj.NewerTransferFee); err != nil {
		return fmt.Errorf("error while unmarshaling NewerTransferFee:%w", err)
	}
	return nil
}

func (obj *Extension_TransferFeeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TransferFeeConfig: %w", err)
	}
	return nil
}

func UnmarshalExtension_TransferFeeConfig(buf []byte) (*Extension_TransferFeeConfig, error) {
	obj := new(Extension_TransferFeeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TransferFeeConfig) isExtension() {}

// Variant "transferFeeAmount" of enum "Extension"
type Extension_TransferFeeAmount struct {
	WithheldAmount uint64 `json:"withheldAmount"`
}

func (obj Extension_TransferFeeAmount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `WithheldAmount`:
	if err = encoder.Encode(obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while marshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj Extension_TransferFeeAmount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TransferFeeAmount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TransferFeeAmount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `WithheldAmount`:
	if err = decoder.Decode(&obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while unmarshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj *Extension_TransferFeeAmount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TransferFeeAmount: %w", err)
	}
	return nil
}

func UnmarshalExtension_TransferFeeAmount(buf []byte) (*Extension_TransferFeeAmount, error) {
	obj := new(Extension_TransferFeeAmount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TransferFeeAmount) isExtension() {}

// Variant "mintCloseAuthority" of enum "Extension"
type Extension_MintCloseAuthority struct {
	CloseAuthority solanago.PublicKey `json:"closeAuthority"`
}

func (obj Extension_MintCloseAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CloseAuthority`:
	if err = encoder.Encode(obj.CloseAuthority); err != nil {
		return fmt.Errorf("error while marshaling CloseAuthority:%w", err)
	}
	return nil
}

func (obj Extension_MintCloseAuthority) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_MintCloseAuthority: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_MintCloseAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CloseAuthority`:
	if err = decoder.Decode(&obj.CloseAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling CloseAuthority:%w", err)
	}
	return nil
}

func (obj *Extension_MintCloseAuthority) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_MintCloseAuthority: %w", err)
	}
	return nil
}

func UnmarshalExtension_MintCloseAuthority(buf []byte) (*Extension_MintCloseAuthority, error) {
	obj := new(Extension_MintCloseAuthority)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_MintCloseAuthority) isExtension() {}

// Variant "confidentialTransferMint" of enum "Extension"
type Extension_ConfidentialTransferMint struct {
	Authority              solanago.PublicKey `json:"authority"`
	AutoApproveNewAccounts bool               `json:"autoApproveNewAccounts"`
	AuditorElgamalPubkey   solanago.PublicKey `json:"auditorElgamalPubkey"`
}

func (obj Extension_ConfidentialTransferMint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `AutoApproveNewAccounts`:
	if err = encoder.Encode(obj.AutoApproveNewAccounts); err != nil {
		return fmt.Errorf("error while marshaling AutoApproveNewAccounts:%w", err)
	}
	// Serialize `AuditorElgamalPubkey`:
	if err = encoder.Encode(obj.AuditorElgamalPubkey); err != nil {
		return fmt.Errorf("error while marshaling AuditorElgamalPubkey:%w", err)
	}
	return nil
}

func (obj Extension_ConfidentialTransferMint) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_ConfidentialTransferMint: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_ConfidentialTransferMint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `AutoApproveNewAccounts`:
	if err = decoder.Decode(&obj.AutoApproveNewAccounts); err != nil {
		return fmt.Errorf("error while unmarshaling AutoApproveNewAccounts:%w", err)
	}
	// Deserialize `AuditorElgamalPubkey`:
	if err = decoder.Decode(&obj.AuditorElgamalPubkey); err != nil {
		return fmt.Errorf("error while unmarshaling AuditorElgamalPubkey:%w", err)
	}
	return nil
}

func (obj *Extension_ConfidentialTransferMint) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_ConfidentialTransferMint: %w", err)
	}
	return nil
}

func UnmarshalExtension_ConfidentialTransferMint(buf []byte) (*Extension_ConfidentialTransferMint, error) {
	obj := new(Extension_ConfidentialTransferMint)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_ConfidentialTransferMint) isExtension() {}

// Variant "confidentialTransferAccount" of enum "Extension"
type Extension_ConfidentialTransferAccount struct {
	Approved                            bool               `json:"approved"`
	ElgamalPubkey                       solanago.PublicKey `json:"elgamalPubkey"`
	PendingBalanceLow                   EncryptedBalance   `json:"pendingBalanceLow"`
	PendingBalanceHigh                  EncryptedBalance   `json:"pendingBalanceHigh"`
	AvailableBalance                    EncryptedBalance   `json:"availableBalance"`
	DecryptableAvailableBalance         DecryptableBalance `json:"decryptableAvailableBalance"`
	AllowConfidentialCredits            bool               `json:"allowConfidentialCredits"`
	AllowNonConfidentialCredits         bool               `json:"allowNonConfidentialCredits"`
	PendingBalanceCreditCounter         uint64             `json:"pendingBalanceCreditCounter"`
	MaximumPendingBalanceCreditCounter  uint64             `json:"maximumPendingBalanceCreditCounter"`
	ExpectedPendingBalanceCreditCounter uint64             `json:"expectedPendingBalanceCreditCounter"`
	ActualPendingBalanceCreditCounter   uint64             `json:"actualPendingBalanceCreditCounter"`
}

func (obj Extension_ConfidentialTransferAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Approved`:
	if err = encoder.Encode(obj.Approved); err != nil {
		return fmt.Errorf("error while marshaling Approved:%w", err)
	}
	// Serialize `ElgamalPubkey`:
	if err = encoder.Encode(obj.ElgamalPubkey); err != nil {
		return fmt.Errorf("error while marshaling ElgamalPubkey:%w", err)
	}
	// Serialize `PendingBalanceLow`:
	if err = encoder.Encode(obj.PendingBalanceLow); err != nil {
		return fmt.Errorf("error while marshaling PendingBalanceLow:%w", err)
	}
	// Serialize `PendingBalanceHigh`:
	if err = encoder.Encode(obj.PendingBalanceHigh); err != nil {
		return fmt.Errorf("error while marshaling PendingBalanceHigh:%w", err)
	}
	// Serialize `AvailableBalance`:
	if err = encoder.Encode(obj.AvailableBalance); err != nil {
		return fmt.Errorf("error while marshaling AvailableBalance:%w", err)
	}
	// Serialize `DecryptableAvailableBalance`:
	if err = encoder.Encode(obj.DecryptableAvailableBalance); err != nil {
		return fmt.Errorf("error while marshaling DecryptableAvailableBalance:%w", err)
	}
	// Serialize `AllowConfidentialCredits`:
	if err = encoder.Encode(obj.AllowConfidentialCredits); err != nil {
		return fmt.Errorf("error while marshaling AllowConfidentialCredits:%w", err)
	}
	// Serialize `AllowNonConfidentialCredits`:
	if err = encoder.Encode(obj.AllowNonConfidentialCredits); err != nil {
		return fmt.Errorf("error while marshaling AllowNonConfidentialCredits:%w", err)
	}
	// Serialize `PendingBalanceCreditCounter`:
	if err = encoder.Encode(obj.PendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while marshaling PendingBalanceCreditCounter:%w", err)
	}
	// Serialize `MaximumPendingBalanceCreditCounter`:
	if err = encoder.Encode(obj.MaximumPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while marshaling MaximumPendingBalanceCreditCounter:%w", err)
	}
	// Serialize `ExpectedPendingBalanceCreditCounter`:
	if err = encoder.Encode(obj.ExpectedPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while marshaling ExpectedPendingBalanceCreditCounter:%w", err)
	}
	// Serialize `ActualPendingBalanceCreditCounter`:
	if err = encoder.Encode(obj.ActualPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while marshaling ActualPendingBalanceCreditCounter:%w", err)
	}
	return nil
}

func (obj Extension_ConfidentialTransferAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_ConfidentialTransferAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_ConfidentialTransferAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Approved`:
	if err = decoder.Decode(&obj.Approved); err != nil {
		return fmt.Errorf("error while unmarshaling Approved:%w", err)
	}
	// Deserialize `ElgamalPubkey`:
	if err = decoder.Decode(&obj.ElgamalPubkey); err != nil {
		return fmt.Errorf("error while unmarshaling ElgamalPubkey:%w", err)
	}
	// Deserialize `PendingBalanceLow`:
	if err = decoder.Decode(&obj.PendingBalanceLow); err != nil {
		return fmt.Errorf("error while unmarshaling PendingBalanceLow:%w", err)
	}
	// Deserialize `PendingBalanceHigh`:
	if err = decoder.Decode(&obj.PendingBalanceHigh); err != nil {
		return fmt.Errorf("error while unmarshaling PendingBalanceHigh:%w", err)
	}
	// Deserialize `AvailableBalance`:
	if err = decoder.Decode(&obj.AvailableBalance); err != nil {
		return fmt.Errorf("error while unmarshaling AvailableBalance:%w", err)
	}
	// Deserialize `DecryptableAvailableBalance`:
	if err = decoder.Decode(&obj.DecryptableAvailableBalance); err != nil {
		return fmt.Errorf("error while unmarshaling DecryptableAvailableBalance:%w", err)
	}
	// Deserialize `AllowConfidentialCredits`:
	if err = decoder.Decode(&obj.AllowConfidentialCredits); err != nil {
		return fmt.Errorf("error while unmarshaling AllowConfidentialCredits:%w", err)
	}
	// Deserialize `AllowNonConfidentialCredits`:
	if err = decoder.Decode(&obj.AllowNonConfidentialCredits); err != nil {
		return fmt.Errorf("error while unmarshaling AllowNonConfidentialCredits:%w", err)
	}
	// Deserialize `PendingBalanceCreditCounter`:
	if err = decoder.Decode(&obj.PendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while unmarshaling PendingBalanceCreditCounter:%w", err)
	}
	// Deserialize `MaximumPendingBalanceCreditCounter`:
	if err = decoder.Decode(&obj.MaximumPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while unmarshaling MaximumPendingBalanceCreditCounter:%w", err)
	}
	// Deserialize `ExpectedPendingBalanceCreditCounter`:
	if err = decoder.Decode(&obj.ExpectedPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while unmarshaling ExpectedPendingBalanceCreditCounter:%w", err)
	}
	// Deserialize `ActualPendingBalanceCreditCounter`:
	if err = decoder.Decode(&obj.ActualPendingBalanceCreditCounter); err != nil {
		return fmt.Errorf("error while unmarshaling ActualPendingBalanceCreditCounter:%w", err)
	}
	return nil
}

func (obj *Extension_ConfidentialTransferAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_ConfidentialTransferAccount: %w", err)
	}
	return nil
}

func UnmarshalExtension_ConfidentialTransferAccount(buf []byte) (*Extension_ConfidentialTransferAccount, error) {
	obj := new(Extension_ConfidentialTransferAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_ConfidentialTransferAccount) isExtension() {}

// Variant "defaultAccountState" of enum "Extension"
type Extension_DefaultAccountState struct {
	State AccountState `json:"state"`
}

func (obj Extension_DefaultAccountState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `State`:
	if err = encoder.Encode(obj.State); err != nil {
		return fmt.Errorf("error while marshaling State:%w", err)
	}
	return nil
}

func (obj Extension_DefaultAccountState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_DefaultAccountState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_DefaultAccountState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `State`:
	if err = decoder.Decode(&obj.State); err != nil {
		return fmt.Errorf("error while unmarshaling State:%w", err)
	}
	return nil
}

func (obj *Extension_DefaultAccountState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_DefaultAccountState: %w", err)
	}
	return nil
}

func UnmarshalExtension_DefaultAccountState(buf []byte) (*Extension_DefaultAccountState, error) {
	obj := new(Extension_DefaultAccountState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_DefaultAccountState) isExtension() {}

type Extension_ImmutableOwner uint8

func (obj Extension_ImmutableOwner) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_ImmutableOwner) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_ImmutableOwner) isExtension() {}

// Variant "memoTransfer" of enum "Extension"
type Extension_MemoTransfer struct {
	RequireIncomingTransferMemos bool `json:"requireIncomingTransferMemos"`
}

func (obj Extension_MemoTransfer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RequireIncomingTransferMemos`:
	if err = encoder.Encode(obj.RequireIncomingTransferMemos); err != nil {
		return fmt.Errorf("error while marshaling RequireIncomingTransferMemos:%w", err)
	}
	return nil
}

func (obj Extension_MemoTransfer) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_MemoTransfer: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_MemoTransfer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RequireIncomingTransferMemos`:
	if err = decoder.Decode(&obj.RequireIncomingTransferMemos); err != nil {
		return fmt.Errorf("error while unmarshaling RequireIncomingTransferMemos:%w", err)
	}
	return nil
}

func (obj *Extension_MemoTransfer) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_MemoTransfer: %w", err)
	}
	return nil
}

func UnmarshalExtension_MemoTransfer(buf []byte) (*Extension_MemoTransfer, error) {
	obj := new(Extension_MemoTransfer)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_MemoTransfer) isExtension() {}

type Extension_NonTransferable uint8

func (obj Extension_NonTransferable) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_NonTransferable) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_NonTransferable) isExtension() {}

// Variant "interestBearingConfig" of enum "Extension"
type Extension_InterestBearingConfig struct {
	RateAuthority           solanago.PublicKey `json:"rateAuthority"`
	InitializationTimestamp uint64             `json:"initializationTimestamp"`
	PreUpdateAverageRate    int16              `json:"preUpdateAverageRate"`
	LastUpdateTimestamp     uint64             `json:"lastUpdateTimestamp"`
	CurrentRate             int16              `json:"currentRate"`
}

func (obj Extension_InterestBearingConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RateAuthority`:
	if err = encoder.Encode(obj.RateAuthority); err != nil {
		return fmt.Errorf("error while marshaling RateAuthority:%w", err)
	}
	// Serialize `InitializationTimestamp`:
	if err = encoder.Encode(obj.InitializationTimestamp); err != nil {
		return fmt.Errorf("error while marshaling InitializationTimestamp:%w", err)
	}
	// Serialize `PreUpdateAverageRate`:
	if err = encoder.Encode(obj.PreUpdateAverageRate); err != nil {
		return fmt.Errorf("error while marshaling PreUpdateAverageRate:%w", err)
	}
	// Serialize `LastUpdateTimestamp`:
	if err = encoder.Encode(obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while marshaling LastUpdateTimestamp:%w", err)
	}
	// Serialize `CurrentRate`:
	if err = encoder.Encode(obj.CurrentRate); err != nil {
		return fmt.Errorf("error while marshaling CurrentRate:%w", err)
	}
	return nil
}

func (obj Extension_InterestBearingConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_InterestBearingConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_InterestBearingConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RateAuthority`:
	if err = decoder.Decode(&obj.RateAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling RateAuthority:%w", err)
	}
	// Deserialize `InitializationTimestamp`:
	if err = decoder.Decode(&obj.InitializationTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling InitializationTimestamp:%w", err)
	}
	// Deserialize `PreUpdateAverageRate`:
	if err = decoder.Decode(&obj.PreUpdateAverageRate); err != nil {
		return fmt.Errorf("error while unmarshaling PreUpdateAverageRate:%w", err)
	}
	// Deserialize `LastUpdateTimestamp`:
	if err = decoder.Decode(&obj.LastUpdateTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling LastUpdateTimestamp:%w", err)
	}
	// Deserialize `CurrentRate`:
	if err = decoder.Decode(&obj.CurrentRate); err != nil {
		return fmt.Errorf("error while unmarshaling CurrentRate:%w", err)
	}
	return nil
}

func (obj *Extension_InterestBearingConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_InterestBearingConfig: %w", err)
	}
	return nil
}

func UnmarshalExtension_InterestBearingConfig(buf []byte) (*Extension_InterestBearingConfig, error) {
	obj := new(Extension_InterestBearingConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_InterestBearingConfig) isExtension() {}

// Variant "cpiGuard" of enum "Extension"
type Extension_CpiGuard struct {
	LockCpi bool `json:"lockCpi"`
}

func (obj Extension_CpiGuard) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LockCpi`:
	if err = encoder.Encode(obj.LockCpi); err != nil {
		return fmt.Errorf("error while marshaling LockCpi:%w", err)
	}
	return nil
}

func (obj Extension_CpiGuard) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_CpiGuard: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_CpiGuard) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LockCpi`:
	if err = decoder.Decode(&obj.LockCpi); err != nil {
		return fmt.Errorf("error while unmarshaling LockCpi:%w", err)
	}
	return nil
}

func (obj *Extension_CpiGuard) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_CpiGuard: %w", err)
	}
	return nil
}

func UnmarshalExtension_CpiGuard(buf []byte) (*Extension_CpiGuard, error) {
	obj := new(Extension_CpiGuard)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_CpiGuard) isExtension() {}

// Variant "permanentDelegate" of enum "Extension"
type Extension_PermanentDelegate struct {
	Delegate solanago.PublicKey `json:"delegate"`
}

func (obj Extension_PermanentDelegate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Delegate`:
	if err = encoder.Encode(obj.Delegate); err != nil {
		return fmt.Errorf("error while marshaling Delegate:%w", err)
	}
	return nil
}

func (obj Extension_PermanentDelegate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_PermanentDelegate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_PermanentDelegate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Delegate`:
	if err = decoder.Decode(&obj.Delegate); err != nil {
		return fmt.Errorf("error while unmarshaling Delegate:%w", err)
	}
	return nil
}

func (obj *Extension_PermanentDelegate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_PermanentDelegate: %w", err)
	}
	return nil
}

func UnmarshalExtension_PermanentDelegate(buf []byte) (*Extension_PermanentDelegate, error) {
	obj := new(Extension_PermanentDelegate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_PermanentDelegate) isExtension() {}

type Extension_NonTransferableAccount uint8

func (obj Extension_NonTransferableAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_NonTransferableAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_NonTransferableAccount) isExtension() {}

// Variant "transferHook" of enum "Extension"
type Extension_TransferHook struct {
	Authority solanago.PublicKey `json:"authority"`
	ProgramId solanago.PublicKey `json:"programId"`
}

func (obj Extension_TransferHook) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `ProgramId`:
	if err = encoder.Encode(obj.ProgramId); err != nil {
		return fmt.Errorf("error while marshaling ProgramId:%w", err)
	}
	return nil
}

func (obj Extension_TransferHook) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TransferHook: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TransferHook) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `ProgramId`:
	if err = decoder.Decode(&obj.ProgramId); err != nil {
		return fmt.Errorf("error while unmarshaling ProgramId:%w", err)
	}
	return nil
}

func (obj *Extension_TransferHook) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TransferHook: %w", err)
	}
	return nil
}

func UnmarshalExtension_TransferHook(buf []byte) (*Extension_TransferHook, error) {
	obj := new(Extension_TransferHook)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TransferHook) isExtension() {}

// Variant "transferHookAccount" of enum "Extension"
type Extension_TransferHookAccount struct {
	Transferring bool `json:"transferring"`
}

func (obj Extension_TransferHookAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Transferring`:
	if err = encoder.Encode(obj.Transferring); err != nil {
		return fmt.Errorf("error while marshaling Transferring:%w", err)
	}
	return nil
}

func (obj Extension_TransferHookAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TransferHookAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TransferHookAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Transferring`:
	if err = decoder.Decode(&obj.Transferring); err != nil {
		return fmt.Errorf("error while unmarshaling Transferring:%w", err)
	}
	return nil
}

func (obj *Extension_TransferHookAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TransferHookAccount: %w", err)
	}
	return nil
}

func UnmarshalExtension_TransferHookAccount(buf []byte) (*Extension_TransferHookAccount, error) {
	obj := new(Extension_TransferHookAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TransferHookAccount) isExtension() {}

// Variant "confidentialTransferFee" of enum "Extension"
type Extension_ConfidentialTransferFee struct {
	Authority            solanago.PublicKey `json:"authority"`
	ElgamalPubkey        solanago.PublicKey `json:"elgamalPubkey"`
	HarvestToMintEnabled bool               `json:"harvestToMintEnabled"`
	WithheldAmount       EncryptedBalance   `json:"withheldAmount"`
}

func (obj Extension_ConfidentialTransferFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `ElgamalPubkey`:
	if err = encoder.Encode(obj.ElgamalPubkey); err != nil {
		return fmt.Errorf("error while marshaling ElgamalPubkey:%w", err)
	}
	// Serialize `HarvestToMintEnabled`:
	if err = encoder.Encode(obj.HarvestToMintEnabled); err != nil {
		return fmt.Errorf("error while marshaling HarvestToMintEnabled:%w", err)
	}
	// Serialize `WithheldAmount`:
	if err = encoder.Encode(obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while marshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj Extension_ConfidentialTransferFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_ConfidentialTransferFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_ConfidentialTransferFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `ElgamalPubkey`:
	if err = decoder.Decode(&obj.ElgamalPubkey); err != nil {
		return fmt.Errorf("error while unmarshaling ElgamalPubkey:%w", err)
	}
	// Deserialize `HarvestToMintEnabled`:
	if err = decoder.Decode(&obj.HarvestToMintEnabled); err != nil {
		return fmt.Errorf("error while unmarshaling HarvestToMintEnabled:%w", err)
	}
	// Deserialize `WithheldAmount`:
	if err = decoder.Decode(&obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while unmarshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj *Extension_ConfidentialTransferFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_ConfidentialTransferFee: %w", err)
	}
	return nil
}

func UnmarshalExtension_ConfidentialTransferFee(buf []byte) (*Extension_ConfidentialTransferFee, error) {
	obj := new(Extension_ConfidentialTransferFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_ConfidentialTransferFee) isExtension() {}

// Variant "confidentialTransferFeeAmount" of enum "Extension"
type Extension_ConfidentialTransferFeeAmount struct {
	WithheldAmount EncryptedBalance `json:"withheldAmount"`
}

func (obj Extension_ConfidentialTransferFeeAmount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `WithheldAmount`:
	if err = encoder.Encode(obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while marshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj Extension_ConfidentialTransferFeeAmount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_ConfidentialTransferFeeAmount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_ConfidentialTransferFeeAmount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `WithheldAmount`:
	if err = decoder.Decode(&obj.WithheldAmount); err != nil {
		return fmt.Errorf("error while unmarshaling WithheldAmount:%w", err)
	}
	return nil
}

func (obj *Extension_ConfidentialTransferFeeAmount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_ConfidentialTransferFeeAmount: %w", err)
	}
	return nil
}

func UnmarshalExtension_ConfidentialTransferFeeAmount(buf []byte) (*Extension_ConfidentialTransferFeeAmount, error) {
	obj := new(Extension_ConfidentialTransferFeeAmount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_ConfidentialTransferFeeAmount) isExtension() {}

// Variant "metadataPointer" of enum "Extension"
type Extension_MetadataPointer struct {
	Authority       solanago.PublicKey `json:"authority"`
	MetadataAddress solanago.PublicKey `json:"metadataAddress"`
}

func (obj Extension_MetadataPointer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `MetadataAddress`:
	if err = encoder.Encode(obj.MetadataAddress); err != nil {
		return fmt.Errorf("error while marshaling MetadataAddress:%w", err)
	}
	return nil
}

func (obj Extension_MetadataPointer) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_MetadataPointer: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_MetadataPointer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `MetadataAddress`:
	if err = decoder.Decode(&obj.MetadataAddress); err != nil {
		return fmt.Errorf("error while unmarshaling MetadataAddress:%w", err)
	}
	return nil
}

func (obj *Extension_MetadataPointer) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_MetadataPointer: %w", err)
	}
	return nil
}

func UnmarshalExtension_MetadataPointer(buf []byte) (*Extension_MetadataPointer, error) {
	obj := new(Extension_MetadataPointer)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_MetadataPointer) isExtension() {}

// Variant "tokenMetadata" of enum "Extension"
type Extension_TokenMetadata struct {
	UpdateAuthority solanago.PublicKey `json:"updateAuthority"`
	Mint            solanago.PublicKey `json:"mint"`
	Name            string             `json:"name"`
	Symbol          string             `json:"symbol"`
	Uri             string             `json:"uri"`
}

func (obj Extension_TokenMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UpdateAuthority`:
	if err = encoder.Encode(obj.UpdateAuthority); err != nil {
		return fmt.Errorf("error while marshaling UpdateAuthority:%w", err)
	}
	// Serialize `Mint`:
	if err = encoder.Encode(obj.Mint); err != nil {
		return fmt.Errorf("error while marshaling Mint:%w", err)
	}
	// Serialize `Name`:
	if err = encoder.Encode(obj.Name); err != nil {
		return fmt.Errorf("error while marshaling Name:%w", err)
	}
	// Serialize `Symbol`:
	if err = encoder.Encode(obj.Symbol); err != nil {
		return fmt.Errorf("error while marshaling Symbol:%w", err)
	}
	// Serialize `Uri`:
	if err = encoder.Encode(obj.Uri); err != nil {
		return fmt.Errorf("error while marshaling Uri:%w", err)
	}
	return nil
}

func (obj Extension_TokenMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TokenMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TokenMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UpdateAuthority`:
	if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling UpdateAuthority:%w", err)
	}
	// Deserialize `Mint`:
	if err = decoder.Decode(&obj.Mint); err != nil {
		return fmt.Errorf("error while unmarshaling Mint:%w", err)
	}
	// Deserialize `Name`:
	if err = decoder.Decode(&obj.Name); err != nil {
		return fmt.Errorf("error while unmarshaling Name:%w", err)
	}
	// Deserialize `Symbol`:
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return fmt.Errorf("error while unmarshaling Symbol:%w", err)
	}
	// Deserialize `Uri`:
	if err = decoder.Decode(&obj.Uri); err != nil {
		return fmt.Errorf("error while unmarshaling Uri:%w", err)
	}
	return nil
}

func (obj *Extension_TokenMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TokenMetadata: %w", err)
	}
	return nil
}

func UnmarshalExtension_TokenMetadata(buf []byte) (*Extension_TokenMetadata, error) {
	obj := new(Extension_TokenMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TokenMetadata) isExtension() {}

// Variant "groupPointer" of enum "Extension"
type Extension_GroupPointer struct {
	Authority    solanago.PublicKey `json:"authority"`
	GroupAddress solanago.PublicKey `json:"groupAddress"`
}

func (obj Extension_GroupPointer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `GroupAddress`:
	if err = encoder.Encode(obj.GroupAddress); err != nil {
		return fmt.Errorf("error while marshaling GroupAddress:%w", err)
	}
	return nil
}

func (obj Extension_GroupPointer) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_GroupPointer: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_GroupPointer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `GroupAddress`:
	if err = decoder.Decode(&obj.GroupAddress); err != nil {
		return fmt.Errorf("error while unmarshaling GroupAddress:%w", err)
	}
	return nil
}

func (obj *Extension_GroupPointer) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_GroupPointer: %w", err)
	}
	return nil
}

func UnmarshalExtension_GroupPointer(buf []byte) (*Extension_GroupPointer, error) {
	obj := new(Extension_GroupPointer)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_GroupPointer) isExtension() {}

// Variant "tokenGroup" of enum "Extension"
type Extension_TokenGroup struct {
	UpdateAuthority solanago.PublicKey `json:"updateAuthority"`
	Mint            solanago.PublicKey `json:"mint"`
	Size            uint64             `json:"size"`
	MaxSize         uint64             `json:"maxSize"`
}

func (obj Extension_TokenGroup) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UpdateAuthority`:
	if err = encoder.Encode(obj.UpdateAuthority); err != nil {
		return fmt.Errorf("error while marshaling UpdateAuthority:%w", err)
	}
	// Serialize `Mint`:
	if err = encoder.Encode(obj.Mint); err != nil {
		return fmt.Errorf("error while marshaling Mint:%w", err)
	}
	// Serialize `Size`:
	if err = encoder.Encode(obj.Size); err != nil {
		return fmt.Errorf("error while marshaling Size:%w", err)
	}
	// Serialize `MaxSize`:
	if err = encoder.Encode(obj.MaxSize); err != nil {
		return fmt.Errorf("error while marshaling MaxSize:%w", err)
	}
	return nil
}

func (obj Extension_TokenGroup) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TokenGroup: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TokenGroup) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UpdateAuthority`:
	if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling UpdateAuthority:%w", err)
	}
	// Deserialize `Mint`:
	if err = decoder.Decode(&obj.Mint); err != nil {
		return fmt.Errorf("error while unmarshaling Mint:%w", err)
	}
	// Deserialize `Size`:
	if err = decoder.Decode(&obj.Size); err != nil {
		return fmt.Errorf("error while unmarshaling Size:%w", err)
	}
	// Deserialize `MaxSize`:
	if err = decoder.Decode(&obj.MaxSize); err != nil {
		return fmt.Errorf("error while unmarshaling MaxSize:%w", err)
	}
	return nil
}

func (obj *Extension_TokenGroup) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TokenGroup: %w", err)
	}
	return nil
}

func UnmarshalExtension_TokenGroup(buf []byte) (*Extension_TokenGroup, error) {
	obj := new(Extension_TokenGroup)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TokenGroup) isExtension() {}

// Variant "groupMemberPointer" of enum "Extension"
type Extension_GroupMemberPointer struct {
	Authority     solanago.PublicKey `json:"authority"`
	MemberAddress solanago.PublicKey `json:"memberAddress"`
}

func (obj Extension_GroupMemberPointer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `MemberAddress`:
	if err = encoder.Encode(obj.MemberAddress); err != nil {
		return fmt.Errorf("error while marshaling MemberAddress:%w", err)
	}
	return nil
}

func (obj Extension_GroupMemberPointer) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_GroupMemberPointer: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_GroupMemberPointer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `MemberAddress`:
	if err = decoder.Decode(&obj.MemberAddress); err != nil {
		return fmt.Errorf("error while unmarshaling MemberAddress:%w", err)
	}
	return nil
}

func (obj *Extension_GroupMemberPointer) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_GroupMemberPointer: %w", err)
	}
	return nil
}

func UnmarshalExtension_GroupMemberPointer(buf []byte) (*Extension_GroupMemberPointer, error) {
	obj := new(Extension_GroupMemberPointer)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_GroupMemberPointer) isExtension() {}

// Variant "tokenGroupMember" of enum "Extension"
type Extension_TokenGroupMember struct {
	Mint         solanago.PublicKey `json:"mint"`
	Group        solanago.PublicKey `json:"group"`
	MemberNumber uint64             `json:"memberNumber"`
}

func (obj Extension_TokenGroupMember) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Mint`:
	if err = encoder.Encode(obj.Mint); err != nil {
		return fmt.Errorf("error while marshaling Mint:%w", err)
	}
	// Serialize `Group`:
	if err = encoder.Encode(obj.Group); err != nil {
		return fmt.Errorf("error while marshaling Group:%w", err)
	}
	// Serialize `MemberNumber`:
	if err = encoder.Encode(obj.MemberNumber); err != nil {
		return fmt.Errorf("error while marshaling MemberNumber:%w", err)
	}
	return nil
}

func (obj Extension_TokenGroupMember) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_TokenGroupMember: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_TokenGroupMember) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Mint`:
	if err = decoder.Decode(&obj.Mint); err != nil {
		return fmt.Errorf("error while unmarshaling Mint:%w", err)
	}
	// Deserialize `Group`:
	if err = decoder.Decode(&obj.Group); err != nil {
		return fmt.Errorf("error while unmarshaling Group:%w", err)
	}
	// Deserialize `MemberNumber`:
	if err = decoder.Decode(&obj.MemberNumber); err != nil {
		return fmt.Errorf("error while unmarshaling MemberNumber:%w", err)
	}
	return nil
}

func (obj *Extension_TokenGroupMember) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_TokenGroupMember: %w", err)
	}
	return nil
}

func UnmarshalExtension_TokenGroupMember(buf []byte) (*Extension_TokenGroupMember, error) {
	obj := new(Extension_TokenGroupMember)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_TokenGroupMember) isExtension() {}

type Extension_ConfidentialMintBurn uint8

func (obj Extension_ConfidentialMintBurn) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_ConfidentialMintBurn) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_ConfidentialMintBurn) isExtension() {}

// Variant "scaledUiAmountConfig" of enum "Extension"
type Extension_ScaledUiAmountConfig struct {
	Authority                       solanago.PublicKey `json:"authority"`
	Multiplier                      float64            `json:"multiplier"`
	NewMultiplierEffectiveTimestamp uint64             `json:"newMultiplierEffectiveTimestamp"`
	NewMultiplier                   float64            `json:"newMultiplier"`
}

func (obj Extension_ScaledUiAmountConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `Multiplier`:
	if err = encoder.Encode(obj.Multiplier); err != nil {
		return fmt.Errorf("error while marshaling Multiplier:%w", err)
	}
	// Serialize `NewMultiplierEffectiveTimestamp`:
	if err = encoder.Encode(obj.NewMultiplierEffectiveTimestamp); err != nil {
		return fmt.Errorf("error while marshaling NewMultiplierEffectiveTimestamp:%w", err)
	}
	// Serialize `NewMultiplier`:
	if err = encoder.Encode(obj.NewMultiplier); err != nil {
		return fmt.Errorf("error while marshaling NewMultiplier:%w", err)
	}
	return nil
}

func (obj Extension_ScaledUiAmountConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_ScaledUiAmountConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_ScaledUiAmountConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `Multiplier`:
	if err = decoder.Decode(&obj.Multiplier); err != nil {
		return fmt.Errorf("error while unmarshaling Multiplier:%w", err)
	}
	// Deserialize `NewMultiplierEffectiveTimestamp`:
	if err = decoder.Decode(&obj.NewMultiplierEffectiveTimestamp); err != nil {
		return fmt.Errorf("error while unmarshaling NewMultiplierEffectiveTimestamp:%w", err)
	}
	// Deserialize `NewMultiplier`:
	if err = decoder.Decode(&obj.NewMultiplier); err != nil {
		return fmt.Errorf("error while unmarshaling NewMultiplier:%w", err)
	}
	return nil
}

func (obj *Extension_ScaledUiAmountConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_ScaledUiAmountConfig: %w", err)
	}
	return nil
}

func UnmarshalExtension_ScaledUiAmountConfig(buf []byte) (*Extension_ScaledUiAmountConfig, error) {
	obj := new(Extension_ScaledUiAmountConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_ScaledUiAmountConfig) isExtension() {}

// Variant "pausableConfig" of enum "Extension"
type Extension_PausableConfig struct {
	Authority solanago.PublicKey `json:"authority"`
	Paused    bool               `json:"paused"`
}

func (obj Extension_PausableConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	// Serialize `Paused`:
	if err = encoder.Encode(obj.Paused); err != nil {
		return fmt.Errorf("error while marshaling Paused:%w", err)
	}
	return nil
}

func (obj Extension_PausableConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Extension_PausableConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Extension_PausableConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	// Deserialize `Paused`:
	if err = decoder.Decode(&obj.Paused); err != nil {
		return fmt.Errorf("error while unmarshaling Paused:%w", err)
	}
	return nil
}

func (obj *Extension_PausableConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Extension_PausableConfig: %w", err)
	}
	return nil
}

func UnmarshalExtension_PausableConfig(buf []byte) (*Extension_PausableConfig, error) {
	obj := new(Extension_PausableConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *Extension_PausableConfig) isExtension() {}

type Extension_PausableAccount uint8

func (obj Extension_PausableAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Extension_PausableAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *Extension_PausableAccount) isExtension() {}

type TokenMetadataField binary.BorshEnum

const (
	TokenMetadataField_Name TokenMetadataField = iota
	TokenMetadataField_Symbol
	TokenMetadataField_Uri
	TokenMetadataField_Key
)

func (value TokenMetadataField) String() string {
	switch value {
	case TokenMetadataField_Name:
		return "name"
	case TokenMetadataField_Symbol:
		return "symbol"
	case TokenMetadataField_Uri:
		return "uri"
	case TokenMetadataField_Key:
		return "key"
	default:
		return ""
	}
}

// The "isPausableInstruction" interface for the "PausableInstruction" complex enum.
type PausableInstruction interface {
	isPausableInstruction()
}

type pausableInstructionEnumContainer struct {
	Enum       binary.BorshEnum `bin:"enum"`
	Initialize PausableInstruction_Initialize
	Pause      PausableInstruction_Pause
	Resume     PausableInstruction_Resume
}

func DecodePausableInstruction(decoder *binary.Decoder) (PausableInstruction, error) {
	{
		tmp := new(pausableInstructionEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing PausableInstruction: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.Initialize, nil
		case 1:
			return (*PausableInstruction_Pause)(&tmp.Enum), nil
		case 2:
			return (*PausableInstruction_Resume)(&tmp.Enum), nil
		default:
			return nil, fmt.Errorf("PausableInstruction: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodePausableInstruction(encoder *binary.Encoder, value PausableInstruction) error {
	{
		tmp := pausableInstructionEnumContainer{}
		switch realvalue := value.(type) {
		case *PausableInstruction_Initialize:
			tmp.Enum = 0
			tmp.Initialize = *realvalue
		case *PausableInstruction_Pause:
			tmp.Enum = 1
			tmp.Pause = *realvalue
		case *PausableInstruction_Resume:
			tmp.Enum = 2
			tmp.Resume = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "initialize" of enum "PausableInstruction"
type PausableInstruction_Initialize struct {
	Authority solanago.PublicKey `json:"authority"`
}

func (obj PausableInstruction_Initialize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	if err = encoder.Encode(obj.Authority); err != nil {
		return fmt.Errorf("error while marshaling Authority:%w", err)
	}
	return nil
}

func (obj PausableInstruction_Initialize) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PausableInstruction_Initialize: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PausableInstruction_Initialize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	if err = decoder.Decode(&obj.Authority); err != nil {
		return fmt.Errorf("error while unmarshaling Authority:%w", err)
	}
	return nil
}

func (obj *PausableInstruction_Initialize) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PausableInstruction_Initialize: %w", err)
	}
	return nil
}

func UnmarshalPausableInstruction_Initialize(buf []byte) (*PausableInstruction_Initialize, error) {
	obj := new(PausableInstruction_Initialize)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PausableInstruction_Initialize) isPausableInstruction() {}

type PausableInstruction_Pause uint8

func (obj PausableInstruction_Pause) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *PausableInstruction_Pause) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *PausableInstruction_Pause) isPausableInstruction() {}

type PausableInstruction_Resume uint8

func (obj PausableInstruction_Resume) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *PausableInstruction_Resume) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *PausableInstruction_Resume) isPausableInstruction() {}
