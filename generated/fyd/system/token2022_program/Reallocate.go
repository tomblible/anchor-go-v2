// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token2022_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "reallocate" instruction.

// Check if a token account is large enough for a list of ExtensionTypes,
// and if not, use reallocation to increase the data size.
type Reallocate struct {
	// Params:
	ExtensionTypes []Extension
	// Accounts:
	// [0] = [writable] account
	Account solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [2] = [] systemProgram
	SystemProgram solanago.PublicKey `bin:"-"`
	// [3] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Reallocate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `extensionTypesParam`:
	{
		if err = encoder.WriteLength(len(obj.ExtensionTypes)); err != nil {
			return fmt.Errorf("error while marshaling extensionTypesParam length: %w", err)
		}
		for i := 0; i < len(obj.ExtensionTypes); i++ {
			if err = EncodeExtension(encoder, obj.ExtensionTypes[i]); err != nil {
				return fmt.Errorf("error while marshaling extensionTypesParam-%d: %w", i, err)
			}
		}
	}
	return nil
}

func (obj *Reallocate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ExtensionTypes`:
	{
		vecLen, err := decoder.ReadLength()
		if err != nil {
			return fmt.Errorf("error while unmarshalingExtensionTypes:%w", err)
		}
		obj.ExtensionTypes = make([]Extension, vecLen)
		for i := 0; i < vecLen; i++ {
			if obj.ExtensionTypes[i], err = DecodeExtension(decoder); err != nil {
				return fmt.Errorf("error while unmarshaling ExtensionTypes-%d:%w", i, err)
			}
		}
	}
	return nil
}

func (obj *Reallocate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 4 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 4, len(accounts))
	}
	obj.Account = accounts[0]
	obj.Payer = accounts[1]
	obj.SystemProgram = accounts[2]
	obj.Owner = accounts[3]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Reallocate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Reallocate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Reallocate)
}

func (*Reallocate) NewInstance() programparser.Instruction {
	return new(Reallocate)
}

func (obj *Reallocate) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 4 {
		return nil
	}
	return obj.PublicKeySlice[4:]
}

// Builds a "reallocate" instruction.
// Check if a token account is large enough for a list of ExtensionTypes, // and if not, use reallocation to increase the data size.
func NewReallocateInstruction(
	// Params:
	extensionTypesParam []Extension,

	// Accounts:
	account solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 4, 4+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Reallocate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `extensionTypesParam`:
		{
			if err = enc__.WriteLength(len(extensionTypesParam)); err != nil {
				return nil, fmt.Errorf("error while marshaling extensionTypesParam length: %w", err)
			}
			for i := 0; i < len(extensionTypesParam); i++ {
				if err = EncodeExtension(enc__, extensionTypesParam[i]); err != nil {
					return nil, fmt.Errorf("error while marshaling extensionTypesParam-%d: %w", i, err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] account
		metas_[0] = solanago.NewAccountMeta(account, true, false)
		// [1] = [writable,signer] payer
		metas_[1] = solanago.NewAccountMeta(payer, true, true)
		// [2] = [] systemProgram
		metas_[2] = solanago.NewAccountMeta(systemProgram, false, false)
		// [3] = [,signer] owner
		metas_[3] = solanago.NewAccountMeta(owner, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildReallocate" instruction.
// Check if a token account is large enough for a list of ExtensionTypes, // and if not, use reallocation to increase the data size.
func BuildReallocate(
	// Params:
	extensionTypesParam []Extension,

	// Accounts:
	account solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewReallocateInstruction(
		extensionTypesParam,
		account,
		payer,
		systemProgram,
		owner,
		remaining__...,
	)
	return instruction_
}
