// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "burn_nft" instruction.
type BurnNft struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [2] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [writable] token_account
	TokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [writable] master_edition_account
	MasterEditionAccount solanago.PublicKey `bin:"-"`
	// [5] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [6] = [writable,optional] collection_metadata
	CollectionMetadata solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj BurnNft) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *BurnNft) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *BurnNft) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Owner = accounts[1]
	obj.Mint = accounts[2]
	obj.TokenAccount = accounts[3]
	obj.MasterEditionAccount = accounts[4]
	obj.SplTokenProgram = accounts[5]
	obj.CollectionMetadata = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *BurnNft) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*BurnNft) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_BurnNft)
}

func (*BurnNft) NewInstance() programparser.Instruction {
	return new(BurnNft)
}

func (obj *BurnNft) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "burn_nft" instruction.
func NewBurnNftInstruction(
	metadata solanago.PublicKey,
	owner solanago.PublicKey,
	mint solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	masterEditionAccount solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_BurnNft[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable,signer] owner
		// NFT owner
		metas_[1] = solanago.NewAccountMeta(owner, true, true)
		// [2] = [writable] mint
		// Mint of the NFT
		metas_[2] = solanago.NewAccountMeta(mint, true, false)
		// [3] = [writable] token_account
		// Token account to close
		metas_[3] = solanago.NewAccountMeta(tokenAccount, true, false)
		// [4] = [writable] master_edition_account
		// MasterEdition2 of the NFT
		metas_[4] = solanago.NewAccountMeta(masterEditionAccount, true, false)
		// [5] = [] spl_token_program
		// SPL Token Program
		metas_[5] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [6] = [writable,optional] collection_metadata
		// Metadata of the Collection
		metas_[6] = solanago.NewAccountMeta(collectionMetadata, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildBurnNft" instruction.
func BuildBurnNft(
	metadata solanago.PublicKey,
	owner solanago.PublicKey,
	mint solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	masterEditionAccount solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewBurnNftInstruction(
		metadata,
		owner,
		mint,
		tokenAccount,
		masterEditionAccount,
		splTokenProgram,
		collectionMetadata,
		remaining__...,
	)
	return instruction_
}
