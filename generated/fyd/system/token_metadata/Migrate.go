// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "migrate" instruction.
type Migrate struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable] edition
	Edition solanago.PublicKey `bin:"-"`
	// [2] = [writable] token
	Token solanago.PublicKey `bin:"-"`
	// [3] = [] token_owner
	TokenOwner solanago.PublicKey `bin:"-"`
	// [4] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [6] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [7] = [] collection_metadata
	CollectionMetadata solanago.PublicKey `bin:"-"`
	// [8] = [] delegate_record
	DelegateRecord solanago.PublicKey `bin:"-"`
	// [9] = [writable] token_record
	TokenRecord solanago.PublicKey `bin:"-"`
	// [10] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [11] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [12] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [13] = [,optional] authorization_rules_program
	AuthorizationRulesProgram solanago.PublicKey `bin:"-"`
	// [14] = [,optional] authorization_rules
	AuthorizationRules solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Migrate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Migrate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *Migrate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Edition = accounts[1]
	obj.Token = accounts[2]
	obj.TokenOwner = accounts[3]
	obj.Mint = accounts[4]
	obj.Payer = accounts[5]
	obj.Authority = accounts[6]
	obj.CollectionMetadata = accounts[7]
	obj.DelegateRecord = accounts[8]
	obj.TokenRecord = accounts[9]
	obj.SystemProgram = accounts[10]
	obj.SysvarInstructions = accounts[11]
	obj.SplTokenProgram = accounts[12]
	obj.AuthorizationRulesProgram = accounts[13]
	obj.AuthorizationRules = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Migrate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Migrate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Migrate)
}

func (*Migrate) NewInstance() programparser.Instruction {
	return new(Migrate)
}

func (obj *Migrate) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 15 {
		return nil
	}
	return obj.PublicKeySlice[15:]
}

// Builds a "migrate" instruction.
func NewMigrateInstruction(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	mint solanago.PublicKey,
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Migrate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata account
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable] edition
		// Edition account
		metas_[1] = solanago.NewAccountMeta(edition, true, false)
		// [2] = [writable] token
		// Token account
		metas_[2] = solanago.NewAccountMeta(token, true, false)
		// [3] = [] token_owner
		// Token account owner
		metas_[3] = solanago.NewAccountMeta(tokenOwner, false, false)
		// [4] = [] mint
		// Mint account
		metas_[4] = solanago.NewAccountMeta(mint, false, false)
		// [5] = [writable,signer] payer
		// Payer
		metas_[5] = solanago.NewAccountMeta(payer, true, true)
		// [6] = [,signer] authority
		// Update authority
		metas_[6] = solanago.NewAccountMeta(authority, false, true)
		// [7] = [] collection_metadata
		// Collection metadata account
		metas_[7] = solanago.NewAccountMeta(collectionMetadata, false, false)
		// [8] = [] delegate_record
		// Delegate record account
		metas_[8] = solanago.NewAccountMeta(delegateRecord, false, false)
		// [9] = [writable] token_record
		// Token record account
		metas_[9] = solanago.NewAccountMeta(tokenRecord, true, false)
		// [10] = [] system_program
		// System program
		metas_[10] = solanago.NewAccountMeta(systemProgram, false, false)
		// [11] = [] sysvar_instructions
		// Instruction sysvar account
		metas_[11] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [12] = [] spl_token_program
		// SPL Token Program
		metas_[12] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [13] = [,optional] authorization_rules_program
		// Token Authorization Rules Program
		metas_[13] = solanago.NewAccountMeta(authorizationRulesProgram, false, false)
		// [14] = [,optional] authorization_rules
		// Token Authorization Rules account
		metas_[14] = solanago.NewAccountMeta(authorizationRules, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMigrate" instruction.
func BuildMigrate(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	mint solanago.PublicKey,
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMigrateInstruction(
		metadata,
		edition,
		token,
		tokenOwner,
		mint,
		payer,
		authority,
		collectionMetadata,
		delegateRecord,
		tokenRecord,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		authorizationRulesProgram,
		authorizationRules,
		remaining__...,
	)
	return instruction_
}
