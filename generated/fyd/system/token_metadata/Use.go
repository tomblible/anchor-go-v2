// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "use" instruction.
type Use struct {
	// Params:
	UseArgs UseArgs
	// Accounts:
	// [0] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [writable,optional] delegate_record
	DelegateRecord solanago.PublicKey `bin:"-"`
	// [2] = [writable,optional] token
	Token solanago.PublicKey `bin:"-"`
	// [3] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [4] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [5] = [writable,optional] edition
	Edition solanago.PublicKey `bin:"-"`
	// [6] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [9] = [,optional] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [10] = [,optional] authorization_rules_program
	AuthorizationRulesProgram solanago.PublicKey `bin:"-"`
	// [11] = [,optional] authorization_rules
	AuthorizationRules solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Use) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `useArgsParam`:
	{
		if err = EncodeUseArgs(encoder, obj.UseArgs); err != nil {
			return fmt.Errorf("error while marshalinguseArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Use) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UseArgs`:
	{
		var err error
		obj.UseArgs, err = DecodeUseArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Use) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 12 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 12, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.DelegateRecord = accounts[1]
	obj.Token = accounts[2]
	obj.Mint = accounts[3]
	obj.Metadata = accounts[4]
	obj.Edition = accounts[5]
	obj.Payer = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.SysvarInstructions = accounts[8]
	obj.SplTokenProgram = accounts[9]
	obj.AuthorizationRulesProgram = accounts[10]
	obj.AuthorizationRules = accounts[11]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Use) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Use) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Use)
}

func (*Use) NewInstance() programparser.Instruction {
	return new(Use)
}

func (obj *Use) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 12 {
		return nil
	}
	return obj.PublicKeySlice[12:]
}

// Builds a "use" instruction.
func NewUseInstruction(
	// Params:
	useArgsParam UseArgs,

	// Accounts:
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	token solanago.PublicKey,
	mint solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 12, 12+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Use[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `useArgsParam`:
		{
			if err = EncodeUseArgs(enc__, useArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalinguseArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] authority
		// Token owner or delegate
		metas_[0] = solanago.NewAccountMeta(authority, false, true)
		// [1] = [writable,optional] delegate_record
		// Delegate record PDA
		metas_[1] = solanago.NewAccountMeta(delegateRecord, true, false)
		// [2] = [writable,optional] token
		// Token account
		metas_[2] = solanago.NewAccountMeta(token, true, false)
		// [3] = [] mint
		// Mint account
		metas_[3] = solanago.NewAccountMeta(mint, false, false)
		// [4] = [writable] metadata
		// Metadata account
		metas_[4] = solanago.NewAccountMeta(metadata, true, false)
		// [5] = [writable,optional] edition
		// Edition account
		metas_[5] = solanago.NewAccountMeta(edition, true, false)
		// [6] = [,signer] payer
		// Payer
		metas_[6] = solanago.NewAccountMeta(payer, false, true)
		// [7] = [] system_program
		// System program
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// [8] = [] sysvar_instructions
		// System program
		metas_[8] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [9] = [,optional] spl_token_program
		// SPL Token Program
		metas_[9] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [10] = [,optional] authorization_rules_program
		// Token Authorization Rules Program
		metas_[10] = solanago.NewAccountMeta(authorizationRulesProgram, false, false)
		// [11] = [,optional] authorization_rules
		// Token Authorization Rules account
		metas_[11] = solanago.NewAccountMeta(authorizationRules, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUse" instruction.
func BuildUse(
	// Params:
	useArgsParam UseArgs,

	// Accounts:
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	token solanago.PublicKey,
	mint solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUseInstruction(
		useArgsParam,
		authority,
		delegateRecord,
		token,
		mint,
		metadata,
		edition,
		payer,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		authorizationRulesProgram,
		authorizationRules,
		remaining__...,
	)
	return instruction_
}
