// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "mint_new_edition_from_master_edition_via_token" instruction.
type MintNewEditionFromMasterEditionViaToken struct {
	// Params:
	MintNewEditionFromMasterEditionViaTokenArgs MintNewEditionFromMasterEditionViaTokenArgs
	// Accounts:
	// [0] = [writable] new_metadata
	NewMetadata solanago.PublicKey `bin:"-"`
	// [1] = [writable] new_edition
	NewEdition solanago.PublicKey `bin:"-"`
	// [2] = [writable] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [3] = [writable] new_mint
	NewMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] edition_mark_pda
	EditionMarkPda solanago.PublicKey `bin:"-"`
	// [5] = [,signer] new_mint_authority
	NewMintAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [7] = [,signer] token_account_owner
	TokenAccountOwner solanago.PublicKey `bin:"-"`
	// [8] = [] token_account
	TokenAccount solanago.PublicKey `bin:"-"`
	// [9] = [] new_metadata_update_authority
	NewMetadataUpdateAuthority solanago.PublicKey `bin:"-"`
	// [10] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [11] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [13] = [,optional] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj MintNewEditionFromMasterEditionViaToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `mintNewEditionFromMasterEditionViaTokenArgsParam`:
	if err = encoder.Encode(obj.MintNewEditionFromMasterEditionViaTokenArgs); err != nil {
		return fmt.Errorf("error while marshaling mintNewEditionFromMasterEditionViaTokenArgsParam:%w", err)
	}
	return nil
}

func (obj *MintNewEditionFromMasterEditionViaToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MintNewEditionFromMasterEditionViaTokenArgs`:
	if err = decoder.Decode(&obj.MintNewEditionFromMasterEditionViaTokenArgs); err != nil {
		return fmt.Errorf("error while unmarshaling MintNewEditionFromMasterEditionViaTokenArgs:%w", err)
	}
	return nil
}

func (obj *MintNewEditionFromMasterEditionViaToken) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.NewMetadata = accounts[0]
	obj.NewEdition = accounts[1]
	obj.MasterEdition = accounts[2]
	obj.NewMint = accounts[3]
	obj.EditionMarkPda = accounts[4]
	obj.NewMintAuthority = accounts[5]
	obj.Payer = accounts[6]
	obj.TokenAccountOwner = accounts[7]
	obj.TokenAccount = accounts[8]
	obj.NewMetadataUpdateAuthority = accounts[9]
	obj.Metadata = accounts[10]
	obj.TokenProgram = accounts[11]
	obj.SystemProgram = accounts[12]
	obj.Rent = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *MintNewEditionFromMasterEditionViaToken) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*MintNewEditionFromMasterEditionViaToken) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_MintNewEditionFromMasterEditionViaToken)
}

func (*MintNewEditionFromMasterEditionViaToken) NewInstance() programparser.Instruction {
	return new(MintNewEditionFromMasterEditionViaToken)
}

func (obj *MintNewEditionFromMasterEditionViaToken) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 14 {
		return nil
	}
	return obj.PublicKeySlice[14:]
}

// Builds a "mint_new_edition_from_master_edition_via_token" instruction.
func NewMintNewEditionFromMasterEditionViaTokenInstruction(
	// Params:
	mintNewEditionFromMasterEditionViaTokenArgsParam MintNewEditionFromMasterEditionViaTokenArgs,

	// Accounts:
	newMetadata solanago.PublicKey,
	newEdition solanago.PublicKey,
	masterEdition solanago.PublicKey,
	newMint solanago.PublicKey,
	editionMarkPda solanago.PublicKey,
	newMintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	tokenAccountOwner solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	newMetadataUpdateAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_MintNewEditionFromMasterEditionViaToken[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `mintNewEditionFromMasterEditionViaTokenArgsParam`:
		if err = enc__.Encode(mintNewEditionFromMasterEditionViaTokenArgsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling mintNewEditionFromMasterEditionViaTokenArgsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] new_metadata
		// New Metadata key (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(newMetadata, true, false)
		// [1] = [writable] new_edition
		// New Edition (pda of ['metadata', program id, mint id, 'edition'])
		metas_[1] = solanago.NewAccountMeta(newEdition, true, false)
		// [2] = [writable] master_edition
		// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])
		metas_[2] = solanago.NewAccountMeta(masterEdition, true, false)
		// [3] = [writable] new_mint
		// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
		metas_[3] = solanago.NewAccountMeta(newMint, true, false)
		// [4] = [writable] edition_mark_pda
		// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
		metas_[4] = solanago.NewAccountMeta(editionMarkPda, true, false)
		// [5] = [,signer] new_mint_authority
		// Mint authority of new mint
		metas_[5] = solanago.NewAccountMeta(newMintAuthority, false, true)
		// [6] = [writable,signer] payer
		// payer
		metas_[6] = solanago.NewAccountMeta(payer, true, true)
		// [7] = [,signer] token_account_owner
		// owner of token account containing master token (#8)
		metas_[7] = solanago.NewAccountMeta(tokenAccountOwner, false, true)
		// [8] = [] token_account
		// token account containing token from master metadata mint
		metas_[8] = solanago.NewAccountMeta(tokenAccount, false, false)
		// [9] = [] new_metadata_update_authority
		// Update authority info for new metadata
		metas_[9] = solanago.NewAccountMeta(newMetadataUpdateAuthority, false, false)
		// [10] = [] metadata
		// Master record metadata account
		metas_[10] = solanago.NewAccountMeta(metadata, false, false)
		// [11] = [] token_program
		// Token program
		metas_[11] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [12] = [] system_program
		// System program
		metas_[12] = solanago.NewAccountMeta(systemProgram, false, false)
		// [13] = [,optional] rent
		// Rent info
		metas_[13] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMintNewEditionFromMasterEditionViaToken" instruction.
func BuildMintNewEditionFromMasterEditionViaToken(
	// Params:
	mintNewEditionFromMasterEditionViaTokenArgsParam MintNewEditionFromMasterEditionViaTokenArgs,

	// Accounts:
	newMetadata solanago.PublicKey,
	newEdition solanago.PublicKey,
	masterEdition solanago.PublicKey,
	newMint solanago.PublicKey,
	editionMarkPda solanago.PublicKey,
	newMintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	tokenAccountOwner solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	newMetadataUpdateAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMintNewEditionFromMasterEditionViaTokenInstruction(
		mintNewEditionFromMasterEditionViaTokenArgsParam,
		newMetadata,
		newEdition,
		masterEdition,
		newMint,
		editionMarkPda,
		newMintAuthority,
		payer,
		tokenAccountOwner,
		tokenAccount,
		newMetadataUpdateAuthority,
		metadata,
		tokenProgram,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
