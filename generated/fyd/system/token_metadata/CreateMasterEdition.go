// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_master_edition" instruction.
type CreateMasterEdition struct {
	// Params:
	// Accounts:
	// [0] = [writable] edition
	Edition solanago.PublicKey `bin:"-"`
	// [1] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [2] = [,signer] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [3] = [,signer] mint_authority
	MintAuthority solanago.PublicKey `bin:"-"`
	// [4] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [5] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [6] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateMasterEdition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateMasterEdition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateMasterEdition) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Edition = accounts[0]
	obj.Mint = accounts[1]
	obj.UpdateAuthority = accounts[2]
	obj.MintAuthority = accounts[3]
	obj.Payer = accounts[4]
	obj.Metadata = accounts[5]
	obj.TokenProgram = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.Rent = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateMasterEdition) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateMasterEdition) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateMasterEdition)
}

func (*CreateMasterEdition) NewInstance() programparser.Instruction {
	return new(CreateMasterEdition)
}

func (obj *CreateMasterEdition) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "create_master_edition" instruction.
func NewCreateMasterEditionInstruction(
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	metadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateMasterEdition[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] edition
		// Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']
		metas_[0] = solanago.NewAccountMeta(edition, true, false)
		// [1] = [writable] mint
		// Metadata mint
		metas_[1] = solanago.NewAccountMeta(mint, true, false)
		// [2] = [,signer] update_authority
		// Update authority
		metas_[2] = solanago.NewAccountMeta(updateAuthority, false, true)
		// [3] = [,signer] mint_authority
		// Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
		metas_[3] = solanago.NewAccountMeta(mintAuthority, false, true)
		// [4] = [writable,signer] payer
		// payer
		metas_[4] = solanago.NewAccountMeta(payer, true, true)
		// [5] = [] metadata
		// Metadata account
		metas_[5] = solanago.NewAccountMeta(metadata, false, false)
		// [6] = [] token_program
		// Token program
		metas_[6] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [7] = [] system_program
		// System program
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// [8] = [] rent
		// Rent info
		metas_[8] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateMasterEdition" instruction.
func BuildCreateMasterEdition(
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	metadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateMasterEditionInstruction(
		edition,
		mint,
		updateAuthority,
		mintAuthority,
		payer,
		metadata,
		tokenProgram,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
