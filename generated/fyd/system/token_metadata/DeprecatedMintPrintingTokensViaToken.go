// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "deprecated_mint_printing_tokens_via_token" instruction.
type DeprecatedMintPrintingTokensViaToken struct {
	// Params:
	// Accounts:
	// [0] = [writable] destination
	Destination solanago.PublicKey `bin:"-"`
	// [1] = [writable] token
	Token solanago.PublicKey `bin:"-"`
	// [2] = [writable] one_time_printing_authorization_mint
	OneTimePrintingAuthorizationMint solanago.PublicKey `bin:"-"`
	// [3] = [writable] printing_mint
	PrintingMint solanago.PublicKey `bin:"-"`
	// [4] = [,signer] burn_authority
	BurnAuthority solanago.PublicKey `bin:"-"`
	// [5] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [6] = [] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [7] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [8] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DeprecatedMintPrintingTokensViaToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *DeprecatedMintPrintingTokensViaToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DeprecatedMintPrintingTokensViaToken) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Destination = accounts[0]
	obj.Token = accounts[1]
	obj.OneTimePrintingAuthorizationMint = accounts[2]
	obj.PrintingMint = accounts[3]
	obj.BurnAuthority = accounts[4]
	obj.Metadata = accounts[5]
	obj.MasterEdition = accounts[6]
	obj.TokenProgram = accounts[7]
	obj.Rent = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DeprecatedMintPrintingTokensViaToken) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DeprecatedMintPrintingTokensViaToken) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DeprecatedMintPrintingTokensViaToken)
}

func (*DeprecatedMintPrintingTokensViaToken) NewInstance() programparser.Instruction {
	return new(DeprecatedMintPrintingTokensViaToken)
}

func (obj *DeprecatedMintPrintingTokensViaToken) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "deprecated_mint_printing_tokens_via_token" instruction.
func NewDeprecatedMintPrintingTokensViaTokenInstruction(
	destination solanago.PublicKey,
	token solanago.PublicKey,
	oneTimePrintingAuthorizationMint solanago.PublicKey,
	printingMint solanago.PublicKey,
	burnAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DeprecatedMintPrintingTokensViaToken[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] destination
		// Destination account
		metas_[0] = solanago.NewAccountMeta(destination, true, false)
		// [1] = [writable] token
		// Token account containing one time authorization token
		metas_[1] = solanago.NewAccountMeta(token, true, false)
		// [2] = [writable] one_time_printing_authorization_mint
		// One time authorization mint
		metas_[2] = solanago.NewAccountMeta(oneTimePrintingAuthorizationMint, true, false)
		// [3] = [writable] printing_mint
		// Printing mint
		metas_[3] = solanago.NewAccountMeta(printingMint, true, false)
		// [4] = [,signer] burn_authority
		// Burn authority
		metas_[4] = solanago.NewAccountMeta(burnAuthority, false, true)
		// [5] = [] metadata
		// Metadata key (pda of ['metadata', program id, mint id])
		metas_[5] = solanago.NewAccountMeta(metadata, false, false)
		// [6] = [] master_edition
		// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
		metas_[6] = solanago.NewAccountMeta(masterEdition, false, false)
		// [7] = [] token_program
		// Token program
		metas_[7] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [8] = [] rent
		// Rent
		metas_[8] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeprecatedMintPrintingTokensViaToken" instruction.
func BuildDeprecatedMintPrintingTokensViaToken(
	destination solanago.PublicKey,
	token solanago.PublicKey,
	oneTimePrintingAuthorizationMint solanago.PublicKey,
	printingMint solanago.PublicKey,
	burnAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDeprecatedMintPrintingTokensViaTokenInstruction(
		destination,
		token,
		oneTimePrintingAuthorizationMint,
		printingMint,
		burnAuthority,
		metadata,
		masterEdition,
		tokenProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
