// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "deprecated_mint_new_edition_from_master_edition_via_printing_token" instruction.
type DeprecatedMintNewEditionFromMasterEditionViaPrintingToken struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable] edition
	Edition solanago.PublicKey `bin:"-"`
	// [2] = [writable] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [3] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [4] = [,signer] mint_authority
	MintAuthority solanago.PublicKey `bin:"-"`
	// [5] = [writable] printing_mint
	PrintingMint solanago.PublicKey `bin:"-"`
	// [6] = [writable] master_token_account
	MasterTokenAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] edition_marker
	EditionMarker solanago.PublicKey `bin:"-"`
	// [8] = [,signer] burn_authority
	BurnAuthority solanago.PublicKey `bin:"-"`
	// [9] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [10] = [] master_update_authority
	MasterUpdateAuthority solanago.PublicKey `bin:"-"`
	// [11] = [] master_metadata
	MasterMetadata solanago.PublicKey `bin:"-"`
	// [12] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [13] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [14] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// [15] = [writable,optional] reservation_list
	ReservationList solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 16 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 16, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Edition = accounts[1]
	obj.MasterEdition = accounts[2]
	obj.Mint = accounts[3]
	obj.MintAuthority = accounts[4]
	obj.PrintingMint = accounts[5]
	obj.MasterTokenAccount = accounts[6]
	obj.EditionMarker = accounts[7]
	obj.BurnAuthority = accounts[8]
	obj.Payer = accounts[9]
	obj.MasterUpdateAuthority = accounts[10]
	obj.MasterMetadata = accounts[11]
	obj.TokenProgram = accounts[12]
	obj.SystemProgram = accounts[13]
	obj.Rent = accounts[14]
	obj.ReservationList = accounts[15]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken)
}

func (*DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) NewInstance() programparser.Instruction {
	return new(DeprecatedMintNewEditionFromMasterEditionViaPrintingToken)
}

func (obj *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 16 {
		return nil
	}
	return obj.PublicKeySlice[16:]
}

// Builds a "deprecated_mint_new_edition_from_master_edition_via_printing_token" instruction.
func NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	masterEdition solanago.PublicKey,
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	printingMint solanago.PublicKey,
	masterTokenAccount solanago.PublicKey,
	editionMarker solanago.PublicKey,
	burnAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	masterUpdateAuthority solanago.PublicKey,
	masterMetadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	reservationList solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 16, 16+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// New Metadata key (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable] edition
		// New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])
		metas_[1] = solanago.NewAccountMeta(edition, true, false)
		// [2] = [writable] master_edition
		// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
		metas_[2] = solanago.NewAccountMeta(masterEdition, true, false)
		// [3] = [writable] mint
		// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
		metas_[3] = solanago.NewAccountMeta(mint, true, false)
		// [4] = [,signer] mint_authority
		// Mint authority of new mint
		metas_[4] = solanago.NewAccountMeta(mintAuthority, false, true)
		// [5] = [writable] printing_mint
		// Printing Mint of master record edition
		metas_[5] = solanago.NewAccountMeta(printingMint, true, false)
		// [6] = [writable] master_token_account
		// Token account containing Printing mint token to be transferred
		metas_[6] = solanago.NewAccountMeta(masterTokenAccount, true, false)
		// [7] = [writable] edition_marker
		// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])
		metas_[7] = solanago.NewAccountMeta(editionMarker, true, false)
		// [8] = [,signer] burn_authority
		// Burn authority for this token
		metas_[8] = solanago.NewAccountMeta(burnAuthority, false, true)
		// [9] = [,signer] payer
		// payer
		metas_[9] = solanago.NewAccountMeta(payer, false, true)
		// [10] = [] master_update_authority
		// update authority info for new metadata account
		metas_[10] = solanago.NewAccountMeta(masterUpdateAuthority, false, false)
		// [11] = [] master_metadata
		// Master record metadata account
		metas_[11] = solanago.NewAccountMeta(masterMetadata, false, false)
		// [12] = [] token_program
		// Token program
		metas_[12] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [13] = [] system_program
		// System program
		metas_[13] = solanago.NewAccountMeta(systemProgram, false, false)
		// [14] = [] rent
		// Rent info
		metas_[14] = solanago.NewAccountMeta(rent, false, false)
		// [15] = [writable,optional] reservation_list
		// Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list.
		metas_[15] = solanago.NewAccountMeta(reservationList, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeprecatedMintNewEditionFromMasterEditionViaPrintingToken" instruction.
func BuildDeprecatedMintNewEditionFromMasterEditionViaPrintingToken(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	masterEdition solanago.PublicKey,
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	printingMint solanago.PublicKey,
	masterTokenAccount solanago.PublicKey,
	editionMarker solanago.PublicKey,
	burnAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	masterUpdateAuthority solanago.PublicKey,
	masterMetadata solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	reservationList solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction(
		metadata,
		edition,
		masterEdition,
		mint,
		mintAuthority,
		printingMint,
		masterTokenAccount,
		editionMarker,
		burnAuthority,
		payer,
		masterUpdateAuthority,
		masterMetadata,
		tokenProgram,
		systemProgram,
		rent,
		reservationList,
		remaining__...,
	)
	return instruction_
}
