// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "unverify" instruction.
type Unverify struct {
	// Params:
	VerificationArgs VerificationArgs
	// Accounts:
	// [0] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [,optional] delegate_record
	DelegateRecord solanago.PublicKey `bin:"-"`
	// [2] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [3] = [,optional] collection_mint
	CollectionMint solanago.PublicKey `bin:"-"`
	// [4] = [writable,optional] collection_metadata
	CollectionMetadata solanago.PublicKey `bin:"-"`
	// [5] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [6] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Unverify) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `verificationArgsParam`:
	if err = encoder.Encode(obj.VerificationArgs); err != nil {
		return fmt.Errorf("error while marshaling verificationArgsParam:%w", err)
	}
	return nil
}

func (obj *Unverify) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VerificationArgs`:
	if err = decoder.Decode(&obj.VerificationArgs); err != nil {
		return fmt.Errorf("error while unmarshaling VerificationArgs:%w", err)
	}
	return nil
}

func (obj *Unverify) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.DelegateRecord = accounts[1]
	obj.Metadata = accounts[2]
	obj.CollectionMint = accounts[3]
	obj.CollectionMetadata = accounts[4]
	obj.SystemProgram = accounts[5]
	obj.SysvarInstructions = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Unverify) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Unverify) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Unverify)
}

func (*Unverify) NewInstance() programparser.Instruction {
	return new(Unverify)
}

func (obj *Unverify) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "unverify" instruction.
func NewUnverifyInstruction(
	// Params:
	verificationArgsParam VerificationArgs,

	// Accounts:
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	metadata solanago.PublicKey,
	collectionMint solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Unverify[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `verificationArgsParam`:
		if err = enc__.Encode(verificationArgsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling verificationArgsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [,signer] authority
		// Creator to verify, collection (or metadata if parent burned) update authority or delegate
		metas_[0] = solanago.NewAccountMeta(authority, false, true)
		// [1] = [,optional] delegate_record
		// Delegate record PDA
		metas_[1] = solanago.NewAccountMeta(delegateRecord, false, false)
		// [2] = [writable] metadata
		// Metadata account
		metas_[2] = solanago.NewAccountMeta(metadata, true, false)
		// [3] = [,optional] collection_mint
		// Mint of the Collection
		metas_[3] = solanago.NewAccountMeta(collectionMint, false, false)
		// [4] = [writable,optional] collection_metadata
		// Metadata Account of the Collection
		metas_[4] = solanago.NewAccountMeta(collectionMetadata, true, false)
		// [5] = [] system_program
		// System program
		metas_[5] = solanago.NewAccountMeta(systemProgram, false, false)
		// [6] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[6] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUnverify" instruction.
func BuildUnverify(
	// Params:
	verificationArgsParam VerificationArgs,

	// Accounts:
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	metadata solanago.PublicKey,
	collectionMint solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUnverifyInstruction(
		verificationArgsParam,
		authority,
		delegateRecord,
		metadata,
		collectionMint,
		collectionMetadata,
		systemProgram,
		sysvarInstructions,
		remaining__...,
	)
	return instruction_
}
