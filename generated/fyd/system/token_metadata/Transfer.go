// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "transfer" instruction.
type Transfer struct {
	// Params:
	TransferArgs TransferArgs
	// Accounts:
	// [0] = [writable] token
	Token solanago.PublicKey `bin:"-"`
	// [1] = [] token_owner
	TokenOwner solanago.PublicKey `bin:"-"`
	// [2] = [writable] destination
	Destination solanago.PublicKey `bin:"-"`
	// [3] = [] destination_owner
	DestinationOwner solanago.PublicKey `bin:"-"`
	// [4] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [5] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [6] = [,optional] edition
	Edition solanago.PublicKey `bin:"-"`
	// [7] = [writable,optional] owner_token_record
	OwnerTokenRecord solanago.PublicKey `bin:"-"`
	// [8] = [writable,optional] destination_token_record
	DestinationTokenRecord solanago.PublicKey `bin:"-"`
	// [9] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [10] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [11] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [12] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [13] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [14] = [] spl_ata_program
	SplAtaProgram solanago.PublicKey `bin:"-"`
	// [15] = [,optional] authorization_rules_program
	AuthorizationRulesProgram solanago.PublicKey `bin:"-"`
	// [16] = [,optional] authorization_rules
	AuthorizationRules solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Transfer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `transferArgsParam`:
	{
		if err = EncodeTransferArgs(encoder, obj.TransferArgs); err != nil {
			return fmt.Errorf("error while marshalingtransferArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Transfer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TransferArgs`:
	{
		var err error
		obj.TransferArgs, err = DecodeTransferArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Transfer) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 17 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 17, len(accounts))
	}
	obj.Token = accounts[0]
	obj.TokenOwner = accounts[1]
	obj.Destination = accounts[2]
	obj.DestinationOwner = accounts[3]
	obj.Mint = accounts[4]
	obj.Metadata = accounts[5]
	obj.Edition = accounts[6]
	obj.OwnerTokenRecord = accounts[7]
	obj.DestinationTokenRecord = accounts[8]
	obj.Authority = accounts[9]
	obj.Payer = accounts[10]
	obj.SystemProgram = accounts[11]
	obj.SysvarInstructions = accounts[12]
	obj.SplTokenProgram = accounts[13]
	obj.SplAtaProgram = accounts[14]
	obj.AuthorizationRulesProgram = accounts[15]
	obj.AuthorizationRules = accounts[16]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Transfer) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Transfer) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Transfer)
}

func (*Transfer) NewInstance() programparser.Instruction {
	return new(Transfer)
}

func (obj *Transfer) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 17 {
		return nil
	}
	return obj.PublicKeySlice[17:]
}

// Builds a "transfer" instruction.
func NewTransferInstruction(
	// Params:
	transferArgsParam TransferArgs,

	// Accounts:
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	destination solanago.PublicKey,
	destinationOwner solanago.PublicKey,
	mint solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	ownerTokenRecord solanago.PublicKey,
	destinationTokenRecord solanago.PublicKey,
	authority solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 17, 17+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Transfer[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `transferArgsParam`:
		{
			if err = EncodeTransferArgs(enc__, transferArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalingtransferArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] token
		// Token account
		metas_[0] = solanago.NewAccountMeta(token, true, false)
		// [1] = [] token_owner
		// Token account owner
		metas_[1] = solanago.NewAccountMeta(tokenOwner, false, false)
		// [2] = [writable] destination
		// Destination token account
		metas_[2] = solanago.NewAccountMeta(destination, true, false)
		// [3] = [] destination_owner
		// Destination token account owner
		metas_[3] = solanago.NewAccountMeta(destinationOwner, false, false)
		// [4] = [] mint
		// Mint of token asset
		metas_[4] = solanago.NewAccountMeta(mint, false, false)
		// [5] = [writable] metadata
		// Metadata (pda of ['metadata', program id, mint id])
		metas_[5] = solanago.NewAccountMeta(metadata, true, false)
		// [6] = [,optional] edition
		// Edition of token asset
		metas_[6] = solanago.NewAccountMeta(edition, false, false)
		// [7] = [writable,optional] owner_token_record
		// Owner token record account
		metas_[7] = solanago.NewAccountMeta(ownerTokenRecord, true, false)
		// [8] = [writable,optional] destination_token_record
		// Destination token record account
		metas_[8] = solanago.NewAccountMeta(destinationTokenRecord, true, false)
		// [9] = [,signer] authority
		// Transfer authority (token owner or delegate)
		metas_[9] = solanago.NewAccountMeta(authority, false, true)
		// [10] = [writable,signer] payer
		// Payer
		metas_[10] = solanago.NewAccountMeta(payer, true, true)
		// [11] = [] system_program
		// System Program
		metas_[11] = solanago.NewAccountMeta(systemProgram, false, false)
		// [12] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[12] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [13] = [] spl_token_program
		// SPL Token Program
		metas_[13] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [14] = [] spl_ata_program
		// SPL Associated Token Account program
		metas_[14] = solanago.NewAccountMeta(splAtaProgram, false, false)
		// [15] = [,optional] authorization_rules_program
		// Token Authorization Rules Program
		metas_[15] = solanago.NewAccountMeta(authorizationRulesProgram, false, false)
		// [16] = [,optional] authorization_rules
		// Token Authorization Rules account
		metas_[16] = solanago.NewAccountMeta(authorizationRules, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildTransfer" instruction.
func BuildTransfer(
	// Params:
	transferArgsParam TransferArgs,

	// Accounts:
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	destination solanago.PublicKey,
	destinationOwner solanago.PublicKey,
	mint solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	ownerTokenRecord solanago.PublicKey,
	destinationTokenRecord solanago.PublicKey,
	authority solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewTransferInstruction(
		transferArgsParam,
		token,
		tokenOwner,
		destination,
		destinationOwner,
		mint,
		metadata,
		edition,
		ownerTokenRecord,
		destinationTokenRecord,
		authority,
		payer,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		splAtaProgram,
		authorizationRulesProgram,
		authorizationRules,
		remaining__...,
	)
	return instruction_
}
