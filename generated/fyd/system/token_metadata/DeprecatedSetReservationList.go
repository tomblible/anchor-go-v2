// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "deprecated_set_reservation_list" instruction.
type DeprecatedSetReservationList struct {
	// Params:
	// Accounts:
	// [0] = [writable] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [1] = [writable] reservation_list
	ReservationList solanago.PublicKey `bin:"-"`
	// [2] = [,signer] resource
	Resource solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DeprecatedSetReservationList) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *DeprecatedSetReservationList) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DeprecatedSetReservationList) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.MasterEdition = accounts[0]
	obj.ReservationList = accounts[1]
	obj.Resource = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DeprecatedSetReservationList) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DeprecatedSetReservationList) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DeprecatedSetReservationList)
}

func (*DeprecatedSetReservationList) NewInstance() programparser.Instruction {
	return new(DeprecatedSetReservationList)
}

func (obj *DeprecatedSetReservationList) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "deprecated_set_reservation_list" instruction.
func NewDeprecatedSetReservationListInstruction(
	masterEdition solanago.PublicKey,
	reservationList solanago.PublicKey,
	resource solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DeprecatedSetReservationList[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] master_edition
		// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
		metas_[0] = solanago.NewAccountMeta(masterEdition, true, false)
		// [1] = [writable] reservation_list
		// PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]
		metas_[1] = solanago.NewAccountMeta(reservationList, true, false)
		// [2] = [,signer] resource
		// The resource you tied the reservation list too
		metas_[2] = solanago.NewAccountMeta(resource, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeprecatedSetReservationList" instruction.
func BuildDeprecatedSetReservationList(
	masterEdition solanago.PublicKey,
	reservationList solanago.PublicKey,
	resource solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDeprecatedSetReservationListInstruction(
		masterEdition,
		reservationList,
		resource,
		remaining__...,
	)
	return instruction_
}
