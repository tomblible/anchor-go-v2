// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "print" instruction.
type Print struct {
	// Params:
	PrintArgs PrintArgs
	// Accounts:
	// [0] = [writable] edition_metadata
	EditionMetadata solanago.PublicKey `bin:"-"`
	// [1] = [writable] edition
	Edition solanago.PublicKey `bin:"-"`
	// [2] = [writable] edition_mint
	EditionMint solanago.PublicKey `bin:"-"`
	// [3] = [] edition_token_account_owner
	EditionTokenAccountOwner solanago.PublicKey `bin:"-"`
	// [4] = [writable] edition_token_account
	EditionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [,signer] edition_mint_authority
	EditionMintAuthority solanago.PublicKey `bin:"-"`
	// [6] = [writable,optional] edition_token_record
	EditionTokenRecord solanago.PublicKey `bin:"-"`
	// [7] = [writable] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [8] = [writable] edition_marker_pda
	EditionMarkerPda solanago.PublicKey `bin:"-"`
	// [9] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [10] = [] master_token_account_owner
	MasterTokenAccountOwner solanago.PublicKey `bin:"-"`
	// [11] = [] master_token_account
	MasterTokenAccount solanago.PublicKey `bin:"-"`
	// [12] = [] master_metadata
	MasterMetadata solanago.PublicKey `bin:"-"`
	// [13] = [] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [14] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [15] = [] spl_ata_program
	SplAtaProgram solanago.PublicKey `bin:"-"`
	// [16] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [17] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Print) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `printArgsParam`:
	{
		if err = EncodePrintArgs(encoder, obj.PrintArgs); err != nil {
			return fmt.Errorf("error while marshalingprintArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Print) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PrintArgs`:
	{
		var err error
		obj.PrintArgs, err = DecodePrintArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Print) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 18 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 18, len(accounts))
	}
	obj.EditionMetadata = accounts[0]
	obj.Edition = accounts[1]
	obj.EditionMint = accounts[2]
	obj.EditionTokenAccountOwner = accounts[3]
	obj.EditionTokenAccount = accounts[4]
	obj.EditionMintAuthority = accounts[5]
	obj.EditionTokenRecord = accounts[6]
	obj.MasterEdition = accounts[7]
	obj.EditionMarkerPda = accounts[8]
	obj.Payer = accounts[9]
	obj.MasterTokenAccountOwner = accounts[10]
	obj.MasterTokenAccount = accounts[11]
	obj.MasterMetadata = accounts[12]
	obj.UpdateAuthority = accounts[13]
	obj.SplTokenProgram = accounts[14]
	obj.SplAtaProgram = accounts[15]
	obj.SysvarInstructions = accounts[16]
	obj.SystemProgram = accounts[17]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Print) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Print) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Print)
}

func (*Print) NewInstance() programparser.Instruction {
	return new(Print)
}

func (obj *Print) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 18 {
		return nil
	}
	return obj.PublicKeySlice[18:]
}

// Builds a "print" instruction.
func NewPrintInstruction(
	// Params:
	printArgsParam PrintArgs,

	// Accounts:
	editionMetadata solanago.PublicKey,
	edition solanago.PublicKey,
	editionMint solanago.PublicKey,
	editionTokenAccountOwner solanago.PublicKey,
	editionTokenAccount solanago.PublicKey,
	editionMintAuthority solanago.PublicKey,
	editionTokenRecord solanago.PublicKey,
	masterEdition solanago.PublicKey,
	editionMarkerPda solanago.PublicKey,
	payer solanago.PublicKey,
	masterTokenAccountOwner solanago.PublicKey,
	masterTokenAccount solanago.PublicKey,
	masterMetadata solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 18, 18+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Print[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `printArgsParam`:
		{
			if err = EncodePrintArgs(enc__, printArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalingprintArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] edition_metadata
		// New Metadata key (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(editionMetadata, true, false)
		// [1] = [writable] edition
		// New Edition (pda of ['metadata', program id, mint id, 'edition'])
		metas_[1] = solanago.NewAccountMeta(edition, true, false)
		// [2] = [writable] edition_mint
		// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
		metas_[2] = solanago.NewAccountMeta(editionMint, true, false)
		// [3] = [] edition_token_account_owner
		// Owner of the token account of new token
		metas_[3] = solanago.NewAccountMeta(editionTokenAccountOwner, false, false)
		// [4] = [writable] edition_token_account
		// Token account of new token
		metas_[4] = solanago.NewAccountMeta(editionTokenAccount, true, false)
		// [5] = [,signer] edition_mint_authority
		// Mint authority of new mint
		metas_[5] = solanago.NewAccountMeta(editionMintAuthority, false, true)
		// [6] = [writable,optional] edition_token_record
		// Token record account
		metas_[6] = solanago.NewAccountMeta(editionTokenRecord, true, false)
		// [7] = [writable] master_edition
		// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])
		metas_[7] = solanago.NewAccountMeta(masterEdition, true, false)
		// [8] = [writable] edition_marker_pda
		// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
		metas_[8] = solanago.NewAccountMeta(editionMarkerPda, true, false)
		// [9] = [writable,signer] payer
		// payer
		metas_[9] = solanago.NewAccountMeta(payer, true, true)
		// [10] = [] master_token_account_owner
		// owner of token account containing master token
		metas_[10] = solanago.NewAccountMeta(masterTokenAccountOwner, false, false)
		// [11] = [] master_token_account
		// token account containing token from master metadata mint
		metas_[11] = solanago.NewAccountMeta(masterTokenAccount, false, false)
		// [12] = [] master_metadata
		// Master record metadata account
		metas_[12] = solanago.NewAccountMeta(masterMetadata, false, false)
		// [13] = [] update_authority
		// The update authority of the master edition.
		metas_[13] = solanago.NewAccountMeta(updateAuthority, false, false)
		// [14] = [] spl_token_program
		// Token program
		metas_[14] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [15] = [] spl_ata_program
		// SPL Associated Token Account program
		metas_[15] = solanago.NewAccountMeta(splAtaProgram, false, false)
		// [16] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[16] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [17] = [] system_program
		// System program
		metas_[17] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildPrint" instruction.
func BuildPrint(
	// Params:
	printArgsParam PrintArgs,

	// Accounts:
	editionMetadata solanago.PublicKey,
	edition solanago.PublicKey,
	editionMint solanago.PublicKey,
	editionTokenAccountOwner solanago.PublicKey,
	editionTokenAccount solanago.PublicKey,
	editionMintAuthority solanago.PublicKey,
	editionTokenRecord solanago.PublicKey,
	masterEdition solanago.PublicKey,
	editionMarkerPda solanago.PublicKey,
	payer solanago.PublicKey,
	masterTokenAccountOwner solanago.PublicKey,
	masterTokenAccount solanago.PublicKey,
	masterMetadata solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewPrintInstruction(
		printArgsParam,
		editionMetadata,
		edition,
		editionMint,
		editionTokenAccountOwner,
		editionTokenAccount,
		editionMintAuthority,
		editionTokenRecord,
		masterEdition,
		editionMarkerPda,
		payer,
		masterTokenAccountOwner,
		masterTokenAccount,
		masterMetadata,
		updateAuthority,
		splTokenProgram,
		splAtaProgram,
		sysvarInstructions,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
