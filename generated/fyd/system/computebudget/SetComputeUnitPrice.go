// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package computebudget

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "set_compute_unit_price" instruction.
type SetComputeUnitPrice struct {
	// Params:
	MicroLamports uint64
	// Accounts:
	// Remaining
	Remaining solanago.PublicKeySlice
}

func (obj SetComputeUnitPrice) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `microLamportsParam`:
	if err = encoder.Encode(obj.MicroLamports); err != nil {
		return fmt.Errorf("error while marshaling microLamportsParam:%w", err)
	}
	return nil
}

func (obj *SetComputeUnitPrice) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MicroLamports`:
	if err = decoder.Decode(&obj.MicroLamports); err != nil {
		return fmt.Errorf("error while unmarshaling MicroLamports:%w", err)
	}
	return nil
}

func (obj *SetComputeUnitPrice) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 0 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 0, len(accounts))
	}
	obj.Remaining = accounts[0:]
	return nil
}

func (*SetComputeUnitPrice) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetComputeUnitPrice)
}

// Builds a "set_compute_unit_price" instruction.
func NewSetComputeUnitPriceInstruction(
	microLamportsParam uint64,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 0, 0+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetComputeUnitPrice[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `microLamportsParam`:
		if err = enc__.Encode(microLamportsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling microLamportsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetComputeUnitPrice" instruction.
func BuildSetComputeUnitPrice(
	microLamportsParam uint64,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetComputeUnitPriceInstruction(
		microLamportsParam,
		remaining__...,
	)
	return instruction_
}
