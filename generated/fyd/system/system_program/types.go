// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package system_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type Instruction interface {
	TypeID() binary.TypeID
	SetAccounts(accounts solanago.PublicKeySlice) error
	Copy() Instruction
}

type FeeCalculator struct {
	LamportsPerSignature uint64
}

func (obj FeeCalculator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LamportsPerSignature`:
	if err = encoder.Encode(obj.LamportsPerSignature); err != nil {
		return fmt.Errorf("error while marshaling LamportsPerSignature:%w", err)
	}
	return nil
}

func (obj FeeCalculator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FeeCalculator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FeeCalculator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LamportsPerSignature`:
	if err = decoder.Decode(&obj.LamportsPerSignature); err != nil {
		return fmt.Errorf("error while unmarshaling LamportsPerSignature:%w", err)
	}
	return nil
}

func (obj *FeeCalculator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FeeCalculator: %w", err)
	}
	return nil
}

func UnmarshalFeeCalculator(buf []byte) (*FeeCalculator, error) {
	obj := new(FeeCalculator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
