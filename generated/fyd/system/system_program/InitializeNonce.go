// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package system_program

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_nonce" instruction.
type InitializeNonce struct {
	// Params:
	Authorized solanago.PublicKey
	// Accounts:
	// [0] = [writable,signer] nonce
	Nonce solanago.PublicKey `bin:"-"`
	// [1] = [] recent_block_hashes[SysvarRecentB1ockHashes11111111111111111111]
	RecentBlockHashes solanago.PublicKey `bin:"-"`
	// [2] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeNonce) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `authorizedParam`:
	if err = encoder.Encode(obj.Authorized); err != nil {
		return fmt.Errorf("error while marshaling authorizedParam:%w", err)
	}
	return nil
}

func (obj *InitializeNonce) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authorized`:
	if err = decoder.Decode(&obj.Authorized); err != nil {
		return fmt.Errorf("error while unmarshaling Authorized:%w", err)
	}
	return nil
}

func (obj *InitializeNonce) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.Nonce = accounts[0]
	obj.RecentBlockHashes = accounts[1]
	obj.Rent = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *InitializeNonce) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeNonce) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeNonce)
}

func (*InitializeNonce) NewInstance() programparser.Instruction {
	return new(InitializeNonce)
}

func (obj *InitializeNonce) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "initialize_nonce" instruction.
func NewInitializeNonceInstruction(
	// Params:
	authorizedParam solanago.PublicKey,

	// Accounts:
	nonce solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeNonce[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `authorizedParam`:
		if err = enc__.Encode(authorizedParam); err != nil {
			return nil, fmt.Errorf("error while marshaling authorizedParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] nonce
		metas_[0] = solanago.NewAccountMeta(nonce, true, false)
		// [1] = [] recent_block_hashes[SysvarRecentB1ockHashes11111111111111111111]
		metas_[1] = solanago.NewAccountMeta(RecentBlockHashes, false, false)
		// [2] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[2] = solanago.NewAccountMeta(Rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeNonce" instruction.
func BuildInitializeNonce(
	// Params:
	authorizedParam solanago.PublicKey,

	// Accounts:
	nonce solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeNonceInstruction(
		authorizedParam,
		nonce,
		remaining__...,
	)
	return instruction_
}
