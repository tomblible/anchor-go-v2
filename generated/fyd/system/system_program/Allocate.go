// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package system_program

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "allocate" instruction.
type Allocate struct {
	// Params:
	Space uint64
	// Accounts:
	// [0] = [writable,signer] allocated
	Allocated solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Allocate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `spaceParam`:
	if err = encoder.Encode(obj.Space); err != nil {
		return fmt.Errorf("error while marshaling spaceParam:%w", err)
	}
	return nil
}

func (obj *Allocate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Space`:
	if err = decoder.Decode(&obj.Space); err != nil {
		return fmt.Errorf("error while unmarshaling Space:%w", err)
	}
	return nil
}

func (obj *Allocate) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 1 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 1, len(accounts))
	}
	obj.Allocated = accounts[0]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *Allocate) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Allocate) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Allocate)
}

func (*Allocate) NewInstance() programparser.Instruction {
	return new(Allocate)
}

func (obj *Allocate) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 1 {
		return nil
	}
	return obj.PublicKeySlice[1:]
}

// Builds a "allocate" instruction.
func NewAllocateInstruction(
	// Params:
	spaceParam uint64,

	// Accounts:
	allocated solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 1, 1+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Allocate[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `spaceParam`:
		if err = enc__.Encode(spaceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling spaceParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] allocated
		metas_[0] = solanago.NewAccountMeta(allocated, true, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildAllocate" instruction.
func BuildAllocate(
	// Params:
	spaceParam uint64,

	// Accounts:
	allocated solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewAllocateInstruction(
		spaceParam,
		allocated,
		remaining__...,
	)
	return instruction_
}
