// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package system_program

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "withdraw_nonce_account" instruction.
type WithdrawNonceAccount struct {
	// Params:
	Lamports uint64
	// Accounts:
	// [0] = [writable] nonce
	Nonce solanago.PublicKey `bin:"-"`
	// [1] = [writable] destination
	Destination solanago.PublicKey `bin:"-"`
	// [2] = [] recentBlockhashes
	RecentBlockhashes solanago.PublicKey `bin:"-"`
	// [3] = [] rent[SysvarRent111111111111111111111111111111111]
	Rent solanago.PublicKey `bin:"-"`
	// [4] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj WithdrawNonceAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `lamportsParam`:
	if err = encoder.Encode(obj.Lamports); err != nil {
		return fmt.Errorf("error while marshaling lamportsParam:%w", err)
	}
	return nil
}

func (obj *WithdrawNonceAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Lamports`:
	if err = decoder.Decode(&obj.Lamports); err != nil {
		return fmt.Errorf("error while unmarshaling Lamports:%w", err)
	}
	return nil
}

func (obj *WithdrawNonceAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.Nonce = accounts[0]
	obj.Destination = accounts[1]
	obj.RecentBlockhashes = accounts[2]
	obj.Rent = accounts[3]
	obj.Authority = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *WithdrawNonceAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*WithdrawNonceAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_WithdrawNonceAccount)
}

func (*WithdrawNonceAccount) NewInstance() programparser.Instruction {
	return new(WithdrawNonceAccount)
}

func (obj *WithdrawNonceAccount) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 5 {
		return nil
	}
	return obj.PublicKeySlice[5:]
}

// Builds a "withdraw_nonce_account" instruction.
func NewWithdrawNonceAccountInstruction(
	// Params:
	lamportsParam uint64,

	// Accounts:
	nonce solanago.PublicKey,
	destination solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_WithdrawNonceAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `lamportsParam`:
		if err = enc__.Encode(lamportsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling lamportsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] nonce
		metas_[0] = solanago.NewAccountMeta(nonce, true, false)
		// [1] = [writable] destination
		metas_[1] = solanago.NewAccountMeta(destination, true, false)
		// [2] = [] recentBlockhashes
		metas_[2] = solanago.NewAccountMeta(RecentBlockHashes, false, false)
		// [3] = [] rent[SysvarRent111111111111111111111111111111111]
		metas_[3] = solanago.NewAccountMeta(Rent, false, false)
		// [4] = [,signer] authority
		metas_[4] = solanago.NewAccountMeta(authority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildWithdrawNonceAccount" instruction.
func BuildWithdrawNonceAccount(
	// Params:
	lamportsParam uint64,

	// Accounts:
	nonce solanago.PublicKey,
	destination solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewWithdrawNonceAccountInstruction(
		lamportsParam,
		nonce,
		destination,
		authority,
		remaining__...,
	)
	return instruction_
}
