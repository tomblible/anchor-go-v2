// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package system_program

import (
	"bytes"
	"fmt"

	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_account_with_seed" instruction.
type CreateAccountWithSeed struct {
	// Params:
	Base     solanago.PublicKey
	Seed     string
	Lamports uint64
	Space    uint64
	Owner    solanago.PublicKey
	// Accounts:
	// [0] = [writable,signer] from
	From solanago.PublicKey `bin:"-"`
	// [1] = [writable] to
	To solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateAccountWithSeed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `baseKeyParam`:
	if err = encoder.Encode(obj.Base); err != nil {
		return fmt.Errorf("error while marshaling baseKeyParam:%w", err)
	}
	// Serialize `seedParam`:
	if err = encoder.WriteRustString(obj.Seed); err != nil {
		return fmt.Errorf("error while marshaling seedParam:%w", err)
	}
	// Serialize `lamportsParam`:
	if err = encoder.Encode(obj.Lamports); err != nil {
		return fmt.Errorf("error while marshaling lamportsParam:%w", err)
	}
	// Serialize `spaceParam`:
	if err = encoder.Encode(obj.Space); err != nil {
		return fmt.Errorf("error while marshaling spaceParam:%w", err)
	}
	// Serialize `ownerParam`:
	if err = encoder.Encode(obj.Owner); err != nil {
		return fmt.Errorf("error while marshaling ownerParam:%w", err)
	}
	return nil
}

func (obj *CreateAccountWithSeed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseKey`:
	if err = decoder.Decode(&obj.Base); err != nil {
		return fmt.Errorf("error while unmarshaling BaseKey:%w", err)
	}
	// Deserialize `Seed`:
	if obj.Seed, err = decoder.ReadRustString(); err != nil {
		return fmt.Errorf("error while unmarshaling Seed:%w", err)
	}
	// Deserialize `Lamports`:
	if err = decoder.Decode(&obj.Lamports); err != nil {
		return fmt.Errorf("error while unmarshaling Lamports:%w", err)
	}
	// Deserialize `Space`:
	if err = decoder.Decode(&obj.Space); err != nil {
		return fmt.Errorf("error while unmarshaling Space:%w", err)
	}
	// Deserialize `Owner`:
	if err = decoder.Decode(&obj.Owner); err != nil {
		return fmt.Errorf("error while unmarshaling Owner:%w", err)
	}
	return nil
}

func (obj *CreateAccountWithSeed) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.From = accounts[0]
	obj.To = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}

func (obj *CreateAccountWithSeed) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateAccountWithSeed) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateAccountWithSeed)
}

func (*CreateAccountWithSeed) NewInstance() programparser.Instruction {
	return new(CreateAccountWithSeed)
}

func (obj *CreateAccountWithSeed) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 2 {
		return nil
	}
	return obj.PublicKeySlice[2:]
}

// Builds a "create_account_with_seed" instruction.
func NewCreateAccountWithSeedInstruction(
	// Params:
	base solanago.PublicKey,
	seedParam string,
	lamportsParam uint64,
	spaceParam uint64,
	ownerParam solanago.PublicKey,
	// Accounts:
	from solanago.PublicKey,
	to solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateAccountWithSeed[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `baseKeyParam`:
		if err = enc__.Encode(base); err != nil {
			return nil, fmt.Errorf("error while marshaling baseKeyParam:%w", err)
		}
		// Serialize `seedParam`:
		if err = enc__.WriteRustString(seedParam); err != nil {
			return nil, fmt.Errorf("error while marshaling seedParam:%w", err)
		}
		// Serialize `lamportsParam`:
		if err = enc__.Encode(lamportsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling lamportsParam:%w", err)
		}
		// Serialize `spaceParam`:
		if err = enc__.Encode(spaceParam); err != nil {
			return nil, fmt.Errorf("error while marshaling spaceParam:%w", err)
		}
		// Serialize `ownerParam`:
		if err = enc__.Encode(ownerParam); err != nil {
			return nil, fmt.Errorf("error while marshaling ownerParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] from
		metas_[0] = solanago.NewAccountMeta(from, true, true)
		// [1] = [writable] to
		metas_[1] = solanago.NewAccountMeta(to, true, false)
		if base != from {
			metas_ = append(metas_, solanago.NewAccountMeta(base, true, true))
		}
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateAccountWithSeed" instruction.
func BuildCreateAccountWithSeed(
	// Params:
	base solanago.PublicKey,
	seedParam string,
	lamportsParam uint64,
	spaceParam uint64,
	ownerParam solanago.PublicKey,

	// Accounts:
	from solanago.PublicKey,
	to solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateAccountWithSeedInstruction(
		base,
		seedParam,
		lamportsParam,
		spaceParam,
		ownerParam,
		from,
		to,
	)
	return instruction_
}
