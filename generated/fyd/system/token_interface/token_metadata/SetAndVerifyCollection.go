// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_and_verify_collection" instruction.
type SetAndVerifyCollection struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] collection_authority
	CollectionAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [3] = [] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [4] = [] collection_mint
	CollectionMint solanago.PublicKey `bin:"-"`
	// [5] = [] collection
	Collection solanago.PublicKey `bin:"-"`
	// [6] = [] collection_master_edition_account
	CollectionMasterEditionAccount solanago.PublicKey `bin:"-"`
	// [7] = [,optional] collection_authority_record
	CollectionAuthorityRecord solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetAndVerifyCollection) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *SetAndVerifyCollection) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *SetAndVerifyCollection) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.CollectionAuthority = accounts[1]
	obj.Payer = accounts[2]
	obj.UpdateAuthority = accounts[3]
	obj.CollectionMint = accounts[4]
	obj.Collection = accounts[5]
	obj.CollectionMasterEditionAccount = accounts[6]
	obj.CollectionAuthorityRecord = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetAndVerifyCollection) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetAndVerifyCollection) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetAndVerifyCollection)
}

func (*SetAndVerifyCollection) NewInstance() programparser.Instruction {
	return new(SetAndVerifyCollection)
}

func (obj *SetAndVerifyCollection) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "set_and_verify_collection" instruction.
func NewSetAndVerifyCollectionInstruction(
	metadata solanago.PublicKey,
	collectionAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	collectionMint solanago.PublicKey,
	collection solanago.PublicKey,
	collectionMasterEditionAccount solanago.PublicKey,
	collectionAuthorityRecord solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetAndVerifyCollection[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata account
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable,signer] collection_authority
		// Collection Update authority
		metas_[1] = solanago.NewAccountMeta(collectionAuthority, true, true)
		// [2] = [writable,signer] payer
		// Payer
		metas_[2] = solanago.NewAccountMeta(payer, true, true)
		// [3] = [] update_authority
		// Update Authority of Collection NFT and NFT
		metas_[3] = solanago.NewAccountMeta(updateAuthority, false, false)
		// [4] = [] collection_mint
		// Mint of the Collection
		metas_[4] = solanago.NewAccountMeta(collectionMint, false, false)
		// [5] = [] collection
		// Metadata Account of the Collection
		metas_[5] = solanago.NewAccountMeta(collection, false, false)
		// [6] = [] collection_master_edition_account
		// MasterEdition2 Account of the Collection Token
		metas_[6] = solanago.NewAccountMeta(collectionMasterEditionAccount, false, false)
		// [7] = [,optional] collection_authority_record
		// Collection Authority Record PDA
		metas_[7] = solanago.NewAccountMeta(collectionAuthorityRecord, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetAndVerifyCollection" instruction.
func BuildSetAndVerifyCollection(
	metadata solanago.PublicKey,
	collectionAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	collectionMint solanago.PublicKey,
	collection solanago.PublicKey,
	collectionMasterEditionAccount solanago.PublicKey,
	collectionAuthorityRecord solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetAndVerifyCollectionInstruction(
		metadata,
		collectionAuthority,
		payer,
		updateAuthority,
		collectionMint,
		collection,
		collectionMasterEditionAccount,
		collectionAuthorityRecord,
		remaining__...,
	)
	return instruction_
}
