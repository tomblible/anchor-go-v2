// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "update_metadata_account" instruction.
type UpdateMetadataAccount struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [,signer] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj UpdateMetadataAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *UpdateMetadataAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *UpdateMetadataAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.UpdateAuthority = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *UpdateMetadataAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*UpdateMetadataAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_UpdateMetadataAccount)
}

func (*UpdateMetadataAccount) NewInstance() programparser.Instruction {
	return new(UpdateMetadataAccount)
}

func (obj *UpdateMetadataAccount) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 2 {
		return nil
	}
	return obj.PublicKeySlice[2:]
}

// Builds a "update_metadata_account" instruction.
func NewUpdateMetadataAccountInstruction(
	metadata solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_UpdateMetadataAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata account
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [,signer] update_authority
		// Update authority key
		metas_[1] = solanago.NewAccountMeta(updateAuthority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildUpdateMetadataAccount" instruction.
func BuildUpdateMetadataAccount(
	metadata solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewUpdateMetadataAccountInstruction(
		metadata,
		updateAuthority,
		remaining__...,
	)
	return instruction_
}
