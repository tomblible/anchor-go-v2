// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "mint" instruction.
type Mint struct {
	// Params:
	MintArgs MintArgs
	// Accounts:
	// [0] = [writable] token
	Token solanago.PublicKey `bin:"-"`
	// [1] = [,optional] token_owner
	TokenOwner solanago.PublicKey `bin:"-"`
	// [2] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [3] = [writable,optional] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [4] = [writable,optional] token_record
	TokenRecord solanago.PublicKey `bin:"-"`
	// [5] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [6] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [7] = [,optional] delegate_record
	DelegateRecord solanago.PublicKey `bin:"-"`
	// [8] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [9] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [10] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [11] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// [12] = [] spl_ata_program
	SplAtaProgram solanago.PublicKey `bin:"-"`
	// [13] = [,optional] authorization_rules_program
	AuthorizationRulesProgram solanago.PublicKey `bin:"-"`
	// [14] = [,optional] authorization_rules
	AuthorizationRules solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Mint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `mintArgsParam`:
	{
		if err = EncodeMintArgs(encoder, obj.MintArgs); err != nil {
			return fmt.Errorf("error while marshalingmintArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Mint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MintArgs`:
	{
		var err error
		obj.MintArgs, err = DecodeMintArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Mint) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 15 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 15, len(accounts))
	}
	obj.Token = accounts[0]
	obj.TokenOwner = accounts[1]
	obj.Metadata = accounts[2]
	obj.MasterEdition = accounts[3]
	obj.TokenRecord = accounts[4]
	obj.Mint = accounts[5]
	obj.Authority = accounts[6]
	obj.DelegateRecord = accounts[7]
	obj.Payer = accounts[8]
	obj.SystemProgram = accounts[9]
	obj.SysvarInstructions = accounts[10]
	obj.SplTokenProgram = accounts[11]
	obj.SplAtaProgram = accounts[12]
	obj.AuthorizationRulesProgram = accounts[13]
	obj.AuthorizationRules = accounts[14]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Mint) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Mint) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Mint)
}

func (*Mint) NewInstance() programparser.Instruction {
	return new(Mint)
}

func (obj *Mint) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 15 {
		return nil
	}
	return obj.PublicKeySlice[15:]
}

// Builds a "mint" instruction.
func NewMintInstruction(
	// Params:
	mintArgsParam MintArgs,

	// Accounts:
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	mint solanago.PublicKey,
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 15, 15+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Mint[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `mintArgsParam`:
		{
			if err = EncodeMintArgs(enc__, mintArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalingmintArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] token
		// Token or Associated Token account
		metas_[0] = solanago.NewAccountMeta(token, true, false)
		// [1] = [,optional] token_owner
		// Owner of the token account
		metas_[1] = solanago.NewAccountMeta(tokenOwner, false, false)
		// [2] = [] metadata
		// Metadata account (pda of ['metadata', program id, mint id])
		metas_[2] = solanago.NewAccountMeta(metadata, false, false)
		// [3] = [writable,optional] master_edition
		// Master Edition account
		metas_[3] = solanago.NewAccountMeta(masterEdition, true, false)
		// [4] = [writable,optional] token_record
		// Token record account
		metas_[4] = solanago.NewAccountMeta(tokenRecord, true, false)
		// [5] = [writable] mint
		// Mint of token asset
		metas_[5] = solanago.NewAccountMeta(mint, true, false)
		// [6] = [,signer] authority
		// (Mint or Update) authority
		metas_[6] = solanago.NewAccountMeta(authority, false, true)
		// [7] = [,optional] delegate_record
		// Metadata delegate record
		metas_[7] = solanago.NewAccountMeta(delegateRecord, false, false)
		// [8] = [writable,signer] payer
		// Payer
		metas_[8] = solanago.NewAccountMeta(payer, true, true)
		// [9] = [] system_program
		// System program
		metas_[9] = solanago.NewAccountMeta(systemProgram, false, false)
		// [10] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[10] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [11] = [] spl_token_program
		// SPL Token program
		metas_[11] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// [12] = [] spl_ata_program
		// SPL Associated Token Account program
		metas_[12] = solanago.NewAccountMeta(splAtaProgram, false, false)
		// [13] = [,optional] authorization_rules_program
		// Token Authorization Rules program
		metas_[13] = solanago.NewAccountMeta(authorizationRulesProgram, false, false)
		// [14] = [,optional] authorization_rules
		// Token Authorization Rules account
		metas_[14] = solanago.NewAccountMeta(authorizationRules, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildMint" instruction.
func BuildMint(
	// Params:
	mintArgsParam MintArgs,

	// Accounts:
	token solanago.PublicKey,
	tokenOwner solanago.PublicKey,
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	mint solanago.PublicKey,
	authority solanago.PublicKey,
	delegateRecord solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	splAtaProgram solanago.PublicKey,
	authorizationRulesProgram solanago.PublicKey,
	authorizationRules solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewMintInstruction(
		mintArgsParam,
		token,
		tokenOwner,
		metadata,
		masterEdition,
		tokenRecord,
		mint,
		authority,
		delegateRecord,
		payer,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		splAtaProgram,
		authorizationRulesProgram,
		authorizationRules,
		remaining__...,
	)
	return instruction_
}
