// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "revoke_collection_authority" instruction.
type RevokeCollectionAuthority struct {
	// Params:
	// Accounts:
	// [0] = [writable] collection_authority_record
	CollectionAuthorityRecord solanago.PublicKey `bin:"-"`
	// [1] = [writable] delegate_authority
	DelegateAuthority solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] revoke_authority
	RevokeAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [4] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj RevokeCollectionAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *RevokeCollectionAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *RevokeCollectionAuthority) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 5 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 5, len(accounts))
	}
	obj.CollectionAuthorityRecord = accounts[0]
	obj.DelegateAuthority = accounts[1]
	obj.RevokeAuthority = accounts[2]
	obj.Metadata = accounts[3]
	obj.Mint = accounts[4]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *RevokeCollectionAuthority) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*RevokeCollectionAuthority) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_RevokeCollectionAuthority)
}

func (*RevokeCollectionAuthority) NewInstance() programparser.Instruction {
	return new(RevokeCollectionAuthority)
}

func (obj *RevokeCollectionAuthority) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 5 {
		return nil
	}
	return obj.PublicKeySlice[5:]
}

// Builds a "revoke_collection_authority" instruction.
func NewRevokeCollectionAuthorityInstruction(
	collectionAuthorityRecord solanago.PublicKey,
	delegateAuthority solanago.PublicKey,
	revokeAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 5, 5+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_RevokeCollectionAuthority[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] collection_authority_record
		// Collection Authority Record PDA
		metas_[0] = solanago.NewAccountMeta(collectionAuthorityRecord, true, false)
		// [1] = [writable] delegate_authority
		// Delegated Collection Authority
		metas_[1] = solanago.NewAccountMeta(delegateAuthority, true, false)
		// [2] = [writable,signer] revoke_authority
		// Update Authority, or Delegated Authority, of Collection NFT
		metas_[2] = solanago.NewAccountMeta(revokeAuthority, true, true)
		// [3] = [] metadata
		// Metadata account
		metas_[3] = solanago.NewAccountMeta(metadata, false, false)
		// [4] = [] mint
		// Mint of Metadata
		metas_[4] = solanago.NewAccountMeta(mint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildRevokeCollectionAuthority" instruction.
func BuildRevokeCollectionAuthority(
	collectionAuthorityRecord solanago.PublicKey,
	delegateAuthority solanago.PublicKey,
	revokeAuthority solanago.PublicKey,
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewRevokeCollectionAuthorityInstruction(
		collectionAuthorityRecord,
		delegateAuthority,
		revokeAuthority,
		metadata,
		mint,
		remaining__...,
	)
	return instruction_
}
