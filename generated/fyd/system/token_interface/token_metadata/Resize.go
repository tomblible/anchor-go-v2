// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "resize" instruction.
type Resize struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable] edition
	Edition solanago.PublicKey `bin:"-"`
	// [2] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [writable] payer
	Payer solanago.PublicKey `bin:"-"`
	// [4] = [,signer,optional] authority
	Authority solanago.PublicKey `bin:"-"`
	// [5] = [,optional] token
	Token solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Resize) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *Resize) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *Resize) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Edition = accounts[1]
	obj.Mint = accounts[2]
	obj.Payer = accounts[3]
	obj.Authority = accounts[4]
	obj.Token = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Resize) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Resize) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Resize)
}

func (*Resize) NewInstance() programparser.Instruction {
	return new(Resize)
}

func (obj *Resize) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "resize" instruction.
func NewResizeInstruction(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	token solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Resize[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// The metadata account of the digital asset
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable] edition
		// The master edition or edition account of the digital asset, an uninitialized account for fungible assets
		metas_[1] = solanago.NewAccountMeta(edition, true, false)
		// [2] = [] mint
		// Mint of token asset
		metas_[2] = solanago.NewAccountMeta(mint, false, false)
		// [3] = [writable] payer
		// The recipient of the excess rent and authority if the authority account is not present
		metas_[3] = solanago.NewAccountMeta(payer, true, false)
		// [4] = [,signer,optional] authority
		// Owner of the asset for (p)NFTs, or mint authority for fungible assets, if different from the payer
		metas_[4] = solanago.NewAccountMeta(authority, false, true)
		// [5] = [,optional] token
		// Token or Associated Token account
		metas_[5] = solanago.NewAccountMeta(token, false, false)
		// [6] = [] system_program
		// System program
		metas_[6] = solanago.NewAccountMeta(systemProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildResize" instruction.
func BuildResize(
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	payer solanago.PublicKey,
	authority solanago.PublicKey,
	token solanago.PublicKey,
	systemProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewResizeInstruction(
		metadata,
		edition,
		mint,
		payer,
		authority,
		token,
		systemProgram,
		remaining__...,
	)
	return instruction_
}
