// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "transfer_out_of_escrow" instruction.
type TransferOutOfEscrow struct {
	// Params:
	TransferOutOfEscrowArgs TransferOutOfEscrowArgs
	// Accounts:
	// [0] = [] escrow
	Escrow solanago.PublicKey `bin:"-"`
	// [1] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [2] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [3] = [] attribute_mint
	AttributeMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] attribute_src
	AttributeSrc solanago.PublicKey `bin:"-"`
	// [5] = [writable] attribute_dst
	AttributeDst solanago.PublicKey `bin:"-"`
	// [6] = [] escrow_mint
	EscrowMint solanago.PublicKey `bin:"-"`
	// [7] = [] escrow_account
	EscrowAccount solanago.PublicKey `bin:"-"`
	// [8] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [9] = [] ata_program
	AtaProgram solanago.PublicKey `bin:"-"`
	// [10] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// [11] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [12] = [,signer,optional] authority
	Authority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj TransferOutOfEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `transferOutOfEscrowArgsParam`:
	if err = encoder.Encode(obj.TransferOutOfEscrowArgs); err != nil {
		return fmt.Errorf("error while marshaling transferOutOfEscrowArgsParam:%w", err)
	}
	return nil
}

func (obj *TransferOutOfEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TransferOutOfEscrowArgs`:
	if err = decoder.Decode(&obj.TransferOutOfEscrowArgs); err != nil {
		return fmt.Errorf("error while unmarshaling TransferOutOfEscrowArgs:%w", err)
	}
	return nil
}

func (obj *TransferOutOfEscrow) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 13 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 13, len(accounts))
	}
	obj.Escrow = accounts[0]
	obj.Metadata = accounts[1]
	obj.Payer = accounts[2]
	obj.AttributeMint = accounts[3]
	obj.AttributeSrc = accounts[4]
	obj.AttributeDst = accounts[5]
	obj.EscrowMint = accounts[6]
	obj.EscrowAccount = accounts[7]
	obj.SystemProgram = accounts[8]
	obj.AtaProgram = accounts[9]
	obj.TokenProgram = accounts[10]
	obj.SysvarInstructions = accounts[11]
	obj.Authority = accounts[12]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *TransferOutOfEscrow) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*TransferOutOfEscrow) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_TransferOutOfEscrow)
}

func (*TransferOutOfEscrow) NewInstance() programparser.Instruction {
	return new(TransferOutOfEscrow)
}

func (obj *TransferOutOfEscrow) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 13 {
		return nil
	}
	return obj.PublicKeySlice[13:]
}

// Builds a "transfer_out_of_escrow" instruction.
func NewTransferOutOfEscrowInstruction(
	// Params:
	transferOutOfEscrowArgsParam TransferOutOfEscrowArgs,

	// Accounts:
	escrow solanago.PublicKey,
	metadata solanago.PublicKey,
	payer solanago.PublicKey,
	attributeMint solanago.PublicKey,
	attributeSrc solanago.PublicKey,
	attributeDst solanago.PublicKey,
	escrowMint solanago.PublicKey,
	escrowAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	ataProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 13, 13+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_TransferOutOfEscrow[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `transferOutOfEscrowArgsParam`:
		if err = enc__.Encode(transferOutOfEscrowArgsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling transferOutOfEscrowArgsParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [] escrow
		// Escrow account
		metas_[0] = solanago.NewAccountMeta(escrow, false, false)
		// [1] = [writable] metadata
		// Metadata account
		metas_[1] = solanago.NewAccountMeta(metadata, true, false)
		// [2] = [writable,signer] payer
		// Wallet paying for the transaction and new account
		metas_[2] = solanago.NewAccountMeta(payer, true, true)
		// [3] = [] attribute_mint
		// Mint account for the new attribute
		metas_[3] = solanago.NewAccountMeta(attributeMint, false, false)
		// [4] = [writable] attribute_src
		// Token account source for the new attribute
		metas_[4] = solanago.NewAccountMeta(attributeSrc, true, false)
		// [5] = [writable] attribute_dst
		// Token account, owned by TM, destination for the new attribute
		metas_[5] = solanago.NewAccountMeta(attributeDst, true, false)
		// [6] = [] escrow_mint
		// Mint account that the escrow is attached
		metas_[6] = solanago.NewAccountMeta(escrowMint, false, false)
		// [7] = [] escrow_account
		// Token account that holds the token the escrow is attached to
		metas_[7] = solanago.NewAccountMeta(escrowAccount, false, false)
		// [8] = [] system_program
		// System program
		metas_[8] = solanago.NewAccountMeta(systemProgram, false, false)
		// [9] = [] ata_program
		// Associated Token program
		metas_[9] = solanago.NewAccountMeta(ataProgram, false, false)
		// [10] = [] token_program
		// Token program
		metas_[10] = solanago.NewAccountMeta(tokenProgram, false, false)
		// [11] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[11] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [12] = [,signer,optional] authority
		// Authority/creator of the escrow account
		metas_[12] = solanago.NewAccountMeta(authority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildTransferOutOfEscrow" instruction.
func BuildTransferOutOfEscrow(
	// Params:
	transferOutOfEscrowArgsParam TransferOutOfEscrowArgs,

	// Accounts:
	escrow solanago.PublicKey,
	metadata solanago.PublicKey,
	payer solanago.PublicKey,
	attributeMint solanago.PublicKey,
	attributeSrc solanago.PublicKey,
	attributeDst solanago.PublicKey,
	escrowMint solanago.PublicKey,
	escrowAccount solanago.PublicKey,
	systemProgram solanago.PublicKey,
	ataProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewTransferOutOfEscrowInstruction(
		transferOutOfEscrowArgsParam,
		escrow,
		metadata,
		payer,
		attributeMint,
		attributeSrc,
		attributeDst,
		escrowMint,
		escrowAccount,
		systemProgram,
		ataProgram,
		tokenProgram,
		sysvarInstructions,
		authority,
		remaining__...,
	)
	return instruction_
}
