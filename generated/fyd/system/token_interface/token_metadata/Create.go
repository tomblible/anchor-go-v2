// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create" instruction.
type Create struct {
	// Params:
	CreateArgs CreateArgs
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable,optional] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [2] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [4] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [5] = [] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [8] = [,optional] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Create) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `createArgsParam`:
	{
		if err = EncodeCreateArgs(encoder, obj.CreateArgs); err != nil {
			return fmt.Errorf("error while marshalingcreateArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Create) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CreateArgs`:
	{
		var err error
		obj.CreateArgs, err = DecodeCreateArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Create) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.MasterEdition = accounts[1]
	obj.Mint = accounts[2]
	obj.Authority = accounts[3]
	obj.Payer = accounts[4]
	obj.UpdateAuthority = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.SysvarInstructions = accounts[7]
	obj.SplTokenProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Create) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Create) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Create)
}

func (*Create) NewInstance() programparser.Instruction {
	return new(Create)
}

func (obj *Create) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "create" instruction.
func NewCreateInstruction(
	// Params:
	createArgsParam CreateArgs,

	// Accounts:
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	mint solanago.PublicKey,
	authority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Create[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `createArgsParam`:
		{
			if err = EncodeCreateArgs(enc__, createArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalingcreateArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Unallocated metadata account with address as pda of ['metadata', program id, mint id]
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable,optional] master_edition
		// Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']
		metas_[1] = solanago.NewAccountMeta(masterEdition, true, false)
		// [2] = [writable] mint
		// Mint of token asset
		metas_[2] = solanago.NewAccountMeta(mint, true, false)
		// [3] = [,signer] authority
		// Mint authority
		metas_[3] = solanago.NewAccountMeta(authority, false, true)
		// [4] = [writable,signer] payer
		// Payer
		metas_[4] = solanago.NewAccountMeta(payer, true, true)
		// [5] = [] update_authority
		// Update authority for the metadata account
		metas_[5] = solanago.NewAccountMeta(updateAuthority, false, false)
		// [6] = [] system_program
		// System program
		metas_[6] = solanago.NewAccountMeta(systemProgram, false, false)
		// [7] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[7] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [8] = [,optional] spl_token_program
		// SPL Token program
		metas_[8] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreate" instruction.
func BuildCreate(
	// Params:
	createArgsParam CreateArgs,

	// Accounts:
	metadata solanago.PublicKey,
	masterEdition solanago.PublicKey,
	mint solanago.PublicKey,
	authority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateInstruction(
		createArgsParam,
		metadata,
		masterEdition,
		mint,
		authority,
		payer,
		updateAuthority,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		remaining__...,
	)
	return instruction_
}
