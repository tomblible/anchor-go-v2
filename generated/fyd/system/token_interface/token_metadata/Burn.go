// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "burn" instruction.
type Burn struct {
	// Params:
	BurnArgs BurnArgs
	// Accounts:
	// [0] = [writable,signer] authority
	Authority solanago.PublicKey `bin:"-"`
	// [1] = [writable,optional] collection_metadata
	CollectionMetadata solanago.PublicKey `bin:"-"`
	// [2] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [3] = [writable,optional] edition
	Edition solanago.PublicKey `bin:"-"`
	// [4] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// [5] = [writable] token
	Token solanago.PublicKey `bin:"-"`
	// [6] = [writable,optional] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [7] = [,optional] master_edition_mint
	MasterEditionMint solanago.PublicKey `bin:"-"`
	// [8] = [,optional] master_edition_token
	MasterEditionToken solanago.PublicKey `bin:"-"`
	// [9] = [writable,optional] edition_marker
	EditionMarker solanago.PublicKey `bin:"-"`
	// [10] = [writable,optional] token_record
	TokenRecord solanago.PublicKey `bin:"-"`
	// [11] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [12] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [13] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj Burn) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `burnArgsParam`:
	{
		if err = EncodeBurnArgs(encoder, obj.BurnArgs); err != nil {
			return fmt.Errorf("error while marshalingburnArgsParam:%w", err)
		}
	}
	return nil
}

func (obj *Burn) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BurnArgs`:
	{
		var err error
		obj.BurnArgs, err = DecodeBurnArgs(decoder)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Burn) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 14 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 14, len(accounts))
	}
	obj.Authority = accounts[0]
	obj.CollectionMetadata = accounts[1]
	obj.Metadata = accounts[2]
	obj.Edition = accounts[3]
	obj.Mint = accounts[4]
	obj.Token = accounts[5]
	obj.MasterEdition = accounts[6]
	obj.MasterEditionMint = accounts[7]
	obj.MasterEditionToken = accounts[8]
	obj.EditionMarker = accounts[9]
	obj.TokenRecord = accounts[10]
	obj.SystemProgram = accounts[11]
	obj.SysvarInstructions = accounts[12]
	obj.SplTokenProgram = accounts[13]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *Burn) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*Burn) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_Burn)
}

func (*Burn) NewInstance() programparser.Instruction {
	return new(Burn)
}

func (obj *Burn) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 14 {
		return nil
	}
	return obj.PublicKeySlice[14:]
}

// Builds a "burn" instruction.
func NewBurnInstruction(
	// Params:
	burnArgsParam BurnArgs,

	// Accounts:
	authority solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	token solanago.PublicKey,
	masterEdition solanago.PublicKey,
	masterEditionMint solanago.PublicKey,
	masterEditionToken solanago.PublicKey,
	editionMarker solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 14, 14+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_Burn[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `burnArgsParam`:
		{
			if err = EncodeBurnArgs(enc__, burnArgsParam); err != nil {
				return nil, fmt.Errorf("error while marshalingburnArgsParam:%w", err)
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] authority
		// Asset owner or Utility delegate
		metas_[0] = solanago.NewAccountMeta(authority, true, true)
		// [1] = [writable,optional] collection_metadata
		// Metadata of the Collection
		metas_[1] = solanago.NewAccountMeta(collectionMetadata, true, false)
		// [2] = [writable] metadata
		// Metadata (pda of ['metadata', program id, mint id])
		metas_[2] = solanago.NewAccountMeta(metadata, true, false)
		// [3] = [writable,optional] edition
		// Edition of the asset
		metas_[3] = solanago.NewAccountMeta(edition, true, false)
		// [4] = [writable] mint
		// Mint of token asset
		metas_[4] = solanago.NewAccountMeta(mint, true, false)
		// [5] = [writable] token
		// Token account to close
		metas_[5] = solanago.NewAccountMeta(token, true, false)
		// [6] = [writable,optional] master_edition
		// Master edition account
		metas_[6] = solanago.NewAccountMeta(masterEdition, true, false)
		// [7] = [,optional] master_edition_mint
		// Master edition mint of the asset
		metas_[7] = solanago.NewAccountMeta(masterEditionMint, false, false)
		// [8] = [,optional] master_edition_token
		// Master edition token account
		metas_[8] = solanago.NewAccountMeta(masterEditionToken, false, false)
		// [9] = [writable,optional] edition_marker
		// Edition marker account
		metas_[9] = solanago.NewAccountMeta(editionMarker, true, false)
		// [10] = [writable,optional] token_record
		// Token record account
		metas_[10] = solanago.NewAccountMeta(tokenRecord, true, false)
		// [11] = [] system_program
		// System program
		metas_[11] = solanago.NewAccountMeta(systemProgram, false, false)
		// [12] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[12] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [13] = [] spl_token_program
		// SPL Token Program
		metas_[13] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildBurn" instruction.
func BuildBurn(
	// Params:
	burnArgsParam BurnArgs,

	// Accounts:
	authority solanago.PublicKey,
	collectionMetadata solanago.PublicKey,
	metadata solanago.PublicKey,
	edition solanago.PublicKey,
	mint solanago.PublicKey,
	token solanago.PublicKey,
	masterEdition solanago.PublicKey,
	masterEditionMint solanago.PublicKey,
	masterEditionToken solanago.PublicKey,
	editionMarker solanago.PublicKey,
	tokenRecord solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewBurnInstruction(
		burnArgsParam,
		authority,
		collectionMetadata,
		metadata,
		edition,
		mint,
		token,
		masterEdition,
		masterEditionMint,
		masterEditionToken,
		editionMarker,
		tokenRecord,
		systemProgram,
		sysvarInstructions,
		splTokenProgram,
		remaining__...,
	)
	return instruction_
}
