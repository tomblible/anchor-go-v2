// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_escrow_account" instruction.
type CreateEscrowAccount struct {
	// Params:
	// Accounts:
	// [0] = [writable] escrow
	Escrow solanago.PublicKey `bin:"-"`
	// [1] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [2] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [3] = [] token_account
	TokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [] edition
	Edition solanago.PublicKey `bin:"-"`
	// [5] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] sysvar_instructions
	SysvarInstructions solanago.PublicKey `bin:"-"`
	// [8] = [,signer,optional] authority
	Authority solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateEscrowAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateEscrowAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateEscrowAccount) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Escrow = accounts[0]
	obj.Metadata = accounts[1]
	obj.Mint = accounts[2]
	obj.TokenAccount = accounts[3]
	obj.Edition = accounts[4]
	obj.Payer = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.SysvarInstructions = accounts[7]
	obj.Authority = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateEscrowAccount) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateEscrowAccount) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateEscrowAccount)
}

func (*CreateEscrowAccount) NewInstance() programparser.Instruction {
	return new(CreateEscrowAccount)
}

func (obj *CreateEscrowAccount) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "create_escrow_account" instruction.
func NewCreateEscrowAccountInstruction(
	escrow solanago.PublicKey,
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	edition solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateEscrowAccount[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] escrow
		// Escrow account
		metas_[0] = solanago.NewAccountMeta(escrow, true, false)
		// [1] = [writable] metadata
		// Metadata account
		metas_[1] = solanago.NewAccountMeta(metadata, true, false)
		// [2] = [] mint
		// Mint account
		metas_[2] = solanago.NewAccountMeta(mint, false, false)
		// [3] = [] token_account
		// Token account of the token
		metas_[3] = solanago.NewAccountMeta(tokenAccount, false, false)
		// [4] = [] edition
		// Edition account
		metas_[4] = solanago.NewAccountMeta(edition, false, false)
		// [5] = [writable,signer] payer
		// Wallet paying for the transaction and new account
		metas_[5] = solanago.NewAccountMeta(payer, true, true)
		// [6] = [] system_program
		// System program
		metas_[6] = solanago.NewAccountMeta(systemProgram, false, false)
		// [7] = [] sysvar_instructions
		// Instructions sysvar account
		metas_[7] = solanago.NewAccountMeta(sysvarInstructions, false, false)
		// [8] = [,signer,optional] authority
		// Authority/creator of the escrow account
		metas_[8] = solanago.NewAccountMeta(authority, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateEscrowAccount" instruction.
func BuildCreateEscrowAccount(
	escrow solanago.PublicKey,
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	tokenAccount solanago.PublicKey,
	edition solanago.PublicKey,
	payer solanago.PublicKey,
	systemProgram solanago.PublicKey,
	sysvarInstructions solanago.PublicKey,
	authority solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateEscrowAccountInstruction(
		escrow,
		metadata,
		mint,
		tokenAccount,
		edition,
		payer,
		systemProgram,
		sysvarInstructions,
		authority,
		remaining__...,
	)
	return instruction_
}
