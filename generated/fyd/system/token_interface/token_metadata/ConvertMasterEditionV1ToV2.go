// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "convert_master_edition_v1_to_v2" instruction.
type ConvertMasterEditionV1ToV2 struct {
	// Params:
	// Accounts:
	// [0] = [writable] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [1] = [writable] one_time_auth
	OneTimeAuth solanago.PublicKey `bin:"-"`
	// [2] = [writable] printing_mint
	PrintingMint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj ConvertMasterEditionV1ToV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *ConvertMasterEditionV1ToV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ConvertMasterEditionV1ToV2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 3 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 3, len(accounts))
	}
	obj.MasterEdition = accounts[0]
	obj.OneTimeAuth = accounts[1]
	obj.PrintingMint = accounts[2]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *ConvertMasterEditionV1ToV2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*ConvertMasterEditionV1ToV2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_ConvertMasterEditionV1ToV2)
}

func (*ConvertMasterEditionV1ToV2) NewInstance() programparser.Instruction {
	return new(ConvertMasterEditionV1ToV2)
}

func (obj *ConvertMasterEditionV1ToV2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 3 {
		return nil
	}
	return obj.PublicKeySlice[3:]
}

// Builds a "convert_master_edition_v1_to_v2" instruction.
func NewConvertMasterEditionV1ToV2Instruction(
	masterEdition solanago.PublicKey,
	oneTimeAuth solanago.PublicKey,
	printingMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 3, 3+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_ConvertMasterEditionV1ToV2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] master_edition
		// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
		metas_[0] = solanago.NewAccountMeta(masterEdition, true, false)
		// [1] = [writable] one_time_auth
		// One time authorization mint
		metas_[1] = solanago.NewAccountMeta(oneTimeAuth, true, false)
		// [2] = [writable] printing_mint
		// Printing mint
		metas_[2] = solanago.NewAccountMeta(printingMint, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildConvertMasterEditionV1ToV2" instruction.
func BuildConvertMasterEditionV1ToV2(
	masterEdition solanago.PublicKey,
	oneTimeAuth solanago.PublicKey,
	printingMint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewConvertMasterEditionV1ToV2Instruction(
		masterEdition,
		oneTimeAuth,
		printingMint,
		remaining__...,
	)
	return instruction_
}
