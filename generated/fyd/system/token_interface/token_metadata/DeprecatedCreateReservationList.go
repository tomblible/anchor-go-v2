// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "deprecated_create_reservation_list" instruction.
type DeprecatedCreateReservationList struct {
	// Params:
	// Accounts:
	// [0] = [writable] reservation_list
	ReservationList solanago.PublicKey `bin:"-"`
	// [1] = [,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [2] = [,signer] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [3] = [] master_edition
	MasterEdition solanago.PublicKey `bin:"-"`
	// [4] = [] resource
	Resource solanago.PublicKey `bin:"-"`
	// [5] = [] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [6] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [7] = [] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj DeprecatedCreateReservationList) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *DeprecatedCreateReservationList) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DeprecatedCreateReservationList) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 8 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 8, len(accounts))
	}
	obj.ReservationList = accounts[0]
	obj.Payer = accounts[1]
	obj.UpdateAuthority = accounts[2]
	obj.MasterEdition = accounts[3]
	obj.Resource = accounts[4]
	obj.Metadata = accounts[5]
	obj.SystemProgram = accounts[6]
	obj.Rent = accounts[7]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *DeprecatedCreateReservationList) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*DeprecatedCreateReservationList) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_DeprecatedCreateReservationList)
}

func (*DeprecatedCreateReservationList) NewInstance() programparser.Instruction {
	return new(DeprecatedCreateReservationList)
}

func (obj *DeprecatedCreateReservationList) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 8 {
		return nil
	}
	return obj.PublicKeySlice[8:]
}

// Builds a "deprecated_create_reservation_list" instruction.
func NewDeprecatedCreateReservationListInstruction(
	reservationList solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	masterEdition solanago.PublicKey,
	resource solanago.PublicKey,
	metadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 8, 8+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_DeprecatedCreateReservationList[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] reservation_list
		// PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]
		metas_[0] = solanago.NewAccountMeta(reservationList, true, false)
		// [1] = [,signer] payer
		// Payer
		metas_[1] = solanago.NewAccountMeta(payer, false, true)
		// [2] = [,signer] update_authority
		// Update authority
		metas_[2] = solanago.NewAccountMeta(updateAuthority, false, true)
		// [3] = [] master_edition
		//
		//	Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
		metas_[3] = solanago.NewAccountMeta(masterEdition, false, false)
		// [4] = [] resource
		// A resource you wish to tie the reservation list to. This is so your later visitors who come to redeem can derive your reservation list PDA with something they can easily get at. You choose what this should be.
		metas_[4] = solanago.NewAccountMeta(resource, false, false)
		// [5] = [] metadata
		// Metadata key (pda of ['metadata', program id, mint id])
		metas_[5] = solanago.NewAccountMeta(metadata, false, false)
		// [6] = [] system_program
		// System program
		metas_[6] = solanago.NewAccountMeta(systemProgram, false, false)
		// [7] = [] rent
		// Rent info
		metas_[7] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildDeprecatedCreateReservationList" instruction.
func BuildDeprecatedCreateReservationList(
	reservationList solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	masterEdition solanago.PublicKey,
	resource solanago.PublicKey,
	metadata solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewDeprecatedCreateReservationListInstruction(
		reservationList,
		payer,
		updateAuthority,
		masterEdition,
		resource,
		metadata,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
