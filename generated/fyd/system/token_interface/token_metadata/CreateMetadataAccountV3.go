// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_metadata_account_v3" instruction.
type CreateMetadataAccountV3 struct {
	// Params:
	CreateMetadataAccountArgsV3 CreateMetadataAccountArgsV3
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [2] = [,signer] mint_authority
	MintAuthority solanago.PublicKey `bin:"-"`
	// [3] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [4] = [] update_authority
	UpdateAuthority solanago.PublicKey `bin:"-"`
	// [5] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [6] = [,optional] rent
	Rent solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateMetadataAccountV3) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `createMetadataAccountArgsV3Param`:
	if err = encoder.Encode(obj.CreateMetadataAccountArgsV3); err != nil {
		return fmt.Errorf("error while marshaling createMetadataAccountArgsV3Param:%w", err)
	}
	return nil
}

func (obj *CreateMetadataAccountV3) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CreateMetadataAccountArgsV3`:
	if err = decoder.Decode(&obj.CreateMetadataAccountArgsV3); err != nil {
		return fmt.Errorf("error while unmarshaling CreateMetadataAccountArgsV3:%w", err)
	}
	return nil
}

func (obj *CreateMetadataAccountV3) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 7 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 7, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Mint = accounts[1]
	obj.MintAuthority = accounts[2]
	obj.Payer = accounts[3]
	obj.UpdateAuthority = accounts[4]
	obj.SystemProgram = accounts[5]
	obj.Rent = accounts[6]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateMetadataAccountV3) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateMetadataAccountV3) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateMetadataAccountV3)
}

func (*CreateMetadataAccountV3) NewInstance() programparser.Instruction {
	return new(CreateMetadataAccountV3)
}

func (obj *CreateMetadataAccountV3) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 7 {
		return nil
	}
	return obj.PublicKeySlice[7:]
}

// Builds a "create_metadata_account_v3" instruction.
func NewCreateMetadataAccountV3Instruction(
	// Params:
	createMetadataAccountArgsV3Param CreateMetadataAccountArgsV3,

	// Accounts:
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 7, 7+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateMetadataAccountV3[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `createMetadataAccountArgsV3Param`:
		if err = enc__.Encode(createMetadataAccountArgsV3Param); err != nil {
			return nil, fmt.Errorf("error while marshaling createMetadataAccountArgsV3Param:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata key (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [] mint
		// Mint of token asset
		metas_[1] = solanago.NewAccountMeta(mint, false, false)
		// [2] = [,signer] mint_authority
		// Mint authority
		metas_[2] = solanago.NewAccountMeta(mintAuthority, false, true)
		// [3] = [writable,signer] payer
		// payer
		metas_[3] = solanago.NewAccountMeta(payer, true, true)
		// [4] = [] update_authority
		// update authority info
		metas_[4] = solanago.NewAccountMeta(updateAuthority, false, false)
		// [5] = [] system_program
		// System program
		metas_[5] = solanago.NewAccountMeta(systemProgram, false, false)
		// [6] = [,optional] rent
		// Rent info
		metas_[6] = solanago.NewAccountMeta(rent, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateMetadataAccountV3" instruction.
func BuildCreateMetadataAccountV3(
	// Params:
	createMetadataAccountArgsV3Param CreateMetadataAccountArgsV3,

	// Accounts:
	metadata solanago.PublicKey,
	mint solanago.PublicKey,
	mintAuthority solanago.PublicKey,
	payer solanago.PublicKey,
	updateAuthority solanago.PublicKey,
	systemProgram solanago.PublicKey,
	rent solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateMetadataAccountV3Instruction(
		createMetadataAccountArgsV3Param,
		metadata,
		mint,
		mintAuthority,
		payer,
		updateAuthority,
		systemProgram,
		rent,
		remaining__...,
	)
	return instruction_
}
