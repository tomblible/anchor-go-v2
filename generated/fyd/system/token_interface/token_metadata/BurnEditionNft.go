// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "burn_edition_nft" instruction.
type BurnEditionNft struct {
	// Params:
	// Accounts:
	// [0] = [writable] metadata
	Metadata solanago.PublicKey `bin:"-"`
	// [1] = [writable,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// [2] = [writable] print_edition_mint
	PrintEditionMint solanago.PublicKey `bin:"-"`
	// [3] = [] master_edition_mint
	MasterEditionMint solanago.PublicKey `bin:"-"`
	// [4] = [writable] print_edition_token_account
	PrintEditionTokenAccount solanago.PublicKey `bin:"-"`
	// [5] = [] master_edition_token_account
	MasterEditionTokenAccount solanago.PublicKey `bin:"-"`
	// [6] = [writable] master_edition_account
	MasterEditionAccount solanago.PublicKey `bin:"-"`
	// [7] = [writable] print_edition_account
	PrintEditionAccount solanago.PublicKey `bin:"-"`
	// [8] = [writable] edition_marker_account
	EditionMarkerAccount solanago.PublicKey `bin:"-"`
	// [9] = [] spl_token_program
	SplTokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj BurnEditionNft) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *BurnEditionNft) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *BurnEditionNft) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 10 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 10, len(accounts))
	}
	obj.Metadata = accounts[0]
	obj.Owner = accounts[1]
	obj.PrintEditionMint = accounts[2]
	obj.MasterEditionMint = accounts[3]
	obj.PrintEditionTokenAccount = accounts[4]
	obj.MasterEditionTokenAccount = accounts[5]
	obj.MasterEditionAccount = accounts[6]
	obj.PrintEditionAccount = accounts[7]
	obj.EditionMarkerAccount = accounts[8]
	obj.SplTokenProgram = accounts[9]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *BurnEditionNft) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*BurnEditionNft) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_BurnEditionNft)
}

func (*BurnEditionNft) NewInstance() programparser.Instruction {
	return new(BurnEditionNft)
}

func (obj *BurnEditionNft) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 10 {
		return nil
	}
	return obj.PublicKeySlice[10:]
}

// Builds a "burn_edition_nft" instruction.
func NewBurnEditionNftInstruction(
	metadata solanago.PublicKey,
	owner solanago.PublicKey,
	printEditionMint solanago.PublicKey,
	masterEditionMint solanago.PublicKey,
	printEditionTokenAccount solanago.PublicKey,
	masterEditionTokenAccount solanago.PublicKey,
	masterEditionAccount solanago.PublicKey,
	printEditionAccount solanago.PublicKey,
	editionMarkerAccount solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 10, 10+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_BurnEditionNft[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] metadata
		// Metadata (pda of ['metadata', program id, mint id])
		metas_[0] = solanago.NewAccountMeta(metadata, true, false)
		// [1] = [writable,signer] owner
		// NFT owner
		metas_[1] = solanago.NewAccountMeta(owner, true, true)
		// [2] = [writable] print_edition_mint
		// Mint of the print edition NFT
		metas_[2] = solanago.NewAccountMeta(printEditionMint, true, false)
		// [3] = [] master_edition_mint
		// Mint of the original/master NFT
		metas_[3] = solanago.NewAccountMeta(masterEditionMint, false, false)
		// [4] = [writable] print_edition_token_account
		// Token account the print edition NFT is in
		metas_[4] = solanago.NewAccountMeta(printEditionTokenAccount, true, false)
		// [5] = [] master_edition_token_account
		// Token account the Master Edition NFT is in
		metas_[5] = solanago.NewAccountMeta(masterEditionTokenAccount, false, false)
		// [6] = [writable] master_edition_account
		// MasterEdition2 of the original NFT
		metas_[6] = solanago.NewAccountMeta(masterEditionAccount, true, false)
		// [7] = [writable] print_edition_account
		// Print Edition account of the NFT
		metas_[7] = solanago.NewAccountMeta(printEditionAccount, true, false)
		// [8] = [writable] edition_marker_account
		// Edition Marker PDA of the NFT
		metas_[8] = solanago.NewAccountMeta(editionMarkerAccount, true, false)
		// [9] = [] spl_token_program
		// SPL Token Program
		metas_[9] = solanago.NewAccountMeta(splTokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildBurnEditionNft" instruction.
func BuildBurnEditionNft(
	metadata solanago.PublicKey,
	owner solanago.PublicKey,
	printEditionMint solanago.PublicKey,
	masterEditionMint solanago.PublicKey,
	printEditionTokenAccount solanago.PublicKey,
	masterEditionTokenAccount solanago.PublicKey,
	masterEditionAccount solanago.PublicKey,
	printEditionAccount solanago.PublicKey,
	editionMarkerAccount solanago.PublicKey,
	splTokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewBurnEditionNftInstruction(
		metadata,
		owner,
		printEditionMint,
		masterEditionMint,
		printEditionTokenAccount,
		masterEditionTokenAccount,
		masterEditionAccount,
		printEditionAccount,
		editionMarkerAccount,
		splTokenProgram,
		remaining__...,
	)
	return instruction_
}
