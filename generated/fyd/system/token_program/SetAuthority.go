// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "set_authority" instruction.
type SetAuthority struct {
	// Params:
	AuthorityType AuthorityType
	NewAuthority  *solanago.PublicKey `bin:"optional"`
	// Accounts:
	// [0] = [writable] owned
	Owned solanago.PublicKey `bin:"-"`
	// [1] = [,signer] owner
	Owner solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj SetAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `authorityTypeParam`:
	if err = encoder.Encode(obj.AuthorityType); err != nil {
		return fmt.Errorf("error while marshaling authorityTypeParam:%w", err)
	}
	// Serialize `newAuthorityParam` (optional):
	{
		if obj.NewAuthority == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling newAuthorityParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling newAuthorityParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.NewAuthority); err != nil {
				return fmt.Errorf("error while marshaling newAuthorityParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *SetAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AuthorityType`:
	if err = decoder.Decode(&obj.AuthorityType); err != nil {
		return fmt.Errorf("error while unmarshaling AuthorityType:%w", err)
	}
	// Deserialize `NewAuthority` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling NewAuthority:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.NewAuthority); err != nil {
				return fmt.Errorf("error while unmarshaling NewAuthority:%w", err)
			}
		}
	}
	return nil
}

func (obj *SetAuthority) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Owned = accounts[0]
	obj.Owner = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *SetAuthority) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*SetAuthority) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_SetAuthority)
}

func (*SetAuthority) NewInstance() programparser.Instruction {
	return new(SetAuthority)
}

func (obj *SetAuthority) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 2 {
		return nil
	}
	return obj.PublicKeySlice[2:]
}

// Builds a "set_authority" instruction.
func NewSetAuthorityInstruction(
	// Params:
	authorityTypeParam AuthorityType,
	newAuthorityParam *solanago.PublicKey,

	// Accounts:
	owned solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_SetAuthority[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `authorityTypeParam`:
		if err = enc__.Encode(authorityTypeParam); err != nil {
			return nil, fmt.Errorf("error while marshaling authorityTypeParam:%w", err)
		}
		// Serialize `newAuthorityParam` (optional):
		{
			if newAuthorityParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling newAuthorityParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling newAuthorityParam optionality: %w", err)
				}
				if err = enc__.Encode(newAuthorityParam); err != nil {
					return nil, fmt.Errorf("error while marshaling newAuthorityParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] owned
		metas_[0] = solanago.NewAccountMeta(owned, true, false)
		// [1] = [,signer] owner
		metas_[1] = solanago.NewAccountMeta(owner, false, true)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildSetAuthority" instruction.
func BuildSetAuthority(
	// Params:
	authorityTypeParam AuthorityType,
	newAuthorityParam *solanago.PublicKey,

	// Accounts:
	owned solanago.PublicKey,
	owner solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewSetAuthorityInstruction(
		authorityTypeParam,
		newAuthorityParam,
		owned,
		owner,
		remaining__...,
	)
	return instruction_
}
