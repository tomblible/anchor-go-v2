// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_token3" instruction.
type InitializeToken3 struct {
	// Params:
	Owner solanago.PublicKey
	// Accounts:
	// [0] = [writable] account
	Account solanago.PublicKey `bin:"-"`
	// [1] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeToken3) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ownerParam`:
	if err = encoder.Encode(obj.Owner); err != nil {
		return fmt.Errorf("error while marshaling ownerParam:%w", err)
	}
	return nil
}

func (obj *InitializeToken3) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	if err = decoder.Decode(&obj.Owner); err != nil {
		return fmt.Errorf("error while unmarshaling Owner:%w", err)
	}
	return nil
}

func (obj *InitializeToken3) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 2 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 2, len(accounts))
	}
	obj.Account = accounts[0]
	obj.Mint = accounts[1]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeToken3) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeToken3) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeToken3)
}

func (*InitializeToken3) NewInstance() programparser.Instruction {
	return new(InitializeToken3)
}

func (obj *InitializeToken3) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 2 {
		return nil
	}
	return obj.PublicKeySlice[2:]
}

// Builds a "initialize_token3" instruction.
func NewInitializeToken3Instruction(
	// Params:
	ownerParam solanago.PublicKey,

	// Accounts:
	account solanago.PublicKey,
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 2, 2+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeToken3[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `ownerParam`:
		if err = enc__.Encode(ownerParam); err != nil {
			return nil, fmt.Errorf("error while marshaling ownerParam:%w", err)
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] account
		metas_[0] = solanago.NewAccountMeta(account, true, false)
		// [1] = [] mint
		metas_[1] = solanago.NewAccountMeta(mint, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeToken3" instruction.
func BuildInitializeToken3(
	// Params:
	ownerParam solanago.PublicKey,

	// Accounts:
	account solanago.PublicKey,
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeToken3Instruction(
		ownerParam,
		account,
		mint,
		remaining__...,
	)
	return instruction_
}
