// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_program

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "initialize_mint2" instruction.
type InitializeMint2 struct {
	// Params:
	Decimals        uint8
	MintAuthority   solanago.PublicKey
	FreezeAuthority *solanago.PublicKey `bin:"optional"`
	// Accounts:
	// [0] = [writable] mint
	Mint solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj InitializeMint2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `decimalsParam`:
	if err = encoder.Encode(obj.Decimals); err != nil {
		return fmt.Errorf("error while marshaling decimalsParam:%w", err)
	}
	// Serialize `mintAuthorityParam`:
	if err = encoder.Encode(obj.MintAuthority); err != nil {
		return fmt.Errorf("error while marshaling mintAuthorityParam:%w", err)
	}
	// Serialize `freezeAuthorityParam` (optional):
	{
		if obj.FreezeAuthority == nil {
			if err = encoder.WriteOption(false); err != nil {
				return fmt.Errorf("error while marshaling freezeAuthorityParam optionality: %w", err)
			}
		} else {
			if err = encoder.WriteOption(true); err != nil {
				return fmt.Errorf("error while marshaling freezeAuthorityParam optionality: %w", err)
			}
			if err = encoder.Encode(obj.FreezeAuthority); err != nil {
				return fmt.Errorf("error while marshaling freezeAuthorityParam: %w", err)
			}
		}
	}
	return nil
}

func (obj *InitializeMint2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	if err = decoder.Decode(&obj.Decimals); err != nil {
		return fmt.Errorf("error while unmarshaling Decimals:%w", err)
	}
	// Deserialize `MintAuthority`:
	if err = decoder.Decode(&obj.MintAuthority); err != nil {
		return fmt.Errorf("error while unmarshaling MintAuthority:%w", err)
	}
	// Deserialize `FreezeAuthority` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return fmt.Errorf("error while unmarshaling FreezeAuthority:%w", err)
		}
		if ok {
			if err = decoder.Decode(&obj.FreezeAuthority); err != nil {
				return fmt.Errorf("error while unmarshaling FreezeAuthority:%w", err)
			}
		}
	}
	return nil
}

func (obj *InitializeMint2) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 1 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 1, len(accounts))
	}
	obj.Mint = accounts[0]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *InitializeMint2) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*InitializeMint2) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_InitializeMint2)
}

func (*InitializeMint2) NewInstance() programparser.Instruction {
	return new(InitializeMint2)
}

func (obj *InitializeMint2) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 1 {
		return nil
	}
	return obj.PublicKeySlice[1:]
}

// Builds a "initialize_mint2" instruction.
func NewInitializeMint2Instruction(
	// Params:
	decimalsParam uint8,
	mintAuthorityParam solanago.PublicKey,
	freezeAuthorityParam *solanago.PublicKey,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 1, 1+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_InitializeMint2[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	{
		// Serialize `decimalsParam`:
		if err = enc__.Encode(decimalsParam); err != nil {
			return nil, fmt.Errorf("error while marshaling decimalsParam:%w", err)
		}
		// Serialize `mintAuthorityParam`:
		if err = enc__.Encode(mintAuthorityParam); err != nil {
			return nil, fmt.Errorf("error while marshaling mintAuthorityParam:%w", err)
		}
		// Serialize `freezeAuthorityParam` (optional):
		{
			if freezeAuthorityParam == nil {
				if err = enc__.WriteOption(false); err != nil {
					return nil, fmt.Errorf("error while marshaling freezeAuthorityParam optionality: %w", err)
				}
			} else {
				if err = enc__.WriteOption(true); err != nil {
					return nil, fmt.Errorf("error while marshaling freezeAuthorityParam optionality: %w", err)
				}
				if err = enc__.Encode(freezeAuthorityParam); err != nil {
					return nil, fmt.Errorf("error while marshaling freezeAuthorityParam: %w", err)
				}
			}
		}
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable] mint
		metas_[0] = solanago.NewAccountMeta(mint, true, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildInitializeMint2" instruction.
func BuildInitializeMint2(
	// Params:
	decimalsParam uint8,
	mintAuthorityParam solanago.PublicKey,
	freezeAuthorityParam *solanago.PublicKey,

	// Accounts:
	mint solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewInitializeMint2Instruction(
		decimalsParam,
		mintAuthorityParam,
		freezeAuthorityParam,
		mint,
		remaining__...,
	)
	return instruction_
}
