// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package associated_token

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "recover_nested" instruction.

// Transfers tokens from a nested associated token account to an associated token account
// with the owner of the nested associated token account as the wallet address.
//
// Accounts expected by this instruction:
//
//  0. `[writeable, signer]` Funding account (must be a system account)
//  1. `[writeable]` Nested associated token account, must have `wallet` as owner.
//  2. `[]` Token mint for the nested associated token account
//  3. `[]` Wallet address for the owner of the nested associated token account, which will
//     receive the tokens in an associated token account with `wallet` as the wallet address.
//  4. `[writeable]` Associated token account for the wallet and mint, may need to be created
//  5. `[]` System program
//  6. `[]` SPL Token program
type RecoverNested struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [writable] nested_associated_token_account
	NestedAssociatedTokenAccount solanago.PublicKey `bin:"-"`
	// [2] = [] nested_mint
	NestedMint solanago.PublicKey `bin:"-"`
	// [3] = [writable] owner_associated_token_account
	OwnerAssociatedTokenAccount solanago.PublicKey `bin:"-"`
	// [4] = [] owner
	Owner solanago.PublicKey `bin:"-"`
	// [5] = [] owner_mint
	OwnerMint solanago.PublicKey `bin:"-"`
	// [6] = [] wallet
	Wallet solanago.PublicKey `bin:"-"`
	// [7] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [8] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj RecoverNested) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *RecoverNested) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *RecoverNested) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 9 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 9, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.NestedAssociatedTokenAccount = accounts[1]
	obj.NestedMint = accounts[2]
	obj.OwnerAssociatedTokenAccount = accounts[3]
	obj.Owner = accounts[4]
	obj.OwnerMint = accounts[5]
	obj.Wallet = accounts[6]
	obj.SystemProgram = accounts[7]
	obj.TokenProgram = accounts[8]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *RecoverNested) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*RecoverNested) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_RecoverNested)
}

func (*RecoverNested) NewInstance() programparser.Instruction {
	return new(RecoverNested)
}

func (obj *RecoverNested) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 9 {
		return nil
	}
	return obj.PublicKeySlice[9:]
}

// Builds a "recover_nested" instruction.
// Transfers tokens from a nested associated token account to an associated token account // with the owner of the nested associated token account as the wallet address. //  // Accounts expected by this instruction: //  // 0. `[writeable, signer]` Funding account (must be a system account) // 1. `[writeable]` Nested associated token account, must have `wallet` as owner. // 2. `[]` Token mint for the nested associated token account // 3. `[]` Wallet address for the owner of the nested associated token account, which will //    receive the tokens in an associated token account with `wallet` as the wallet address. // 4. `[writeable]` Associated token account for the wallet and mint, may need to be created // 5. `[]` System program // 6. `[]` SPL Token program
func NewRecoverNestedInstruction(
	payer solanago.PublicKey,
	nestedAssociatedTokenAccount solanago.PublicKey,
	nestedMint solanago.PublicKey,
	ownerAssociatedTokenAccount solanago.PublicKey,
	owner solanago.PublicKey,
	ownerMint solanago.PublicKey,
	wallet solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 9, 9+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_RecoverNested[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] payer
		metas_[0] = solanago.NewAccountMeta(payer, true, true)
		// [1] = [writable] nested_associated_token_account
		metas_[1] = solanago.NewAccountMeta(nestedAssociatedTokenAccount, true, false)
		// [2] = [] nested_mint
		metas_[2] = solanago.NewAccountMeta(nestedMint, false, false)
		// [3] = [writable] owner_associated_token_account
		metas_[3] = solanago.NewAccountMeta(ownerAssociatedTokenAccount, true, false)
		// [4] = [] owner
		metas_[4] = solanago.NewAccountMeta(owner, false, false)
		// [5] = [] owner_mint
		metas_[5] = solanago.NewAccountMeta(ownerMint, false, false)
		// [6] = [] wallet
		metas_[6] = solanago.NewAccountMeta(wallet, false, false)
		// [7] = [] system_program
		metas_[7] = solanago.NewAccountMeta(systemProgram, false, false)
		// [8] = [] token_program
		metas_[8] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildRecoverNested" instruction.
// Transfers tokens from a nested associated token account to an associated token account // with the owner of the nested associated token account as the wallet address. //  // Accounts expected by this instruction: //  // 0. `[writeable, signer]` Funding account (must be a system account) // 1. `[writeable]` Nested associated token account, must have `wallet` as owner. // 2. `[]` Token mint for the nested associated token account // 3. `[]` Wallet address for the owner of the nested associated token account, which will //    receive the tokens in an associated token account with `wallet` as the wallet address. // 4. `[writeable]` Associated token account for the wallet and mint, may need to be created // 5. `[]` System program // 6. `[]` SPL Token program
func BuildRecoverNested(
	payer solanago.PublicKey,
	nestedAssociatedTokenAccount solanago.PublicKey,
	nestedMint solanago.PublicKey,
	ownerAssociatedTokenAccount solanago.PublicKey,
	owner solanago.PublicKey,
	ownerMint solanago.PublicKey,
	wallet solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewRecoverNestedInstruction(
		payer,
		nestedAssociatedTokenAccount,
		nestedMint,
		ownerAssociatedTokenAccount,
		owner,
		ownerMint,
		wallet,
		systemProgram,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
