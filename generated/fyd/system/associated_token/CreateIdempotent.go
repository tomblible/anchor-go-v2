// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package associated_token

import (
	"bytes"
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	programparser "github.com/yydsqu/solana-sdk/program_parser"
)

// Builds a "create_idempotent" instruction.

// Creates an associated token account for the given wallet address and token mint,
// if it doesn't already exist.  This is useful for programs that need to use
// associated token accounts but cannot assume that the account exists.
//
// Accounts expected by this instruction:
//
// 0. `[writeable, signer]` Funding account (must be a system account)
// 1. `[writeable]` Associated token account address to be created
// 2. `[]` Wallet address for the new associated token account
// 3. `[]` The token mint for the new associated token account
// 4. `[]` System program
// 5. `[]` SPL Token program
type CreateIdempotent struct {
	// Params:
	// Accounts:
	// [0] = [writable,signer] payer
	Payer solanago.PublicKey `bin:"-"`
	// [1] = [writable] associated_token
	AssociatedToken solanago.PublicKey `bin:"-"`
	// [2] = [] authority
	Authority solanago.PublicKey `bin:"-"`
	// [3] = [] mint
	Mint solanago.PublicKey `bin:"-"`
	// [4] = [] system_program
	SystemProgram solanago.PublicKey `bin:"-"`
	// [5] = [] token_program
	TokenProgram solanago.PublicKey `bin:"-"`
	// PublicKeySlice
	solanago.PublicKeySlice `bin:"-"`
}

func (obj CreateIdempotent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *CreateIdempotent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *CreateIdempotent) SetAccounts(accounts solanago.PublicKeySlice) (err error) {
	if len(accounts) < 6 {
		return fmt.Errorf("too few accounts, expect %d actual %d", 6, len(accounts))
	}
	obj.Payer = accounts[0]
	obj.AssociatedToken = accounts[1]
	obj.Authority = accounts[2]
	obj.Mint = accounts[3]
	obj.SystemProgram = accounts[4]
	obj.TokenProgram = accounts[5]
	obj.PublicKeySlice = accounts
	return nil
}
func (obj *CreateIdempotent) PublicKeys() solanago.PublicKeySlice {
	return obj.PublicKeySlice
}

func (*CreateIdempotent) TypeID() binary.TypeID {
	return binary.TypeIDFromBytes(Instruction_CreateIdempotent)
}

func (*CreateIdempotent) NewInstance() programparser.Instruction {
	return new(CreateIdempotent)
}

func (obj *CreateIdempotent) GetRemainingAccounts() solanago.PublicKeySlice {
	if len(obj.PublicKeySlice) <= 6 {
		return nil
	}
	return obj.PublicKeySlice[6:]
}

// Builds a "create_idempotent" instruction.
// Creates an associated token account for the given wallet address and token mint, // if it doesn't already exist.  This is useful for programs that need to use // associated token accounts but cannot assume that the account exists. //  // Accounts expected by this instruction: //  // 0. `[writeable, signer]` Funding account (must be a system account) // 1. `[writeable]` Associated token account address to be created // 2. `[]` Wallet address for the new associated token account // 3. `[]` The token mint for the new associated token account // 4. `[]` System program // 5. `[]` SPL Token program
func NewCreateIdempotentInstruction(
	payer solanago.PublicKey,
	associatedToken solanago.PublicKey,
	authority solanago.PublicKey,
	mint solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) (*solanago.GenericInstruction, error) {
	var (
		err    error
		buf__  = new(bytes.Buffer)
		enc__  = binary.NewBorshEncoder(buf__)
		metas_ = make(solanago.AccountMetaSlice, 6, 6+len(remaining__))
	)

	// Encode the instruction discriminator.
	if err = enc__.WriteBytes(Instruction_CreateIdempotent[:], false); err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}

	// Add the accounts to the instruction.
	{
		// [0] = [writable,signer] payer
		metas_[0] = solanago.NewAccountMeta(payer, true, true)
		// [1] = [writable] associated_token
		metas_[1] = solanago.NewAccountMeta(associatedToken, true, false)
		// [2] = [] authority
		metas_[2] = solanago.NewAccountMeta(authority, false, false)
		// [3] = [] mint
		metas_[3] = solanago.NewAccountMeta(mint, false, false)
		// [4] = [] system_program
		metas_[4] = solanago.NewAccountMeta(systemProgram, false, false)
		// [5] = [] token_program
		metas_[5] = solanago.NewAccountMeta(tokenProgram, false, false)
		// append remaining metas
		metas_ = append(metas_, remaining__...)
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		metas_,
		buf__.Bytes(),
	), nil
}

// Builds a "BuildCreateIdempotent" instruction.
// Creates an associated token account for the given wallet address and token mint, // if it doesn't already exist.  This is useful for programs that need to use // associated token accounts but cannot assume that the account exists. //  // Accounts expected by this instruction: //  // 0. `[writeable, signer]` Funding account (must be a system account) // 1. `[writeable]` Associated token account address to be created // 2. `[]` Wallet address for the new associated token account // 3. `[]` The token mint for the new associated token account // 4. `[]` System program // 5. `[]` SPL Token program
func BuildCreateIdempotent(
	payer solanago.PublicKey,
	associatedToken solanago.PublicKey,
	authority solanago.PublicKey,
	mint solanago.PublicKey,
	systemProgram solanago.PublicKey,
	tokenProgram solanago.PublicKey,
	remaining__ ...*solanago.AccountMeta,
) *solanago.GenericInstruction {
	instruction_, _ := NewCreateIdempotentInstruction(
		payer,
		associatedToken,
		authority,
		mint,
		systemProgram,
		tokenProgram,
		remaining__...,
	)
	return instruction_
}
