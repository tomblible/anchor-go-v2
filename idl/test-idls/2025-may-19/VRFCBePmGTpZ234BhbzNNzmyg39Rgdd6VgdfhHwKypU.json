{"address":"VRFCBePmGTpZ234BhbzNNzmyg39Rgdd6VgdfhHwKypU","metadata":{"name":"orao_vrf_cb","version":"0.3.0","spec":"0.1.0","description":"Created with Anchor"},"instructions":[{"name":"configure","discriminator":[245,7,108,117,95,196,54,217],"accounts":[{"name":"payer","docs":["This must be the current configuration authority."],"writable":true,"signer":true},{"name":"network_state","writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"ConfigureParams"}}}]},{"name":"fulfill","discriminator":[143,2,52,206,174,164,247,72],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"program"},{"name":"state","writable":true},{"name":"client","writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"program"},{"kind":"account","path":"state"}]}},{"name":"request","writable":true},{"name":"network_state","pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"instruction_acc","docs":["Instructions sysvar account.",""]}],"args":[{"name":"params","type":{"defined":{"name":"FulfillParams"}}}]},{"name":"fulfill_alt","discriminator":[252,32,164,64,170,220,68,136],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"program"},{"name":"state","writable":true},{"name":"client","writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"program"},{"kind":"account","path":"state"}]}},{"name":"request","writable":true},{"name":"network_state","pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"instruction_acc","docs":["Instructions sysvar account.",""]}],"args":[{"name":"params","type":{"defined":{"name":"FulfillAltParams"}}}]},{"name":"initialize","discriminator":[175,175,109,31,13,152,155,237],"accounts":[{"name":"payer","docs":["This account will be the configuration authority and the treasury address."],"writable":true,"signer":true},{"name":"network_state","writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"InitializeParams"}}}]},{"name":"register","discriminator":[211,124,67,15,211,194,178,240],"accounts":[{"name":"payer","docs":["This must be the upgrade authority of the client program being registered."],"writable":true,"signer":true},{"name":"program","docs":["The client program being registered.","","program but the one owned by the payer."]},{"name":"program_data","docs":["The program data account of the program being registered."]},{"name":"state","docs":["Opaque program's side client state (a PDA). This is the request authority.",""]},{"name":"client","docs":["Client PDA being created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"program"},{"kind":"account","path":"state"}]}},{"name":"network_state","docs":["A PDA holding the oracle state and configuration."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"RegisterParams"}}}]},{"name":"request","discriminator":[46,101,67,11,76,137,12,173],"accounts":[{"name":"payer","docs":["Whoever sent the transaction to the network.","","This account will only pay tx fess and will not pay rent nor request fee."],"writable":true,"signer":true},{"name":"state","docs":["Client request authority PDA (see [`Client::state`]).","","This account signs the CPI call."],"signer":true},{"name":"client","docs":["A client PDA.","","It will pay request rent and fee."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"client.program","account":"Client"},{"kind":"account","path":"state"}]}},{"name":"network_state","docs":["A PDA holding the oracle state and configuration."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"treasury","docs":["A treasury address matching the current `network_state`.",""],"writable":true},{"name":"request","docs":["Request PDA being created.",""],"writable":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"RequestParams"}}}]},{"name":"request_alt","discriminator":[193,213,137,32,88,106,157,1],"accounts":[{"name":"payer","docs":["Whoever sent the transaction to the network.","","This account will only pay tx fees and will not pay rent nor request fee."],"writable":true,"signer":true},{"name":"state","docs":["Client request authority PDA (see [`Client::state`]).","","This account signs the CPI call."],"signer":true},{"name":"client","docs":["A client PDA.","","It will pay request rent and fee."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"client.program","account":"Client"},{"kind":"account","path":"state"}]}},{"name":"network_state","docs":["A PDA holding the oracle state and configuration."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,111,110,102,105,103]}]}},{"name":"treasury","docs":["A treasury address matching the current `network_state`.",""],"writable":true},{"name":"request","docs":["Request PDA being created.",""],"writable":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"RequestAltParams"}}}]},{"name":"set_callback","discriminator":[173,40,156,83,183,154,99,60],"accounts":[{"name":"payer","docs":["This must be the client owner."],"writable":true,"signer":true},{"name":"client","docs":["A client PDA."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"client.program","account":"Client"},{"kind":"account","path":"client.state","account":"Client"}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"SetCallbackParams"}}}]},{"name":"transfer","discriminator":[163,52,200,231,140,3,69,186],"accounts":[{"name":"payer","docs":["This must be the client owner."],"writable":true,"signer":true},{"name":"client","docs":["A client PDA."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"client.program","account":"Client"},{"kind":"account","path":"client.state","account":"Client"}]}}],"args":[{"name":"params","type":{"defined":{"name":"TransferParams"}}}]},{"name":"withdraw","discriminator":[183,18,70,156,148,109,161,34],"accounts":[{"name":"payer","docs":["This must be the client owner.","","The withdrawn amount will go to the payer."],"writable":true,"signer":true},{"name":"client","docs":["A client PDA to withdraw from."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[79,114,97,111,86,114,102,67,98,67,108,105,101,110,116]},{"kind":"account","path":"client.program","account":"Client"},{"kind":"account","path":"client.state","account":"Client"}]}}],"args":[{"name":"params","type":{"defined":{"name":"WithdrawParams"}}}]}],"accounts":[{"name":"Client","discriminator":[221,237,145,143,170,194,133,115]},{"name":"NetworkState","discriminator":[212,237,148,56,97,245,51,169]},{"name":"RequestAccount","discriminator":[108,23,6,158,184,6,152,121]},{"name":"RequestAltAccount","discriminator":[22,215,127,203,71,221,36,48]}],"events":[{"name":"CallbackUpdated","discriminator":[73,115,171,177,42,193,178,202]},{"name":"CalledBack","discriminator":[80,119,132,128,66,146,64,21]},{"name":"Registered","discriminator":[11,222,10,72,160,110,165,227]},{"name":"Requested","discriminator":[193,152,94,182,138,135,173,205]},{"name":"RequestedAlt","discriminator":[35,45,235,194,198,184,209,54]},{"name":"Responded","discriminator":[126,30,4,36,65,90,60,218]},{"name":"Transferred","discriminator":[21,132,239,64,146,239,166,68]},{"name":"Withdrawn","discriminator":[20,89,223,198,194,124,219,13]},{"name":"orao_vrf_cb::events::fulfilled::Fulfilled","discriminator":[210,174,131,213,40,182,83,110]}],"errors":[{"code":6000,"name":"NotAuthorized","msg":"Not authorized"},{"code":6001,"name":"UnexpectedClientProgram","msg":"Unexpected client program"},{"code":6002,"name":"UnexpectedClientProgramData","msg":"Unexpected client program data"},{"code":6003,"name":"UnexpectedClientState","msg":"Unexpected client state"},{"code":6004,"name":"TooManyAccounts","msg":"Too many accounts given"},{"code":6005,"name":"WrongOwner","msg":"Unable to validate account ownership"},{"code":6006,"name":"WrongTreasury","msg":"Wrong treasury given"},{"code":6007,"name":"MalformedFulfillMessage","msg":"Malformed fulfill message"},{"code":6008,"name":"InvalidFulfillMessage","msg":"Signature does not match the seed"},{"code":6009,"name":"Fulfilled","msg":"Fulfilled"},{"code":6010,"name":"MalformedFulfill","msg":"Malformed Fulfill instruction"},{"code":6011,"name":"CallbackAccountsHashMismatch","msg":"Callback accounts hash mismatch"},{"code":6012,"name":"LookupIndexOutOfBounds","msg":"Lookup index out of bounds"},{"code":6013,"name":"MissingLookupTables","msg":"Missing lookup tables"}],"types":[{"name":"Callback","docs":["A client callback.","","There are function added for convenience:","","-   [`Callback::from_instruction_data`]","-   [`Callback::with_remaining_account`]","-   [`Callback::with_remaining_accounts`]"],"type":{"kind":"struct","fields":[{"name":"remaining_accounts","docs":["Additional accounts to add to the callback CPI call.","","-   the first one will always be the [`Client`] PDA (signer)","-   the second one will always be the client state PDA of the client program (writable)","-   the third one will always be the [`super::network_state::NetworkState`] PDA","-   the fourth one will always be the corresponding [`super::request::RequestAccount`] PDA","-   subsequent accounts will be remaining accounts given here."],"type":{"vec":{"defined":{"name":"RemainingAccount"}}}},{"name":"data","docs":["Borsh-serialized instruction data."],"type":"bytes"}]}},{"name":"CallbackAlt","docs":["A client callback with [Address Lookup Tables][lookup-tables] support.","","This callback type could be handy if callback accounts does not fit into","the Solana transaction.","","There are functions added for convenience:","","-   [`CallbackAlt::from_instruction_data`]","-   [`CallbackAlt::compile_accounts`]","","[lookup-tables]: https://solana.com/ru/developers/guides/advanced/lookup-tables"],"type":{"kind":"struct","fields":[{"name":"accounts_hash","docs":["This hash is used to validate lookup accounts.","","Asserts the order and values of public keys in the [`CallbackAlt::remaining_accounts`]."],"type":{"array":["u8",32]}},{"name":"remaining_accounts","docs":["Additional accounts to add to the callback CPI call.","","-   the first one will always be the [`Client`] PDA (signer)","-   the second one will always be the client state PDA of the client program (writable)","-   the third one will always be the [`super::network_state::NetworkState`] PDA","-   the fourth one will always be the corresponding [`super::request::RequestAccount`] PDA","-   subsequent accounts will be remaining accounts given here —","note that writable remaining accounts must be authorized (see [`RemainingAccount::seeds`])."],"type":{"vec":{"defined":{"name":"RemainingAccountAlt"}}}},{"name":"data","docs":["Borsh-serialized instruction data."],"type":"bytes"}]}},{"name":"CallbackUpdated","docs":["Event that signals that a callback was updated."],"type":{"kind":"struct","fields":[{"name":"owner","type":"pubkey"},{"name":"client","type":"pubkey"},{"name":"defined","docs":["`true` if new callback is `Some(_)`."],"type":"bool"}]}},{"name":"CalledBack","docs":["Event that signals that a callback was called."],"type":{"kind":"struct","fields":[{"name":"program","type":"pubkey"}]}},{"name":"Client","docs":["This PDA represents a state of a registered client."],"type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"owner","docs":["The owner is able to manage the client:","","-   withdraw client funds","-   transfer ownership"],"type":"pubkey"},{"name":"program","docs":["An address of a registered program."],"type":"pubkey"},{"name":"state","docs":["An arbitrary PDA that belongs to the client program.","","This is the request authority."],"type":"pubkey"},{"name":"num_requests","docs":["Number of requests made by the client."],"type":"u64"},{"name":"callback","docs":["An optional client-level callback.","","**Note:** this callback does not apply to [`RequestAlt`].","","If it is `None`, then no callback will be called upon request fulfill, but you can","override this using the request-level callback (see [`RequestParams::callback`]).","","You can update this value using the [`SetCallback`] instruction.","","[`RequestParams::callback`]: crate::RequestParams::callback","[`SetCallback`]: crate::SetCallback","[`RequestAlt`]: crate::RequestAlt"],"type":{"option":{"defined":{"name":"ValidatedCallback"}}}}]}},{"name":"ConfigureParams","docs":["[`Configure`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"new_config","docs":["New configuration."],"type":{"defined":{"name":"NetworkConfiguration"}}}]}},{"name":"FulfillAltParams","type":{"kind":"struct","fields":[]}},{"name":"FulfillParams","type":{"kind":"struct","fields":[]}},{"name":"InitializeParams","type":{"kind":"struct","fields":[{"name":"request_fee","docs":["Per-request fee in lamports."],"type":"u64"}]}},{"name":"LookupAccount","docs":["Points to an account in a lookup table."],"type":{"kind":"struct","fields":[{"name":"table_index","docs":["An index of a particular lookup table in the list of lookup tables given","to the [`crate::RequestAlt`] instruction."],"type":"u8"},{"name":"address_index","docs":["An index of a particular address in the specified lookup table."],"type":"u8"},{"name":"seeds","docs":["This seeds are used to set account as writable.","","-   `None` here means a read-only account","-   empty vector here means arbitrary writable account — this requires","the account to be given as writable to the corresponding \"request\"","or \"register\" instruction.","-   empty/non-empty vector here means client program PDA — account","becomes writable if derived address matches"],"type":{"option":{"vec":"bytes"}}}]}},{"name":"NetworkConfiguration","docs":["Oracle configuration"],"type":{"kind":"struct","fields":[{"name":"authority","docs":["An authority."],"type":"pubkey"},{"name":"treasury","docs":["Treasury account address."],"type":"pubkey"},{"name":"request_fee","docs":["Per-request fee paid by a client."],"type":"u64"},{"name":"callback_deadline","docs":["Callback deadline measured in slots (1 slot is approximately 400ms).","","If callback keeps failing util this deadline reached, then the request","will be fulfilled without calling the callback.","","Note that well-written callback should never fail, so this should never","apply to your client."],"type":"u64"},{"name":"fulfill_authorities","docs":["This parties are authorized to fulfill requests."],"type":{"vec":"pubkey"}}]}},{"name":"NetworkState","docs":["This PDA holds oracle state and configuration."],"type":{"kind":"struct","fields":[{"name":"bump","docs":["Account bump."],"type":"u8"},{"name":"config","docs":["Active configuration."],"type":{"defined":{"name":"NetworkConfiguration"}}},{"name":"num_requests","docs":["Total number of received requests."],"type":"u64"},{"name":"num_registered","docs":["Total number of registered clients."],"type":"u64"},{"name":"num_terminated","docs":["Total number of terminated clients."],"type":"u64"}]}},{"name":"Pending","docs":["Pending randomness request."],"type":{"kind":"struct","fields":[{"name":"responses","docs":["Responses collected so far."],"type":{"vec":{"defined":{"name":"Response"}}}},{"name":"callback","docs":["Callback (if any)."],"type":{"option":{"defined":{"name":"ValidatedCallback"}}}},{"name":"callback_override","docs":["If `true` then [`Pending::callback`] is a request-level callback."],"type":"bool"}]}},{"name":"PendingAlt","docs":["Pending randomness request."],"type":{"kind":"struct","fields":[{"name":"responses","docs":["Responses collected so far."],"type":{"vec":{"defined":{"name":"Response"}}}},{"name":"callback","docs":["Callback (if any)."],"type":{"option":{"defined":{"name":"ValidatedCallbackAlt"}}}},{"name":"lookup_tables","docs":["Lookup Tables given to the callback."],"type":{"vec":"pubkey"}}]}},{"name":"RegisterParams","docs":["[`Register`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"state_seeds","docs":["Seeds used to generate the [`Register::state`] PDA.","","Note that the last seed must be the PDA bump (see [`Pubkey::create_program_address`])."],"type":{"vec":"bytes"}},{"name":"callback","docs":["An optional client-level callback (see [`Client::callback`])."],"type":{"option":{"defined":{"name":"Callback"}}}}]}},{"name":"Registered","docs":["Event that signals that new client was registered."],"type":{"kind":"struct","fields":[{"name":"owner","type":"pubkey"},{"name":"program","type":"pubkey"},{"name":"state","type":"pubkey"},{"name":"client","type":"pubkey"}]}},{"name":"RemainingAccount","docs":["A callback account definition."],"type":{"kind":"struct","fields":[{"name":"pubkey","docs":["Account address."],"type":"pubkey"},{"name":"seeds","docs":["This seeds are used to set account as writable.","","-   `None` here means a read-only account","-   empty vector here means arbitrary writable account — this requires","the account to be given as writable to the corresponding \"request\"","or \"register\" instruction.","-   empty/non-empty vector here means client program PDA — account","becomes writable if derived address matches"],"type":{"option":{"vec":"bytes"}}}]}},{"name":"RemainingAccountAlt","docs":["A callback account definition with Address Lookup Tables support."],"type":{"kind":"enum","variants":[{"name":"Plain","fields":[{"defined":{"name":"RemainingAccount"}}]},{"name":"Lookup","fields":[{"defined":{"name":"LookupAccount"}}]}]}},{"name":"RequestAccount","docs":["The account holding a randomness request state."],"type":{"kind":"struct","fields":[{"name":"bump","docs":["PDA bump."],"type":"u8"},{"name":"slot","docs":["The slot this request was created at."],"type":"u64"},{"name":"client","docs":["The client created the request."],"type":"pubkey"},{"name":"seed","docs":["Request seed."],"type":{"array":["u8",32]}},{"name":"state","docs":["The state of this randomness request."],"type":{"defined":{"name":"RequestState"}}}]}},{"name":"RequestAltAccount","docs":["The account holding a randomness request state."],"type":{"kind":"struct","fields":[{"name":"bump","docs":["PDA bump."],"type":"u8"},{"name":"slot","docs":["The slot this request was created at."],"type":"u64"},{"name":"client","docs":["The client created the request."],"type":"pubkey"},{"name":"seed","docs":["Request seed."],"type":{"array":["u8",32]}},{"name":"state","docs":["The state of this randomness request."],"type":{"defined":{"name":"RequestAltState"}}}]}},{"name":"RequestAltParams","docs":["[`RequestAlt`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"seed","docs":["A random seed necessary to verify the generated randomness."],"type":{"array":["u8",32]}},{"name":"callback","docs":["An optional request-level callback.","","Note that client-level callback won't get applied to this request."],"type":{"option":{"defined":{"name":"CallbackAlt"}}}},{"name":"num_lookup_tables","docs":["Number of lookup tables expected in the list of remaining accounts","of the [`RequestAlt`] instruction (see the \"Account Order Convention\"","section in the main crate docs)."],"type":"u8"}]}},{"name":"RequestAltState","docs":["Randomness request state."],"type":{"kind":"enum","variants":[{"name":"Pending","fields":[{"defined":{"name":"PendingAlt"}}]},{"name":"Fulfilled","fields":[{"defined":{"name":"orao_vrf_cb::state::request::Fulfilled"}}]}]}},{"name":"RequestParams","docs":["[`Request`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"seed","docs":["A random seed necessary to verify the generated randomness."],"type":{"array":["u8",32]}},{"name":"callback","docs":["An optional request-level callback.","","This overrides the client-level callback (see [`Client::callback`])."],"type":{"option":{"defined":{"name":"Callback"}}}}]}},{"name":"RequestState","docs":["Randomness request state."],"type":{"kind":"enum","variants":[{"name":"Pending","fields":[{"defined":{"name":"Pending"}}]},{"name":"Fulfilled","fields":[{"defined":{"name":"orao_vrf_cb::state::request::Fulfilled"}}]}]}},{"name":"Requested","docs":["Event that signals a new request."],"type":{"kind":"struct","fields":[{"name":"client","type":"pubkey"},{"name":"seed","type":{"array":["u8",32]}},{"name":"callback","docs":["The callback that would be called."],"type":{"option":{"defined":{"name":"ValidatedCallback"}}}},{"name":"callback_override","docs":["True if [`Requested::callback`] is a request-level callback."],"type":"bool"}]}},{"name":"RequestedAlt","docs":["Event that signals a new request."],"type":{"kind":"struct","fields":[{"name":"client","type":"pubkey"},{"name":"seed","type":{"array":["u8",32]}},{"name":"callback","docs":["The callback that would be called."],"type":{"option":{"defined":{"name":"ValidatedCallbackAlt"}}}},{"name":"lookup_tables","docs":["Lookup Tables given to the callback."],"type":{"vec":"pubkey"}}]}},{"name":"Responded","docs":["Event that signals a new response."],"type":{"kind":"struct","fields":[{"name":"authority","type":"pubkey"},{"name":"client","type":"pubkey"},{"name":"seed","type":{"array":["u8",32]}},{"name":"randomness","type":{"array":["u8",64]}}]}},{"name":"Response","type":{"kind":"struct","fields":[{"name":"pubkey","type":"pubkey"},{"name":"randomness","type":{"array":["u8",64]}}]}},{"name":"SetCallbackParams","docs":["[`SetCallback`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"new_callback","docs":["New value for the client callback (see [`Client::callback`])."],"type":{"option":{"defined":{"name":"Callback"}}}}]}},{"name":"TransferParams","docs":["[`Transfer`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"new_owner","docs":["An address of a new client owner.","","Fill with caution."],"type":"pubkey"}]}},{"name":"Transferred","docs":["Event that signals that a client ownership was transferred."],"type":{"kind":"struct","fields":[{"name":"owner","type":"pubkey"},{"name":"client","type":"pubkey"},{"name":"new_owner","type":"pubkey"}]}},{"name":"ValidatedCallback","docs":["See [`Callback`]."],"type":{"kind":"struct","fields":[{"name":"remaining_accounts","docs":["See [`Callback::remaining_accounts`]."],"type":{"vec":{"defined":{"name":"ValidatedRemainingAccount"}}}},{"name":"data","docs":["See [`Callback::data`]."],"type":"bytes"}]}},{"name":"ValidatedCallbackAlt","docs":["See [`CallbackAlt`]."],"type":{"kind":"struct","fields":[{"name":"accounts_hash","docs":["This hash is used to validate the lookup accounts."],"type":{"array":["u8",32]}},{"name":"remaining_accounts","docs":["See [`CallbackAlt::remaining_accounts`]."],"type":{"vec":{"defined":{"name":"ValidatedRemainingAccountAlt"}}}},{"name":"data","docs":["See [`CallbackAlt::data`]."],"type":"bytes"}]}},{"name":"ValidatedLookupAccount","docs":["Validated [`LookupAccount`]"],"type":{"kind":"struct","fields":[{"name":"table_index","type":"u8"},{"name":"address_index","type":"u8"},{"name":"is_writable","type":"bool"}]}},{"name":"ValidatedRemainingAccount","docs":["Validated [`RemainingAccount`]."],"type":{"kind":"struct","fields":[{"name":"pubkey","type":"pubkey"},{"name":"is_writable","type":"bool"}]}},{"name":"ValidatedRemainingAccountAlt","docs":["Validated [`RemainingAccountAlt`]"],"type":{"kind":"enum","variants":[{"name":"Plain","fields":[{"defined":{"name":"ValidatedRemainingAccount"}}]},{"name":"Lookup","fields":[{"defined":{"name":"ValidatedLookupAccount"}}]}]}},{"name":"WithdrawParams","docs":["[`Withdraw`] instruction parameters."],"type":{"kind":"struct","fields":[{"name":"amount","docs":["An amount to withdraw (in lamports).","","Note that you can't withdraw past the client PDA rent."],"type":"u64"}]}},{"name":"Withdrawn","docs":["Event that signals that client funds was withdrawn."],"type":{"kind":"struct","fields":[{"name":"owner","type":"pubkey"},{"name":"client","type":"pubkey"},{"name":"amount","type":"u64"}]}},{"name":"orao_vrf_cb::events::fulfilled::Fulfilled","docs":["Event that signals a request was fulfilled."],"type":{"kind":"struct","fields":[{"name":"client","type":"pubkey"},{"name":"seed","type":{"array":["u8",32]}},{"name":"randomness","type":{"array":["u8",64]}}]}},{"name":"orao_vrf_cb::state::request::Fulfilled","docs":["Fulfilled request representation."],"type":{"kind":"struct","fields":[{"name":"randomness","docs":["Generated randomness.","","It is validated within the fulfill instruction. Please look into the account history logs","and VRF events to observe the individual components."],"type":{"array":["u8",64]}},{"name":"responses","docs":["Individual responses constituting the randomness.","","This going to be `Some` within the callback invocation, and `None` afterwards."],"type":{"option":{"vec":{"defined":{"name":"Response"}}}}}]}}],"constants":[{"name":"CB_CLIENT_ACCOUNT_SEED","docs":["Base [`crate::state::client::Client`] PDA seed."],"type":"bytes","value":"[79, 114, 97, 111, 86, 114, 102, 67, 98, 67, 108, 105, 101, 110, 116]"},{"name":"CB_CONFIG_ACCOUNT_SEED","docs":["Base [`crate::state::network_state::NetworkState`] PDA seed."],"type":"bytes","value":"[79, 114, 97, 111, 86, 114, 102, 67, 98, 67, 111, 110, 102, 105, 103]"},{"name":"CB_REQUEST_ACCOUNT_SEED","docs":["Base [`crate::state::request::RequestAccount`] PDA seed."],"type":"bytes","value":"[79, 114, 97, 111, 86, 114, 102, 67, 98, 82, 101, 113, 117, 101, 115, 116]"},{"name":"CB_REQUEST_ALT_ACCOUNT_SEED","docs":["Base [`crate::state::request_alt::RequestAltAccount`] PDA seed."],"type":"bytes","value":"[79, 114, 97, 111, 86, 114, 102, 67, 98, 82, 101, 113, 117, 101, 115, 116, 65, 108, 116]"},{"name":"MAX_FULFILLMENT_AUTHORITIES","docs":["Maximum number of fulfill authorities supported by the program."],"type":"u64","value":"10"}]}