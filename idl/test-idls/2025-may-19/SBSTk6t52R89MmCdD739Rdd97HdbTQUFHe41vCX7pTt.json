{"address":"SBSTk6t52R89MmCdD739Rdd97HdbTQUFHe41vCX7pTt","metadata":{"name":"staking","version":"0.1.0","spec":"0.1.0","description":"Created with Anchor"},"instructions":[{"name":"add_pool_to_group","discriminator":[208,10,84,108,161,175,127,238],"accounts":[{"name":"authority","docs":["Authority of the delegation group"],"signer":true,"relations":["delegation_group"]},{"name":"delegation_group"},{"name":"delegation_pool","writable":true}],"args":[]},{"name":"add_reward_pool","discriminator":[28,53,119,0,114,211,196,239],"accounts":[{"name":"payer","docs":["Pays init fee, generally same as authority"],"writable":true,"signer":true},{"name":"authority","docs":["Authority of the corresponding `delegation_pool`"],"signer":true,"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Delegation pool to add the RewardPool into"],"writable":true},{"name":"reward_mint"},{"name":"reward_vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[82,101,119,97,114,100,80,111,111,108]},{"kind":"account","path":"delegation_pool"},{"kind":"account","path":"reward_mint"}]}},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"advance_epoch","discriminator":[93,138,234,218,241,230,132,38],"accounts":[{"name":"delegation_pool","writable":true},{"name":"queue_escrow","writable":true},{"name":"queue"},{"name":"delegation_group","writable":true,"pda":{"seeds":[{"kind":"const","value":[71,114,111,117,112]},{"kind":"account","path":"delegation_group"},{"kind":"account","path":"delegation_group"},{"kind":"account","path":"queue"}]},"relations":["delegation_pool"]},{"name":"oracle_data","docs":["This oracle's `OracleAccountData` from the `sb_on_demand` program.",""],"relations":["delegation_pool"]}],"args":[]},{"name":"claim_rewards","discriminator":[4,144,132,71,116,23,151,80],"accounts":[{"name":"claim_base","accounts":[{"name":"owner","docs":["Owns the corresponding `staker`"],"writable":true,"signer":true},{"name":"stake_pool","docs":["Stake pool that the delegation pool is paired with."],"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Note: Owns the reward vaults and signs the transfer tx"],"writable":true},{"name":"staker","docs":["The owner's staking account"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,114]},{"kind":"account","path":"owner"},{"kind":"account","path":"stake_pool"}]}},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}]}],"args":[]},{"name":"create_delegation_group","discriminator":[140,39,92,61,60,127,154,150],"accounts":[{"name":"payer","docs":["Payer of rent"],"writable":true,"signer":true},{"name":"authority","docs":["The StakePool authority must sign to create a DelegationPool"],"signer":true,"relations":["stake_pool"]},{"name":"group_authority","docs":["Adminstrator of the delegation pool"]},{"name":"delegation_group","writable":true,"pda":{"seeds":[{"kind":"const","value":[71,114,111,117,112]},{"kind":"account","path":"group_authority"},{"kind":"account","path":"stake_pool"},{"kind":"arg","path":"seed"}]}},{"name":"stake_pool","docs":["Stake pool that this delegation pool is paired with"]},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"seed","type":"pubkey"}]},{"name":"create_registrar","discriminator":[132,235,36,49,139,66,202,69],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"registrar","docs":["The voting registrar. There can only be a single registrar per governance realm and","governing mint."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"realm"},{"kind":"account","path":"realm_governing_token_mint"},{"kind":"account","path":"governance_program_id"},{"kind":"const","value":[82,101,103,105,115,116,114,97,114]}]}},{"name":"realm","docs":["An spl-governance realm","","- realm is owned by the governance_program_id","- realm_governing_token_mint must be the community or council mint","- realm_authority is realm.authority"]},{"name":"governance_program_id","docs":["The program id of the spl-governance program the realm belongs to.",""]},{"name":"realm_governing_token_mint","docs":["Either the realm community mint or the council mint."]},{"name":"realm_authority","signer":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"}],"args":[]},{"name":"create_voter_weight_record","discriminator":[184,249,133,178,88,152,250,186],"accounts":[{"name":"payer","docs":["Payer of rent"],"writable":true,"signer":true},{"name":"registrar","docs":["Registrar for the applicable realm"],"relations":["stake_pool"]},{"name":"stake_pool","docs":["StakePool the VoterWeightRecord will be associated with."],"relations":["staker"]},{"name":"staker","docs":["Staker the corresponds to this owner"],"writable":true},{"name":"voter_weight_record","writable":true,"pda":{"seeds":[{"kind":"account","path":"staker"},{"kind":"const","value":[86,111,116,101,114,87,101,105,103,104,116,82,101,99,111,114,100]}]}},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"instructions","address":"Sysvar1nstructions1111111111111111111111111"}],"args":[]},{"name":"delegate","discriminator":[90,147,75,178,85,88,4,137],"accounts":[{"name":"owner","docs":["Owns the corresponding `staker`"]},{"name":"authority","docs":["Required if pool has set flag `DELEGATION_REQUIRES_SIG`"],"signer":true,"optional":true},{"name":"stake_pool","docs":["Stake pool that the delegation pool is paired with"],"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Delegation pool that the staker's `delegateUserState` corresponds to"],"writable":true},{"name":"delegation_group","writable":true,"relations":["delegation_pool"]},{"name":"staker","docs":["The owner's staking account"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,114]},{"kind":"account","path":"owner"},{"kind":"account","path":"stake_pool"}]}}],"args":[{"name":"params","type":{"defined":{"name":"DelegateParams"}}}]},{"name":"edit_delegation_pool","discriminator":[183,224,211,48,188,210,205,38],"accounts":[{"name":"authority","docs":["Authority of the corresponding `delegation_pool`"],"signer":true,"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Delegation pool to edit settings for"],"writable":true}],"args":[{"name":"params","type":{"defined":{"name":"EditDelegationPoolParams"}}}]},{"name":"edit_oracle_data","docs":["Devnet only, panics if program built without devnet flag."],"discriminator":[28,20,65,246,203,136,103,80],"accounts":[{"name":"oracle_data","writable":true}],"args":[{"name":"params","type":{"defined":{"name":"EditOracleDataParams"}}}]},{"name":"edit_reward_pool","discriminator":[130,231,124,77,72,249,45,219],"accounts":[{"name":"authority","docs":["Authority of the corresponding `delegation_pool`"],"signer":true,"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Delegation pool to add the RewardPool into"],"writable":true}],"args":[{"name":"params","type":{"defined":{"name":"EditRewardPoolParams"}}}]},{"name":"grant","discriminator":[145,189,68,153,161,231,76,107],"accounts":[{"name":"payer","signer":true},{"name":"from","docs":["Token Account to transfer stake_mint from, to be deposited into the vault"],"writable":true},{"name":"vault","docs":["Vault of the StakePool token will be transfer to"],"writable":true,"relations":["stake_pool"]},{"name":"stake_pool","docs":["StakePool owning the vault that will receive the deposit"],"writable":true,"relations":["staker"]},{"name":"staker","writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"params","type":{"defined":{"name":"GrantParams"}}}]},{"name":"initialize_delegation_pool","discriminator":[243,208,61,104,26,67,124,178],"accounts":[{"name":"payer","docs":["Payer of rent"],"writable":true,"signer":true},{"name":"authority","docs":["Adminstrator of the delegation pool"]},{"name":"oracle_data","docs":["This oracle's `OracleAccountData` from the `sb_on_demand` program. MUST be initialized.","","Note: After this ix runs, remember to reciprocally register this `delegation_pool` in the","oracle's account on the sb_on_demand program","","program performs essentially NO VALIDATION that this is the correct account, belongs to this","oracle, etc"]},{"name":"delegation_pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[68,101,108,101,103,97,116,105,111,110]},{"kind":"account","path":"authority"},{"kind":"account","path":"oracle_data"},{"kind":"account","path":"stake_pool"}]}},{"name":"stake_pool","docs":["Stake pool that this delegation pool is paired with"]},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"initialize_stake_pool","discriminator":[48,189,243,73,19,67,36,83],"accounts":[{"name":"payer","docs":["Payer of rent"],"writable":true,"signer":true},{"name":"stake_mint","docs":["SPL Token Mint of the underlying token to be deposited for staking"]},{"name":"stake_pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,80,111,111,108]},{"kind":"account","path":"stake_mint"},{"kind":"arg","path":"authority"}]}},{"name":"vault","docs":["An SPL token Account for staging A tokens"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[86,97,117,108,116]},{"kind":"account","path":"stake_pool"}]}},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"InitializeStakePoolParams"}}}]},{"name":"initialize_staker","discriminator":[131,155,29,159,5,65,156,247],"accounts":[{"name":"payer","docs":["Payer of rent"],"writable":true,"signer":true},{"name":"owner","docs":["Owner of the `Staker` account, which may differ from the `payer` staking."]},{"name":"stake_pool"},{"name":"staker","writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,114]},{"kind":"account","path":"owner"},{"kind":"account","path":"stake_pool"}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"instant_unstake","discriminator":[16,246,91,34,255,183,165,53],"accounts":[{"name":"owner","docs":["Owns the Staker acc"],"writable":true,"signer":true,"relations":["staker"]},{"name":"token_dest","docs":["WARN: Completely unchecked!"],"writable":true},{"name":"vault","docs":["Vault of the StakePool that is the source of the tokens"],"writable":true,"relations":["stake_pool"]},{"name":"stake_mint","docs":["Mint for vault tokens"],"writable":true,"relations":["stake_pool"]},{"name":"stake_pool","docs":["StakePool that owner is unstaking from"],"writable":true,"relations":["staker"]},{"name":"staker","writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"params","type":{"defined":{"name":"InstantUnstakeParams"}}}]},{"name":"register_registrar","discriminator":[57,210,48,165,230,41,174,219],"accounts":[{"name":"authority","signer":true,"relations":["stake_pool"]},{"name":"registrar"},{"name":"stake_pool","writable":true}],"args":[]},{"name":"stake","discriminator":[206,176,202,18,200,209,179,108],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"from","docs":["Token Account to transfer stake_mint from, to be deposited into the vault"],"writable":true},{"name":"vault","docs":["Vault of the StakePool token will be transfer to"],"writable":true,"relations":["stake_pool"]},{"name":"stake_pool","docs":["StakePool owning the vault that will receive the deposit"],"writable":true,"relations":["staker"]},{"name":"staker","writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"StakeParams"}}}]},{"name":"undelegate","discriminator":[131,148,180,198,91,104,42,238],"accounts":[{"name":"claim_base","accounts":[{"name":"owner","docs":["Owns the corresponding `staker`"],"writable":true,"signer":true},{"name":"stake_pool","docs":["Stake pool that the delegation pool is paired with."],"relations":["delegation_pool"]},{"name":"delegation_pool","docs":["Note: Owns the reward vaults and signs the transfer tx"],"writable":true},{"name":"staker","docs":["The owner's staking account"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,114]},{"kind":"account","path":"owner"},{"kind":"account","path":"stake_pool"}]}},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}]},{"name":"delegation_group","writable":true}],"args":[{"name":"params","type":{"defined":{"name":"UndelegateParams"}}}]},{"name":"unstake","discriminator":[90,95,107,42,205,124,50,225],"accounts":[{"name":"owner","docs":["Owns the Staker acc"],"writable":true,"signer":true,"relations":["staker"]},{"name":"stake_pool","docs":["StakePool that owner is unstaking from"],"writable":true,"relations":["staker"]},{"name":"staker","writable":true}],"args":[{"name":"params","type":{"defined":{"name":"UnstakeParams"}}}]},{"name":"unwrap_oracle_reward_account","discriminator":[209,206,187,179,40,174,165,96],"accounts":[{"name":"owner","docs":["Signer - Oracle authority who owns the WSOL reward ATA"],"writable":true,"signer":true,"relations":["staker"]},{"name":"stake_pool","docs":["Stake pool the oracle is staked into","Used to derive the PDS for the 'staker' account"],"relations":["staker"]},{"name":"staker","docs":["The PDA staker account for the oracle authority.","- PDA is derived using [STAKER_SEED, owner, stake_pool]","- Must match the provided `owner` and `stake_pool`"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[83,116,97,107,101,114]},{"kind":"account","path":"owner"},{"kind":"account","path":"stake_pool"}]}},{"name":"reward_token_account","docs":["The WSOL token account that holds claimed rewards.","- Must be owned by the `owner`","- Must be for the wrapped SOL mint","- Must match the expected ATA from get_associated_token_address(owner, native_mint)"],"writable":true},{"name":"sol_destination","docs":["Account that will receive the unwrapped SOL.","- Must be the same as the `owner`"],"writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"params","type":{"defined":{"name":"UnwrapOracleRewardAccountParams"}}}]},{"name":"update_delinquency","discriminator":[11,18,170,212,25,4,136,48],"accounts":[{"name":"authority","docs":["Authority of the delegation group"],"signer":true,"relations":["delegation_group"]},{"name":"delegation_group","writable":true,"relations":["delegation_pool"]},{"name":"delegation_pool","writable":true}],"args":[{"name":"params","type":{"defined":{"name":"UpdateDelinquencyParams"}}}]},{"name":"update_weight_record","docs":["Must be called immediately before voting, in the same tx.","","Technically permisionless, any user may call this to update (and therefore read) another","Staker's voting power on-chain."],"discriminator":[2,236,221,170,247,21,174,12],"accounts":[{"name":"registrar"},{"name":"staker"},{"name":"voter_weight_record","writable":true,"pda":{"seeds":[{"kind":"account","path":"staker"},{"kind":"const","value":[86,111,116,101,114,87,101,105,103,104,116,82,101,99,111,114,100]}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"withdraw","discriminator":[183,18,70,156,148,109,161,34],"accounts":[{"name":"owner","writable":true,"signer":true,"relations":["staker"]},{"name":"token_dest","docs":["WARN: Completely unchecked!"],"writable":true},{"name":"vault","docs":["Vault of the StakePool that is the source of the tokens"],"writable":true,"relations":["stake_pool"]},{"name":"stake_pool","docs":["StakePool that owner is withdrawing from"],"writable":true,"relations":["staker"]},{"name":"staker","writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"params","type":{"defined":{"name":"WithdrawParams"}}}]},{"name":"write_oracle_data","docs":["Devnet only, panics if program built without devnet flag."],"discriminator":[173,158,145,29,76,10,209,142],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"oracle_data","writable":true,"pda":{"seeds":[{"kind":"arg","path":"nonce"},{"kind":"account","path":"payer"},{"kind":"const","value":[111,114,97,99,108,101,95,100,97,116,97]}]}},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"nonce","type":"u16"},{"name":"params","type":{"defined":{"name":"WriteOracleDataParams"}}}]}],"accounts":[{"name":"DelegationGroup","discriminator":[202,203,32,54,213,255,104,168]},{"name":"DelegationPool","discriminator":[130,80,83,27,79,251,175,20]},{"name":"Registrar","discriminator":[193,202,205,51,78,168,150,128]},{"name":"StakePool","discriminator":[121,34,206,21,79,127,255,28]},{"name":"Staker","discriminator":[171,229,193,85,67,177,151,4]}],"errors":[{"code":6000,"name":"BadBumpKey","msg":"Bad bump key, the requested key doesn't exist"},{"code":6001,"name":"InvalidAuthority","msg":"Invalid StakePool authority"},{"code":6002,"name":"InvalidStakePoolVault","msg":"StakePool vault is invalid"},{"code":6003,"name":"InvalidStakerOwner","msg":"Staker owner is invalid"},{"code":6004,"name":"InvalidStakePool","msg":"StakePool is invalid"},{"code":6005,"name":"InvalidStakeMint","msg":"Mint is invalid for StakePool"},{"code":6006,"name":"RewardPoolsFull","msg":"No room for more reward pools in this delegation pool"},{"code":6007,"name":"DuplicateRewardPool","msg":"Duplicate reward pool: this vault is already in the list"},{"code":6008,"name":"RewardNotFound","msg":"Reward not found: this reward doesn't exist"},{"code":6009,"name":"UnlockReceiptsFull","msg":"UnlockReceipts are full"},{"code":6010,"name":"NotEnoughAvailableStake","msg":"Not enough available stake to perform the action"},{"code":6011,"name":"MathError","msg":"Generic Math or overflow error"},{"code":6012,"name":"DelegationsFull","msg":"Delegations are full"},{"code":6013,"name":"DelegationNotFound","msg":"Delegations not found in the staker list"},{"code":6014,"name":"MissingRewardPoolIndex","msg":"A required reward pool was not provided in remaining accounts"},{"code":6015,"name":"InvalidRewardPool","msg":"A reward pool supplied in remaining accounts was invalid"},{"code":6016,"name":"VestingEntriesFull","msg":"Staker vesting_entries are full"},{"code":6017,"name":"InvalidVestingPeriod","msg":"Vesting seconds not even with period"},{"code":6018,"name":"NotEnoughDelegatable","msg":"not enough delegatable"},{"code":6019,"name":"InvalidRealmAuthority","msg":"Invalid realm authority"},{"code":6020,"name":"InvalidRegistrar","msg":"Registrar is invalid"},{"code":6021,"name":"StakePoolRegistrarMismatch","msg":"Registrar must match StakePool registrar"},{"code":6022,"name":"CpiForbidden","msg":"This ix cannot be called by CPI"},{"code":6023,"name":"DelegationPoolInUse","msg":"DelegationPool is already in use"},{"code":6024,"name":"DelegationAuthorityRequired","msg":"Delegation Requires Sig flag is set: contact the pool authority to delegate"},{"code":6025,"name":"DelegationGroupMismatch","msg":"Delegation Group doesn't match the pool"},{"code":6026,"name":"InvalidRegistrarVsPoolMint","msg":"Stake mint doesnt match registrar"},{"code":6027,"name":"NotEnoughStakeForUnlock","msg":"Not enough stake available to unlock"},{"code":6028,"name":"InvalidRewardAccountOwner","msg":"Invalid reward account owner"},{"code":6029,"name":"InvalidMint","msg":"Invalid mint"},{"code":6030,"name":"InvalidRewardAccountAddress","msg":"The reward token account is not the expected associated token account."},{"code":6031,"name":"EmptyRewardAccount","msg":"The reward token account is empty."},{"code":6032,"name":"InvalidOwner","msg":"The reward token account is not owned by the expected program."}],"types":[{"name":"ClaimedReward","docs":["Represents a reward earned from a RewardPool."],"repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"claimed_amount","docs":["Rewards per epoch for the amount staked","* In reward_vault currency, in native decimal (see the corresponding reward_pool)","* WARN: do not use directly, use `claimed_amount_u128` to access and use `store_u128` to","mutate the internal value."],"type":"u128"},{"name":"_reserved1","type":{"array":["u8",16]}}]}},{"name":"DelegateParams","type":{"kind":"struct","fields":[{"name":"delegate_amount","type":"u64"}]}},{"name":"DelegateUserState","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"delegation_pool","docs":["The corresponding `delegation_pool`, sets when inserted and never changes (unless this","entire state is cleared/emptied)"],"type":"pubkey"},{"name":"claimed_rewards","docs":["List of rewards earned in reward pools, in the same order as the corresponding","delegation_pool's reward_pools","* Note: The reward_pools never change order, and are never removed, thus neither do the","corresponding claimed rewards"],"type":{"array":[{"defined":{"name":"ClaimedReward"}},16]}},{"name":"delegated","docs":["Delegation currently, if `delegation_change_epoch` has not elapsed","* WARN: Typically, use `rewardable_delegation` to read the user's effective delegation. Don't use","this field unless you are sure you want it."],"type":"u64"},{"name":"delegation_after_next_epoch","docs":["When the delegation is unlocked, it remains in effect until the next epoch","(delegation_change_epoch). This is amount of delegation that will be in effect at that epoch.","* Note if `epoch_now` is after `delegation_change_epoch`, then this is the users's current","effective delegation","* WARN: Typically, use `rewardable_delegation` to read the user's effective delegation. Don't use","this field unless you are sure you want it."],"type":"u64"},{"name":"delegation_change_epoch","docs":["After this epoch, the rewardable delegation becomes `delegation_after_next_epoch`.","* Note: The amount `delegated` will become `delegation_after_next_epoch` after this account","is next cranked, but there is no guarantee if/when this will occur."],"type":"u64"},{"name":"delegation_previous","docs":["The previous amount of delegation, prior to the latest change.","This is necessary to track the user's claim amount following the epoch where their","delegation amount changed."],"type":"u64"},{"name":"previous_epoch_change","docs":["This tracks what was previously `delegation_change_epoch`. The two epochs of delegation","change history are required to determine which delegation amount is finalized and rewardable."],"type":"u64"},{"name":"padding","type":{"array":["u8",8]}}]}},{"name":"DelegationGroup","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"authority","docs":["The authority that can","* Add DelegationPools to the group","* Activate or Deactivate DelegationPools on the group"],"type":"pubkey"},{"name":"stake_pool","docs":["The StakePool the DelegationGroup"],"type":"pubkey"},{"name":"finalized_total_delegation","type":"u64"},{"name":"current_total_delegation","docs":["Total amount delegated across all pools in this group for the current epoch","* In XSWITCH, in native decimals"],"type":"u64"},{"name":"next_total_delegation","docs":["Amount that will be delegated next epoch. When delegation changes mid-epoch, it stays","effective until the next epoch: this is the balance that will be effective when the epoch","shifts to the next epoch","* In XSWITCH, in native decimals"],"type":"u64"},{"name":"current_epoch","docs":["Caches the last cranked epoch"],"type":"u64"},{"name":"last_epoch_total_reward","docs":["Cache's the amount of tokens in the Switchboard Queue's reward escrow"],"type":"u64"},{"name":"bump","type":"u8"},{"name":"_reserved4","type":{"array":["u8",15]}},{"name":"_reserved3","type":{"array":["u8",32]}},{"name":"_reserved2","type":{"array":["u8",64]}},{"name":"_reserved1","type":{"array":["u8",128]}}]}},{"name":"DelegationPool","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","docs":["This struct's own key. A PDA of \"Delegation\", authority, oracle_data, stake_pool"],"type":"pubkey"},{"name":"authority","docs":["Pubkey that can make updates to this delegation pool"],"type":"pubkey"},{"name":"delegation_group","docs":["Pubkey of the DelegationGroup the pool belongs to."],"type":"pubkey"},{"name":"stake_pool","docs":["StakePool this delegation pool is associated with"],"type":"pubkey"},{"name":"stake_mint","docs":["Caches stake_pool's `stake_mint`"],"type":"pubkey"},{"name":"oracle_data","docs":["This oracle's `OracleAccountData` from the `sb_on_demand` program.","* Note: Each delegation pool supports just one OracleAccountData and vice-versa."],"type":"pubkey"},{"name":"reward_pools","docs":["List of reward pools, in the order they were added. NOT sorted.","* Note: The reward_pools never change order, and are never removed"],"type":{"array":[{"defined":{"name":"RewardPool"}},16]}},{"name":"finalized_total_delegation","docs":["The amount of delegation that was in the epoch prior"],"type":"u64"},{"name":"current_total_delegation","docs":["Amount delegated in this epoch","* In XSWITCH, in native decimals"],"type":"u64"},{"name":"next_total_delegation","docs":["Amount that will be delegated next epoch. When delegation changes mid-epoch, it stays","effective until the next epoch: this is the balance that will be effective when the epoch","shifts to the next epoch","* In XSWITCH, in native decimals"],"type":"u64"},{"name":"current_epoch","docs":["Caches the last cranked epoch"],"type":"u64"},{"name":"bump_seed","docs":["Bump for this account"],"type":"u8"},{"name":"active_pools","docs":["Number of non-default (e.g., active) reward pools in `reward_pools`"],"type":"u8"},{"name":"deliquency","docs":["`GOOD_STANDING` or `DELINQUENT`, all other values are invalid."],"type":"u8"},{"name":"flags","docs":["Each bit controls a setting. Add settings together as needed. Settings supported:","* 0 - `NONE`","* 1 - `DELEGATION_REQUIRES_SIG` - authority must sign delegation instructions.","* 2, 4, 8, 16, 32, 64, 128 - not implemented","","Do not access directly, use functions such as `delegation_requires_sig`"],"type":"u8"},{"name":"padding1","type":{"array":["u8",12]}},{"name":"_reserved1","type":{"array":["u8",16]}},{"name":"_reserved2","type":{"array":["u8",256]}},{"name":"_reserved3","type":{"array":["u8",512]}}]}},{"name":"EditDelegationPoolParams","type":{"kind":"struct","fields":[{"name":"flags","type":"u8"}]}},{"name":"EditOracleDataParams","type":{"kind":"struct","fields":[{"name":"epoch_id_finished","type":"u64"},{"name":"slash_score_finished","type":"u64"},{"name":"reward_score_finished","type":"u64"},{"name":"stake_score_finished","type":"u64"},{"name":"epoch_id_current","type":"u64"},{"name":"slash_score_currrent","type":"u64"},{"name":"reward_score_current","type":"u64"},{"name":"stake_score_current","type":"u64"}]}},{"name":"EditRewardPoolParams","type":{"kind":"struct","fields":[{"name":"index","type":"u8"},{"name":"flags","type":"u8"}]}},{"name":"GrantParams","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"},{"name":"vesting_kind","type":{"defined":{"name":"VestingKind"}}},{"name":"start_ts","type":{"option":"i64"}},{"name":"periods","type":"u32"}]}},{"name":"InitializeStakePoolParams","type":{"kind":"struct","fields":[{"name":"authority","type":"pubkey"}]}},{"name":"InstantUnstakeParams","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"Registrar","docs":["Instance of a voting rights distributor."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"governance_program_id","docs":["Governance program ID"],"type":"pubkey"},{"name":"realm","docs":["Realm instance Registrar belongs to"],"type":"pubkey"},{"name":"realm_governing_token_mint","docs":["Governing token mint for Realm instance"],"type":"pubkey"},{"name":"realm_authority","docs":["Authority for the realm config"],"type":"pubkey"},{"name":"bump","type":"u8"},{"name":"padding0","type":{"array":["u8",7]}},{"name":"placeholder","type":"u64"},{"name":"_reserved0","type":{"array":["u8",256]}}]}},{"name":"RewardPool","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"reward_vault","type":"pubkey"},{"name":"rewards_per_effective_stake","docs":["Rewards per epoch for the amount staked","* In arbitrary reward stake","* WARN: do not use directly, use `rewards_per_effective_stake_u128` to access and use","`store_u128` to mutate the internal value."],"type":"u128"},{"name":"last_amount","docs":["Amount of rewards last recorded","* In reward_vault currency, in native decimals"],"type":"u64"},{"name":"reward_vault_decimals","docs":["Decimals of the reward_vault currency"],"type":"u8"},{"name":"flags","docs":["Each bit controls a setting. Add settings together as needed. Settings supported:","* 0 - `NONE`","* 1 - `REWARD_PAUSED`","* 2, 4, 8, 16, 32, 64, 128 - not implemented","","Do not access directly, use functions such as `reward_paused`"],"type":"u8"},{"name":"padding0","type":{"array":["u8",6]}},{"name":"_reserved0","type":{"array":["u8",32]}}]}},{"name":"StakeParams","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"StakePool","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","docs":["This struct's own key"],"type":"pubkey"},{"name":"authority","docs":["Pubkey that can make updates to StakePool"],"type":"pubkey"},{"name":"vault","docs":["Token Account to store the staked SPL Token"],"type":"pubkey"},{"name":"stake_mint","docs":["Mint of the token being staked. Should always be the SWITCH token in this case"],"type":"pubkey"},{"name":"registrar","docs":["(Optional) If this stake pool uses governance, the registrar is added with","`create_registrar` followed by `register_registrar` and stores information related to the","realm.","","Pubkey default if unused."],"type":"pubkey"},{"name":"total_stake","docs":["Total amount of `stake_mint` staked","* In SWITCH, in native decimals"],"type":"u64"},{"name":"bump_seed","docs":["Bump seed for this account"],"type":"u8"},{"name":"stake_mint_decimals","docs":["Decimals of `stake_mint`"],"type":"u8"},{"name":"padding0","type":{"array":["u8",14]}},{"name":"_reserve0","type":{"array":["u8",256]}},{"name":"_reserve1","type":{"array":["u8",128]}},{"name":"_reserve2","type":{"array":["u8",64]}},{"name":"_reserve3","type":{"array":["u8",32]}}]}},{"name":"Staker","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"owner","docs":["Pubkey that owns the staked tokens","","If governance is enabled, this is also the voter authority, i.e. the `governing_token_owner`","of the token owner record"],"type":"pubkey"},{"name":"stake_pool","docs":["StakePool this Staker account is associated with"],"type":"pubkey"},{"name":"amount_staked","docs":["The amount of stake that have been normally Staked (and vested tokens once the","VestingEntries have been resolved)","* In SWITCH, in native decimals"],"type":"u64"},{"name":"unlock_receipts","type":{"array":[{"defined":{"name":"UnlockReceipt"}},16]}},{"name":"delegations","docs":["A list of user's delegations to oracle Delegation Pools. NOT sorted. When a slot is empty,","the delegation pool is pubkey default"],"type":{"array":[{"defined":{"name":"DelegateUserState"}},13]}},{"name":"next_delegation","docs":["Next available slot in `delegations`."],"type":"u8"},{"name":"padding0","type":{"array":["u8",7]}},{"name":"vesting_entries","type":{"array":[{"defined":{"name":"VestingEntry"}},16]}},{"name":"voter_state","type":{"defined":{"name":"VoterState"}}},{"name":"_reserved0","type":{"array":["u8",256]}}]}},{"name":"UndelegateParams","type":{"kind":"struct","fields":[{"name":"delegate_amount","type":"u64"}]}},{"name":"UnlockReceipt","type":{"kind":"struct","fields":[{"name":"amount_unlocking","docs":["The amount of stake_mint that is being unlocked"],"type":"u64"},{"name":"unlock_ts","docs":["The timestamp at which the unlock is complete and the staker may Withdraw"],"type":"i64"}]}},{"name":"UnstakeParams","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"UnwrapOracleRewardAccountParams","type":{"kind":"struct","fields":[]}},{"name":"UpdateDelinquencyParams","type":{"kind":"struct","fields":[{"name":"deliquency","docs":["`GOOD_STANDING` or `DELINQUENT`"],"type":"u8"}]}},{"name":"Vesting","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"start_ts","type":"i64"},{"name":"end_ts","type":"i64"},{"name":"kind","docs":["The type of vesting lockup"],"type":{"defined":{"name":"VestingKind"}}},{"name":"_padding0","type":{"array":["u8",7]}}]}},{"name":"VestingEntry","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"vesting","docs":["The vesting information for this entry"],"type":{"defined":{"name":"Vesting"}}},{"name":"amount_still_deposited","docs":["The amount of $COIN still locked up by this entry"],"type":"u64"},{"name":"amount_originally_deposited","docs":["The amount of $COIN originally locked up at the start of this entry"],"type":"u64"},{"name":"_reserved","type":{"array":["u8",32]}}]}},{"name":"VestingKind","repr":{"kind":"rust"},"type":{"kind":"enum","variants":[{"name":"None"},{"name":"Cliff"},{"name":"Monthly"},{"name":"Quarterly"}]}},{"name":"VoterState","type":{"kind":"struct","fields":[{"name":"registrar","docs":["Caches the registrar of the `stake_pool`"],"type":"pubkey"},{"name":"voter_weight_record","docs":["Weight record derived for this `owner`, `registrar`, and `stake_pool`"],"type":"pubkey"},{"name":"_reserved0","type":{"array":["u8",32]}}]}},{"name":"WithdrawParams","type":{"kind":"struct","fields":[]}},{"name":"WriteOracleDataParams","type":{"kind":"struct","fields":[{"name":"epoch_id_finished","type":"u64"},{"name":"slash_score_finished","type":"u64"},{"name":"reward_score_finished","type":"u64"},{"name":"stake_score_finished","type":"u64"},{"name":"epoch_id_current","type":"u64"},{"name":"slash_score_currrent","type":"u64"},{"name":"reward_score_current","type":"u64"},{"name":"stake_score_current","type":"u64"}]}}]}