{"address":"Gmso1uvJnLbawvw7yezdfCDcPydwW2s2iqG3w6MDucLo","metadata":{"name":"gmsol_store","version":"0.4.0","spec":"0.1.0","description":"GMX-Solana is an extension of GMX on the Solana blockchain.","repository":"https://github.com/gmsol-labs/gmx-solana"},"docs":["Instructions definitions of the GMSOL Store Program."],"instructions":[{"name":"accept_receiver","docs":["Accept the transfer of the receiver address of the given store.","","# Accounts","*[See the documentation for the accounts.](AcceptReceiver).*","","# Errors","- The [`next_receiver`](AcceptReceiver::next_receiver) must be a signer and the current","`next_receiver` of the store.","- The [`store`](AcceptReceiver::store) must be an initialized store account","owned by the store program."],"discriminator":[93,246,187,244,111,155,186,235],"accounts":[{"name":"next_receiver","docs":["The next receiver."],"signer":true},{"name":"store","docs":["The store account whose receiver is being transferred."],"writable":true}],"args":[]},{"name":"accept_referral_code","docs":["Accept referral code.","","# Accounts","*[See the documentation for the accounts.](AcceptReferralCode)*","","# Errors","- The [`next_owner`](AcceptReferralCode::next_owner) must be a signer.","- The [`store`](AcceptReferralCode::store) must be properly initialized.","- The [`user`](AcceptReferralCode::user) account must be:","- Properly initialized","- Different from the [`receiver_user`](AcceptReferralCode::receiver_user)","- The [`referral_code`](AcceptReferralCode::referral_code) account must be:","- Properly initialized","- Owned by the `store`","- Correspond to the owner of the `user`","- Have the next owner be the `next_owner`","- The [`receiver_user`](AcceptReferralCode::receiver_user) account must be:","- Properly initialized","- Not have an associated referral code","- Correspond to the `next_owner`"],"discriminator":[161,82,76,244,25,188,215,207],"accounts":[{"name":"next_owner","signer":true},{"name":"store","relations":["user","referral_code","receiver_user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"referral_code"}]}},{"name":"referral_code","docs":["Referral Code Account."],"writable":true},{"name":"receiver_user","docs":["Receiver."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"next_owner"}]}}],"args":[]},{"name":"accept_store_authority","docs":["Accept the transfer of the authority (admin) of the given store.","","# Accounts","*[See the documentation for the accounts.](AcceptStoreAuthority).*","","# Errors","- The [`next_authority`](AcceptStoreAuthority::next_authority) must be a signer and the current","`next_authority` of the store.","- The [`store`](TransferStoreAuthority::store) must be an initialized store account","owned by the store program."],"discriminator":[19,118,2,20,10,118,118,208],"accounts":[{"name":"next_authority","docs":["The next authority."],"signer":true,"relations":["store"]},{"name":"store","docs":["The store account whose authority is being transferred."],"writable":true}],"args":[]},{"name":"auto_deleverage","docs":["Perform an ADL (Auto-Deleveraging) by keepers.","","# Accounts","*[See the documentation for the accounts.](PositionCut)*","","# Arguments","- `nonce`: The nonce used to derive the `order` PDA address.","- `recent_timestamp`: A recent blockchain timestamp for validation.","- `execution_fee`: The execution fee claimed to be used by the keeper.","","# Errors","- The [`authority`](PositionCut::authority) must be a signer with the ORDER_KEEPER role.","- The [`owner`](PositionCut::owner) must be the position owner.","- The [`user`](PositionCut::user) must be initialized and corresponding to the `owner`.","- The [`store`](PositionCut::store) must be initialized.","- The [`token_map`](PositionCut::token_map) must be initialized and authorized by the store.","- The [`oracle`](PositionCut::oracle) must be initialized, cleared and store-owned.","- The [`market`](PositionCut::market) must be initialized, enabled, store-owned and match","the position's market. The market must be in ADL state.","- The [`order`](PositionCut::order) must be uninitialized with address matching PDA from","the `store`, `owner`, `nonce` and other expected seeds.","- The [`position`](PositionCut::position) must be initialized, owned by the `owner` and","`store` and eligible for ADL.","- The [`event`](PositionCut::event) must be a valid trade event buffer owned by the `store`","and `authority`.","- The [`long_token`](PositionCut::long_token) and [`short_token`](PositionCut::short_token)","must match those defined in the `market`.","- The [`long_token_escrow`](PositionCut::long_token_escrow) and","[`short_token_escrow`](PositionCut::short_token_escrow) must be valid order-owned escrow","accounts for their respective tokens.","- The [`long_token_vault`](PositionCut::long_token_vault) and","[`short_token_vault`](PositionCut::short_token_vault) must be valid store-owned market","vault accounts for their tokens.","- The [`claimable_long_token_account_for_user`](PositionCut::claimable_long_token_account_for_user)","must be a store-owned, owner-delegated claimable account for long token.","- The [`claimable_short_token_account_for_user`](PositionCut::claimable_short_token_account_for_user)","must be a store-owned, owner-delegated claimable account for short token.","- The [`claimable_pnl_token_account_for_holding`](PositionCut::claimable_pnl_token_account_for_holding)","must be a store-owned, holding-delegated claimable account for PnL token.","- Price feed accounts must be valid and provided in the market's sorted token list order.","- The ADL feature must be enabled in the `store`.","- Oracle prices must be valid and complete.","- Execution must complete successfully."],"discriminator":[210,69,163,148,44,245,226,170],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true,"relations":["event"]},{"name":"owner","docs":["The owner of the position."],"writable":true,"relations":["user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"store","docs":["Store."],"writable":true,"relations":["user","token_map","oracle","market","event"]},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"oracle","docs":["Buffer for oracle prices."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"order","docs":["The order to be created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[111,114,100,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"authority"},{"kind":"arg","path":"nonce"}]}},{"name":"position","writable":true},{"name":"event","docs":["Trade event buffer."],"writable":true},{"name":"long_token","docs":["Long token."]},{"name":"short_token","docs":["Short token."]},{"name":"long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_vault","docs":["Long token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"long_token_vault.mint","account":"TokenAccount"}]}},{"name":"short_token_vault","docs":["Short token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"short_token_vault.mint","account":"TokenAccount"}]}},{"name":"claimable_long_token_account_for_user","writable":true},{"name":"claimable_short_token_account_for_user","writable":true},{"name":"claimable_pnl_token_account_for_holding","writable":true},{"name":"system_program","docs":["Initial collatearl token vault.","The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"recent_timestamp","type":"i64"},{"name":"size_delta_in_usd","type":"u128"},{"name":"execution_fee","type":"u64"}]},{"name":"cancel_order_if_no_position","docs":["Cancel order if the corresponding position does not exist.","","# Accounts","*[See the documentation for the accounts.](CancelOrderIfNoPosition)*","","# Errors","- The [`authority`](CancelOrderIfNoPosition::authority) must be a signed ORDER_KEEPER","in the store.","- The [`store`](CancelOrderIfNoPosition::authority) must be initialized.","- The [`order`](CancelOrderIfNoPosition::order) must be initialized and owned by the","`store`. It must be in the pending state.","- The [`position`](CancelOrderIfNoPosition::position) must be recorded in the order.","It must be owned by the system program (i.e., considered to be missing)."],"discriminator":[41,140,160,127,168,138,4,28],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."]},{"name":"order","docs":["Order to check."],"writable":true},{"name":"position","docs":["Validate that the position does not exist (or is owned by the system program)."]}],"args":[]},{"name":"cancel_referral_code_transfer","docs":["Cancel referral code transfer.","","# Accounts","*[See the documentation for the accounts.](CancelReferralCodeTransfer)*","","# Errors","- The [`owner`](CancelReferralCodeTransfer::owner) must be a signer.","- The [`store`](CancelReferralCodeTransfer::store) must be properly initialized.","- The [`user`](CancelReferralCodeTransfer::user) account must be:","- Properly initialized","- Correspond to the `owner`","- The [`referral_code`](CancelReferralCodeTransfer::referral_code) account must be:","- Properly initialized","- Owned by the `store`","- Correspond to the `owner`","- The next owner must not have been the `owner`"],"discriminator":[161,31,77,170,104,11,96,19],"accounts":[{"name":"owner","signer":true,"relations":["user"]},{"name":"store","relations":["user","referral_code"]},{"name":"user","docs":["User Account."],"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"referral_code","docs":["Referral Code Account."],"writable":true}],"args":[]},{"name":"check_admin","docs":["Return whether the signer is the admin of the given store.","","This instruction verifies if the signer has administrator privileges for the given store","and returns a boolean result.","","# Accounts","*[See the documentation for the accounts.](CheckRole).*","","# Returns","Returns `true` if the signer is the admin, `false` otherwise.","","# Errors","- The [`authority`](CheckRole::authority) must be a signer.","- The [`store`](CheckRole::store) must be an initialized store account owned by","the store program."],"discriminator":[207,152,134,45,235,115,54,186],"accounts":[{"name":"authority","docs":["The address to check for the role."],"signer":true},{"name":"store","docs":["The store account in which the role is defined."]}],"args":[],"returns":"bool"},{"name":"check_role","docs":["Check that the authority has the given role in the given store.","","This instruction verifies if the authority has the specified role in the given store","and returns a boolean result.","","# Accounts","*[See the documentation for the accounts.](CheckRole).*","","# Arguments","- `role`: The name of the role to check for the authority.","","# Returns","Returns `true` if the authority has the role, `false` otherwise.","","# Errors","- The [`authority`](CheckRole::authority) must be a signer.","- The [`store`](CheckRole::store) must be an initialized store account owned by","the store program.","- The `role` must exist and be enabled in the store's role configuration."],"discriminator":[142,221,97,79,34,70,95,203],"accounts":[{"name":"authority","docs":["The address to check for the role."],"signer":true},{"name":"store","docs":["The store account in which the role is defined."]}],"args":[{"name":"role","type":"string"}],"returns":"bool"},{"name":"claim_fees_from_market","docs":["Claim fees from the given market.","","# Accounts","[*See the documentation for the accounts.*](ClaimFeesFromMarket)","","# Return","- Returns the claimed amount in base units of the token.","","# Errors","- The [`authority`](ClaimFeesFromMarket::authority) must be a signer and be the designated","fee receiver in the given store.","- The [`store`](ClaimFeesFromMarket::store) must be an initialized [`Store`](crate::states::Store)","account owned by this program.","- The [`market`](ClaimFeesFromMarket::market) must be an initialized [`Market`](crate::states::Market)","account owned by this program and associated with the given store.","- The token being claimed must be one of the market's configured collateral tokens.","- All provided token accounts must match their expected addresses.","- The market must maintain valid balance requirements after the claim."],"discriminator":[245,167,45,29,37,215,168,32],"accounts":[{"name":"authority","signer":true},{"name":"store","relations":["market"]},{"name":"market","writable":true},{"name":"token_mint"},{"name":"vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"token_mint"}]}},{"name":"target","writable":true},{"name":"token_program"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[],"returns":"u64"},{"name":"clear_all_prices","docs":["Clear all prices from the given oracle.","","This instruction removes all stored price data from the oracle account and resets it to the","cleared state. This can be useful when needing to reset price data or when decommissioning an","oracle.","","# Accounts","*[See the documentation for the accounts.](ClearAllPrices)*","","# Errors","- The [`authority`](ClearAllPrices::authority) must be a signer and have the ORACLE_CONTROLLER","role in the given store. It must also be the authority of the oracle.","- The [`store`](ClearAllPrices::store) must be an initialized store account owned by the","store program.","- The [`oracle`](ClearAllPrices::oracle) must be an initialized oracle account owned by","the given store."],"discriminator":[168,114,138,123,105,56,252,151],"accounts":[{"name":"authority","docs":["The caller."],"signer":true,"relations":["oracle"]},{"name":"store","docs":["Store."],"relations":["oracle"]},{"name":"oracle","docs":["Oracle."],"writable":true}],"args":[]},{"name":"close_deposit","docs":["Close a deposit, either by the owner or by keepers.","","# Accounts","*[See the documentation for the accounts.](CloseDeposit)*","","# Arguments","- `reason`: The reason for closing the deposit.","","# Errors","This instruction will fail if:","- The [`executor`](CloseDeposit::executor) is not a signer or is neither the deposit","owner nor an ORDER_KEEPER in the store.","- The [`store`](CloseDeposit::store) is not properly initialized.","- The [`owner`](CloseDeposit::owner) does not match the deposit's owner.","- The provided token mint accounts do not match those recorded in the `deposit`.","- The [`deposit`](CloseDeposit::deposit) is not initialized, not owned by the store,","or not owned by the specified owner.","- Any escrow account is not owned by the `deposit` or does not match the `deposit` records.","- Any associated token account address is invalid.","- The deposit is not in a cancelled or completed state when closed by a non-owner."],"discriminator":[200,19,254,192,15,110,209,179],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owner of the deposit."],"writable":true},{"name":"receiver","docs":["The receiver of the deposit."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["Initial short token."],"optional":true},{"name":"deposit","docs":["The deposit to close."],"writable":true},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for receiving initial short token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_ata","docs":["The ATA for market token of the receiver."],"writable":true},{"name":"initial_long_token_ata","docs":["The ATA for initial long token of the owner."],"writable":true,"optional":true},{"name":"initial_short_token_ata","docs":["The ATA for initial short token of the owner."],"writable":true,"optional":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_empty_claimable_account","docs":["Close an empty claimable account.","","# Accounts","[*See the documentation for the accounts.*](CloseEmptyClaimableAccount)","","# Arguments","- `timestamp`: The timestamp for which the claimable account was created.","","# Errors","- The [`authority`](CloseEmptyClaimableAccount::authority) must be a signer and have ORDER_KEEPER","permissions in the store.","- The [`store`](CloseEmptyClaimableAccount::store) must be initialized.","- The [`account`](CloseEmptyClaimableAccount::account) must be a PDA derived from","the claimable timestamp and other expected seeds.","- The [`account`](CloseEmptyClaimableAccount::account) must be initialized and owned by the store.","- The balance of the [`account`](CloseEmptyClaimableAccount::account) must be zero."],"discriminator":[160,114,144,216,133,237,255,158],"accounts":[{"name":"authority","docs":["The caller."],"writable":true,"signer":true},{"name":"store"},{"name":"mint"},{"name":"owner"},{"name":"account","writable":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"timestamp","type":"i64"}]},{"name":"close_glv_deposit","docs":["Close GLV deposit.","","# Accounts","*[See the documentation for the accounts.](CloseGlvDeposit)*","","# Arguments","- `reason`: The reason for closing the GLV deposit.","","# Errors","- The [`executor`](CloseGlvDeposit::executor) must be a signer, and must be","either the owner of the GLV deposit or a `ORDER_KEEPER` in the store","- The [`store`](CloseGlvDeposit::store) must be properly initialized","- The [`owner`](CloseGlvDeposit::owner) must be the owner of the GLV deposit","- The [`glv_deposit`](CloseGlvDeposit::glv_deposit) must be:","- Properly initialized","- Owned by the `owner` and `store`","- In cancelled or executed state if the `executor` is not the `owner`","- Token mint account requirements:","- All tokens must be valid and recorded in the [`glv_deposit`](CloseGlvDeposit::glv_deposit)","- [`initial_long_token`](CloseGlvDeposit::initial_long_token) must be provided if initial long amount > 0","- [`initial_short_token`](CloseGlvDeposit::initial_short_token) must be provided if initial short amount > 0","- Escrow account requirements:","- Must correspond to their respective tokens","- Must be owned by the [`glv_deposit`](CloseGlvDeposit::glv_deposit)","- Must be recorded in the [`glv_deposit`](CloseGlvDeposit::glv_deposit)","- The addresses of the ATAs must be valid associated token addresses derived from the respective tokens and `owner`","- All token programs must match their corresponding token accounts"],"discriminator":[23,131,155,5,79,73,74,247],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owner of the deposit."],"writable":true},{"name":"receiver","docs":["The recevier of the deposit."],"writable":true},{"name":"glv_deposit","docs":["The GLV deposit to close."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["Initial short token."],"optional":true},{"name":"glv_token","docs":["GLV token."]},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for receiving initial short token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_ata","docs":["The ATA for market token of the owner."],"writable":true},{"name":"initial_long_token_ata","docs":["The ATA for initial long token of the owner."],"writable":true,"optional":true},{"name":"initial_short_token_ata","docs":["The ATA for initial short token of the owner."],"writable":true,"optional":true},{"name":"glv_token_ata","docs":["The ATA for GLV token of the receiver."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["Token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_glv_shift","docs":["Close a GLV shift.","","# Accounts","*[See the documentation for the accounts.](CloseGlvShift)*","","# Arguments","- `reason`: The reason for closing the GLV shift.","","# Errors","- The [`authority`](CloseGlvShift::authority) must be:","- A signer","- A `ORDER_KEEPER` in the `store`","- The [`funder`](CloseGlvShift::funder) must be the funder of the [`glv`](CloseGlvShift::glv).","- The [`store`](CloseGlvShift::store) must be properly initialized.","- The [`glv`](CloseGlvShift::glv) must be:","- Properly initialized","- Owned by the `store`","- The expected GLV of the GLV shift","- The [`glv_shift`](CloseGlvShift::glv_shift) must be:","- Properly initialized","- Owned by the `store`","- Token requirements:","- [`from_market_token`](CloseGlvShift::from_market_token) must be:","- Recorded in the GLV shift","- [`to_market_token`](CloseGlvShift::to_market_token) must be:","- Recorded in the GLV shift"],"discriminator":[90,31,241,89,138,184,164,186],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"funder","docs":["Funder of the GLV shift."],"writable":true},{"name":"store","docs":["The store."],"relations":["glv"]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"glv","docs":["GLV."]},{"name":"glv_shift","docs":["The GLV shift to close."],"writable":true},{"name":"from_market_token","docs":["From Market token."]},{"name":"to_market_token","docs":["To Market token."]},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_glv_withdrawal","docs":["Close GLV withdrawal.","","# Accounts","*[See the documentation for the accounts.](CloseGlvWithdrawal)*","","# Arguments","- `reason`: The reason for closing the GLV withdrawal.","","# Errors","- The [`executor`](CloseGlvWithdrawal::executor) must be:","- A signer","- Either:","- The owner of the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal)","- A `ORDER_KEEPER` in the `store`","- The [`store`](CloseGlvWithdrawal::store) must be properly initialized","- The [`owner`](CloseGlvWithdrawal::owner) must be the owner of the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal)","- The [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal) must be:","- Properly initialized","- Owned by the `owner`","- Owned by the `store`","- Token requirements:","- All tokens must be valid and recorded in the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal)","- Escrow requirements:","- Must correspond to their respective tokens","- Must be owned by the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal)","- Must be recorded in the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal)","- The addresses of the ATAs must be valid associated token addresses derived from the respective tokens and `owner`","- All token programs must match their corresponding token accounts","- If the `executor` is not the `owner`, the [`glv_withdrawal`](CloseGlvWithdrawal::glv_withdrawal) must be either cancelled or executed."],"discriminator":[14,209,38,49,97,42,179,212],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owner of the deposit."],"writable":true},{"name":"receiver","docs":["The receiver of the deposit."],"writable":true},{"name":"glv_withdrawal","docs":["The GLV withdrawal to close."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"glv_token","docs":["GLV token."]},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for receiving final short token for deposit."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_ata","docs":["The ATA for market token of the owner."],"writable":true},{"name":"final_long_token_ata","docs":["The ATA for final long token of the receiver."],"writable":true},{"name":"final_short_token_ata","docs":["The ATA for final short token of the receiver."],"writable":true},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"glv_token_ata","docs":["The ATA for GLV token of the owner."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["Token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_gt_exchange","docs":["Close a confirmed GT exchange.","","# Accounts","*[See the documentation for the accounts.](CloseGtExchange)*","","# Errors","- The [`authority`](CloseGtExchange::authority) must be a signer and have the GT_CONTROLLER role in the `store`.","- The [`store`](CloseGtExchange::store) must be properly initialized with an initialized GT state.","- The [`vault`](CloseGtExchange::vault) must be properly initialized, owned by the `store`,","and confirmed.","- The [`exchange`](CloseGtExchange::exchange) must be properly initialized and owned by both","the `owner` and `vault`."],"discriminator":[180,247,24,67,219,21,83,148],"accounts":[{"name":"authority","signer":true},{"name":"store","relations":["vault","exchange"]},{"name":"owner","writable":true,"relations":["exchange"]},{"name":"vault","writable":true,"relations":["exchange"]},{"name":"exchange","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,116,95,101,120,99,104,97,110,103,101]},{"kind":"account","path":"vault"},{"kind":"account","path":"owner"}]}}],"args":[]},{"name":"close_market_config_buffer","docs":["Close the given market config buffer account and reclaim its rent.","","This instruction allows the authority to close their market config buffer account","and reclaim the rent.","","# Accounts","[*See the documentation for the accounts.*](CloseMarketConfigBuffer)","","# Errors","- The [`authority`](CloseMarketConfigBuffer::authority) must be a signer","and the owner of the `buffer` account.","- The [`buffer`](CloseMarketConfigBuffer::buffer) must be an initialized","market config buffer account."],"discriminator":[115,231,168,106,130,45,95,247],"accounts":[{"name":"authority","docs":["The authority."],"writable":true,"signer":true,"relations":["buffer"]},{"name":"buffer","docs":["Buffer."],"writable":true},{"name":"receiver","docs":["Receiver."],"writable":true}],"args":[]},{"name":"close_order","docs":["Close an order, either by the owner or by keepers.","","# Accounts","*[See the documentation for the accounts.](CloseOrder)*","","# Arguments","- `reason`: The reason for the close.","","# Errors","- The [`executor`](CloseOrder::executor) must be a signer and either the owner","of the `order` or a ORDER_KEEPER in the store.","- The [`store`](CloseOrder::store) must be initialized.","- The [`owner`](CloseOrder::owner) must be the owner of the `order`.","- The [`user`](CloseOrder::user) must be initialized and correspond to the `owner`.","- The [`referrer_user`](CloseOrder::referrer_user) must be present if the `owner` has a","referrer, and it must be initialized and correspond to the referrer of the `owner`.","- The [`order`](CloseOrder::order) must be initialized and owned by the `store` and the","`owner`.","- The tokens must be those recorded in the `order`.","- The escrow accounts must be owned and recorded in the `order`.","- The addresses of the ATAs must be valid.","- The `order` must be cancelled or completed if the `executor` is not the owner.","- The feature must be enabled for closing the given kind of `order`."],"discriminator":[90,103,209,28,7,63,168,4],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."],"writable":true,"relations":["user","referrer_user"]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owner of the order."],"writable":true,"relations":["user"]},{"name":"receiver","docs":["The receiver of the order."],"writable":true},{"name":"rent_receiver","docs":["The rent receiver of the order."],"writable":true},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"referrer_user","docs":["Referrer User Account."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"user"}]}},{"name":"order","docs":["Order to close."],"writable":true},{"name":"initial_collateral_token","docs":["Initial collateral token."],"optional":true},{"name":"final_output_token","docs":["Final output token."],"optional":true},{"name":"long_token","docs":["Long token."],"optional":true},{"name":"short_token","docs":["Short token."],"optional":true},{"name":"initial_collateral_token_escrow","docs":["The escrow account for initial collateral tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_collateral_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_output_token_escrow","docs":["The escrow account for final output tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_output_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_collateral_token_ata","docs":["The ATA for initial collateral token of the owner."],"writable":true,"optional":true},{"name":"final_output_token_ata","docs":["The ATA for final output token of the receiver."],"writable":true,"optional":true},{"name":"long_token_ata","docs":["The ATA for long token of the receiver."],"writable":true,"optional":true},{"name":"short_token_ata","docs":["The ATA for initial collateral token of the receiver."],"writable":true,"optional":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_shift","docs":["Close a shift, either by the owner or by keepers.","","# Accounts","*[See the documentation for the accounts.](CloseShift)*","","# Arguments","- `reason`: The reason for closing the shift.","","# Errors","- The [`executor`](CloseShift::executor) must be a signer, and either the owner or have","the ORDER_KEEPER role.","- The [`store`](CloseShift::store) must be initialized.","- The [`owner`](CloseShift::owner) must be the owner of the shift.","- The [`shift`](CloseShift::shift) must be initialized and owned by both the `store` and","`owner`.","- The [`from_market_token`](CloseShift::from_market_token) and","[`to_market_token`](CloseShift::to_market_token) must be valid and match those recorded","in the [`shift`](CloseShift::shift).","- The [`from_market_token_escrow`](CloseShift::from_market_token_escrow) and","[`to_market_token_escrow`](CloseShift::to_market_token_escrow) must be valid escrow","accounts owned by the `shift` and match those recorded in the [`shift`](CloseShift::shift).","- The address of the [`from_market_token_ata`](CloseShift::from_market_token_ata) must match","the derived associated token account address for the `from_market_token` and `owner`.","- The address of the [`to_market_token_ata`](CloseShift::to_market_token_ata) must match","the derived associated token account address for the `to_market_token` and `owner`.","- If the `executor` is not the `owner`, the `shift` must be in either cancelled or completed","state."],"discriminator":[153,180,40,133,195,210,196,99],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owenr of the shift."],"writable":true},{"name":"receiver","docs":["The receiver of the shift."],"writable":true},{"name":"shift","docs":["The shift to close."],"writable":true},{"name":"from_market_token","docs":["From market token."]},{"name":"to_market_token","docs":["To market token."]},{"name":"from_market_token_escrow","docs":["The escrow account for the from market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"from_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"to_market_token_escrow","docs":["The escrow account for the to market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"from_market_token_ata","docs":["The ATA for from market token of the owner."],"writable":true},{"name":"to_market_token_ata","docs":["The ATA for to market token of the receiver."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"close_withdrawal","docs":["Close a withdrawal, either by the owner or by keepers.","","# Accounts","*[See the documentation for the accounts.](CloseWithdrawal)*","","# Arguments","- `reason`: The reason for closing the withdrawal.","","# Errors","This instruction will fail if:","- The [`executor`](CloseWithdrawal::executor) is not a signer or is neither the withdrawal","owner nor an ORDER_KEEPER in the store.","- The [`store`](CloseWithdrawal::store) is not properly initialized.","- The [`owner`](CloseWithdrawal::owner) does not match the withdrawal owner.","- The token mint accounts do not match those recorded in the `withdrawal`.","- The [`withdrawal`](CloseWithdrawal::withdrawal) is not initialized, not owned by the store,","or not owned by the specified `owner`.","- Any required escrow accounts are not properly initialized or not owned by the `withdrawal`.","- Any associated token accounts have invalid addresses.","- The withdrawal is not in a cancelled or completed state when the executor is not the owner"],"discriminator":[7,60,160,163,23,241,178,246],"accounts":[{"name":"executor","docs":["The executor of this instruction."],"signer":true},{"name":"store","docs":["The store."]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"owner","docs":["The owner of the withdrawal."],"writable":true},{"name":"receiver","docs":["The receiver of the withdrawal."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"withdrawal","docs":["The withdrawal to close."],"writable":true},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens to burn."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for receiving withdrawed final long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for receiving withdrawed final short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_ata","docs":["The ATA for market token of the owner."],"writable":true},{"name":"final_long_token_ata","docs":["The ATA for final long token of the receiver."],"writable":true},{"name":"final_short_token_ata","docs":["The ATA for final short token of the receiver."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"reason","type":"string"}]},{"name":"confirm_gt_exchange_vault","docs":["Confirm GT exchange vault.","","# Accounts","*[See the documentation for the accounts.](ConfirmGtExchangeVault)*","","# Errors","- The [`authority`](ConfirmGtExchangeVault::authority) must be a signer and have the GT_CONTROLLER role in the `store`.","- The [`store`](ConfirmGtExchangeVault::store) must be properly initialized.","- The GT state of the `store` must be initialized.","- The [`vault`](ConfirmGtExchangeVault::vault) must be validly initialized and owned by","the `store`.","- The `vault` must be in a confirmable state (deposit window has passed but not yet confirmed)."],"discriminator":[128,248,235,107,86,76,2,170],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"writable":true,"relations":["vault"]},{"name":"vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,116,95,101,120,99,104,97,110,103,101,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"vault"},{"kind":"account","path":"vault"}]}},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[]},{"name":"create_deposit","docs":["Create a deposit by the owner.","","# Accounts","*[See the documentation for the accounts.](CreateDeposit)*","","# Arguments","- `nonce`: Nonce bytes used to derive the deposit account address.","- `params`: Parameters specifying the deposit details.","","# Errors","This instruction will fail if:","- The [`owner`](CreateDeposit::owner) is not a signer or has insufficient balance","for the execution fee and rent.","- The [`store`](CreateDeposit::store) is not properly initialized.","- The [`market`](CreateDeposit::market) is not initialized, not owned by the store,","or is disabled.","- The [`deposit`](CreateDeposit::deposit) account is already initialized or is not","a valid PDA derived from the provided nonce and other expected seeds.","- The [`market_token`](CreateDeposit::market_token) is not the market token of `market`.","- Any required escrow account is not properly initialized or owned by the `deposit`.","- Any source account has insufficient balance, does not match the initial tokens, or the","`owner` does not have the permission to transfer the tokens.","- The remaining accounts do not form valid swap paths or reference disabled markets."],"discriminator":[157,30,11,129,16,166,115,75],"accounts":[{"name":"owner","docs":["The owner of the deposit."],"writable":true,"signer":true},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true},{"name":"deposit","docs":["The deposit to be created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[100,101,112,111,115,105,116]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"market_token","docs":["Market token."]},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["initial short token."],"optional":true},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for receiving initial short token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_ata","docs":["The ATA of the owner for receving market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"receiver"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_source","docs":["The source initial long token account."],"writable":true,"optional":true},{"name":"initial_short_token_source","docs":["The source initial short token account."],"writable":true,"optional":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateDepositParams"}}}]},{"name":"create_glv_deposit","docs":["Create GLV deposit.","","# Accounts","*[See the documentation for the accounts.](CreateGlvDeposit)*","","# Arguments","- `nonce`: A 32-byte used to derive the address of the GLV deposit.","- `params`: The parameters for creating the GLV deposit.","","# Errors","- The [`owner`](CreateGlvDeposit::owner) must be a signer and have sufficient balance","for the execution fee and rent.","- The [`store`](CreateGlvDeposit::store) must be properly initialized.","- The [`market`](CreateGlvDeposit::market) must be:","- Properly initialized","- Owned by the `store`","- Listed in the [`glv`](CreateGlvDeposit::glv)","- The [`glv`](CreateGlvDeposit::glv) must be:","- Properly initialized","- Owned by the `store`","- The [`glv_deposit`](CreateGlvDeposit::glv_deposit) must be:","- Uninitialized","- Address must be PDA derived from the SEED of [`GlvDeposit`](states::GlvDeposit),","[`store`](CreateGlvDeposit::store), [`owner`](CreateGlvDeposit::owner) and `nonce`","- The [`glv_token`](CreateGlvDeposit::glv_token) must be:","- Properly initialized","- Correspond to the provided [`glv`](CreateGlvDeposit::glv)","- The [`market_token`](CreateGlvDeposit::market_token) must be:","- Properly initialized","- Correspond to the provided [`market`](CreateGlvDeposit::market)","- Token mint account requirements:","- [`initial_long_token`](CreateGlvDeposit::initial_long_token) must be provided if initial long amount > 0","- [`initial_short_token`](CreateGlvDeposit::initial_short_token) must be provided if initial short amount > 0","- Escrow account requirements:","- [`glv_token_escrow`](CreateGlvDeposit::glv_token_escrow) must be:","- Owned by the [`glv_deposit`](CreateGlvDeposit::glv_deposit)","- Other escrow accounts must be:","- Provided for any non-zero initial token amounts","- Owned by the [`glv_deposit`](CreateGlvDeposit::glv_deposit)","- Source token account requirements:","- Must be provided for any non-zero initial token amounts","- Must have sufficient balance","- Must have the `owner` as its authority","- All token programs must match their corresponding token accounts"],"discriminator":[170,67,137,159,159,116,48,86],"accounts":[{"name":"owner","docs":["The owner of the deposit."],"writable":true,"signer":true},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["market","glv"]},{"name":"market","docs":["Market."],"writable":true},{"name":"glv","docs":["GLV."]},{"name":"glv_deposit","docs":["GLV deposit."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,118,95,100,101,112,111,115,105,116]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"glv_token","docs":["GLV Token."]},{"name":"market_token","docs":["Market token."]},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["initial short token."],"optional":true},{"name":"market_token_source","docs":["The source market token account."],"writable":true,"optional":true},{"name":"initial_long_token_source","docs":["The source initial long token account."],"writable":true,"optional":true},{"name":"initial_short_token_source","docs":["The source initial short token account."],"writable":true,"optional":true},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for initial long tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for initial short tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["The token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateGlvDepositParams"}}}]},{"name":"create_glv_shift","docs":["Create GLV shift.","","# Accounts","*[See the documentation for the accounts.](CreateGlvShift)*","","# Arguments","- `nonce`: A 32-byte used to derive the address of the GLV shift.","- `params`: The parameters for creating the GLV shift.","","# Errors","- The [`authority`](CreateGlvShift::authority) must be:","- A signer","- A `ORDER_KEEPER` in the `store`","- The [`store`](CreateGlvShift::store) must be properly initialized","- The [`glv`](CreateGlvShift::glv) must be:","- Properly initialized","- Owned by the `store`","- Market requirements:","- [`from_market`](CreateGlvShift::from_market) must be:","- Enabled","- Owned by the `store`","- One of the markets in the [`glv`](CreateGlvShift::glv)","- [`to_market`](CreateGlvShift::to_market) must be:","- Enabled","- Owned by the `store`","- One of the markets in the [`glv`](CreateGlvShift::glv)","- Different from `from_market`","- The [`glv_shift`](CreateGlvShift::glv_shift) must be:","- Uninitialized","- PDA derived from the SEED of [`GlvShift`](states::GlvShift), `store`, `glv`, and `nonce`","- Token requirements:","- [`from_market_token`](CreateGlvShift::from_market_token) must be:","- Properly initialized","- The market token of `from_market`","- [`to_market_token`](CreateGlvShift::to_market_token) must be:","- Properly initialized","- The market token of `to_market`","- Vault requirements:","- [`from_market_token_vault`](CreateGlvShift::from_market_token_vault) must be:","- The market token vault for `from_market_token` in the [`glv`](CreateGlvShift::glv)","- Owned by the [`glv`](CreateGlvShift::glv)","- [`to_market_token_vault`](CreateGlvShift::to_market_token_vault) must be:","- The market token vault for `to_market_token` in the [`glv`](CreateGlvShift::glv)","- Owned by the [`glv`](CreateGlvShift::glv)"],"discriminator":[242,58,88,205,167,198,75,253],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"relations":["glv","from_market","to_market"]},{"name":"glv","docs":["GLV."],"writable":true},{"name":"from_market","docs":["From market."],"writable":true},{"name":"to_market","docs":["To market."],"writable":true},{"name":"glv_shift","docs":["GLV shift."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,104,105,102,116]},{"kind":"account","path":"store"},{"kind":"account","path":"authority"},{"kind":"arg","path":"nonce"}]}},{"name":"from_market_token","docs":["From market token."]},{"name":"to_market_token","docs":["To market token."]},{"name":"from_market_token_vault","docs":["Vault for from market tokens."],"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"from_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"to_market_token_vault","docs":["Vault for to market tokens."],"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateShiftParams"}}}]},{"name":"create_glv_withdrawal","docs":["Create GLV withdrawal.","","# Accounts","*[See the documentation for the accounts.](CreateGlvWithdrawal)*","","# Arguments","- `nonce`: A 32-byte used to derive the address of the GLV withdrawal.","- `params`: The parameters for creating the GLV withdrawal.","","# Errors","- The [`owner`](CreateGlvWithdrawal::owner) must be a signer and have sufficient balance","for the execution fee and rent.","- The [`store`](CreateGlvWithdrawal::store) must be properly initialized.","- The [`market`](CreateGlvWithdrawal::market) must be:","- Properly initialized","- Enabled","- Owned by the `store`","- One of the markets in the [`glv`](CreateGlvWithdrawal::glv)","- The [`glv`](CreateGlvWithdrawal::glv) must be:","- Properly initialized","- Owned by the `store`","- The [`glv_withdrawal`](CreateGlvWithdrawal::glv_withdrawal) must be:","- Uninitialized","- A PDA derived from:","- the SEED of [`GlvWithdrawal`](states::GlvWithdrawal)","- [`store`](CreateGlvWithdrawal::store)","- [`owner`](CreateGlvWithdrawal::owner)","- `nonce`","- Token requirements:","- [`glv_token`](CreateGlvWithdrawal::glv_token) must be:","- Properly initialized","- The GLV token of the [`glv`](CreateGlvWithdrawal::glv)","- [`market_token`](CreateGlvWithdrawal::market_token) must be:","- Properly initialized","- The market token of the [`market`](CreateGlvWithdrawal::market)","- All other tokens must be properly initialized","- Source requirements:","- [`glv_token_source`](CreateGlvWithdrawal::glv_token_source) must be:","- Properly initialized","- A GLV token account","- Have sufficient balance","- Have the `owner` as its authority","- Escrow requirements:","- Must correspond to their respective tokens","- Must be owned by the [`glv_withdrawal`](CreateGlvWithdrawal::glv_withdrawal)","- All token programs must match their corresponding token accounts"],"discriminator":[25,224,16,45,95,39,208,35],"accounts":[{"name":"owner","docs":["Owner."],"writable":true,"signer":true},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["market","glv"]},{"name":"market","docs":["Market."],"writable":true},{"name":"glv","docs":["GLV."]},{"name":"glv_withdrawal","docs":["GLV withdrawal."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,118,95,119,105,116,104,100,114,97,119,97,108]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"glv_token","docs":["GLV Token."]},{"name":"market_token","docs":["Market token."]},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"glv_token_source","docs":["The source GLV token account."],"writable":true},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["The token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateGlvWithdrawalParams"}}}]},{"name":"create_order","docs":["Create an order by the owner.","","# Accounts","*[See the documentation for the accounts.](CreateOrder)*","","# Arguments","- `nonce`: Nonce bytes used to derive the address for the order.","- `params`: Order Parameters specifying the market, order kind, and other details.","","# Errors","This instruction will fail if:","- The [`owner`](CreateOrder::owner) is not a signer or has insufficient balance for the","execution fee and rent.","- The [`store`](CreateOrder::store) is not properly initialized.","- The [`market`](CreateOrder::market) is not initialized, is disabled, or not owned by","the `store`.","- The [`user`](CreateOrder::user) is not initialized or does not correspond to the owner.","The address must be a valid PDA derived from the `owner` and expected seeds.","- The [`order`](CreateOrder::order) is not uninitialized or the address is not a valid","PDA derived from the `owner`, `nonce` and expected seeds.","- For increase/decrease orders:","- The [`position`](CreateOrder::position) is missing, not validly initialized, or not","owned by both the `owner` and `store`.","- The [`long_token`](CreateOrder::long_token) or [`short_token`](CreateOrder::short_token)","are missing, or do not match the those defined in the [`market`](CreateOrder::market).","- The [`long_token_escrow`](CreateOrder::long_token_escrow) or","[`short_token_escrow`](CreateOrder::short_token_escrow) are missing, not valid","escrow accounts for `long_token` or `short_token` respectively, or not owned by the `order`.","- For increase/swap orders:","- The [`initial_collateral_token`](CreateOrder::initial_collateral_token) is missing","or invalid.","- The [`initial_collateral_token_escrow`](CreateOrder::initial_collateral_token_escrow)","is missing, not a valid escrow account for `initial_collateral_token`, or not owned by","the `order`.","- The [`initial_collateral_token_source`](CreateOrder::initial_collateral_token_source)","is missing or not a valid source account with `owner` as the authority.","- For decrease/swap orders:","- The [`final_output_token`](CreateOrder::final_output_token) is invalid.","- The [`final_output_token_escrow`](CreateOrder::final_output_token_escrow) is missing,","not a valid escrow account for `final_output_token`, or not owned by the `order`.","- The feature for creating this kind of order is not enabled.","- The remaining market accounts do not match the swap parameters, not all enabled or owned","by the `store`."],"discriminator":[141,54,37,207,237,210,250,215],"accounts":[{"name":"owner","docs":["The owner of the order to be created."],"writable":true,"signer":true,"relations":["user","position"]},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["market","user","position"]},{"name":"market","docs":["Market."],"writable":true},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"order","docs":["The order to be created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[111,114,100,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"position","docs":["The related position."],"writable":true,"optional":true},{"name":"initial_collateral_token","docs":["Initial collateral token / swap in token.","Only required by increase and swap orders."],"optional":true},{"name":"final_output_token","docs":["Final output token.","Used as collateral token / swap out token for increase and swap orders;","and used as final output token for decrease orders.","","For the case of increase or swap orders, it will be checked to be a valid","collateral / swap out token."]},{"name":"long_token","docs":["Long token of the market."],"optional":true},{"name":"short_token","docs":["Short token of the market."],"optional":true},{"name":"initial_collateral_token_escrow","docs":["Initial collateral token escrow account.","Only requried by increase and swap orders."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_collateral_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_output_token_escrow","docs":["Final output token escrow account.","Only required by decrease and swap orders."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_output_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_escrow","docs":["Long token escrow.","Only required by increase and decrease orders."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["Short token escrow.","Only required by increase and decrease orders."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_collateral_token_source","docs":["The source initial token account.","Only requried by increase and swap orders."],"writable":true,"optional":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateOrderParams"}}}]},{"name":"create_shift","docs":["Create a shift by the owner.","","# Accounts","*[See the documentation for the accounts.](CreateShift)*","","# Arguments","- `nonce`: The nonce used to derive the shift's PDA address.","- `params`: The parameters for creating the shift.","","# Errors","- The [`owner`](CreateShift::owner) must be a signer and have sufficient balance for the","execution fee and rent.","- The [`store`](CreateShift::store) must be initialized.","- The [`from_market`](CreateShift::from_market) must be initialized, enabled","and store-owned.","- The [`to_market`](CreateShift::to_market) must be initialized, enabled","and store-owned.","- The [`from_market`](CreateShift::from_market) must be shiftable to the","[`to_market`](CreateShift::to_market).","- The [`shift`](CreateShift::shift) must be uninitialized. Its address must","match the PDA derived from the expected seeds.","- The [`from_market_token`](CreateShift::from_market_token) must be the market","token of the [`from_market`](CreateShift::from_market).","- The [`to_market_token`](CreateShift::to_market_token) must be the market","token of the [`to_market`](CreateShift::to_market).","- The [`from_market_token_escrow`](CreateShift::from_market_token_escrow) must","be a valid shift-owned escrow account for the","[`from_market_token`](CreateShift::from_market_token).","- The [`to_market_token_escrow`](CreateShift::to_market_token_escrow) must be","a valid shift-owned escrow account for the","[`to_market_token`](CreateShift::to_market_token).","- The [`from_market_token_source`](CreateShift::from_market_token_source) must","be a token account for [`from_market_token`](CreateShift::from_market_token)","with `owner` as authority.","- The [`to_market_token_ata`](CreateShift::to_market_token_ata) must be a valid","associated token account for [`to_market_token`](CreateShift::to_market_token)","owned by `owner`."],"discriminator":[43,133,161,94,253,249,13,184],"accounts":[{"name":"owner","docs":["The owner."],"writable":true,"signer":true},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["from_market","to_market"]},{"name":"from_market","docs":["From market."],"writable":true},{"name":"to_market","docs":["To market."]},{"name":"shift","docs":["Shift."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,104,105,102,116]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"from_market_token","docs":["From market token."]},{"name":"to_market_token","docs":["To market token."]},{"name":"from_market_token_escrow","docs":["The escrow account for the from market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"from_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"to_market_token_escrow","docs":["The escrow account for the to market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"from_market_token_source","docs":["The source from market token account."],"writable":true},{"name":"to_market_token_ata","docs":["The ATA for receiving to market tokens."],"pda":{"seeds":[{"kind":"account","path":"receiver"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateShiftParams"}}}]},{"name":"create_withdrawal","docs":["Create a withdrawal by the owner.","","# Accounts","*[See the documentation for the accounts.](CreateWithdrawal)*","","# Arguments","- `nonce`: Nonce bytes used to derive the address for the withdrawal.","- `params`: Withdrawal Parameters containing the withdrawal configuration.","","# Errors","This instruction will fail if:","- The [`owner`](CreateWithdrawal::owner) is not a signer or has insufficient balance","for the execution fee and rent.","- The [`store`](CreateWithdrawal::store) is not properly initialized.","- The [`market`](CreateWithdrawal::market) is not initialized, is disabled, or not owned","by the store.","- The [`withdrawal`](CreateWithdrawal::withdrawal) is already initialized or is not a valid","PDA derived from the provided `nonce` and expected seeds.","- The [`market_token`](CreateWithdrawal::market_token) does not match the market token","of the specified market.","- Any required escrow accounts are not properly initialized or not owned by the `withdrawal`.","- The source market token account has insufficient balance, or the `owner` does not have the","permission to transfer the tokens.","- Any market accounts in the remaining accounts are disabled, not owned by the store,","or do not form valid swap paths."],"discriminator":[247,103,160,95,42,161,108,91],"accounts":[{"name":"owner","docs":["The owner."],"writable":true,"signer":true},{"name":"receiver","docs":["The receiver of the output funds."]},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true},{"name":"withdrawal","docs":["The withdrawal to be created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[119,105,116,104,100,114,97,119,97,108]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"},{"kind":"arg","path":"nonce"}]}},{"name":"market_token","docs":["Market token."]},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens to burn."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for receiving withdrawed final long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for receiving withdrawed final short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_source","docs":["The source market token account."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"params","type":{"defined":{"name":"CreateWithdrawalParams"}}}]},{"name":"disable_role","docs":["Disable an existing role for the given store.","","This instruction disables an existing role in the store's role configuration.","","# Accounts","*[See the documentation for the accounts.](DisableRole).*","","# Arguments","- `role`: The name of the role to be disabled.","","# Errors","- The [`authority`](DisableRole::authority) must be a signer and be the `ADMIN` of the store.","- The [`store`](DisableRole::store) must be an initialized store account owned by the store program.","- The `role` must be enabled."],"discriminator":[211,224,245,96,179,213,176,26],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account for which the role is to be disabled."],"writable":true}],"args":[{"name":"role","type":"string"}]},{"name":"enable_role","docs":["Insert or enable a role for the given store.","","This instruction adds a new role or enables an existing disabled role in the store's role configuration.","","# Accounts","*[See the documentation for the accounts.](EnableRole).*","","# Arguments","- `role`: The name of the role to be added/enabled. The length cannot exceed","[`MAX_ROLE_NAME_LEN`](states::roles::MAX_ROLE_NAME_LEN).","","# Errors","- The [`authority`](EnableRole::authority) must be a signer and be the `ADMIN` of the store.","- The [`store`](EnableRole::store) must be an initialized store account owned by the store program.","- The `role` name length must not exceed [`MAX_ROLE_NAME_LEN`](states::roles::MAX_ROLE_NAME_LEN).","- The `role` must not be already enabled."],"discriminator":[154,1,249,148,155,80,118,115],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account for which the role is to be added/enabled."],"writable":true}],"args":[{"name":"role","type":"string"}]},{"name":"execute_decrease_order","docs":["Execute a decrease order by keepers.","","# Accounts","*[See the documentation for the accounts.](ExecuteDecreaseOrder)*","","# Arguments","- `recent_timestamp`: A timestamp that must be within a recent time window.","- `execution_fee`: The execution fee claimed to be used by the keeper.","- `throw_on_execution_error`: If true, throws an error if order execution fails. If false,","silently cancels the order on execution failure.","","# Errors","- The [`authority`](ExecuteDecreaseOrder::authority) must be a signer with the ORDER_KEEPER","role in the `store`.","- The [`store`](ExecuteDecreaseOrder::store) must be initialized.","- The [`token_map`](ExecuteDecreaseOrder::token_map) must be initialized and authorized","by the `store`.","- The [`oracle`](ExecuteDecreaseOrder::oracle) must be initialized, cleared and owned","by the `store`.","- The [`market`](ExecuteDecreaseOrder::market) must be initialized, enabled and owned","by the `store`.","- The [`owner`](ExecuteDecreaseOrder::owner) must be the owner of the `order`.","- The [`user`](ExecuteDecreaseOrder::user) must be initialized and associated with","the `owner`.","- The [`order`](ExecuteDecreaseOrder::order) must be:","- Initialized and owned by both the `store` and `owner`","- Associated with the provided `market`","- In the pending state","- The [`position`](ExecuteDecreaseOrder::position) must exist and be validly owned","by the `owner` and `store`. It must match the `order`.","- The [`event`](ExecuteDecreaseOrder::event) must be a valid trade event buffer","owned by both the `store` and `authority`.","- The tokens must match those recorded in the `order`.","- All escrow accounts must be valid, recorded in the `order` and owned by the `order`.","- All vault accounts must be valid market vault accounts and owned by the `store`.","- All claimable token accounts must be valid and properly delegated to their owners.","- The remaining accounts must be valid. See the documentation for the accounts for more","details.","- The feature for executing decrease orders must be enabled in the `store`.","- If `throw_on_execution_error` is true, any execution failure will throw an error."],"discriminator":[41,200,147,14,250,225,79,134],"accounts":[{"name":"authority","docs":["Authority."],"signer":true,"relations":["event"]},{"name":"store","docs":["Store."],"writable":true,"relations":["token_map","oracle","market","user","event"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"owner","docs":["The owner of the order."],"writable":true,"relations":["user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"order","docs":["Order to execute."],"writable":true},{"name":"position","writable":true},{"name":"event","docs":["Trade event buffer."],"writable":true},{"name":"final_output_token","docs":["Final output token."]},{"name":"long_token","docs":["Long token."]},{"name":"short_token","docs":["Short token."]},{"name":"final_output_token_escrow","docs":["The escrow account for final output tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_output_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_output_token_vault","docs":["Final output token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_output_token_vault.mint","account":"TokenAccount"}]}},{"name":"long_token_vault","docs":["Long token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"long_token_vault.mint","account":"TokenAccount"}]}},{"name":"short_token_vault","docs":["Short token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"short_token_vault.mint","account":"TokenAccount"}]}},{"name":"claimable_long_token_account_for_user","writable":true},{"name":"claimable_short_token_account_for_user","writable":true},{"name":"claimable_pnl_token_account_for_holding","writable":true},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"recent_timestamp","type":"i64"},{"name":"execution_fee","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_deposit","docs":["Execute a deposit by keepers.","","# Accounts","*[See the documentation for the accounts.](ExecuteDeposit)*","","# Arguments","- `execution_fee`: The execution fee claimed to be used by the keeper.","- `throw_on_execution_error`: If true, throws an error if execution fails. If false,","the deposit will be cancelled instead.","","# Errors","This instruction will fail if:","- The [`authority`](ExecuteDeposit::authority) is not a signer or is not an ORDER_KEEPER","in the store.","- The [`store`](ExecuteDeposit::store) is not properly initialized.","- The [`token_map`](ExecuteDeposit::token_map) is not initialized or not authorized by","the store.","- The [`oracle`](ExecuteDeposit::oracle) is not initialized, cleared and owned by the","store.","- The [`market`](ExecuteDeposit::market) is not initialized, is disabled, not owned by","the store, or does not match the market recorded in the `deposit`.","- The [`deposit`](ExecuteDeposit::deposit) is not initialized, not owned by the store,","or not in the pending state.","- Any token mint accounts do not match those recorded in the `deposit`.","- Any escrow accounts are not properly owned or not recorded in the `deposit`.","- Any vault accounts are not valid market vaults or do not correspond to the initial tokens.","- Any feed accounts in the remaining accounts are invalid or do not match the swap parameters.","- Any market accounts in the remaining accounts are disabled, not owned by the store,","or do not match the swap parameters.","- Any oracle prices from the feed accounts are incomplete or invalid.","- The execution fails and `throw_on_execution_error` is set to `true`."],"discriminator":[247,103,46,184,88,188,56,46],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","market"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"deposit","docs":["The deposit to execute."],"writable":true},{"name":"market_token","docs":["Market token mint."],"writable":true},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["Initial short token."],"optional":true},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for receiving initial short token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_vault","docs":["Initial long token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"initial_long_token_vault.mint","account":"TokenAccount"}]}},{"name":"initial_short_token_vault","docs":["Initial short token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"initial_short_token_vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_fee","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_glv_deposit","docs":["Execute GLV deposit.","","# Accounts","*[See the documentation for the accounts.](ExecuteGlvDeposit)*","","# Arguments","- `execution_lamports`: The execution fee claimed to be used by the keeper.","- `throw_on_execution_error`: Whether to throw an error if the execution fails.","","# Errors","- The [`authority`](ExecuteGlvDeposit::authority) must be a signer and have `ORDER_KEEPER` role in the `store`","- The [`store`](ExecuteGlvDeposit::store) must be properly initialized","- The [`token_map`](ExecuteGlvDeposit::token_map) must be:","- Properly initialized","- Authorized by the `store`","- The [`oracle`](ExecuteGlvDeposit::oracle) must be:","- Cleared","- Owned by the `store`","- The [`glv`](ExecuteGlvDeposit::glv) must be:","- Properly initialized","- Owned by the `store`","- Match the expected GLV of the deposit","- The [`market`](ExecuteGlvDeposit::market) must be:","- Properly initialized","- Owned by the `store`","- Match the expected market of the deposit","- Must be enabled and listed in the [`glv`](ExecuteGlvDeposit::glv)","- The [`glv_deposit`](ExecuteGlvDeposit::glv_deposit) must be:","- Properly initialized","- Owned by the `store`","- In pending state","- Token requirements:","- All tokens must be valid and recorded in the [`glv_deposit`](ExecuteGlvDeposit::glv_deposit)","- [`glv_token`](ExecuteGlvDeposit::glv_token) must be the GLV token of the [`glv`](ExecuteGlvDeposit::glv)","- [`market_token`](ExecuteGlvDeposit::market_token) must be the market token of the [`market`](ExecuteGlvDeposit::market)","- Vault requirements:","- [`initial_long_token_vault`](ExecuteGlvDeposit::initial_long_token_vault) must be:","- The market vault for the initial long token","- Owned by the `store`","- [`initial_short_token_vault`](ExecuteGlvDeposit::initial_short_token_vault) must be:","- The market vault for the initial short token","- Owned by the `store`","- [`market_token_vault`](ExecuteGlvDeposit::market_token_vault) must be:","- The market token vault in the [`glv`](ExecuteGlvDeposit::glv)","- Owned by the [`glv`](ExecuteGlvDeposit::glv)","- Escrow requirements:","- Must correspond to their respective tokens","- Must be owned by the [`glv_deposit`](ExecuteGlvDeposit::glv_deposit)","- Must be recorded in the [`glv_deposit`](ExecuteGlvDeposit::glv_deposit)","- All token programs must match their corresponding token accounts","- All remaining accounts must be valid per [`ExecuteGlvDeposit`] documentation","- Returns error if execution fails and `throw_on_execution_error` is `true`"],"discriminator":[18,81,214,21,82,232,148,177],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","glv","market"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"glv","docs":["GLV account."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"glv_deposit","docs":["The GLV deposit to execute."],"writable":true},{"name":"glv_token","docs":["GLV token mint."],"writable":true},{"name":"market_token","docs":["Market token mint."],"writable":true},{"name":"initial_long_token","docs":["Initial long token."],"optional":true},{"name":"initial_short_token","docs":["Initial short token."],"optional":true},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_escrow","docs":["The escrow account for receiving initial long token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_short_token_escrow","docs":["The escrow account for receiving initial short token for deposit."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"glv_deposit"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_long_token_vault","docs":["Initial long token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"initial_long_token_vault.mint","account":"TokenAccount"}]}},{"name":"initial_short_token_vault","docs":["Initial short token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"initial_short_token_vault.mint","account":"TokenAccount"}]}},{"name":"market_token_vault","docs":["Market token vault for the GLV."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["The token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_lamports","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_glv_shift","docs":["Execute GLV shift.","","# Accounts","*[See the documentation for the accounts.](ExecuteGlvShift)*","","# Arguments","- `execution_lamports`: The execution fee claimed to be used by the keeper.","- `throw_on_execution_error`: Whether to throw an error if execution fails.","","# Errors","- The [`authority`](ExecuteGlvShift::authority) must be:","- A signer","- A `ORDER_KEEPER` in the `store`","- The [`store`](ExecuteGlvShift::store) must be properly initialized","- The [`token_map`](ExecuteGlvShift::token_map) must be:","- Properly initialized","- Authorized by the `store`","- The [`oracle`](ExecuteGlvShift::oracle) must be:","- Cleared","- Owned by the `store`","- The [`glv`](ExecuteGlvShift::glv) must be:","- Properly initialized","- Owned by the `store`","- The expected GLV of the GLV shift","- The [`from_market`](ExecuteGlvShift::from_market) must be:","- Enabled","- Owned by the `store`","- One of the markets in the [`glv`](ExecuteGlvShift::glv)","- The [`to_market`](ExecuteGlvShift::to_market) must be:","- Enabled","- Owned by the `store`","- One of the markets in the [`glv`](ExecuteGlvShift::glv)","- The [`glv_shift`](ExecuteGlvShift::glv_shift) must be:","- Properly initialized","- Owned by the `store`","- Token requirements:","- [`from_market_token`](ExecuteGlvShift::from_market_token) must be:","- The market token of `from_market`","- Recorded in the GLV shift","- [`to_market_token`](ExecuteGlvShift::to_market_token) must be:","- The market token of `to_market`","- Recorded in the GLV shift","- Vault requirements:","- [`from_market_token_glv_vault`](ExecuteGlvShift::from_market_token_glv_vault) must be:","- The escrow account for `from_market_token` in the GLV","- Owned by the [`glv`](ExecuteGlvShift::glv)","- [`to_market_token_glv_vault`](ExecuteGlvShift::to_market_token_glv_vault) must be:","- The escrow account for `to_market_token` in the GLV","- Owned by the [`glv`](ExecuteGlvShift::glv)","- [`from_market_token_vault`](ExecuteGlvShift::from_market_token_vault) must be:","- The market vault for `from_market_token`","- Owned by the `store`","- Token programs must match the tokens and token accounts","- The remaining accounts must be valid (see [`ExecuteGlvShift`] docs)","- Returns error if execution fails and `throw_on_execution_error` is `true`"],"discriminator":[209,190,175,51,144,98,45,201],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","glv","from_market","to_market"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"glv","docs":["GLV account."],"writable":true},{"name":"from_market","docs":["From Market."],"writable":true},{"name":"to_market","docs":["To Market."],"writable":true},{"name":"glv_shift","docs":["The GLV shift to close."],"writable":true},{"name":"from_market_token","docs":["From Market token."],"writable":true},{"name":"to_market_token","docs":["To Market token."],"writable":true},{"name":"from_market_token_glv_vault","docs":["The escrow account for from market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"from_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"to_market_token_glv_vault","docs":["The escrow account for to market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"from_market_token_vault","docs":["From market token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"from_market_token_vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_lamports","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_glv_withdrawal","docs":["Execute GLV withdrawal.","","# Accounts","*[See the documentation for the accounts.](ExecuteGlvWithdrawal)*","","# Arguments","- `execution_lamports`: The execution fee claimed to be used by the keeper.","- `throw_on_execution_error`: Whether to throw an error if the execution fails.","","# Errors","- The [`authority`](ExecuteGlvWithdrawal::authority) must be:","- A signer","- A `ORDER_KEEPER` in the `store`","- The [`store`](ExecuteGlvWithdrawal::store) must be properly initialized","- The [`token_map`](ExecuteGlvWithdrawal::token_map) must be:","- Properly initialized","- Authorized by the `store`","- The [`oracle`](ExecuteGlvWithdrawal::oracle) must be:","- Cleared","- Owned by the `store`","- The [`glv`](ExecuteGlvWithdrawal::glv) must be:","- Properly initialized","- Owned by the `store`","- The expected GLV of the withdrawal","- The [`market`](ExecuteGlvWithdrawal::market) must be:","- Properly initialized","- Owned by the `store`","- The expected market of the withdrawal","- Must be enabled and listed in the [`glv`](ExecuteGlvWithdrawal::glv)","- The [`glv_withdrawal`](ExecuteGlvWithdrawal::glv_withdrawal) must be:","- Properly initialized","- Owned by the `store`","- In pending state","- Token requirements:","- All tokens must be valid and recorded in the withdrawal","- [`glv_token`](ExecuteGlvWithdrawal::glv_token) must be the GLV token of the GLV","- [`market_token`](ExecuteGlvWithdrawal::market_token) must be the market token of the market","- Escrow requirements:","- Escrow accounts must correspond to their tokens","- Escrow accounts must be owned by the [`glv_withdrawal`](ExecuteGlvWithdrawal::glv_withdrawal)","- Escrow accounts must be recorded in the [`glv_withdrawal`](ExecuteGlvWithdrawal::glv_withdrawal)","- Vault requirements:","- [`market_token_withdrawal_vault`](ExecuteGlvWithdrawal::market_token_withdrawal_vault) must be the market vault for market token, owned by the `store`","- [`final_long_token_vault`](ExecuteGlvWithdrawal::final_long_token_vault) must be the market vault for final long token, owned by the `store`","- [`final_short_token_vault`](ExecuteGlvWithdrawal::final_short_token_vault) must be the market vault for final short token, owned by the `store`","- [`market_token_vault`](ExecuteGlvWithdrawal::market_token_vault) must be the GLV's market token vault, owned by the [`glv`](ExecuteGlvWithdrawal::glv)","- All token programs must match their corresponding token accounts","- All remaining accounts must be valid per [`ExecuteGlvWithdrawal`] documentation","- Returns error if execution fails and `throw_on_execution_error` is `true`"],"discriminator":[161,145,255,200,224,8,183,135],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","glv","market"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"glv","docs":["GLV account."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"glv_withdrawal","docs":["The GLV withdrawal to execute."],"writable":true},{"name":"glv_token","docs":["GLV token mint."],"writable":true},{"name":"market_token","docs":["Market token mint."],"writable":true},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"glv_token_escrow","docs":["The escrow account for GLV tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"account","path":"glv_token_program"},{"kind":"account","path":"glv_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_escrow","docs":["The escrow account for market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for receiving final long token for withdrawal."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for receiving final short token for withdrawal."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv_withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_withdrawal_vault","docs":["Market token wihtdrawal vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"market_token_withdrawal_vault.mint","account":"TokenAccount"}]}},{"name":"final_long_token_vault","docs":["Final long token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_long_token_vault.mint","account":"TokenAccount"}]}},{"name":"final_short_token_vault","docs":["Final short token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_short_token_vault.mint","account":"TokenAccount"}]}},{"name":"market_token_vault","docs":["Market token vault for the GLV."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"glv_token_program","docs":["The token program for GLV token."],"address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_lamports","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_increase_or_swap_order","docs":["Execute an increase/swap order by keepers.","","# Accounts","*[See the documentation for the accounts.](ExecuteIncreaseOrSwapOrder)*","","# Arguments","- `recent_timestamp`: A recent timestamp used for deriving the claimable accounts.","- `execution_fee`: The execution fee claimed to be used the keeper.","- `throw_on_execution_error`: If true, throws an error if order execution fails. If false,","silently cancels the order on execution failure.","","# Errors","- The [`authority`](ExecuteIncreaseOrSwapOrder::authority) must be a signer and have the","ORDER_KEEPER role in the `store`.","- The [`store`](ExecuteIncreaseOrSwapOrder::store) must be initialized.","- The [`token_map`](ExecuteIncreaseOrSwapOrder::token_map) must be initialized and authorized","by the `store`.","- The [`oracle`](ExecuteIncreaseOrSwapOrder::oracle) must be initialized, cleared and owned","by the `store`.","- The [`market`](ExecuteIncreaseOrSwapOrder::market) must be initialized, enabled and owned","by the `store`. It must also be associated with the `order`.","- The [`owner`](ExecuteIncreaseOrSwapOrder::owner) must be the owner of the `order`.","- The [`user`](ExecuteIncreaseOrSwapOrder::user) must be initialized and associated with","the `owner`.","- The [`order`](ExecuteIncreaseOrSwapOrder::order) must be:","- Initialized and owned by both the `store` and `owner`","- Associated with the provided `market`","- In a pending state","- For increase orders:","- The [`initial_collateral_token`](ExecuteIncreaseOrSwapOrder::initial_collateral_token)","must be valid.","- The [`position`](ExecuteIncreaseOrSwapOrder::position) must exist and be owned by the","`owner` and `store`. It must match the `order`.","- The [`event`](ExecuteIncreaseOrSwapOrder::event) must be a valid trade event buffer owned","by both the `store` and `authority`.","- The [`long_token`](ExecuteIncreaseOrSwapOrder::long_token) and [`short_token`](ExecuteIncreaseOrSwapOrder::short_token)","must match those defined in the `market`.","- The corresponding token escrow and vault accounts must be valid, recorded in the `order`","and owned by the `order`.","- For swap orders:","- The [`initial_collateral_token`](ExecuteIncreaseOrSwapOrder::initial_collateral_token)","must be valid.","- The [`final_output_token`](ExecuteIncreaseOrSwapOrder::final_output_token) must be valid.","- The corresponding escrow and vault accounts must be valid, recorded in the `order` and","owned by the `order`.","- The remaining accounts must be valid. See the documentation for the accounts for more","details.","- The feature for executing this order type must be enabled in the `store`.","- If `throw_on_execution_error` is true, any execution failure will throw an error"],"discriminator":[231,30,166,1,233,69,152,133],"accounts":[{"name":"authority","docs":["Authority."],"signer":true,"relations":["event"]},{"name":"store","docs":["Store."],"writable":true,"relations":["token_map","oracle","market","user","event"]},{"name":"token_map","docs":["Token Map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"owner","docs":["The owner of the order."],"writable":true,"relations":["user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"order","docs":["Order to execute."],"writable":true},{"name":"position","writable":true,"optional":true},{"name":"event","docs":["Trade event buffer."],"writable":true,"optional":true},{"name":"initial_collateral_token","docs":["Initial collateral token."],"optional":true},{"name":"final_output_token","docs":["Final output token."],"optional":true},{"name":"long_token","docs":["Long token."],"optional":true},{"name":"short_token","docs":["Short token."],"optional":true},{"name":"initial_collateral_token_escrow","docs":["The escrow account for initial collateral tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"initial_collateral_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_output_token_escrow","docs":["The escrow account for final output tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_output_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"initial_collateral_token_vault","docs":["Initial collatearl token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"initial_collateral_token_vault.mint","account":"TokenAccount"}]}},{"name":"final_output_token_vault","docs":["Final output token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_output_token_vault.mint","account":"TokenAccount"}]}},{"name":"long_token_vault","docs":["Long token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"long_token_vault.mint","account":"TokenAccount"}]}},{"name":"short_token_vault","docs":["Short token vault."],"writable":true,"optional":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"short_token_vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"recent_timestamp","type":"i64"},{"name":"execution_fee","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_shift","docs":["Execute a shift by keepers.","","# Accounts","*[See the documentation for the accounts.](ExecuteShift)*","","# Arguments","- `execution_lamports`: The execution fee in lamports claimed to be used by the keeper.","- `throw_on_execution_error`: Whether to throw an error if the execution fails.","","# Errors","- The [`authority`](ExecuteShift::authority) must be a signer and have the ORDER_KEEPER role","in the store.","- The [`store`](ExecuteShift::store) must be initialized.","- The [`token_map`](ExecuteShift::token_map) must be initialized and authorized by the store.","- The [`oracle`](ExecuteShift::oracle) must be initialized, cleared and store-owned.","- The [`from_market`](ExecuteShift::from_market) must be initialized, enabled and store-owned.","It must be the from market of the [`shift`](ExecuteShift::shift).","- The [`to_market`](ExecuteShift::to_market) must be initialized, enabled and store-owned.","It must be the to market of the [`shift`](ExecuteShift::shift).","- The [`from_market`](ExecuteShift::from_market) must be shiftable to the","[`to_market`](ExecuteShift::to_market).","- The [`shift`](ExecuteShift::shift) must be initialized, store-owned and in the pending state.","- The [`from_market_token`](ExecuteShift::from_market_token) must be the market token of the","[`from_market`](ExecuteShift::from_market).","- The [`to_market_token`](ExecuteShift::to_market_token) must be the market token of the","[`to_market`](ExecuteShift::to_market).","- The [`from_market_token_escrow`](ExecuteShift::from_market_token_escrow) must be a valid","shift-owned escrow account for the [`from_market_token`](ExecuteShift::from_market_token)","and recorded in the [`shift`](ExecuteShift::shift).","- The [`to_market_token_escrow`](ExecuteShift::to_market_token_escrow) must be a valid","shift-owned escrow account for the [`to_market_token`](ExecuteShift::to_market_token)","and recorded in the [`shift`](ExecuteShift::shift).","- The [`from_market_token_vault`](ExecuteShift::from_market_token_vault) must be the market","vault for the [`from_market_token`](ExecuteShift::from_market_token) and store-owned.","- The feed accounts must be valid and provided in the same order as the unique sorted list","of tokens in the `from_market` and `to_market`.","- The oracle prices from the feed accounts must be complete and valid.","- If `throw_on_execution_error` is `true`, returns an error if execution fails."],"discriminator":[46,112,104,8,96,157,222,253],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","from_market","to_market"]},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"from_market","docs":["From market."],"writable":true},{"name":"to_market","docs":["To market."],"writable":true},{"name":"shift","docs":["The shift to execute."],"writable":true},{"name":"from_market_token","docs":["From market token."],"writable":true},{"name":"to_market_token","docs":["To market token."],"writable":true},{"name":"from_market_token_escrow","docs":["The escrow account for from market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"from_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"to_market_token_escrow","docs":["The escrow account for to market tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"shift"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"to_market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"from_market_token_vault","docs":["From market token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"from_market_token_vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_lamports","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"execute_withdrawal","docs":["Execute a withdrawal by keepers.","","# Accounts","*[See the documentation for the accounts.](ExecuteWithdrawal)*","","# Arguments","- `execution_fee`: The execution fee to be paid to the keeper for executing the withdrawal.","- `throw_on_execution_error`: If true, throws an error if execution fails. If false, the","withdrawal will be cancelled instead.","","# Errors","This instruction will fail if:","- The [`authority`](ExecuteWithdrawal::authority) is not a signer or is not an ORDER_KEEPER","in the store.","- The [`store`](ExecuteWithdrawal::store) is not properly initialized.","- The [`token_map`](ExecuteWithdrawal::token_map) is not initialized or not authorized by","the store.","- The [`oracle`](ExecuteWithdrawal::oracle) is not initialized, cleared and owned by the","store.","- The [`market`](ExecuteWithdrawal::market) is not initialized, is disabled, not owned by","the store, or does not match the market recorded in the `withdrawal`.","- The [`withdrawal`](ExecuteWithdrawal::withdrawal) is not initialized, not owned by the","store, or not in the pending state.","- Any token mint accounts do not match those recorded in the `withdrawal`.","- Any escrow accounts are not properly initialized or not owned by the `withdrawal`.","- Any vault accounts are not valid market vaults or do not correspond to the final tokens.","- Any feed accounts in the remaining accounts are invalid or do not match the swap parameters.","- Any market accounts in the remaining accounts are disabled, not owned by the store, or do","not match the swap parameters.","- Any oracle prices from the feed accounts are incomplete or invalid.","- The execution fails and `throw_on_execution_error` is set to true."],"discriminator":[113,121,203,232,137,139,248,249],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["token_map","oracle","market"]},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"oracle","docs":["Oracle buffer to use."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"withdrawal","docs":["The withdrawal to execute."],"writable":true},{"name":"market_token","docs":["Market token."],"writable":true},{"name":"final_long_token","docs":["Final long token."]},{"name":"final_short_token","docs":["Final short token."]},{"name":"market_token_escrow","docs":["The escrow account for receving market tokens to burn."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_long_token_escrow","docs":["The escrow account for receiving withdrawed final long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"final_short_token_escrow","docs":["The escrow account for receiving withdrawed final short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"withdrawal"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"final_short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"market_token_vault","docs":["Market token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"market_token_vault.mint","account":"TokenAccount"}]}},{"name":"final_long_token_vault","docs":["Final long token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_long_token_vault.mint","account":"TokenAccount"}]}},{"name":"final_short_token_vault","docs":["Final short token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"final_short_token_vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"execution_fee","type":"u64"},{"name":"throw_on_execution_error","type":"bool"}]},{"name":"get_market_status","docs":["Calculate the current market status.","","This instruction calculates and returns the current status of a market, including metrics like","pool value, PnL, and other key indicators. The calculation can be configured to maximize or","minimize certain values based on the provided flags.","","# Accounts","[*See the documentation for the accounts.*](ReadMarket)","","# Arguments","- `prices`: The current unit prices of tokens in the market, used for calculations.","- `maximize_pnl`: If true, uses the maximum possible PnL values in calculations.","If false, uses minimum PnL values.","- `maximize_pool_value`: If true, uses the maximum possible pool value in calculations.","If false, uses minimum pool value.","","# Errors","- The [`market`](ReadMarket::market) account must be properly initialized.","- The provided prices must be non-zero.","- Any calculation errors."],"discriminator":[51,68,212,8,4,23,221,91],"accounts":[{"name":"market","docs":["Market."]}],"args":[{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":"u128"}]}}},{"name":"maximize_pnl","type":"bool"},{"name":"maximize_pool_value","type":"bool"}],"returns":{"defined":{"name":"MarketStatus"}}},{"name":"get_market_token_price","docs":["Get the current market token price based on the provided token prices and PnL factor.","","This instruction calculates and returns the current price of the market token, taking into","account the provided token prices and PnL factor. The calculation can be configured to","maximize certain values based on the provided flag.","","# Accounts","[*See the documentation for the accounts.*](ReadMarketWithToken)","","# Arguments","- `prices`: The current unit prices of tokens in the market, used for calculations.","- `pnl_factor`: The PnL factor key to use for price calculations, must be a valid","[`PnlFactorKind`](gmsol_model::PnlFactorKind).","- `maximize`: If true, uses the maximum possible values in calculations.","If false, uses minimum values.","","# Errors","- The [`market`](ReadMarketWithToken::market) must be an initialized market account.","- The provided prices must be non-zero.","- The `pnl_factor` must be a valid [`PnlFactorKind`](gmsol_model::PnlFactorKind).","- Any calculation errors."],"discriminator":[60,217,40,2,12,236,254,199],"accounts":[{"name":"market","docs":["Market."]},{"name":"market_token","docs":["Market token."]}],"args":[{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":"u128"}]}}},{"name":"pnl_factor","type":"string"},{"name":"maximize","type":"bool"}],"returns":"u128"},{"name":"grant_role","docs":["Grant a role to the given user in the given store.","","This instruction grants a role to a user in the store's role configuration. If the user already","has the role, this instruction has no effect.","","# Accounts","*[See the documentation for the accounts.](GrantRole).*","","# Arguments","- `user`: The address of the user to whom the role should be granted.","- `role`: The name of the role to be granted. Must be an enabled role in the store.","","# Errors","- The [`authority`](GrantRole::authority) must be a signer and be the `ADMIN` of the store.","- The [`store`](GrantRole::store) must be an initialized store account owned by the store program.","- The `role` must exist and be enabled in the store's role table."],"discriminator":[218,234,128,15,82,33,236,253],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account to which the new role is to be granted."],"writable":true}],"args":[{"name":"user","type":"pubkey"},{"name":"role","type":"string"}]},{"name":"gt_set_exchange_time_window","docs":["Set GT exchange time window (in seconds).","","# Accounts","*[See the documentation for the accounts.](ConfigurateGt)*","","# Arguments","- `window`: The time window in seconds for one GT exchange period.","","# Errors","- The [`authority`](ConfigurateGt::authority) must be a signer and have the GT_CONTROLLER role in the `store`.","- The [`store`](ConfigurateGt::store) must be properly initialized.","- The GT state of the `store` must be initialized.","- The `window` must be greater than 0 seconds to ensure a valid exchange period."],"discriminator":[148,155,45,52,154,67,248,129],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"window","type":"u32"}]},{"name":"gt_set_order_fee_discount_factors","docs":["Set order fee discount factors.","","# Accounts","*[See the documentation for the accounts.](ConfigurateGt)*","","# Arguments","- `factors`: The order fee discount factors for each user rank.","","# Errors","- The [`authority`](ConfigurateGt::authority) must be a signer and have the MARKET_KEEPER role in the `store`.","- The [`store`](ConfigurateGt::store) must be initialized.","- The GT state of the `store` must be initialized.","- The number of `factors` must match the number of ranks defined in GT state.","- Each factor must be less than or equal to [`MARKET_USD_UNIT`](crate::constants::MARKET_USD_UNIT)(i.e., 100%)."],"discriminator":[234,198,196,44,93,2,1,150],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"factors","type":{"vec":"u128"}}]},{"name":"gt_set_referral_reward_factors","docs":["Set referral reward factors.","","# Accounts","*[See the documentation for the accounts.](ConfigurateGt)*","","# Arguments","- `factors`: The referral reward factors for each user rank.","","# Errors","- The [`authority`](ConfigurateGt::authority) must be a signer and a","GT_CONTROLLER in the store.","- The [`store`](ConfigurateGt::store) must be initialized.","- The GT state of the `store` must be initialized.","- The number of `factors` must match the number of ranks defined in GT state.","- Each factor must be less than or equal to [`MARKET_USD_UNIT`](crate::constants::MARKET_USD_UNIT)(i.e., 100%)."],"discriminator":[165,230,7,217,91,156,185,64],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"factors","type":{"vec":"u128"}}]},{"name":"has_admin","docs":["Return whether the given address is the administrator of the given store.","","This instruction checks if the provided address has administrator privileges for the given store","and returns a boolean result.","","# Accounts","*[See the documentation for the accounts.](HasRole).*","","# Arguments","- `authority`: The address to check for administrator privileges.","","# Returns","Returns `true` if the address is the administrator, `false` otherwise.","","# Errors","- The [`store`](HasRole::store) must be an initialized store account owned by","the store program."],"discriminator":[254,220,34,140,38,82,235,42],"accounts":[{"name":"store","docs":["The store account in which the role is defined."]}],"args":[{"name":"authority","type":"pubkey"}],"returns":"bool"},{"name":"has_role","docs":["Return whether the given address has the given role in the given store.","","This instruction checks if the provided address has the specified role in the given store","and returns a boolean result.","","# Accounts","*[See the documentation for the accounts.](HasRole).*","","# Arguments","- `authority`: The address to check for role membership.","- `role`: The name of the role to check for the authority.","","# Returns","Returns `true` if the address has the specified role, `false` otherwise.","","# Errors","- The [`store`](HasRole::store) must be an initialized store account owned by","the store program.","- The `role` must exist and be enabled in the store's role configuration."],"discriminator":[218,136,44,87,142,247,141,195],"accounts":[{"name":"store","docs":["The store account in which the role is defined."]}],"args":[{"name":"authority","type":"pubkey"},{"name":"role","type":"string"}],"returns":"bool"},{"name":"initialize","docs":["Create a new [`Store`](states::Store) account.","","# Accounts","*[See the documentation for the accounts.](Initialize).*","","# Arguments","- `key`: The name of the store, used as a seed to derive the store account's address.","The length must not exceed [`MAX_LEN`](states::Store::MAX_LEN).","","# Errors","- The `key` must be empty unless the `multi-store` feature is enabled","- The [`payer`](Initialize::payer) must be a signer","- The [`authority`](Initialize::authority) must be as signer if it is provided.","- The [`receiver`](Initialize::receiver) must be as signer if it is provided.","- The [`holding`](Initialize::holding) must be as signer if it is provided.","- The [`store`](Initialize::store) must not be initialized","- The [`store`](Initialize::store) address must match the PDA derived from","the seed of [`Store`](states::Store) and the SHA-256 hash of `key`"],"discriminator":[175,175,109,31,13,152,155,237],"accounts":[{"name":"payer","docs":["The payer for the rent-exempt fee of the [`Store`] Account."],"writable":true,"signer":true},{"name":"authority","docs":["The authority of the the [`Store`] account.","","If it is not specified, the `payer` will be set as the authority of this [`Store`] Account."],"signer":true,"optional":true},{"name":"receiver","docs":["The receiver address of the the [`Store`] account.","","Defaults to the authority address."],"signer":true,"optional":true},{"name":"holding","docs":["The holding address.","","Defaults to the authority address."],"signer":true,"optional":true},{"name":"store","docs":["The account to be used for creating the [`Store`] Account.","Its address is a PDA derived from a constant [`SEED`](Store::SEED)","and a hashed key as the seeds."],"writable":true},{"name":"system_program","docs":["The [`System`] program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"key","type":"string"}]},{"name":"initialize_glv","docs":["Initialize a GLV token and the corresponding GLV account.","","# Accounts","*[See the documentation for the accounts.](InitializeGlv)*","","# Arguments","- `index`: The index of the GLV. Used to derive the GLV token address.","- `length`: The number of markets to include in the GLV.","","# Errors","- The [`authority`](InitializeGlv::authority) must be a signer and have","MARKET_KEEPER role in the store.","- The [`store`](InitializeGlv::store) must be properly initialized.","- The [`glv_token`](InitializeGlv::glv_token) must be:","- Uninitialized","- Address must be PDA derived from [`GLV_TOKEN_SEED`](crate::states::Glv::GLV_TOKEN_SEED),","[`store`] and `index`","- The [`glv`](InitializeGlv::glv) must be:","- Uninitialized","- Address must be PDA derived from the SEED of [`Glv`](states::Glv) and the address of the","[`glv_token`](InitializeGlv::glv_token)","- The remaining required accounts are documented in [`InitializeGlv`].","- The `length` must be:","- Greater than 0","- Less than or equal to [`Glv::MAX_ALLOWED_NUMBER_OF_MARKETS`](crate::states::Glv::MAX_ALLOWED_NUMBER_OF_MARKETS)"],"discriminator":[175,40,40,75,146,192,27,112],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"glv_token","docs":["Glv token."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,118,95,116,111,107,101,110]},{"kind":"account","path":"store"},{"kind":"arg","path":"index"}]}},{"name":"glv","docs":["Glv account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,118]},{"kind":"account","path":"glv_token"}]}},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{"name":"market_token_program"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"index","type":"u16"},{"name":"length","type":"u16"}]},{"name":"initialize_gt","docs":["Initialize GT Mint.","","# Accounts","*[See the documentation for the accounts.](InitializeGt)*","","# Arguments","- `decimals`: The number of decimal places for the GT token.","- `initial_minting_cost`: The initial cost for minting GT.","- `grow_factor`: The multiplier that increases minting cost for each step.","- `grow_step`: The step size (in GT amount) for minting cost increase.","- `ranks`: Array of GT token thresholds that define user rank boundaries.","","# Errors","- The [`authority`](InitializeGt::authority) must be a signer and have the MARKET_KEEPER role in the `store`.","- The [`store`](InitializeGt::store) must be properly initialized.","- The GT state must not already be initialized.","- The arguments must be valid. See `init` method of [`GtState`](states::gt::GtState) for detailed validation logic."],"discriminator":[208,0,173,158,133,227,247,47],"accounts":[{"name":"authority","docs":["Authority"],"writable":true,"signer":true},{"name":"store","docs":["Store."],"writable":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"decimals","type":"u8"},{"name":"initial_minting_cost","type":"u128"},{"name":"grow_factor","type":"u128"},{"name":"grow_step","type":"u64"},{"name":"ranks","type":{"vec":"u64"}}]},{"name":"initialize_market","docs":["Initialize a [`Market`](states::Market) account.","","# Accounts","[*See the documentation for the accounts.*](InitializeMarket)","","# Arguments","- `index_token_mint`: The address of the index token.","- `name`: The name of the market.","- `enable`: Whether to enable the market after initialization.","","# Errors","- The [`authority`](InitializeMarket::authority) must be a signer and have the MARKET_KEEPER role","in the store.","- The [`store`](InitializeMarket::store) must be initialized.","- The [`market_token_mint`](InitializeMarket::market_token_mint) must be uninitialized","and a PDA derived from the expected seeds.","- The [`market`](InitializeMarket::market) must be uninitialized and a PDA derived from","the expected seeds (see the documentation for [`market`](InitializeMarket::market) for details).","- The [`token_map`](InitializeMarket::token_map) must be initialized and must be owned and","authorized by the `store`.","- The [`long_token_vault`](InitializeMarket::long_token_vault) and","[`short_token_vault`](InitializeMarket::short_token_vault) must be initialized","and valid market vault accounts of the store for their respective tokens.","- The long and short token mints must be valid Mint accounts."],"discriminator":[35,35,189,193,155,48,170,203],"accounts":[{"name":"authority","docs":["The address authorized to execute this instruction."],"writable":true,"signer":true},{"name":"store","docs":["The store account."],"relations":["token_map"]},{"name":"market_token_mint","docs":["Market token mint."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,116,111,107,101,110,95,109,105,110,116]},{"kind":"account","path":"store"},{"kind":"arg","path":"index_token_mint"},{"kind":"account","path":"long_token_mint"},{"kind":"account","path":"short_token_mint"}]}},{"name":"long_token_mint","docs":["Long token."]},{"name":"short_token_mint","docs":["Short token."]},{"name":"market","docs":["The market account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116]},{"kind":"account","path":"store"},{"kind":"account","path":"market_token_mint"}]}},{"name":"token_map","docs":["The token map account."],"relations":["store"]},{"name":"long_token_vault","docs":["Long token vault must exist."],"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"long_token_mint"}]}},{"name":"short_token_vault","docs":["Short token vault must exist."],"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"short_token_mint"}]}},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"index_token_mint","type":"pubkey"},{"name":"name","type":"string"},{"name":"enable","type":"bool"}]},{"name":"initialize_market_config_buffer","docs":["Initialize a market config buffer account.","","This instruction creates a new market config buffer account that can be used to stage market","configuration changes before applying them. The buffer has an expiration time after which","it cannot be used.","","# Accounts","[*See the documentation for the accounts.*](InitializeMarketConfigBuffer)","","# Arguments","- `expire_after_secs`: The number of seconds after which this buffer account will expire.","Once expired, the buffer can no longer be used and must be closed.","","# Errors","- The [`authority`](InitializeMarketConfigBuffer::authority) must be a signer and will be","set as the owner of the buffer account.","- The [`store`](InitializeMarketConfigBuffer::store) must be an initialized store account","owned by the program.","- The [`buffer`](InitializeMarketConfigBuffer::buffer) must be an uninitialized account","that will store the market configuration data.","- The expiration time must be greater than zero."],"discriminator":[146,13,232,205,56,48,11,48],"accounts":[{"name":"authority","docs":["The caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"buffer","docs":["Buffer account to create."],"writable":true,"signer":true},{"name":"system_program","docs":["System Program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"expire_after_secs","type":"u32"}]},{"name":"initialize_market_vault","docs":["Initialize a new market vault for a specific token.","","This instruction creates a new vault account that will be used to store tokens for a market.","The vault is a PDA (Program Derived Address) account that can only be controlled by this program.","","# Accounts","[*See the documentation for the accounts.*](InitializeMarketVault)","","# Errors","- The [`authority`](InitializeMarketVault::authority) must be a signer and have MARKET_KEEPER","permissions in the store.","- The [`store`](InitializeMarketVault::store) must be an initialized store account.","- The [`vault`](InitializeMarketVault::vault) must be an uninitialized account and its address","must match the PDA derived from the expected seeds."],"discriminator":[25,102,203,119,151,20,143,222],"accounts":[{"name":"authority","docs":["The caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"mint","docs":["Token mint."]},{"name":"vault","docs":["The vault to create."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"mint"}]}},{"name":"system_program","docs":["System Program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["Token Program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[]},{"name":"initialize_oracle","docs":["Initialize a new oracle account for the given store.","","This instruction creates a new oracle account that will be owned by the store. The oracle","account is used to store price data for tokens configured in the store's token map.","","# Accounts","*[See the documentation for the accounts.](InitializeOracle)*","","# Errors","- The [`store`](InitializeOracle::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`oracle`](InitializeOracle::oracle) account must be uninitialized."],"discriminator":[144,223,131,120,196,253,181,99],"accounts":[{"name":"payer","docs":["The payer."],"signer":true},{"name":"authority","docs":["The authority of the oracle."]},{"name":"store","docs":["The store account that will be the owner of the oracle account."]},{"name":"oracle","docs":["The new oracle account."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[]},{"name":"initialize_price_feed","docs":["Initialize a custom price feed account.","","Creates a new price feed account that can be used to provide custom price data for a token.","The price feed is owned by the store and can only be updated by ORDER_KEEPERs.","","# Accounts","*[See the documentation for the accounts.](InitializePriceFeed)*","","# Arguments","- `index`: The oracle index this price feed will be associated with.","- `provider`: The price provider kind index that will be used for this feed. Must be a valid","index from [`PriceProviderKind`] that supports custom price feeds.","- `token`: The mint address of the token this price feed will provide prices for.","- `feed_id`: The feed ID defined by the price provider.","","# Errors","- The [`authority`](InitializePriceFeed::authority) must be a signer and have the PRICE_KEEPER","role in the store.","- The [`store`](InitializePriceFeed::store) must be an initialized store account owned by","the store program.","- The [`price_feed`](InitializePriceFeed::price_feed) must be uninitialized and its address","must match the PDA derived from the `store`, `index`, `feed_id`, and other expected seeds.","- The `provider` index must correspond to a valid [`PriceProviderKind`] that supports","custom price feeds."],"discriminator":[68,180,81,20,102,213,145,233],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"price_feed","docs":["Price feed."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"index","type":"u16"},{"name":"provider","type":"u8"},{"name":"token","type":"pubkey"},{"name":"feed_id","type":"pubkey"}]},{"name":"initialize_referral_code","docs":["Initialize referral code.","","# Accounts","*[See the documentation for the accounts.](InitializeReferralCode)*","","# Arguments","- `code`: The referral code to initialize and associate with the user.","","# Errors","- The [`owner`](InitializeReferralCode::owner) must be a signer.","- The [`store`](InitializeReferralCode::store) must be properly initialized.","- The [`referral_code`](InitializeReferralCode::referral_code) account must be uninitialized.","- The [`user`](InitializeReferralCode::user) account must be:","- Properly initialized","- Correspond to the `owner`","- Not already have an associated referral code","- The provided `code` must not already be in use by another user."],"discriminator":[79,123,26,247,241,74,176,20],"accounts":[{"name":"owner","docs":["Owner."],"writable":true,"signer":true,"relations":["user"]},{"name":"store","docs":["Store."],"relations":["user"]},{"name":"referral_code","docs":["Referral Code Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[114,101,102,101,114,114,97,108,95,99,111,100,101]},{"kind":"account","path":"store"},{"kind":"arg","path":"code"}]}},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"code","type":{"array":["u8",8]}}]},{"name":"initialize_token_map","docs":["Initialize a new token map account with its store set to [`store`](InitializeTokenMap::store).","","Anyone can initialize a token map account without any permissions, but after initialization, only","addresses authorized by the store can modify this token map (i.e. have the `MARKET_KEEPER` role).","","# Accounts","*[See the documentation for the accounts.](InitializeTokenMap)*","","# Errors","- The [`payer`](InitializeTokenMap::payer) must be a signer.","- The [`store`](InitializeTokenMap::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`token_map`](InitializeTokenMap::token_map) must be an uninitialized account."],"discriminator":[28,80,213,31,142,225,116,117],"accounts":[{"name":"payer","docs":["The payer."],"writable":true,"signer":true},{"name":"store","docs":["The store account for the token map."]},{"name":"token_map","docs":["The token map account to be initialized."],"writable":true,"signer":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[]},{"name":"insert_address","docs":["Insert an address value into the store's global configuration.","","This instruction allows a CONFIG_KEEPER to set or update an address value in the store's","configuration. The key must be one of the predefined address keys.","","# Accounts","*[See the documentation for the accounts.](InsertConfig).*","","# Arguments","- `key`: The configuration key to update. Must be a valid address key defined in","[`AddressKey`](crate::states::AddressKey).","- `address`: The address value to store for this configuration key.","","# Errors","- The [`authority`](InsertConfig::authority) must be a signer and have the CONFIG_KEEPER role","in the store.","- The provided `key` must be defined in [`AddressKey`](crate::states::AddressKey).","- The store must be initialized and owned by this program."],"discriminator":[119,10,254,2,233,216,218,152],"accounts":[{"name":"authority","docs":["Caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"key","type":"string"},{"name":"address","type":"pubkey"}]},{"name":"insert_amount","docs":["Insert an amount value into the store's global configuration.","","This instruction allows a CONFIG_KEEPER to set or update an amount value in the store's","configuration. The key must be one of the predefined amount keys.","","# Accounts","*[See the documentation for the accounts.](InsertConfig).*","","# Arguments","- `key`: The configuration key to update. Must be a valid amount key defined in","[`AmountKey`](crate::states::AmountKey).","- `amount`: The amount value to store for this configuration key.","","# Errors","- The [`authority`](InsertConfig::authority) must be a signer and have the CONFIG_KEEPER role","in the store.","- The provided `key` must be defined in [`AmountKey`](crate::states::AmountKey).","- The store must be initialized and owned by this program."],"discriminator":[56,254,136,216,68,134,2,144],"accounts":[{"name":"authority","docs":["Caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"key","type":"string"},{"name":"amount","type":"u64"}]},{"name":"insert_factor","docs":["Insert a factor value into the store's global configuration.","This instruction allows a CONFIG_KEEPER to set or update a factor value in the store's","configuration. The key must be one of the predefined factor keys.","","# Accounts","*[See the documentation for the accounts.](InsertConfig).*","","# Arguments","- `key`: The configuration key to update. Must be a valid factor key defined in","[`FactorKey`](crate::states::FactorKey).","- `factor`: The factor value to store for this configuration key.","","# Errors","- The [`authority`](InsertConfig::authority) must be a signer and have the CONFIG_KEEPER role","in the store.","- The provided `key` must be defined in [`FactorKey`](crate::states::FactorKey).","- The store must be initialized and owned by this program."],"discriminator":[56,41,238,140,172,21,108,230],"accounts":[{"name":"authority","docs":["Caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"key","type":"string"},{"name":"factor","type":"u128"}]},{"name":"insert_glv_market","docs":["Insert a new market to the GLV.","","# Accounts","*[See the documentation for the accounts.](InsertGlvMarket)*","","# Errors","- The [`authority`](InsertGlvMarket::authority) must be:","- A signer","- Have MARKET_KEEPER role in the `store`","- The [`store`](InsertGlvMarket::store) must be properly initialized.","- The [`glv`](InsertGlvMarket::glv) must be:","- Properly initialized","- Owned by the `store`","- The [`market_token`](InsertGlvMarket::market_token) must be:","- A initialized SPL Token / Token-2022 mint","- Have `store` as its mint authority","- Not already contains in the given GLV","- The [`market`](InsertGlvMarket::market) must be:","- A initialized market account owned by the `store`","- Must have `market_token` as its market token","- Must have the same long token and short token as the GLV","- Must be enabled","- The [`vault`](InsertGlvMarket::vault) must be either:","- The ATA of `market_token` owned by `glv`, or","- Unintialized ATA account of `market_token` owned by `glv`"],"discriminator":[31,15,125,218,90,89,81,75],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"relations":["glv","market"]},{"name":"glv","docs":["GLV to modify."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"market","docs":["Market."]},{"name":"vault","docs":["Vault."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"account","path":"token_program"},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["System program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["Token program for market token."]},{"name":"associated_token_program","docs":["Associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[]},{"name":"insert_order_fee_discount_for_referred_user","docs":["Insert order fee discount for referred user factor to the global config.","","This instruction allows a MARKET_KEEPER to set or update the GT minting cost referred","discount factor in the store's configuration. This factor determines the discount","applied to GT minting costs for referred users.","","# Accounts","*[See the documentation for the accounts.](InsertConfig).*","","# Arguments","- `factor`: The discount factor value to set.","","# Errors","- The [`authority`](InsertConfig::authority) must be a signer and have the","MARKET_KEEPER role in the store.","- The store must be initialized and owned by this program.","","# Notes","- While [`insert_factor`] can also modify this value, it requires CONFIG_KEEPER","permissions instead of MARKET_KEEPER permissions required by this instruction.","- The factor is stored under the [`FactorKey::OrderFeeDiscountForReferredUser`] key."],"discriminator":[54,88,208,238,242,83,99,66],"accounts":[{"name":"authority","docs":["Caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"factor","type":"u128"}]},{"name":"is_token_config_enabled","docs":["Return whether the token config is enabled.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","","# Returns","Returns `true` if the token config is enabled, `false` otherwise."],"discriminator":[150,121,104,152,174,109,137,136],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"}],"returns":"bool"},{"name":"liquidate","docs":["Perform a liquidation by keepers.","","# Accounts","*[See the documentation for the accounts.](PositionCut)*","","# Arguments","- `nonce`: The nonce used to derive the `order` PDA address.","- `recent_timestamp`: A recent timestamp that must be within the valid time window.","- `execution_fee`: The execution fee claimed to be used by the keeper.","","# Errors","- The [`authority`](PositionCut::authority) must be a signer with the ORDER_KEEPER","role in the `store`.","- The [`owner`](PositionCut::owner) must be the owner of the position being liquidated.","- The [`user`](PositionCut::user) must be an initialized user account corresponding to the","`owner`.","- The [`store`](PositionCut::store) must be initialized.","- The [`token_map`](PositionCut::token_map) must be initialized and authorized by the","`store`.","- The [`oracle`](PositionCut::oracle) must be initialized, cleared and owned by the `store`.","- The [`market`](PositionCut::market) must be:","- Initialized and enabled","- Owned by the `store`","- Associated with the position being liquidated","- The [`order`](PositionCut::order) must be:","- Uninitialized","- Have an address matching the PDA derived from the `store`, `owner`, provided","`nonce` and other expected seeds","- The [`position`](PositionCut::position) must be:","- Validly initialized","- Owned by both the `owner` and `store`","- In a liquidatable state","- The [`event`](PositionCut::event) must be a valid trade event buffer owned by both the","`store` and `authority`.","- The [`long_token`](PositionCut::long_token) and [`short_token`](PositionCut::short_token)","must match those defined in the `market`.","- Token escrow accounts must be:","- Valid for their respective tokens","- Owned by the `order`","- Market vault accounts must be:","- Valid market vault accounts for their respective tokens","- Owned by the `store`","- Claimable token accounts must be:","- Valid for their respective tokens","- Owned by the `store`","- Properly delegated to their owners","- Price feed accounts must be:","- Valid and complete","- Provided in order matching the market's sorted token list","- The liquidation feature must be enabled in the `store`.","- Oracle prices must be valid and complete."],"discriminator":[223,179,226,125,48,46,39,74],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true,"relations":["event"]},{"name":"owner","docs":["The owner of the position."],"writable":true,"relations":["user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"store","docs":["Store."],"writable":true,"relations":["user","token_map","oracle","market","event"]},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"oracle","docs":["Buffer for oracle prices."],"writable":true},{"name":"market","docs":["Market."],"writable":true},{"name":"order","docs":["The order to be created."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[111,114,100,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"authority"},{"kind":"arg","path":"nonce"}]}},{"name":"position","writable":true},{"name":"event","docs":["Trade event buffer."],"writable":true},{"name":"long_token","docs":["Long token."]},{"name":"short_token","docs":["Short token."]},{"name":"long_token_escrow","docs":["The escrow account for long tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"long_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"short_token_escrow","docs":["The escrow account for short tokens."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"order"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"short_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"long_token_vault","docs":["Long token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"long_token_vault.mint","account":"TokenAccount"}]}},{"name":"short_token_vault","docs":["Short token vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"short_token_vault.mint","account":"TokenAccount"}]}},{"name":"claimable_long_token_account_for_user","writable":true},{"name":"claimable_short_token_account_for_user","writable":true},{"name":"claimable_pnl_token_account_for_holding","writable":true},{"name":"system_program","docs":["Initial collatearl token vault.","The system program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The token program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["The associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"nonce","type":{"array":["u8",32]}},{"name":"recent_timestamp","type":"i64"},{"name":"execution_fee","type":"u64"}]},{"name":"market_transfer_in","docs":["Transfer tokens into the market and record the amounts in its balance.","","This instruction allows a MARKET_KEEPER to transfer tokens from a source account into one of","the market vault accounts, updating the market's internal balance tracking.","","# Accounts","[*See the documentation for the accounts.*](MarketTransferIn)","","# Arguments","- `amount`: The amount of tokens to transfer into the market vault.","","# Errors","- The [`authority`](MarketTransferIn::authority) must be a signer and have the MARKET_KEEPER","role in the store.","- The [`store`](MarketTransferIn::store) must be an initialized store account owned by this program.","- The [`from_authority`](MarketTransferIn::from_authority) must be a signer and have the","permission to transfer.","- The [`market`](MarketTransferIn::market) must be an initialized market account owned by the store.","- The [`from`](MarketTransferIn::from) must be an initialized token account and cannot be the","same as the destination vault.","- The [`vault`](MarketTransferIn::vault) must be an initialized and valid market vault token","account owned by the store. It must have the same mint as the `from` token account.","- The market must be enabled and the token being transferred must be one of the market's","configured pool tokens (long token or short token).","- The source token account must have sufficient balance for the transfer amount."],"discriminator":[177,41,34,195,160,64,216,147],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"from_authority","docs":["The authority of the source account."],"signer":true},{"name":"market","docs":["Market."],"writable":true},{"name":"from","docs":["The source account."],"writable":true},{"name":"vault","docs":["The market vault."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,107,101,116,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"vault.mint","account":"TokenAccount"}]}},{"name":"token_program","docs":["Token Program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"amount","type":"u64"}]},{"name":"migrate_referral_code","discriminator":[32,248,199,115,236,124,65,140],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"system","docs":["System program."],"address":"11111111111111111111111111111111"}],"args":[]},{"name":"prepare_associated_token_account","docs":["Prepare an associated token account.","","# Accounts","*[See the documentation for the accounts.](PrepareAssociatedTokenAccount)*","","# Errors","- The [`payer`](PrepareAssociatedTokenAccount::payer) must be a signer.","- The [`mint`](PrepareAssociatedTokenAccount::mint) must be a [`Mint`](anchor_spl::token_interface::Mint)","account that is owned by the given token program.","- The [`account`](PrepareAssociatedTokenAccount::account) must be an associated token account","with:","- mint = [`mint`](PrepareAssociatedTokenAccount::mint)","- owner = [`owner`](PrepareAssociatedTokenAccount::owner)","- It can be uninitialized."],"discriminator":[28,102,183,89,155,198,28,0],"accounts":[{"name":"payer","docs":["The payer."],"writable":true,"signer":true},{"name":"owner"},{"name":"mint","docs":["The mint account for the token account."]},{"name":"account","docs":["The token account to prepare."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"owner"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"mint"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"system_program","docs":["The [`System`] program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["The [`Token`] program."]},{"name":"associated_token_program","docs":["The [`AssociatedToken`] program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[]},{"name":"prepare_gt_exchange_vault","docs":["Prepare a GT exchange vault.","","# Accounts","*[See the documentation for the accounts.](PrepareGtExchangeVault)*","","# Arguments","- `time_window_index`: The index of the current time window.","- `time_window`: The current GT exchange time window in seconds.","","# Errors","- The [`payer`](PrepareGtExchangeVault::payer) must be a signer.","- The [`store`](PrepareGtExchangeVault::store) must be properly initialized.","- The GT state of the `store` must be initialized.","- The [`vault`](PrepareGtExchangeVault::vault) must be either:","- Uninitialized, or","- Properly initialized, owned by the `store`, and have matching `time_window_index`","and `time_window` values","- The provided `time_window_index` must match the current time window index."],"discriminator":[18,155,190,88,59,109,0,253],"accounts":[{"name":"payer","writable":true,"signer":true},{"name":"store"},{"name":"vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,116,95,101,120,99,104,97,110,103,101,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"arg","path":"time_window_index"},{"kind":"account","path":"store"}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"time_window_index","type":"i64"}]},{"name":"prepare_position","docs":["Prepare the position account for orders.","","# Accounts","*[See the documentation for the accounts.](PreparePosition)*","","# Arguments","- `params`: Order Parameters.","","# Errors","This instruction will fail if:","- The [`owner`](PreparePosition::owner) is not a signer or has insufficient balance for the","rent.","- The [`store`](PreparePosition::store) is not properly initialized.","- The [`market`](PreparePosition::market) is not initialized, is disabled, or not owned by","the `store`.","- The [`position`](PreparePosition::position) address is not a valid PDA derived from the","`owner` and expected seeds.","- The position account is neither uninitialized nor validly initialized with `store` as the","store and `owner` as the owner."],"discriminator":[178,215,55,90,137,15,108,15],"accounts":[{"name":"owner","docs":["The owner of the order to be created."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."]},{"name":"position","docs":["The position."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"params","type":{"defined":{"name":"CreateOrderParams"}}}]},{"name":"prepare_trade_event_buffer","docs":["Prepare a trade event buffer.","","# Accounts","*[See the documentation for the accounts.](PrepareTradeEventBuffer)*","","# Arguments","- `index`: The index of the trade event buffer to prepare.","","# Errors","- The [`authority`](PrepareTradeEventBuffer::authority) must be a signer.","- The [`store`](PrepareTradeEventBuffer::store) must be initialized.","- The [`event`](PrepareTradeEventBuffer::event) must be either:","- Uninitialized, or","- Already initialized with the `authority` as the authority and the `store` as","the store"],"discriminator":[142,10,203,67,106,166,50,135],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"event","docs":["Trade Event Buffer."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[116,114,97,100,101,95,101,118,101,110,116,95,100,97,116,97]},{"kind":"account","path":"store"},{"kind":"account","path":"authority"},{"kind":"arg","path":"index"}]}},{"name":"system_program","docs":["System Program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"index","type":"u16"}]},{"name":"prepare_user","docs":["Initialize or validate a User Account.","","# Accounts","*[See the documentation for the accounts.](PrepareUser)*","","# Errors","- The [`owner`](PrepareUser::owner) must be a signer.","- The [`store`](PrepareUser::store) must be properly initialized.","- The [`user`](PrepareUser::user) must be either:","- Uninitialized (for new account creation)","- Or validly initialized and correspond to the `owner`"],"discriminator":[190,173,143,193,139,80,231,133],"accounts":[{"name":"owner","docs":["Owner."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"push_to_market_config_buffer","docs":["Push config items to the given market config buffer account.","","This instruction allows the authority to add new configuration items to their market","config buffer account. The buffer will be reallocated to accommodate the new items,","with the authority paying for any additional rent.","","# Accounts","[*See the documentation for the accounts.*](PushToMarketConfigBuffer)","","# Arguments","- `new_configs`: The list of new config items to append to the buffer. Each item","consists of a string key and a factor value.","","# Errors","- The [`authority`](PushToMarketConfigBuffer::authority) must be a signer","and the owner of the `buffer` account.","- The [`buffer`](PushToMarketConfigBuffer::buffer) must be an initialized","market config buffer account.","- The authority must have enough SOL to pay for any additional rent needed.","- The keys in `new_configs` must be valid [`MarketConfigKey`](states::market::config::MarketConfigKey)."],"discriminator":[91,58,203,22,242,135,100,245],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true,"relations":["buffer"]},{"name":"buffer","docs":["Buffer."],"writable":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"new_configs","type":{"vec":{"defined":{"name":"EntryArgs"}}}}]},{"name":"push_to_token_map","docs":["Push a new token config to the given token map.","","This instruction is used to add or update the token config for an existing token.","The token's decimals will be automatically set based on the token mint account.","","# Accounts","[*See the documentation for the accounts*](PushToTokenMap).","","# Arguments","- `name`: The token identifier (e.g. \"WSOL\", \"WBTC\")","- `builder`: Configuration builder containing token parameters","- `enable`: If true, enables this token config after pushing. If false, disables it.","- `new`: If true, requires this to be a new token config. An error will be returned if","a config already exists for this token. If false, allows updating existing configs.","","# Errors","- The [`authority`](PushToTokenMap::authority) must be a signer with the MARKET_KEEPER role","- The [`store`](PushToTokenMap::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`token_map`](PushToTokenMap::token_map) must be initialized and owned by the `store`.","- The [`token`](PushToTokenMap::token) must be a valid SPL token mint account.","- If `new` is true, the token must not already have a config in the map."],"discriminator":[90,1,207,212,230,216,131,18],"accounts":[{"name":"authority","docs":["The authority of the instruction."],"writable":true,"signer":true},{"name":"store","docs":["The store that owns the token map."],"relations":["token_map"]},{"name":"token_map","docs":["The token map to push config to."],"writable":true},{"name":"token","docs":["The token to push config for."]},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"name","type":"string"},{"name":"builder","type":{"defined":{"name":"UpdateTokenConfigParams"}}},{"name":"enable","type":"bool"},{"name":"new","type":"bool"}]},{"name":"push_to_token_map_synthetic","docs":["Push a new synthetic token config to the given token map.","","This instruction allows adding or updating token configurations for synthetic tokens that don't have","an actual SPL token mint account. Unlike regular tokens where decimals are read from the mint,","synthetic tokens specify their decimals directly through the `token_decimals` parameter.","","# Accounts","[*See the documentation for the accounts*](PushToTokenMapSynthetic).","","# Arguments","- `name`: The identifier for the synthetic token (e.g. \"BTC\")","- `token`: The public key to use as the synthetic token's address","- `token_decimals`: Number of decimals for the synthetic token's amounts","- `builder`: Configuration builder containing token parameters","- `enable`: If true, enables this token config after pushing. If false, disables it.","- `new`: If true, requires this to be a new token config. An error will be returned if","a config already exists for this token. If false, allows updating the existing config.","","# Errors","- The [`authority`](PushToTokenMapSynthetic::authority) must be a signer with the MARKET_KEEPER role.","- The [`store`](PushToTokenMapSynthetic::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`token_map`](PushToTokenMapSynthetic::token_map) must be initialized and owned by the `store`.","- If updating an existing config, the `token_decimals` must match the original value.","- If `new` is true, the token must not already have a config in the map."],"discriminator":[157,152,190,7,162,194,61,237],"accounts":[{"name":"authority","docs":["The authority of the instruction."],"writable":true,"signer":true},{"name":"store","docs":["The store that owns the token map."],"relations":["token_map"]},{"name":"token_map","docs":["The token map to push config to."],"writable":true},{"name":"system_program","docs":["The system program."],"address":"11111111111111111111111111111111"}],"args":[{"name":"name","type":"string"},{"name":"token","type":"pubkey"},{"name":"token_decimals","type":"u8"},{"name":"builder","type":{"defined":{"name":"UpdateTokenConfigParams"}}},{"name":"enable","type":"bool"},{"name":"new","type":"bool"}]},{"name":"remove_glv_market","docs":["Remove a market from the GLV.","","# Accounts","*[See the documentation for the accounts.](RemoveGlvMarket)*","","# Errors","- The [`authority`](RemoveGlvMarket::authority) must:","- Be a signer","- Have MARKET_KEEPER role in the `store`","- The [`store`](RemoveGlvMarket::store) must be properly initialized.","- The [`glv`](RemoveGlvMarket::glv) must be:","- Properly initialized","- Owned by the `store`","- The [`market_token`](RemoveGlvMarket::market_token) must be:","- A initialized SPL Token mint","- Having `store` as its mint authority","- Contained in the given GLV","- Having deposit disabled in the GLV","- The [`vault`](RemoveGlvMarket::vault) must be:","- The ATA of `market_token` owned by `glv`","- Having no remaining balance"],"discriminator":[179,99,98,104,139,13,225,231],"accounts":[{"name":"authority","docs":["Authority."],"writable":true,"signer":true},{"name":"store","docs":["Store."],"relations":["glv"]},{"name":"store_wallet","docs":["The store wallet."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[115,116,111,114,101,95,119,97,108,108,101,116]},{"kind":"account","path":"store"}]}},{"name":"glv","docs":["GLV to modify."],"writable":true},{"name":"market_token","docs":["Market token."]},{"name":"vault","docs":["Vault."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"glv"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"store_wallet_ata","docs":["Store wallet ATA."],"writable":true,"pda":{"seeds":[{"kind":"account","path":"store_wallet"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"market_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"token_program","docs":["Token program."]},{"name":"associated_token_program","docs":["Associated token program."],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"system_program","docs":["System program."],"address":"11111111111111111111111111111111"}],"args":[]},{"name":"request_gt_exchange","docs":["Request a GT exchange.","","# Accounts","*[See the documentation for the accounts.](RequestGtExchange)*","","# Arguments","- `amount`: The amount of GT to exchange for rewards.","","# Errors","- The [`owner`](RequestGtExchange::owner) must be a signer.","- The [`store`](RequestGtExchange::store) must be properly initialized with an initialized GT state.","- The [`user`](RequestGtExchange::user) must be properly initialized and correspond to the `owner`.","- The [`vault`](RequestGtExchange::vault) must be properly initialized, owned by the `store`,","and currently accepting deposits (not yet confirmed).","- The [`exchange`](RequestGtExchange::exchange) must be either:","- Uninitialized, or","- Properly initialized and owned by both the `owner` and `vault`","- The `amount` must be:","- Greater than 0","- Not exceed the owner's available (excluding reserved) GT balance in their user account"],"discriminator":[117,72,255,69,200,107,238,88],"accounts":[{"name":"owner","writable":true,"signer":true,"relations":["user"]},{"name":"store","writable":true,"relations":["user","vault"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,116,95,101,120,99,104,97,110,103,101,95,118,97,117,108,116]},{"kind":"account","path":"store"},{"kind":"account","path":"vault"},{"kind":"account","path":"vault"}]}},{"name":"exchange","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,116,95,101,120,99,104,97,110,103,101]},{"kind":"account","path":"vault"},{"kind":"account","path":"owner"}]}},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"event_authority","pda":{"seeds":[{"kind":"const","value":[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{"name":"program"}],"args":[{"name":"amount","type":"u64"}]},{"name":"revoke_role","docs":["Revoke a role from the given user in the given store.","","This instruction revokes a role from a user in the store's role configuration. If the user does","not have the role, this instruction has no effect.","","# Accounts","*[See the documentation for the accounts.](RevokeRole).*","","# Arguments","- `user`: The address of the user from whom the role should be revoked.","- `role`: The name of the role to be revoked.","","# Errors","- The [`authority`](RevokeRole::authority) must be a signer and be the `ADMIN` of the store.","- The [`store`](RevokeRole::store) must be an initialized store account owned by the store program.","- The `role` must exist in the store's role table.","- The `user` must exist in the store's member table."],"discriminator":[179,232,2,180,48,227,82,7],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account from which the new role is to be revoked."],"writable":true}],"args":[{"name":"user","type":"pubkey"},{"name":"role","type":"string"}]},{"name":"set_expected_provider","docs":["Set the expected provider for the given token.","","# Accounts","[*See the documentation for the accounts*](SetExpectedProvider).","","# Arguments","- `token`: The token whose config will be updated.","- `provider`: The provider index to be set as the expected provider","for the token. Must be a valid [`PriceProviderKind`] value.","","# Errors","- The [`authority`](SetExpectedProvider::authority) must be a signer","and have the MARKET_KEEPER role in the given store.","- The [`store`](SetExpectedProvider::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`token_map`](SetExpectedProvider::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","- The `provider` index must correspond to a valid [`PriceProviderKind`]."],"discriminator":[68,133,150,156,99,0,42,25],"accounts":[{"name":"authority","docs":["The authority of the instruction."],"signer":true},{"name":"store","docs":["The store that owns the token map."],"relations":["token_map"]},{"name":"token_map","docs":["The token map to update."],"writable":true}],"args":[{"name":"token","type":"pubkey"},{"name":"provider","type":"u8"}]},{"name":"set_feed_config","docs":["Set the feed config of the given provider for the given token.","","# Accounts","[*See the documentation for the accounts*](SetFeedConfig).","","# Arguments","- `token`: The token whose config will be updated.","- `provider`: The index of the provider whose feed config will be updated.","Must be a valid [`PriceProviderKind`] value.","- `feed`: The new feed address.","- `timestamp_adjustment`: The new timestamp adjustment in seconds.","","# Errors","- The [`authority`](SetFeedConfig::authority) must be a signer","and a MARKET_KEEPER in the given store.","- The [`store`](SetFeedConfig::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`token_map`](SetFeedConfig::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","- The `provider` index must correspond to a valid [`PriceProviderKind`]."],"discriminator":[154,210,174,54,7,47,57,18],"accounts":[{"name":"authority","docs":["The authority of the instruction."],"signer":true},{"name":"store","docs":["The store that owns the token map."],"relations":["token_map"]},{"name":"token_map","docs":["The token map to update."],"writable":true}],"args":[{"name":"token","type":"pubkey"},{"name":"provider","type":"u8"},{"name":"feed","type":"pubkey"},{"name":"timestamp_adjustment","type":"u32"}]},{"name":"set_market_config_buffer_authority","docs":["Transfer ownership of a market config buffer account to a new authority.","","This instruction allows the current authority to transfer ownership of the buffer","account to a new authority. After the transfer, only the new authority will be able","to modify or close the buffer.","","# Accounts","[*See the documentation for the accounts.*](SetMarketConfigBufferAuthority)","","# Arguments","- `new_authority`: The public key of the new authority that will own the buffer account.","","# Errors","- The [`authority`](SetMarketConfigBufferAuthority::authority) must be a signer","and the current owner of the `buffer` account.","- The [`buffer`](SetMarketConfigBufferAuthority::buffer) must be an initialized","market config buffer account.","- The `new_authority` cannot be the same as the current authority."],"discriminator":[113,56,17,219,126,137,28,83],"accounts":[{"name":"authority","docs":["The authority."],"writable":true,"signer":true,"relations":["buffer"]},{"name":"buffer","docs":["Buffer."],"writable":true}],"args":[{"name":"new_authority","type":"pubkey"}]},{"name":"set_prices_from_price_feed","docs":["Set prices from the provided price feeds.","","This instruction updates token prices in the oracle account using data from configured price feeds.","For each token provided, it reads the current price from the corresponding price feed account and","stores it in the oracle.","","# Accounts","*[See the documentation for the accounts.](SetPricesFromPriceFeed)*","","# Arguments","- `tokens`: The list of token mint addresses to update prices for. Each token must be configured","in the token map with a valid price feed.","","# Errors","- The [`authority`](SetPricesFromPriceFeed::authority) must be a signer and have the","ORACLE_CONTROLLER role in the given store. It must also be the authority of the `oracle`.","- The [`store`](SetPricesFromPriceFeed::store) must be an initialized store account owned by","the store program.","- The [`oracle`](SetPricesFromPriceFeed::oracle) must be an initialized oracle account owned","by the given store. It must not have any prices set and be in the cleared state.","- The [`token_map`](SetPricesFromPriceFeed::token_map) must be an initialized token map account","that is owned and authorized by the store.","- The number of tokens provided cannot exceed [`MAX_TOKENS`](crate::states::oracle::price_map::PriceMap::MAX_TOKENS).","- Each token in `tokens` must be configured and enabled in the token map.","- For each token, there must be a valid corresponding price feed account included in the remaining accounts."],"discriminator":[112,75,103,161,71,192,245,246],"accounts":[{"name":"authority","docs":["The caller."],"signer":true,"relations":["oracle"]},{"name":"store","docs":["Store."],"relations":["oracle","token_map"]},{"name":"oracle","docs":["Oracle."],"writable":true},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"}],"args":[{"name":"tokens","type":{"vec":"pubkey"}}]},{"name":"set_referrer","docs":["Set referrer.","","# Accounts","*[See the documentation for the accounts.](SetReferrer)*","","# Arguments","- `code`: The referral code of the referrer.","","# Errors","- The [`owner`](SetReferrer::owner) must be a signer.","- The [`store`](SetReferrer::store) must be properly initialized.","- The [`user`](SetReferrer::user) must be:","- Properly initialized","- Correspond to the `owner`","- Must not already have a referrer set","- The [`referral_code`](SetReferrer::referral_code) must be:","- Properly initialized","- Owned by the `store`","- Match the provided `code`","- Correspond to the `referrer_user`","- The [`referrer_user`](SetReferrer::referrer_user) must be:","- Properly initialized","- Different from the `user`","- Not have the `user` as their referrer (no circular references)"],"discriminator":[115,251,55,0,166,189,25,74],"accounts":[{"name":"owner","signer":true,"relations":["user"]},{"name":"store","relations":["user","referral_code","referrer_user"]},{"name":"user","docs":["User Account."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"referral_code","docs":["Referral Code Account."],"pda":{"seeds":[{"kind":"const","value":[114,101,102,101,114,114,97,108,95,99,111,100,101]},{"kind":"account","path":"store"},{"kind":"arg","path":"code"}]}},{"name":"referrer_user","docs":["Referrer."],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"referrer_user"}]}}],"args":[{"name":"code","type":{"array":["u8",8]}}]},{"name":"set_token_map","docs":["Set the token map address for the store.","","This instruction allows a MARKET_KEEPER to update which token map account the store uses.","The token map account contains token configurations and price feed configurations.","","We say the token map is *authorized by the store* if the token map address of the store is","the same as the address of the token map account.","","# Accounts","*[See the documentation for the accounts.](SetTokenMap).*","","# Errors","- The [`authority`](SetTokenMap::authority) must be a signer and have the MARKET_KEEPER","role in the store.","- The [`store`](SetTokenMap::store) must be an initialized store account owned by the","store program.","- The [`token_map`](SetTokenMap::token_map) must be an initialized token map account","and owned by the given store.","- The new token map address cannot be the same as the current one."],"discriminator":[45,60,238,74,66,250,250,67],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["Store."],"writable":true,"relations":["token_map"]},{"name":"token_map","docs":["Token map to use."]}],"args":[]},{"name":"toggle_feature","docs":["Enable or disable a feature in this deployment.","","This instruction allows a FEATURE_KEEPER to toggle specific features on or off by providing","a domain and action combination. Features are used to control which functionality is available","in this deployment.","","# Accounts","*[See the documentation for the accounts.](ToggleFeature).*","","# Arguments","- `domain`: The domain part of the feature flag, must be a valid domain defined in","[`DomainDisabledFlag`](crate::states::feature::DomainDisabledFlag).","- `action`: The action part of the feature flag, must be a valid action defined in","[`ActionDisabledFlag`](crate::states::feature::ActionDisabledFlag).","- `enable`: If true, enables the feature. If false, disables it.","","# Errors","- The [`authority`](ToggleFeature::authority) must be a signer and have the","FEATURE_KEEPER role in the store.","- The `domain` must be a valid domain defined in [`DomainDisabledFlag`](crate::states::feature::DomainDisabledFlag).","- The `action` must be a valid action defined in [`ActionDisabledFlag`](crate::states::feature::ActionDisabledFlag).","","# Warnings","Although we currently do not provide a feature to disable swaps (only a feature to disable swap orders),","if we were to introduce such a feature, we must be aware that the following operations could still potentially","result in swaps:","- (GLV) Deposits","- (GLV) Withdrawals","- Swap Orders","- Increase Orders","- Decrease Orders","","Therefore, to ensure that this feature effectively prevents swaps from occurring, we need to add","validation of the swap parameters before executing all of these actions to ensure that swaps do not happen."],"discriminator":[207,110,186,36,165,235,150,105],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"writable":true}],"args":[{"name":"domain","type":"string"},{"name":"action","type":"string"},{"name":"enable","type":"bool"}]},{"name":"toggle_glv_market_flag","docs":["Toggle the given flag of a market in the given GLV.","","# Accounts","*[See the documentation for the accounts.](UpdateGlvMarketConfig)*","","# Arguments","- `flag`: The flag to toggle.","- `enable`: The value to toggle to.","","# Errors","- The [`authority`](UpdateGlvMarketConfig::authority) must be:","- A signer","- Have MARKET_KEEPER role in the `store`","- The [`store`](UpdateGlvMarketConfig::store) must be properly initialized.","- The [`glv`](UpdateGlvMarketConfig::glv) must be:","- Properly initialized","- Owned by the `store`","- Have the market token in its list of market tokens","- The [`market_token`](UpdateGlvMarketConfig::market_token) must be:","- Properly initialized","- Owned by the `store`","- `flag` must be defined in [`GlvMarketFlag`](crate::states::glv::GlvMarketFlag)."],"discriminator":[223,156,69,160,7,197,9,234],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["glv"]},{"name":"glv","docs":["GLV."],"writable":true},{"name":"market_token","docs":["Market token."]}],"args":[{"name":"flag","type":"string"},{"name":"enable","type":"bool"}]},{"name":"toggle_gt_minting","docs":["Enable or disable GT minting for the given market.","","This instruction allows a MARKET_KEEPER to control whether GT minting is enabled for the","given market. When disabled, users cannot mint new GT tokens through this market.","","# Accounts","[*See the documentation for the accounts.*](ToggleGTMinting)","","# Arguments","- `enable`: Whether to enable (`true`) or disable (`false`) GT minting for the given market.","","# Errors","- The [`authority`](ToggleGTMinting::authority) must be a signer and be a MARKET_KEEPER","in the store.","- The [`store`](ToggleGTMinting::store) must be an initialized store account.","- The [`market`](ToggleGTMinting::market) must be an initialized market account and owned","by the store."],"discriminator":[117,30,81,109,66,100,230,75],"accounts":[{"name":"authority","docs":["The caller."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true}],"args":[{"name":"enable","type":"bool"}]},{"name":"toggle_market","docs":["Enable or disable the given market.","","This instruction allows a MARKET_KEEPER to toggle whether a market is enabled or disabled.","","# Accounts","[*See the documentation for the accounts.*](ToggleMarket)","","# Arguments","- `enable`: Whether to enable (`true`) or disable (`false`) the market.","","# Errors","- The [`authority`](ToggleMarket::authority) must be a signer and have the MARKET_KEEPER","role in the store.","- The [`store`](ToggleMarket::store) must be initialized and owned by this program.","- The [`market`](ToggleMarket::market) must be initialized and owned by the store."],"discriminator":[185,244,78,180,171,226,75,210],"accounts":[{"name":"authority","docs":["The caller."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true}],"args":[{"name":"enable","type":"bool"}]},{"name":"toggle_token_config","docs":["Enable or disable the config for the given token.","","# Accounts","[*See the documentation for the accounts*](ToggleTokenConfig).","","# Arguments","- `token`: The token whose config will be updated.","- `enable`: Enable or disable the config.","","# Errors","- The [`authority`](ToggleTokenConfig::authority) must be a signer","and a MARKET_KEEPER in the given store.","- The [`store`](ToggleTokenConfig::store) must be an initialized [`Store`](states::Store)","account owned by the store program .","- The [`token_map`](ToggleTokenConfig::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map."],"discriminator":[70,151,161,131,178,81,114,51],"accounts":[{"name":"authority","docs":["The authority of the instruction."],"signer":true},{"name":"store","docs":["The store that owns the token map."],"relations":["token_map"]},{"name":"token_map","docs":["The token map to update."],"writable":true}],"args":[{"name":"token","type":"pubkey"},{"name":"enable","type":"bool"}]},{"name":"token_decimals","docs":["Get the decimals of the token.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the store program.","- The given `token` must exist in the token map.","","# Returns","Returns the configured number of decimals for the given token."],"discriminator":[167,171,85,147,131,122,3,161],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"}],"returns":"u8"},{"name":"token_expected_provider","docs":["Get the expected provider of the given token.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","","# Returns","Returns the expected provider kind as a u8 index. See [`PriceProviderKind`] for valid indices."],"discriminator":[17,189,13,24,175,140,220,70],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"}],"returns":"u8"},{"name":"token_feed","docs":["Get the configured feed of the given token for the provider.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","- `provider`: The index of provider to query for. Must be a valid index defined in","[`PriceProviderKind`].","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","- The `provider` must be a valid index defined in [`PriceProviderKind`], otherwise","returns [`CoreError::InvalidProviderKindIndex`].","","# Returns","Returns the configured feed address for the given token and provider."],"discriminator":[178,76,209,235,176,9,216,71],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"},{"name":"provider","type":"u8"}],"returns":"pubkey"},{"name":"token_name","docs":["Get the name of the token.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the store program.","- The given `token` must exist in the token map.","","# Returns","Returns the configured name string for the given token."],"discriminator":[60,216,194,86,103,127,130,237],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"}],"returns":"string"},{"name":"token_precision","docs":["Get the price precision of the token.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the store program.","- The given `token` must exist in the token map.","","# Returns","Returns the configured price precision for the given token."],"discriminator":[133,90,219,89,70,161,16,153],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"}],"returns":"u8"},{"name":"token_timestamp_adjustment","docs":["Get the configured timestamp adjustment of the given token for the provider.","","# Accounts","[*See the documentation for the accounts*](ReadTokenMap).","","# Arguments","- `token`: The address of the token to query for.","- `provider`: The index of provider to query for. Must be a valid index defined in","[`PriceProviderKind`].","","# Errors","- The [`token_map`](ReadTokenMap::token_map) must be an initialized token map account","owned by the `store`.","- The given `token` must exist in the token map.","- The `provider` must be a valid index defined in [`PriceProviderKind`], otherwise","returns [`CoreError::InvalidProviderKindIndex`].","","# Returns","Returns the configured timestamp adjustment for the given token and provider."],"discriminator":[167,181,240,191,105,0,107,172],"accounts":[{"name":"token_map","docs":["Token map."]}],"args":[{"name":"token","type":"pubkey"},{"name":"provider","type":"u8"}],"returns":"u32"},{"name":"transfer_receiver","docs":["Request to transfer the receiver address to a new one.","# Note","This instruction only sets `next_receiver`. Use [`accept_receiver`] to","complete the transfer.","","# Accounts","*[See the documentation for the accounts.](TransferReceiver).*","","# Errors","- The [`authority`](TransferReceiver::authority) must be a signer and the current receiver","of the given store.","- The [`store`](TransferReceiver::store) must be an initialized store account owned by","the store program.","- The new [`next_receiver`](TransferReceiver::next_receiver) account provided cannot be the same as","the current `next_receiver`."],"discriminator":[198,147,229,126,135,119,134,77],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account whose receiver is to be transferred."],"writable":true},{"name":"next_receiver","docs":["The new receiver."]}],"args":[]},{"name":"transfer_referral_code","docs":["Transfer referral code.","","# Accounts","*[See the documentation for the accounts.](TransferReferralCode)*","","# Errors","- The [`owner`](TransferReferralCode::owner) must be a signer.","- The [`store`](TransferReferralCode::store) must be properly initialized.","- The [`user`](TransferReferralCode::user) account must be:","- Properly initialized","- Correspond to the `owner`","- Different from the [`receiver_user`](TransferReferralCode::receiver_user)","- The [`referral_code`](TransferReferralCode::referral_code) account must be:","- Properly initialized","- Owned by the `store`","- Correspond to the `owner`","- The [`receiver_user`](TransferReferralCode::receiver_user) account must be:","- Properly initialized","- Not have an associated referral code"],"discriminator":[249,29,27,219,157,16,30,35],"accounts":[{"name":"owner","signer":true,"relations":["user"]},{"name":"store","relations":["user","referral_code","receiver_user"]},{"name":"user","docs":["User Account."],"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"owner"}]}},{"name":"referral_code","docs":["Referral Code Account."],"writable":true},{"name":"receiver_user","docs":["Receiver."],"pda":{"seeds":[{"kind":"const","value":[117,115,101,114]},{"kind":"account","path":"store"},{"kind":"account","path":"receiver_user"}]}}],"args":[]},{"name":"transfer_store_authority","docs":["Request to transfer the authority (admin) of the given store to a new address.","# Note","This instruction only sets `next_authority`. Use [`accept_store_authority`] to","complete the transfer.","","# Accounts","*[See the documentation for the accounts.](TransferStoreAuthority).*","","# Errors","- The [`authority`](TransferStoreAuthority::authority) must be a signer and the current","admin of the store.","- The [`store`](TransferStoreAuthority::store) must be an initialized store account","owned by the store program.","- The [`next_authority`](TransferStoreAuthority::next_authority) cannot be the same as","current `next_authority`."],"discriminator":[184,159,201,3,112,253,7,215],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account whose authority is to be transferred."],"writable":true},{"name":"next_authority","docs":["Next authority address."]}],"args":[]},{"name":"update_adl_state","docs":["Update the ADL (Auto-Deleveraging) state for the market.","","# Accounts","*[See the documentation for the accounts.](UpdateAdlState)*","","# Arguments","- `is_long`: Whether to update the ADL state for the long (`true`) or short (`false`) side","of the market.","","# Errors","- The [`authority`](UpdateAdlState::authority) must be a signer and have the ORDER_KEEPER","role in the store.","- The [`store`](UpdateAdlState::store) must be an initialized [`Store`](states::Store)","account owned by the store program.","- The [`oracle`](UpdateAdlState::oracle) must be an initialized [`Oracle`](states::Oracle)","account that is owned by the store.","- The [`market`](UpdateAdlState::market) must be enabled and owned by the store.","- Price feed accounts must be valid and provided in the market's sorted token list order."],"discriminator":[12,45,19,113,13,43,203,232],"accounts":[{"name":"authority","docs":["The address authorized to execute this instruction."],"signer":true},{"name":"store","docs":["The store that owns the market."],"relations":["token_map","oracle","market"]},{"name":"token_map","docs":["Token map."],"relations":["store"]},{"name":"oracle","docs":["The oracle buffer to use."],"writable":true},{"name":"market","docs":["The market to update the ADL state."],"writable":true},{"name":"chainlink_program","docs":["Chainlink Program."],"optional":true,"address":"HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"}],"args":[{"name":"is_long","type":"bool"}]},{"name":"update_glv_config","docs":["Update GLV config.","","# Accounts","*[See the documentation for the accounts.](UpdateGlvConfig)*","","# Arguments","- `params`: The update of the config.","","# Errors","- The [`authority`](UpdateGlvConfig::authority) must be:","- A signer","- Have MARKET_KEEPER role in the `store`","- The [`store`](UpdateGlvConfig::store) must be properly initialized.","- The [`glv`](UpdateGlvConfig::glv) must be:","- Properly initialized","- Owned by the `store`","- The `params` must not non-empty."],"discriminator":[0,248,95,167,0,115,252,252],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["glv"]},{"name":"glv","docs":["GLV to update."],"writable":true}],"args":[{"name":"params","type":{"defined":{"name":"UpdateGlvParams"}}}]},{"name":"update_glv_market_config","docs":["Update the config of a market in the given GLV.","","# Accounts","*[See the documentation for the accounts.](UpdateGlvMarketConfig)*","","# Arguments","- `max_amount`: The maximum amount of the market token that can be stored in the GLV.","- `max_value`: The maximum value of the market token that can be stored in the GLV.","","# Errors","- The [`authority`](UpdateGlvMarketConfig::authority) must be:","- A signer","- Have MARKET_KEEPER role in the `store`","- The [`store`](UpdateGlvMarketConfig::store) must be properly initialized.","- The [`glv`](UpdateGlvMarketConfig::glv) must be:","- Properly initialized","- Owned by the `store`","- Have the market token in its list of market tokens","- The [`market_token`](UpdateGlvMarketConfig::market_token) must be:","- Properly initialized","- Owned by the `store`","- At least one of `max_amount` or `max_value` must be provided"],"discriminator":[57,244,68,250,222,31,209,198],"accounts":[{"name":"authority","docs":["Authority."],"signer":true},{"name":"store","docs":["Store."],"relations":["glv"]},{"name":"glv","docs":["GLV."],"writable":true},{"name":"market_token","docs":["Market token."]}],"args":[{"name":"max_amount","type":{"option":"u64"}},{"name":"max_value","type":{"option":"u128"}}]},{"name":"update_last_restarted_slot","docs":["Update last restarted slot.","","# Accounts","*[See the documentation for the accounts.](UpdateLastRestartedSlot).*","","# Errors","- The [`authority`](UpdateLastRestartedSlot::authority) must be a signer and the current","admin of the store.","- The [`store`](UpdateLastRestartedSlot::store) must be an initialized store account","owned by the store program."],"discriminator":[119,200,55,6,123,88,74,247],"accounts":[{"name":"authority","docs":["The caller of this instruction."],"signer":true},{"name":"store","docs":["The store account whose authority is to be transferred."],"writable":true}],"args":[]},{"name":"update_market_config","docs":["Update an item in the market config.","","This instruction allows a MARKET_KEEPER to update a single configuration value in the market's","configuration. The key must be one of the predefined market config keys.","","# Accounts","[*See the documentation for the accounts.*](UpdateMarketConfig)","","# Arguments","- `key`: The configuration key to update. Must be a valid key defined in","[`MarketConfigKey`](states::market::config::MarketConfigKey).","- `value`: The new value to set for this configuration key.","","# Errors","- The [`authority`](UpdateMarketConfig::authority) must be a signer and have the MARKET_KEEPER","role in the store.","- The [`store`](UpdateMarketConfig::store) must be an initialized store account owned by this program.","- The [`market`](UpdateMarketConfig::market) must be an initialized market account owned by the store.","- The provided `key` must be defined in [`MarketConfigKey`](states::market::config::MarketConfigKey)."],"discriminator":[91,87,149,101,110,116,16,120],"accounts":[{"name":"authority","docs":["The caller."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true}],"args":[{"name":"key","type":"string"},{"name":"value","type":"u128"}]},{"name":"update_market_config_flag","docs":["Update a flag in the market config.","","This instruction allows a MARKET_KEEPER to update a single flag in the market's","configuration. The key must be one of the predefined market config flags.","","# Accounts","[*See the documentation for the accounts.*](UpdateMarketConfig)","","# Arguments","- `key`: The flag to update. Must be a valid key defined in","[`MarketConfigFlag`](states::market::config::MarketConfigFlag).","- `value`: The new boolean value to set for this flag.","","# Errors","- The [`authority`](UpdateMarketConfig::authority) must be a signer and have the MARKET_KEEPER","role in the store.","- The [`store`](UpdateMarketConfig::store) must be an initialized store account owned by this program.","- The [`market`](UpdateMarketConfig::market) must be an initialized market account owned by the store.","- The provided `key` must be defined in [`MarketConfigFlag`](states::market::config::MarketConfigFlag)."],"discriminator":[34,138,223,216,120,146,126,151],"accounts":[{"name":"authority","docs":["The caller."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true}],"args":[{"name":"key","type":"string"},{"name":"value","type":"bool"}]},{"name":"update_market_config_with_buffer","docs":["Update the market configuration using a pre-populated","[`MarketConfigBuffer`](crate::states::market::config::MarketConfigBuffer) account.","","This instruction allows a MARKET_KEEPER to update multiple market configuration values at once","by applying the changes stored in a buffer account. The buffer must contain valid configuration","keys and values.","","# Accounts","[*See the documentation for the accounts.*](UpdateMarketConfigWithBuffer)","","# Errors","- The [`authority`](UpdateMarketConfigWithBuffer::authority) must be a signer and have the","MARKET_KEEPER role in the store.","- The [`store`](UpdateMarketConfigWithBuffer::store) must be an initialized store account","owned by this program.","- The [`market`](UpdateMarketConfigWithBuffer::market) must be an initialized market account","owned by the store.","- The [`buffer`](UpdateMarketConfigWithBuffer::buffer) must be:","- An initialized market config buffer account","- Owned by both the store and the authority","- Not expired","- All configuration keys in the buffer must be valid keys defined in","[`MarketConfigKey`](states::market::config::MarketConfigKey)."],"discriminator":[62,102,20,4,35,174,195,46],"accounts":[{"name":"authority","docs":["The caller."],"signer":true,"relations":["buffer"]},{"name":"store","docs":["Store."],"relations":["market","buffer"]},{"name":"market","docs":["Market."],"writable":true},{"name":"buffer","docs":["The buffer to use."],"writable":true}],"args":[]},{"name":"update_order","docs":["Update an order by the owner.","","# Accounts","*[See the documentation for the accounts.](UpdateOrder)*","","# Arguments","- `params`: Update Order Parameters.","","# Errors","- The [`owner`](UpdateOrder::owner) must be a signer and the owner of the `order`.","- The [`store`](UpdateOrder::store) must be initialized.","- The [`market`](UpdateOrder::market) must be initialized, enabled and owned by the `store`.","- The [`order`](UpdateOrder::order) must be:","- Initialized and owned by both the `store` and the `owner`","- Associated with the provided `market`","- In a pending state","- The order type must support updates","- The feature must be enabled in the `store` for updating the given kind of `order`.","- The updated parameters must be valid for the order type."],"discriminator":[54,8,208,207,34,134,239,168],"accounts":[{"name":"owner","docs":["Owner."],"signer":true},{"name":"store","docs":["Store."],"relations":["market"]},{"name":"market","docs":["Market."],"writable":true},{"name":"order","docs":["Order to update."],"writable":true}],"args":[{"name":"params","type":{"defined":{"name":"UpdateOrderParams"}}}]},{"name":"update_price_feed_with_chainlink","docs":["Updates the price data in a custom price feed account using a signed price report from","Chainlink Data Streams. The price feed must be configured to use the Chainlink Data Streams","provider.","","# Accounts","*[See the documentation for the accounts.](UpdatePriceFeedWithChainlink)*","","# Arguments","- `signed_report`: A signed price report from Chainlink Data Streams containing the price data.","","# Errors","- The [`authority`](UpdatePriceFeedWithChainlink::authority) must be a signer and have the","PRICE_KEEPER role in the store.","- The [`store`](UpdatePriceFeedWithChainlink::store) must be an initialized store account","- The [`verifier_account`](UpdatePriceFeedWithChainlink::verifier_account) must be a valid","Chainlink verifier account.","- The [`price_feed`](UpdatePriceFeedWithChainlink::price_feed) must be initialized, owned by","the store, and authorized for the `authority`.","- The [`chainlink`](UpdatePriceFeedWithChainlink::chainlink) program ID must be trusted in the","definition of the [`ChainlinkDataStreamsInterface`](gmsol_chainlink_datastreams::interface::ChainlinkDataStreamsInterface).","- The price feed must be configured to use [`ChainlinkDataStreams`](PriceProviderKind::ChainlinkDataStreams)","as its provider.","- The `signed_report` must be:","- Decodable as a valid Chainlink price report","- Verifiable by the Chainlink Verifier Program","- Contain valid data for creating a [`PriceFeedPrice`](states::oracle::PriceFeedPrice)","- The current slot and timestamp must be >= the feed's last update.","- The price data timestamp must be >= the feed's last price timestamp","- The price data must meet all validity requirements (see the `update` method of [`PriceFeed`](states::oracle::PriceFeed))."],"discriminator":[204,69,132,33,153,43,6,148],"accounts":[{"name":"authority","docs":["Authority."],"signer":true,"relations":["price_feed"]},{"name":"store","docs":["Store."],"relations":["price_feed"]},{"name":"verifier_account","docs":["Verifier Account."]},{"name":"access_controller","docs":["Access Controller Account."]},{"name":"config_account","docs":["Config Account."]},{"name":"price_feed","docs":["Price Feed Account."],"writable":true},{"name":"chainlink","docs":["Chainlink Data Streams Program."]}],"args":[{"name":"compressed_report","type":"bytes"}]},{"name":"use_claimable_account","docs":["Prepare a claimable account to receive tokens during order execution.","","This instruction serves two purposes:","1. For uninitialized accounts: Creates and prepares the account to receive tokens","2. For initialized accounts: Unlocks the funds for the owner to claim","","# Accounts","[*See the documentation for the accounts.*](UseClaimableAccount)","","# Arguments","- `timestamp`: The timestamp for which the claimable account was created.","- `amount`: The token amount to approve for delegation.","","# Errors","- The [`authority`](UseClaimableAccount::authority) must be a signer and have ORDER_KEEPER","permissions in the store.","- The [`store`](UseClaimableAccount::store) must be an initialized store account.","- The [`account`](UseClaimableAccount::account) must be a PDA derived from","the time window of the `timestamp` and other expected seeds. It can be uninitialized.","- If the `account` is initialized, it must be owned by the store."],"discriminator":[135,173,217,216,193,37,115,159],"accounts":[{"name":"authority","docs":["The caller."],"writable":true,"signer":true},{"name":"store","docs":["Store."]},{"name":"mint","docs":["Mint."]},{"name":"owner","docs":["Owner."]},{"name":"account","docs":["The claimble account."],"writable":true},{"name":"system_program","docs":["System Program."],"address":"11111111111111111111111111111111"},{"name":"token_program","docs":["Token Program."],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"timestamp","type":"i64"},{"name":"amount","type":"u64"}]}],"accounts":[{"name":"Deposit","discriminator":[148,146,121,66,207,173,21,227]},{"name":"Glv","discriminator":[136,174,157,179,203,155,156,243]},{"name":"GlvDeposit","discriminator":[254,77,169,195,125,218,207,221]},{"name":"GlvShift","discriminator":[247,113,121,71,227,143,116,143]},{"name":"GlvWithdrawal","discriminator":[253,149,26,103,16,11,232,200]},{"name":"GtExchange","discriminator":[59,99,208,22,219,145,65,199]},{"name":"GtExchangeVault","discriminator":[123,227,174,214,16,219,214,148]},{"name":"Market","discriminator":[219,190,213,55,0,227,198,154]},{"name":"MarketConfigBuffer","discriminator":[169,176,190,184,140,168,106,160]},{"name":"Oracle","discriminator":[139,194,131,179,140,179,229,244]},{"name":"Order","discriminator":[134,173,223,185,77,86,28,51]},{"name":"Position","discriminator":[170,188,143,228,122,64,247,208]},{"name":"PriceFeed","discriminator":[189,103,252,23,152,35,243,156]},{"name":"ReferralCodeV2","discriminator":[46,159,206,18,84,48,60,0]},{"name":"Shift","discriminator":[16,43,39,90,253,173,56,13]},{"name":"Store","discriminator":[130,48,247,244,182,191,30,26]},{"name":"TokenMapHeader","discriminator":[107,43,27,24,245,62,145,126]},{"name":"TradeData","discriminator":[226,22,163,52,243,223,187,74]},{"name":"UserHeader","discriminator":[12,78,211,244,225,77,209,249]},{"name":"Withdrawal","discriminator":[10,45,211,182,129,235,90,82]}],"events":[{"name":"BorrowingFeesUpdated","discriminator":[92,12,91,206,45,216,237,151]},{"name":"DepositCreated","discriminator":[146,225,181,133,194,173,54,71]},{"name":"DepositExecuted","discriminator":[129,128,106,77,252,43,165,41]},{"name":"DepositRemoved","discriminator":[63,54,232,201,34,238,123,9]},{"name":"GlvDepositRemoved","discriminator":[208,162,246,217,191,14,14,36]},{"name":"GlvPricing","discriminator":[184,66,14,201,36,6,242,164]},{"name":"GlvWithdrawalRemoved","discriminator":[152,149,83,212,221,225,72,207]},{"name":"GtUpdated","discriminator":[133,199,242,15,218,161,244,21]},{"name":"MarketFeesUpdated","discriminator":[176,15,125,161,171,212,247,28]},{"name":"MarketStateUpdated","discriminator":[213,205,40,245,113,230,58,18]},{"name":"OrderCreated","discriminator":[224,1,229,63,254,60,190,159]},{"name":"OrderRemoved","discriminator":[84,155,121,142,240,235,144,23]},{"name":"PositionDecreased","discriminator":[251,151,37,204,127,87,115,232]},{"name":"PositionIncreased","discriminator":[73,58,247,181,100,237,249,81]},{"name":"ShiftRemoved","discriminator":[126,134,137,211,214,131,121,188]},{"name":"SwapExecuted","discriminator":[150,166,26,225,28,89,38,79]},{"name":"TradeEvent","discriminator":[189,219,127,211,78,230,97,238]},{"name":"WithdrawalCreated","discriminator":[44,134,48,39,144,53,244,77]},{"name":"WithdrawalExecuted","discriminator":[37,78,199,192,51,68,173,162]},{"name":"WithdrawalRemoved","discriminator":[87,152,166,67,16,233,27,56]}],"errors":[{"code":6000,"name":"NonDefaultStore","msg":"non-default store is not allowed"},{"code":6001,"name":"Internal","msg":"internal error"},{"code":6002,"name":"Unimplemented"},{"code":6003,"name":"NotAnAdmin","msg":"not an admin"},{"code":6004,"name":"PermissionDenied","msg":"permission denied"},{"code":6005,"name":"FeatureDisabled","msg":"feature disabled"},{"code":6006,"name":"Model","msg":"model"},{"code":6007,"name":"InvalidArgument","msg":"invalid argument"},{"code":6008,"name":"PreconditionsAreNotMet","msg":"preconditions are not met"},{"code":6009,"name":"NotFound","msg":"not found"},{"code":6010,"name":"ExceedMaxLengthLimit","msg":"exceed max length limit"},{"code":6011,"name":"NotEnoughSpace","msg":"not enough space"},{"code":6012,"name":"TokenAmountOverflow","msg":"token amount overflow"},{"code":6013,"name":"ValueOverflow","msg":"value overflow"},{"code":6014,"name":"UnknownActionState","msg":"unknown action state"},{"code":6015,"name":"LoadAccountError","msg":"load zero-copy account error"},{"code":6016,"name":"TokenAccountNotProvided","msg":"required token account is not provided"},{"code":6017,"name":"TokenMintNotProvided","msg":"required token mint is not provided"},{"code":6018,"name":"TokenDecimalsMismatched","msg":"token decimals mismatched"},{"code":6019,"name":"MarketAccountIsNotProvided","msg":"market account is not provided"},{"code":6020,"name":"StoreMismatched","msg":"store mismatched"},{"code":6021,"name":"OwnerMismatched","msg":"owner mismatched"},{"code":6022,"name":"ReceiverMismatched","msg":"receiver mismatched"},{"code":6023,"name":"RentReceiverMismatched","msg":"rent receiver mismatched"},{"code":6024,"name":"MarketMismatched","msg":"market mismatched"},{"code":6025,"name":"MarketTokenMintMismatched","msg":"market token mint mismatched"},{"code":6026,"name":"MintAccountNotProvided","msg":"mint account not provided"},{"code":6027,"name":"MarketTokenAccountMismatched","msg":"market token account mismatched"},{"code":6028,"name":"TokenMintMismatched","msg":"token mint mismatched"},{"code":6029,"name":"TokenAccountMismatched","msg":"token account mismatched"},{"code":6030,"name":"NotAnATA","msg":"not an ATA for the given token"},{"code":6031,"name":"NotEnoughTokenAmount","msg":"not enough token amount"},{"code":6032,"name":"TokenAmountExceedsLimit","msg":"token amount exceeds limit"},{"code":6033,"name":"UnknownToken","msg":"unknown token"},{"code":6034,"name":"NotEnoughExecutionFee","msg":"not enough execution fee"},{"code":6035,"name":"InvalidSwapPathLength","msg":"invalid swap path length"},{"code":6036,"name":"NotEnoughSwapMarkets","msg":"not enough swap markets in the path"},{"code":6037,"name":"InvalidSwapPath","msg":"invalid swap path"},{"code":6038,"name":"InsufficientOutputAmount","msg":"insufficient output amounts"},{"code":6039,"name":"StoreOutdated","msg":"store outdated"},{"code":6040,"name":"InvalidStoreConfigKey","msg":"invalid store config key"},{"code":6041,"name":"InvalidProviderKindIndex","msg":"invalid provider kind index"},{"code":6042,"name":"ChainlinkProgramIsRequired","msg":"chainlink program is required"},{"code":6043,"name":"NotSupportedCustomPriceProvider","msg":"this price provider is not supported to be used with custom price feed"},{"code":6044,"name":"NotEnoughTokenFeeds","msg":"not enough token feeds"},{"code":6045,"name":"OracleTimestampsAreLargerThanRequired","msg":"oracle timestamps are larger than required"},{"code":6046,"name":"OracleTimestampsAreSmallerThanRequired","msg":"oracle timestamps are smaller than required"},{"code":6047,"name":"InvalidOracleTimestampsRange","msg":"invalid oracle timestamps range"},{"code":6048,"name":"MaxOracleTimestampsRangeExceeded","msg":"max oracle timestamps range exceeded"},{"code":6049,"name":"OracleNotUpdated","msg":"oracle not updated"},{"code":6050,"name":"MaxPriceAgeExceeded","msg":"max price age exceeded"},{"code":6051,"name":"MaxPriceTimestampExceeded"},{"code":6052,"name":"NegativePriceIsNotSupported","msg":"negative price is not supported"},{"code":6053,"name":"InvalidOracleSlot","msg":"invalid oracle slot"},{"code":6054,"name":"MissingOraclePrice","msg":"missing oracle price"},{"code":6055,"name":"InvalidPriceFeedPrice","msg":"invalid price feed price"},{"code":6056,"name":"PriceOverflow","msg":"price overflow"},{"code":6057,"name":"InvalidPriceFeedAccount","msg":"invalid price feed account"},{"code":6058,"name":"PriceFeedNotUpdated","msg":"price feed is not updated"},{"code":6059,"name":"PricesAreAlreadySet","msg":"prices are already set"},{"code":6060,"name":"PriceIsAlreadySet","msg":"price is already set"},{"code":6061,"name":"TokenConfigDisabled","msg":"token config is disabled"},{"code":6062,"name":"SyntheticTokenPriceIsNotAllowed","msg":"synthetic token price is not allowed"},{"code":6063,"name":"InvalidPriceReport","msg":"invalid price report"},{"code":6064,"name":"MarketNotOpen","msg":"market is not open"},{"code":6065,"name":"EmptyDeposit","msg":"empty deposit"},{"code":6066,"name":"InvalidReceiverForFirstDeposit","msg":"invalid owner for the first deposit"},{"code":6067,"name":"NotEnoughMarketTokenAmountForFirstDeposit","msg":"not enough market token amount for the first deposit"},{"code":6068,"name":"NotEnoughGlvTokenAmountForFirstDeposit","msg":"not enough GLV token amount for the first deposit"},{"code":6069,"name":"EmptyWithdrawal","msg":"emtpy withdrawal"},{"code":6070,"name":"EmptyOrder","msg":"emtpy order"},{"code":6071,"name":"InvalidMinOutputAmount","msg":"invalid min output amount for limit swap order"},{"code":6072,"name":"InvalidTriggerPrice","msg":"invalid trigger price"},{"code":6073,"name":"InvalidPosition","msg":"invalid position"},{"code":6074,"name":"InvalidPositionKind","msg":"invalid position kind"},{"code":6075,"name":"PositionMismatched","msg":"position mismatched"},{"code":6076,"name":"PositionItNotRequired","msg":"position is not required"},{"code":6077,"name":"PositionIsRequired","msg":"position is required"},{"code":6078,"name":"OrderKindNotAllowed","msg":"the order kind is not allowed by this instruction"},{"code":6079,"name":"UnknownOrderKind","msg":"unknown order kind"},{"code":6080,"name":"UnknownOrderSide","msg":"unknown order side"},{"code":6081,"name":"UnknownDecreasePositionSwapType","msg":"unknown decrease position swap type"},{"code":6082,"name":"MissingInitialCollateralToken","msg":"missing initial collateral token"},{"code":6083,"name":"MissingFinalOutputToken","msg":"missing final output token"},{"code":6084,"name":"MissingPoolTokens","msg":"missing pool tokens"},{"code":6085,"name":"InvalidTradeID","msg":"invalid trade ID"},{"code":6086,"name":"InvalidTradeDeltaSize","msg":"invalid trade delta size"},{"code":6087,"name":"InvalidTradeDeltaTokens","msg":"invalid trade delta tokens"},{"code":6088,"name":"InvalidBorrowingFactor","msg":"invalid borrowing factor"},{"code":6089,"name":"InvalidFundingFactors","msg":"invalid funding factors"},{"code":6090,"name":"NoDelegatedAuthorityIsSet","msg":"no delegated authority is set"},{"code":6091,"name":"ClaimableCollateralForHoldingCannotBeInOutputTokens","msg":"claimable collateral for holding cannot be in output tokens"},{"code":6092,"name":"AdlNotEnabled","msg":"ADL is not enabled"},{"code":6093,"name":"AdlNotRequired","msg":"ADL is not required"},{"code":6094,"name":"InvalidAdl","msg":"invalid ADL"},{"code":6095,"name":"SameOutputTokensNotMerged","msg":"same output tokens not merged"},{"code":6096,"name":"EventBufferNotProvided","msg":"event buffer is not provided"},{"code":6097,"name":"EmptyShift","msg":"emtpy shift"},{"code":6098,"name":"InvalidShiftMarkets","msg":"invalid shift markets"},{"code":6099,"name":"GTStateHasBeenInitialized","msg":"GT State has been initialized"},{"code":6100,"name":"InvalidGTConfig","msg":"invalid GT config"},{"code":6101,"name":"InvalidGTDiscount","msg":"invalid GT discount"},{"code":6102,"name":"UserAccountHasBeenInitialized","msg":"user account has been initialized"},{"code":6103,"name":"ReferralCodeHasBeenSet","msg":"referral code has been set"},{"code":6104,"name":"ReferrerHasBeenSet","msg":"referrer has been set"},{"code":6105,"name":"InvalidUserAccount","msg":"invalid user account"},{"code":6106,"name":"ReferralCodeMismatched","msg":"referral code mismatched"},{"code":6107,"name":"SelfReferral","msg":"self-referral is not allowed"},{"code":6108,"name":"MutualReferral","msg":"mutual-referral is not allowed"},{"code":6109,"name":"InvalidMarketConfigKey","msg":"invalid market config key"},{"code":6110,"name":"InvalidCollateralToken","msg":"invalid collateral token"},{"code":6111,"name":"DisabledMarket","msg":"disabled market"},{"code":6112,"name":"FailedToCalculateGlvValueForMarket","msg":"failed to calculate GLV value for this market"},{"code":6113,"name":"FailedToCalculateGlvAmountToMint","msg":"failed to calculate GLV amount to mint"},{"code":6114,"name":"FailedTOCalculateMarketTokenAmountToBurn"},{"code":6115,"name":"ExceedMaxGlvMarketTokenBalanceAmount","msg":"GLV max market token balance amount exceeded"},{"code":6116,"name":"ExceedMaxGlvMarketTokenBalanceValue","msg":"GLV max market token balance value exceeded"},{"code":6117,"name":"EmptyGlvWithdrawal","msg":"Empty GLV withdrawal"},{"code":6118,"name":"GlvNegativeMarketPoolValue","msg":"GLV: negative market pool value"},{"code":6119,"name":"GlvDepositIsNotAllowed","msg":"GLV: deposit is not allowed with the given market"},{"code":6120,"name":"GlvShiftIntervalNotYetPassed","msg":"GLV: shift interval not yet passed"},{"code":6121,"name":"GlvShiftMaxPriceImpactExceeded","msg":"GLV: shift max price impact exceeded"},{"code":6122,"name":"GlvShiftValueNotLargeEnough","msg":"GLV: shift value is not large enough"},{"code":6123,"name":"TokenDecimalsChanged","msg":"The decimals of token is immutable"},{"code":6124,"name":"PriceIsStale","msg":"Price is stale"}],"types":[{"name":"ActionFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"ActionHeader","docs":["Action Header."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"action_state","docs":["Action State."],"type":"u8"},{"name":"bump","docs":["The bump seed."],"type":"u8"},{"name":"flags","type":{"defined":{"name":"ActionFlagContainer"}}},{"name":"padding_0","type":{"array":["u8",4]}},{"name":"id","docs":["Action id."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"market","docs":["Market."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"nonce","docs":["Nonce bytes."],"type":{"array":["u8",32]}},{"name":"max_execution_lamports","docs":["Max execution lamports."],"type":"u64"},{"name":"updated_at","docs":["Last updated timestamp."],"type":"i64"},{"name":"updated_at_slot","docs":["Last updated slot."],"type":"u64"},{"name":"creator","docs":["Creator."],"type":"pubkey"},{"name":"rent_receiver","docs":["Rent receiver."],"type":"pubkey"},{"name":"receiver","docs":["The output funds receiver."],"type":"pubkey"},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"ActionState","docs":["Action State."],"repr":{"kind":"rust"},"type":{"kind":"enum","variants":[{"name":"Pending"},{"name":"Completed"},{"name":"Cancelled"}]}},{"name":"Addresses","docs":["Addresses."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"holding","type":"pubkey"},{"name":"reserved","type":{"array":["pubkey",30]}}]}},{"name":"Amounts","docs":["Amounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"claimable_time_window","type":"u64"},{"name":"recent_time_window","type":"u64"},{"name":"request_expiration","type":"u64"},{"name":"oracle_max_age","type":"u64"},{"name":"oracle_max_timestamp_range","type":"u64"},{"name":"oracle_max_future_timestamp_excess","type":"u64"},{"name":"adl_prices_max_staleness","type":"u64"},{"name":"reserved","type":{"array":["u64",126]}}]}},{"name":"BorrowingFees","docs":["Borrowing Fee."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"fee_amount","type":{"generic":"T"}},{"name":"fee_amount_for_receiver","type":{"generic":"T"}}]}},{"name":"BorrowingFeesUpdated","docs":["Market borrowing fees updated event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"update_borrowing_state","docs":["Update borrowing state report."],"type":{"defined":{"name":"UpdateBorrowingReport","generics":[{"kind":"type","type":"u128"}]}}}]}},{"name":"ClaimableCollateral","docs":["Claimable collateral amounts."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"output_token_amount","type":{"generic":"T"}},{"name":"secondary_output_token_amount","type":{"generic":"T"}}]}},{"name":"Clocks","docs":["Market clocks."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"padding","type":{"array":["u8",8]}},{"name":"rev","type":"u64"},{"name":"price_impact_distribution","docs":["Price impact distribution clock."],"type":"i64"},{"name":"borrowing","docs":["Borrowing clock."],"type":"i64"},{"name":"funding","docs":["Funding clock."],"type":"i64"},{"name":"adl_for_long","docs":["ADL updated clock for long."],"type":"i64"},{"name":"adl_for_short","docs":["ADL updated clock for short."],"type":"i64"},{"name":"reserved","type":{"array":["i64",3]}}]}},{"name":"CreateDepositParams","docs":["Create Deposit Params."],"type":{"kind":"struct","fields":[{"name":"execution_lamports","docs":["Execution fee in lamports"],"type":"u64"},{"name":"long_token_swap_length","docs":["The length of the swap path for long token."],"type":"u8"},{"name":"short_token_swap_length","docs":["The length of the swap path for short token."],"type":"u8"},{"name":"initial_long_token_amount","docs":["Initial long token amount to deposit."],"type":"u64"},{"name":"initial_short_token_amount","docs":["Initial short otken amount to deposit."],"type":"u64"},{"name":"min_market_token_amount","docs":["The minimum acceptable amount of market tokens to receive."],"type":"u64"},{"name":"should_unwrap_native_token","docs":["Whether to unwrap native token when sending funds back."],"type":"bool"}]}},{"name":"CreateGlvDepositParams","docs":["Create GLV Deposit Params."],"type":{"kind":"struct","fields":[{"name":"execution_lamports","docs":["Execution fee in lamports"],"type":"u64"},{"name":"long_token_swap_length","docs":["The length of the swap path for long token."],"type":"u8"},{"name":"short_token_swap_length","docs":["The length of the swap path for short token."],"type":"u8"},{"name":"initial_long_token_amount","docs":["Initial long token amount to deposit."],"type":"u64"},{"name":"initial_short_token_amount","docs":["Initial short otken amount to deposit."],"type":"u64"},{"name":"market_token_amount","docs":["Market token amount."],"type":"u64"},{"name":"min_market_token_amount","docs":["Minimum acceptable maount of market tokens to be minted."],"type":"u64"},{"name":"min_glv_token_amount","docs":["Minimum acceptable amount of glv tokens to receive."],"type":"u64"},{"name":"should_unwrap_native_token","docs":["Whether to unwrap native token when sending funds back."],"type":"bool"}]}},{"name":"CreateGlvWithdrawalParams","docs":["Create GLV Withdrawal Params."],"type":{"kind":"struct","fields":[{"name":"execution_lamports","docs":["Execution fee in lamports"],"type":"u64"},{"name":"long_token_swap_length","docs":["The length of the swap path for long token."],"type":"u8"},{"name":"short_token_swap_length","docs":["The length of the swap path for short token."],"type":"u8"},{"name":"glv_token_amount","docs":["The amount of glv tokens to burn."],"type":"u64"},{"name":"min_final_long_token_amount","docs":["Minimum acceptable final long token to receive."],"type":"u64"},{"name":"min_final_short_token_amount","docs":["Minimum acceptable final short token to receive."],"type":"u64"},{"name":"should_unwrap_native_token","docs":["Whether to unwrap native token when sending funds back."],"type":"bool"}]}},{"name":"CreateOrderParams","docs":["Create Order Arguments."],"type":{"kind":"struct","fields":[{"name":"kind","docs":["Order Kind."],"type":{"defined":{"name":"OrderKind"}}},{"name":"decrease_position_swap_type","docs":["Decrease Position Swap Type."],"type":{"option":{"defined":{"name":"DecreasePositionSwapType"}}}},{"name":"execution_lamports","docs":["Execution fee in lamports."],"type":"u64"},{"name":"swap_path_length","docs":["The length of the swap path."],"type":"u8"},{"name":"initial_collateral_delta_amount","docs":["Initial collateral / swap in token amount."],"type":"u64"},{"name":"size_delta_value","docs":["Size delta value."],"type":"u128"},{"name":"is_long","docs":["Is long."],"type":"bool"},{"name":"is_collateral_long","docs":["Is collateral or the swap out token the long token."],"type":"bool"},{"name":"min_output","docs":["Min output amount or value."],"type":{"option":"u128"}},{"name":"trigger_price","docs":["Trigger price."],"type":{"option":"u128"}},{"name":"acceptable_price","docs":["Acceptable price."],"type":{"option":"u128"}},{"name":"should_unwrap_native_token","docs":["Whether to unwrap native token when sending funds back."],"type":"bool"},{"name":"valid_from_ts","docs":["Valid from timestamp."],"type":{"option":"i64"}}]}},{"name":"CreateShiftParams","docs":["Create Shift Params."],"type":{"kind":"struct","fields":[{"name":"execution_lamports","docs":["Execution fee in lamports."],"type":"u64"},{"name":"from_market_token_amount","docs":["From market token amount."],"type":"u64"},{"name":"min_to_market_token_amount","docs":["The minimum acceptable to market token amount to receive."],"type":"u64"}]}},{"name":"CreateWithdrawalParams","docs":["Create Withdrawal Params."],"type":{"kind":"struct","fields":[{"name":"execution_lamports","docs":["Execution fee in lamports."],"type":"u64"},{"name":"long_token_swap_path_length","docs":["The length of the swap path for long token."],"type":"u8"},{"name":"short_token_swap_path_length","docs":["The length of the swap path for short token."],"type":"u8"},{"name":"market_token_amount","docs":["Market token amount to burn."],"type":"u64"},{"name":"min_long_token_amount","docs":["The minimum acceptable final long token amount to receive."],"type":"u64"},{"name":"min_short_token_amount","docs":["The minimum acceptable final short token amount to receive."],"type":"u64"},{"name":"should_unwrap_native_token","docs":["Whether to unwrap native token when sending funds back."],"type":"bool"}]}},{"name":"DecreasePositionReport","docs":["Report of the execution of position decreasing."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"price_impact_value","type":{"generic":"Signed"}},{"name":"price_impact_diff","type":{"generic":"Unsigned"}},{"name":"execution_price","type":{"generic":"Unsigned"}},{"name":"size_delta_in_tokens","type":{"generic":"Unsigned"}},{"name":"withdrawable_collateral_amount","type":{"generic":"Unsigned"}},{"name":"initial_size_delta_usd","type":{"generic":"Unsigned"}},{"name":"size_delta_usd","type":{"generic":"Unsigned"}},{"name":"fees","type":{"defined":{"name":"PositionFees","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"pnl","type":{"defined":{"name":"Pnl","generics":[{"kind":"type","type":{"generic":"Signed"}}]}}},{"name":"insolvent_close_step","type":{"option":{"defined":{"name":"InsolventCloseStep"}}}},{"name":"should_remove","type":"bool"},{"name":"is_output_token_long","type":"bool"},{"name":"is_secondary_output_token_long","type":"bool"},{"name":"output_amounts","type":{"defined":{"name":"OutputAmounts","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"claimable_funding_long_token_amount","type":{"generic":"Unsigned"}},{"name":"claimable_funding_short_token_amount","type":{"generic":"Unsigned"}},{"name":"for_holding","type":{"defined":{"name":"ClaimableCollateral","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"for_user","type":{"defined":{"name":"ClaimableCollateral","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}}]}},{"name":"DecreasePositionSwapType","docs":["Swap Type for the decrease position action."],"repr":{"kind":"rust"},"type":{"kind":"enum","variants":[{"name":"NoSwap"},{"name":"PnlTokenToCollateralToken"},{"name":"CollateralToPnlToken"}]}},{"name":"Deposit","docs":["Deposit."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"DepositTokenAccounts"}}},{"name":"params","docs":["Deposit params."],"type":{"defined":{"name":"DepositActionParams"}}},{"name":"swap","docs":["Swap params."],"type":{"defined":{"name":"SwapActionParams"}}},{"name":"padding_0","type":{"array":["u8",4]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"DepositActionParams","docs":["Deposit Params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"initial_long_token_amount","docs":["The amount of initial long tokens to deposit."],"type":"u64"},{"name":"initial_short_token_amount","docs":["The amount of initial short tokens to deposit."],"type":"u64"},{"name":"min_market_token_amount","docs":["The minimum acceptable amount of market tokens to receive."],"type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"DepositCreated","docs":["Deposit Created Event."],"type":{"kind":"struct","fields":[{"name":"ts","docs":["Event time."],"type":"i64"},{"name":"store","docs":["Store account."],"type":"pubkey"},{"name":"deposit","docs":["Deposit account."],"type":"pubkey"}]}},{"name":"DepositExecuted","docs":["Deposit executed Event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"report","docs":["Report."],"type":{"defined":{"name":"DepositReport","generics":[{"kind":"type","type":"u128"},{"kind":"type","type":"i128"}]}}}]}},{"name":"DepositParams","docs":["Deposit params."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"long_token_amount","type":{"generic":"T"}},{"name":"short_token_amount","type":{"generic":"T"}},{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":{"generic":"T"}}]}}}]}},{"name":"DepositRemoved","docs":["Deposit removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"deposit","docs":["Deposit."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"DepositReport","docs":["Report of the execution of deposit."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"params","type":{"defined":{"name":"DepositParams","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"minted","type":{"generic":"Unsigned"}},{"name":"price_impact","type":{"generic":"Signed"}},{"name":"fees","type":{"array":[{"defined":{"name":"Fees","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}},2]}}]}},{"name":"DepositTokenAccounts","docs":["Token Accounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"initial_long_token","docs":["Initial long token accounts."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"initial_short_token","docs":["Initial short token accounts."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"market_token","docs":["Market token account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"DisabledFeatures","docs":["Disabled Features State."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"map","type":{"defined":{"name":"DisabledMap"}}}]}},{"name":"DisabledMap","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"DisabledMapEntry"}},64]}},{"name":"padding","type":{"array":["u8",0]}},{"name":"count","type":"u32"}]}},{"name":"DisabledMapEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",2]}},{"name":"value","type":"u8"}]}},{"name":"DistributePositionImpactReport","docs":["Distribute Position Impact Report."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"duration_in_seconds","type":"u64"},{"name":"distribution_amount","type":{"generic":"T"}},{"name":"next_position_impact_pool_amount","type":{"generic":"T"}}]}},{"name":"Entry","docs":["An entry of the config buffer."],"type":{"kind":"struct","fields":[{"name":"key","docs":["Key."],"type":"u16"},{"name":"value","docs":["Value."],"type":"u128"}]}},{"name":"EntryArgs","docs":["An entry of the config buffer."],"type":{"kind":"struct","fields":[{"name":"key","docs":["Key."],"type":"string"},{"name":"value","docs":["Value."],"type":"u128"}]}},{"name":"EventClocks","docs":["Market clocks."],"type":{"kind":"struct","fields":[{"name":"padding","type":{"array":["u8",8]}},{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"price_impact_distribution","docs":["Price impact distribution clock."],"type":"i64"},{"name":"borrowing","docs":["Borrowing clock."],"type":"i64"},{"name":"funding","docs":["Funding clock."],"type":"i64"},{"name":"adl_for_long","docs":["ADL updated clock for long."],"type":"i64"},{"name":"adl_for_short","docs":["ADL updated clock for short."],"type":"i64"},{"name":"reserved","type":{"array":["i64",3]}}]}},{"name":"EventOtherState","docs":["Market State."],"type":{"kind":"struct","fields":[{"name":"padding","type":{"array":["u8",16]}},{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"trade_count","docs":["Trade count."],"type":"u64"},{"name":"long_token_balance","docs":["Long token balance."],"type":"u64"},{"name":"short_token_balance","docs":["Short token balance."],"type":"u64"},{"name":"funding_factor_per_second","docs":["Funding factor per second."],"type":"i128"},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"EventPool","docs":["A pool for market."],"type":{"kind":"struct","fields":[{"name":"is_pure","docs":["Whether the pool only contains one kind of token,","i.e. a pure pool.","For a pure pool, only the `long_token_amount` field is used."],"type":"u8"},{"name":"padding","type":{"array":["u8",15]}},{"name":"long_token_amount","docs":["Long token amount."],"type":"u128"},{"name":"short_token_amount","docs":["Short token amount."],"type":"u128"}]}},{"name":"EventPositionState","docs":["Position State."],"type":{"kind":"struct","fields":[{"name":"trade_id","docs":["Trade id."],"type":"u64"},{"name":"increased_at","docs":["The time that the position last increased at."],"type":"i64"},{"name":"updated_at_slot","docs":["Updated at slot."],"type":"u64"},{"name":"decreased_at","docs":["The time that the position last decreased at."],"type":"i64"},{"name":"size_in_tokens","docs":["Size in tokens."],"type":"u128"},{"name":"collateral_amount","docs":["Collateral amount."],"type":"u128"},{"name":"size_in_usd","docs":["Size in usd."],"type":"u128"},{"name":"borrowing_factor","docs":["Borrowing factor."],"type":"u128"},{"name":"funding_fee_amount_per_size","docs":["Funding fee amount per size."],"type":"u128"},{"name":"long_token_claimable_funding_amount_per_size","docs":["Long token claimable funding amount per size."],"type":"u128"},{"name":"short_token_claimable_funding_amount_per_size","docs":["Short token claimable funding amount per size."],"type":"u128"},{"name":"reserved","docs":["Reserved."],"type":{"array":["u8",128]}}]}},{"name":"EventTradeFees","docs":["Trade Fees."],"type":{"kind":"struct","fields":[{"name":"order_fee_for_receiver_amount","docs":["Order fee for receiver amount."],"type":"u128"},{"name":"order_fee_for_pool_amount","docs":["Order fee for pool amount."],"type":"u128"},{"name":"liquidation_fee_amount","docs":["Total liquidation fee amount."],"type":"u128"},{"name":"liquidation_fee_for_receiver_amount","docs":["Liquidation fee for pool amount."],"type":"u128"},{"name":"total_borrowing_fee_amount","docs":["Total borrowing fee amount."],"type":"u128"},{"name":"borrowing_fee_for_receiver_amount","docs":["Borrowing fee for receiver amount."],"type":"u128"},{"name":"funding_fee_amount","docs":["Funding fee amount."],"type":"u128"},{"name":"claimable_funding_fee_long_token_amount","docs":["Claimable funding fee long token amount."],"type":"u128"},{"name":"claimable_funding_fee_short_token_amount","docs":["Claimable funding fee short token amount."],"type":"u128"}]}},{"name":"EventTradeOutputAmounts","docs":["Output amounts."],"type":{"kind":"struct","fields":[{"name":"output_amount","docs":["Output amount."],"type":"u128"},{"name":"secondary_output_amount","docs":["Secondary output amount."],"type":"u128"}]}},{"name":"EventTradePnl","docs":["Trade PnL."],"type":{"kind":"struct","fields":[{"name":"pnl","docs":["Final PnL value."],"type":"i128"},{"name":"uncapped_pnl","docs":["Uncapped PnL value."],"type":"i128"}]}},{"name":"EventTradePrice","docs":["Price."],"type":{"kind":"struct","fields":[{"name":"min","docs":["Min price."],"type":"u128"},{"name":"max","docs":["Max price."],"type":"u128"}]}},{"name":"EventTradePrices","docs":["Trade Prices."],"type":{"kind":"struct","fields":[{"name":"index","docs":["Index token price."],"type":{"defined":{"name":"EventTradePrice"}}},{"name":"long","docs":["Long token price."],"type":{"defined":{"name":"EventTradePrice"}}},{"name":"short","docs":["Short token price."],"type":{"defined":{"name":"EventTradePrice"}}}]}},{"name":"EventTransferOut","docs":["Transfer Out."],"type":{"kind":"struct","fields":[{"name":"executed","docs":["Executed."],"type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"final_output_token","docs":["Final output token."],"type":"u64"},{"name":"secondary_output_token","docs":["Secondary output token."],"type":"u64"},{"name":"long_token","docs":["Long token."],"type":"u64"},{"name":"short_token","docs":["Short token."],"type":"u64"},{"name":"long_token_for_claimable_account_of_user","docs":["Long token amount for claimable account of user."],"type":"u64"},{"name":"short_token_for_claimable_account_of_user","docs":["Short token amount for cliamable account of user."],"type":"u64"},{"name":"long_token_for_claimable_account_of_holding","docs":["Long token amount for claimable account of holding."],"type":"u64"},{"name":"short_token_for_claimable_account_of_holding","docs":["Short token amount for claimable account of holding."],"type":"u64"}]}},{"name":"ExecutionParams","docs":["Execution Params for increasing position."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"price_impact_value","type":{"generic":"Signed"}},{"name":"price_impact_amount","type":{"generic":"Signed"}},{"name":"size_delta_in_tokens","type":{"generic":"Unsigned"}},{"name":"execution_price","type":{"generic":"Unsigned"}}]}},{"name":"Factors","docs":["Factors."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"oracle_ref_price_deviation","type":"u128"},{"name":"order_fee_discount_for_referred_user","type":"u128"},{"name":"reserved","type":{"array":["u128",64]}}]}},{"name":"Fees","docs":["Fees."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"fee_amount_for_receiver","type":{"generic":"T"}},{"name":"fee_amount_for_pool","type":{"generic":"T"}}]}},{"name":"FundingFees","docs":["Funding Fees."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"amount","type":{"generic":"T"}},{"name":"claimable_long_token_amount","type":{"generic":"T"}},{"name":"claimable_short_token_amount","type":{"generic":"T"}}]}},{"name":"Glv","docs":["Glv."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"bump","docs":["Bump seed."],"type":"u8"},{"name":"bump_bytes","type":{"array":["u8",1]}},{"name":"padding_0","type":{"array":["u8",3]}},{"name":"index","docs":["Index."],"type":"u16"},{"name":"store","type":"pubkey"},{"name":"glv_token","type":"pubkey"},{"name":"long_token","type":"pubkey"},{"name":"short_token","type":"pubkey"},{"name":"shift_last_executed_at","type":"i64"},{"name":"min_tokens_for_first_deposit","type":"u64"},{"name":"shift_min_interval_secs","type":"u32"},{"name":"padding_1","type":{"array":["u8",4]}},{"name":"shift_max_price_impact_factor","type":"u128"},{"name":"shift_min_value","type":"u128"},{"name":"reserved","type":{"array":["u8",256]}},{"name":"markets","docs":["Market config map with market token addresses as keys."],"type":{"defined":{"name":"GlvMarkets"}}}]}},{"name":"GlvDeposit","docs":["Glv Deposit."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"GlvDepositTokenAccounts"}}},{"name":"params","docs":["Params."],"type":{"defined":{"name":"GlvDepositActionParams"}}},{"name":"swap","docs":["Swap params."],"type":{"defined":{"name":"SwapActionParams"}}},{"name":"padding_1","type":{"array":["u8",4]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"GlvDepositActionParams","docs":["GLV Deposit Params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"deposit","docs":["Deposit params."],"type":{"defined":{"name":"DepositActionParams"}}},{"name":"market_token_amount","docs":["The amount of market tokens to deposit."],"type":"u64"},{"name":"min_glv_token_amount","docs":["The minimum acceptable amount of glv tokens to receive."],"type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"GlvDepositRemoved","docs":["GLV Deposit removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"glv_deposit","docs":["GLV Deposit."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"glv_token","docs":["GLV token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"GlvDepositTokenAccounts","docs":["Token and accounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"initial_long_token","docs":["Initial long token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"initial_short_token","docs":["Initial short token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"market_token","docs":["Market token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"glv_token","docs":["GLV token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"GlvMarketConfig","docs":["Market Config for GLV."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"max_amount","type":"u64"},{"name":"flags","type":{"defined":{"name":"GlvMarketFlagContainer"}}},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"max_value","type":"u128"},{"name":"balance","type":"u64"},{"name":"padding_1","type":{"array":["u8",8]}}]}},{"name":"GlvMarketFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"GlvMarkets","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"GlvMarketsEntry"}},96]}},{"name":"padding","type":{"array":["u8",12]}},{"name":"count","type":"u32"}]}},{"name":"GlvMarketsEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",32]}},{"name":"value","type":{"defined":{"name":"GlvMarketConfig"}}}]}},{"name":"GlvPricing","docs":["GLV pricing event."],"type":{"kind":"struct","fields":[{"name":"glv_token","docs":["GLV token."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"supply","docs":["The supply of the GLV tokens."],"type":"u64"},{"name":"value_maximized","docs":["Whether the `value` is maximized."],"type":"bool"},{"name":"value","docs":["Total value of the GLV."],"type":"u128"},{"name":"input_amount","docs":["Input amount.","- For GLV deposit, this is the total amount of market tokens received.","- For GLV withdrawal, this is the amount of GLV tokens received."],"type":"u64"},{"name":"input_value","docs":["The value of the input amount."],"type":"u128"},{"name":"output_amount","docs":["Output amount.","- For GLV deposit, this will be the amount of GLV tokens to be minted.","- For GLV withdrawal, this will be the amount of market tokens to be burned."],"type":"u64"},{"name":"kind","docs":["The type of GLV pricing."],"type":{"defined":{"name":"GlvPricingKind"}}}]}},{"name":"GlvPricingKind","docs":["Pricing kind."],"type":{"kind":"enum","variants":[{"name":"Deposit"},{"name":"Withdrawal"}]}},{"name":"GlvShift","docs":["Glv Shift."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"shift","type":{"defined":{"name":"Shift"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"GlvWithdrawal","docs":["Glv Withdrawal."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"GlvWithdrawalTokenAccounts"}}},{"name":"params","docs":["Params."],"type":{"defined":{"name":"GlvWithdrawalActionParams"}}},{"name":"swap","docs":["Swap params."],"type":{"defined":{"name":"SwapActionParams"}}},{"name":"padding_1","type":{"array":["u8",4]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"GlvWithdrawalActionParams","docs":["GLV Withdrawal Params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"glv_token_amount","docs":["The amount of GLV tokens to burn."],"type":"u64"},{"name":"min_final_long_token_amount","docs":["The minimum acceptable amount of final long tokens to receive."],"type":"u64"},{"name":"min_final_short_token_amount","docs":["The minimum acceptable amount of final short tokens to receive."],"type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"GlvWithdrawalRemoved","docs":["GLV Withdrawal removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"glv_withdrawal","docs":["GLV Withdrawal"],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"glv_token","docs":["GLV token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"GlvWithdrawalTokenAccounts","docs":["Token and accounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"final_long_token","docs":["Final ong token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"final_short_token","docs":["Final short token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"market_token","docs":["Market token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"glv_token","docs":["GLV token and account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"GtExchange","docs":["GT Exchange Account."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"bump","docs":["Bump."],"type":"u8"},{"name":"flags","type":{"defined":{"name":"GtExchangeFlagContainer"}}},{"name":"padding","type":{"array":["u8",6]}},{"name":"amount","type":"u64"},{"name":"owner","docs":["Owner address."],"type":"pubkey"},{"name":"store","docs":["Store address."],"type":"pubkey"},{"name":"vault","docs":["Vault address."],"type":"pubkey"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"GtExchangeFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"GtExchangeVault","docs":["GT Exchange Vault."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"bump","docs":["Bump seed."],"type":"u8"},{"name":"flags","type":{"defined":{"name":"GtExchangeVaultFlagContainer"}}},{"name":"padding","type":{"array":["u8",6]}},{"name":"ts","type":"i64"},{"name":"time_window","type":"i64"},{"name":"amount","type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"GtExchangeVaultFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"GtState","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"decimals","type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"last_minted_at","type":"i64"},{"name":"total_minted","type":"u64"},{"name":"grow_step_amount","docs":["Grow step amount. It must be immutable."],"type":"u64"},{"name":"grow_steps","type":"u64"},{"name":"supply","docs":["Supply of buybackable GT."],"type":"u64"},{"name":"padding_1","type":{"array":["u8",8]}},{"name":"gt_vault","docs":["Vault for non-buybackable GT."],"type":"u64"},{"name":"padding_2","type":{"array":["u8",16]}},{"name":"minting_cost_grow_factor","type":"u128"},{"name":"minting_cost","type":"u128"},{"name":"padding_3","type":{"array":["u8",32]}},{"name":"exchange_time_window","type":"u32"},{"name":"padding_4","type":{"array":["u8",12]}},{"name":"max_rank","type":"u64"},{"name":"ranks","type":{"array":["u64",15]}},{"name":"order_fee_discount_factors","type":{"array":["u128",16]}},{"name":"referral_reward_factors","type":{"array":["u128",16]}},{"name":"padding_5","type":{"array":["u8",32]}},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"GtUpdateKind","docs":["GT Update Kind."],"type":{"kind":"enum","variants":[{"name":"Reward"},{"name":"Mint"},{"name":"Burn"}]}},{"name":"GtUpdated","docs":["GT updated event."],"type":{"kind":"struct","fields":[{"name":"kind","docs":["Update kind."],"type":{"defined":{"name":"GtUpdateKind"}}},{"name":"receiver","docs":["Receiver."],"type":{"option":"pubkey"}},{"name":"receiver_delta","docs":["Receiver Delta."],"type":"u64"},{"name":"receiver_balance","docs":["Receiver balance."],"type":{"option":"u64"}},{"name":"minting_cost","docs":["Minting cost."],"type":"u128"},{"name":"total_minted","docs":["Total minted."],"type":"u64"},{"name":"grow_steps","docs":["Grow steps."],"type":"u64"},{"name":"supply","docs":["Latest supply."],"type":"u64"},{"name":"vault","docs":["Vault."],"type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"IncreasePositionParams","docs":["Increase Position Params."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"collateral_increment_amount","type":{"generic":"T"}},{"name":"size_delta_usd","type":{"generic":"T"}},{"name":"acceptable_price","type":{"option":{"generic":"T"}}},{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":{"generic":"T"}}]}}}]}},{"name":"IncreasePositionReport","docs":["Report of the execution of position increasing."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"params","type":{"defined":{"name":"IncreasePositionParams","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"execution","type":{"defined":{"name":"ExecutionParams","generics":[{"kind":"type","type":{"generic":"Unsigned"}},{"kind":"type","type":{"generic":"Signed"}}]}}},{"name":"collateral_delta_amount","type":{"generic":"Signed"}},{"name":"fees","type":{"defined":{"name":"PositionFees","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"claimable_funding_long_token_amount","docs":["Output amounts that must be processed."],"type":{"generic":"Unsigned"}},{"name":"claimable_funding_short_token_amount","type":{"generic":"Unsigned"}}]}},{"name":"Indexer","docs":["Market indexer."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"trade_count","type":"u64"},{"name":"deposit_count","type":"u64"},{"name":"withdrawal_count","type":"u64"},{"name":"order_count","type":"u64"},{"name":"shift_count","type":"u64"},{"name":"glv_deposit_count","type":"u64"},{"name":"glv_withdrawal_count","type":"u64"},{"name":"padding_0","type":{"array":["u8",8]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"InsolventCloseStep","docs":["Insolvent Close Step."],"type":{"kind":"enum","variants":[{"name":"Pnl"},{"name":"Fees"},{"name":"Funding"},{"name":"Impact"},{"name":"Diff"}]}},{"name":"LiquidationFees","docs":["Liquidation Fees."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"fee_value","type":{"generic":"T"}},{"name":"fee_amount","type":{"generic":"T"}},{"name":"fee_amount_for_receiver","type":{"generic":"T"}}]}},{"name":"Market","docs":["Market."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"bump","docs":["Bump Seed."],"type":"u8"},{"name":"flags","type":{"defined":{"name":"MarketFlagContainer"}}},{"name":"padding","type":{"array":["u8",13]}},{"name":"name","type":{"array":["u8",64]}},{"name":"meta","type":{"defined":{"name":"MarketMeta"}}},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"config","type":{"defined":{"name":"MarketConfig"}}},{"name":"indexer","type":{"defined":{"name":"Indexer"}}},{"name":"state","type":{"defined":{"name":"State"}}},{"name":"buffer","type":{"defined":{"name":"RevertibleBuffer"}}},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"MarketConfig","docs":["Market Config."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"flag","docs":["Flags."],"type":{"defined":{"name":"MarketConfigFlagContainer"}}},{"name":"swap_impact_exponent","type":"u128"},{"name":"swap_impact_positive_factor","type":"u128"},{"name":"swap_impact_negative_factor","type":"u128"},{"name":"swap_fee_receiver_factor","type":"u128"},{"name":"swap_fee_factor_for_positive_impact","type":"u128"},{"name":"swap_fee_factor_for_negative_impact","type":"u128"},{"name":"min_position_size_usd","type":"u128"},{"name":"min_collateral_value","type":"u128"},{"name":"min_collateral_factor","type":"u128"},{"name":"min_collateral_factor_for_open_interest_multiplier_for_long","type":"u128"},{"name":"min_collateral_factor_for_open_interest_multiplier_for_short","type":"u128"},{"name":"max_positive_position_impact_factor","type":"u128"},{"name":"max_negative_position_impact_factor","type":"u128"},{"name":"max_position_impact_factor_for_liquidations","type":"u128"},{"name":"position_impact_exponent","type":"u128"},{"name":"position_impact_positive_factor","type":"u128"},{"name":"position_impact_negative_factor","type":"u128"},{"name":"order_fee_receiver_factor","type":"u128"},{"name":"order_fee_factor_for_positive_impact","type":"u128"},{"name":"order_fee_factor_for_negative_impact","type":"u128"},{"name":"liquidation_fee_receiver_factor","type":"u128"},{"name":"liquidation_fee_factor","type":"u128"},{"name":"position_impact_distribute_factor","type":"u128"},{"name":"min_position_impact_pool_amount","type":"u128"},{"name":"borrowing_fee_receiver_factor","type":"u128"},{"name":"borrowing_fee_factor_for_long","type":"u128"},{"name":"borrowing_fee_factor_for_short","type":"u128"},{"name":"borrowing_fee_exponent_for_long","type":"u128"},{"name":"borrowing_fee_exponent_for_short","type":"u128"},{"name":"borrowing_fee_optimal_usage_factor_for_long","type":"u128"},{"name":"borrowing_fee_optimal_usage_factor_for_short","type":"u128"},{"name":"borrowing_fee_base_factor_for_long","type":"u128"},{"name":"borrowing_fee_base_factor_for_short","type":"u128"},{"name":"borrowing_fee_above_optimal_usage_factor_for_long","type":"u128"},{"name":"borrowing_fee_above_optimal_usage_factor_for_short","type":"u128"},{"name":"funding_fee_exponent","type":"u128"},{"name":"funding_fee_factor","type":"u128"},{"name":"funding_fee_max_factor_per_second","type":"u128"},{"name":"funding_fee_min_factor_per_second","type":"u128"},{"name":"funding_fee_increase_factor_per_second","type":"u128"},{"name":"funding_fee_decrease_factor_per_second","type":"u128"},{"name":"funding_fee_threshold_for_stable_funding","type":"u128"},{"name":"funding_fee_threshold_for_decrease_funding","type":"u128"},{"name":"reserve_factor","type":"u128"},{"name":"open_interest_reserve_factor","type":"u128"},{"name":"max_pnl_factor_for_long_deposit","type":"u128"},{"name":"max_pnl_factor_for_short_deposit","type":"u128"},{"name":"max_pnl_factor_for_long_withdrawal","type":"u128"},{"name":"max_pnl_factor_for_short_withdrawal","type":"u128"},{"name":"max_pnl_factor_for_long_trader","type":"u128"},{"name":"max_pnl_factor_for_short_trader","type":"u128"},{"name":"max_pnl_factor_for_long_adl","type":"u128"},{"name":"max_pnl_factor_for_short_adl","type":"u128"},{"name":"min_pnl_factor_after_long_adl","type":"u128"},{"name":"min_pnl_factor_after_short_adl","type":"u128"},{"name":"max_pool_amount_for_long_token","type":"u128"},{"name":"max_pool_amount_for_short_token","type":"u128"},{"name":"max_pool_value_for_deposit_for_long_token","type":"u128"},{"name":"max_pool_value_for_deposit_for_short_token","type":"u128"},{"name":"max_open_interest_for_long","type":"u128"},{"name":"max_open_interest_for_short","type":"u128"},{"name":"min_tokens_for_first_deposit","type":"u128"},{"name":"reserved","type":{"array":["u128",32]}}]}},{"name":"MarketConfigBuffer","docs":["Market Config Buffer."],"type":{"kind":"struct","fields":[{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"authority","docs":["Authority."],"type":"pubkey"},{"name":"expiry","docs":["Expiration time."],"type":"i64"},{"name":"entries","type":{"vec":{"defined":{"name":"Entry"}}}}]}},{"name":"MarketConfigFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u128"}]}},{"name":"MarketFeesUpdated","docs":["Market fees updated event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"position_impact_distribution","docs":["Position impact distribution report."],"type":{"defined":{"name":"DistributePositionImpactReport","generics":[{"kind":"type","type":"u128"}]}}},{"name":"update_borrowing_state","docs":["Update borrowing state report."],"type":{"defined":{"name":"UpdateBorrowingReport","generics":[{"kind":"type","type":"u128"}]}}},{"name":"update_funding_state","docs":["Update funding state report."],"type":{"defined":{"name":"UpdateFundingReport","generics":[{"kind":"type","type":"u128"},{"kind":"type","type":"i128"}]}}}]}},{"name":"MarketFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"MarketMeta","docs":["Market Metadata."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"market_token_mint","docs":["Market token."],"type":"pubkey"},{"name":"index_token_mint","docs":["Index token."],"type":"pubkey"},{"name":"long_token_mint","docs":["Long token."],"type":"pubkey"},{"name":"short_token_mint","docs":["Short token."],"type":"pubkey"}]}},{"name":"MarketStateUpdated","docs":["Market State Updated Event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"pool_kinds","docs":["Updated pool kinds."],"type":{"vec":{"defined":{"name":"PoolKind"}}}},{"name":"pools","docs":["Updated pools."],"type":{"vec":{"defined":{"name":"EventPool"}}}},{"name":"clocks","docs":["Clocks."],"type":{"vec":{"defined":{"name":"EventClocks"}}}},{"name":"other","docs":["Other states."],"type":{"vec":{"defined":{"name":"EventOtherState"}}}}]}},{"name":"MarketStatus","docs":["Market Status."],"type":{"kind":"struct","fields":[{"name":"funding_factor_per_second","docs":["Funding factor per second."],"type":"i128"},{"name":"borrowing_factor_per_second_for_long","docs":["Borrowing factor per second for long."],"type":"u128"},{"name":"borrowing_factor_per_second_for_short","docs":["Borrowing factor per second for short."],"type":"u128"},{"name":"pending_pnl_for_long","docs":["Pending pnl for long."],"type":"i128"},{"name":"pending_pnl_for_short","docs":["Pending pnl for short."],"type":"i128"},{"name":"reserve_value_for_long","docs":["Reserve value for long."],"type":"u128"},{"name":"reserve_value_for_short","docs":["Reserve value for short."],"type":"u128"},{"name":"pool_value_without_pnl_for_long","docs":["Pool value without pnl for long."],"type":"u128"},{"name":"pool_value_without_pnl_for_short","docs":["Pool avlue without pnl for short."],"type":"u128"}]}},{"name":"Members","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"MembersEntry"}},64]}},{"name":"padding","type":{"array":["u8",0]}},{"name":"count","type":"u32"}]}},{"name":"MembersEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",32]}},{"name":"value","type":"u32"}]}},{"name":"Oracle","docs":["Oracle Account."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"authority","docs":["This address is authorized to **directly** modify","the oracle through instrcutions."],"type":"pubkey"},{"name":"min_oracle_ts","type":"i64"},{"name":"max_oracle_ts","type":"i64"},{"name":"min_oracle_slot","type":"u64"},{"name":"primary","type":{"defined":{"name":"PriceMap"}}},{"name":"flags","type":{"defined":{"name":"OracleFlagContainer"}}},{"name":"padding_1","type":{"array":["u8",3]}},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"OracleFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"Order","docs":["Order."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Action header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"OrderTokenAccounts"}}},{"name":"swap","docs":["Swap params."],"type":{"defined":{"name":"SwapActionParams"}}},{"name":"padding_0","type":{"array":["u8",4]}},{"name":"params","docs":["Order params."],"type":{"defined":{"name":"OrderActionParams"}}},{"name":"gt_reward","type":"u64"},{"name":"padding_1","type":{"array":["u8",8]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"OrderActionParams","docs":["Order params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"kind","docs":["Kind."],"type":"u8"},{"name":"side","docs":["Order side."],"type":"u8"},{"name":"decrease_position_swap_type","docs":["Decrease position swap type."],"type":"u8"},{"name":"padding_1","type":{"array":["u8",5]}},{"name":"collateral_token","docs":["Collateral/Output token."],"type":"pubkey"},{"name":"position","docs":["Position address."],"type":"pubkey"},{"name":"initial_collateral_delta_amount","docs":["Initial collateral delta amount."],"type":"u64"},{"name":"size_delta_value","docs":["Size delta value."],"type":"u128"},{"name":"min_output","docs":["Min output amount or value.","- Used as amount for swap orders.","- Used as value for decrease position orders."],"type":"u128"},{"name":"trigger_price","docs":["Trigger price (in unit price)."],"type":"u128"},{"name":"acceptable_price","docs":["Acceptable price (in unit price)."],"type":"u128"},{"name":"valid_from_ts","type":"i64"},{"name":"padding_2","type":{"array":["u8",8]}},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"OrderCreated","docs":["Order created event."],"type":{"kind":"struct","fields":[{"name":"ts","docs":["Event time."],"type":"i64"},{"name":"store","docs":["Store account."],"type":"pubkey"},{"name":"order","docs":["Order account."],"type":"pubkey"},{"name":"position","docs":["Position account."],"type":{"option":"pubkey"}}]}},{"name":"OrderFees","docs":["Order Fees."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"base","type":{"defined":{"name":"Fees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"fee_value","type":{"generic":"T"}}]}},{"name":"OrderKind","docs":["Order Kind."],"repr":{"kind":"rust"},"type":{"kind":"enum","variants":[{"name":"Liquidation"},{"name":"AutoDeleveraging"},{"name":"MarketSwap"},{"name":"MarketIncrease"},{"name":"MarketDecrease"},{"name":"LimitSwap"},{"name":"LimitIncrease"},{"name":"LimitDecrease"},{"name":"StopLossDecrease"}]}},{"name":"OrderRemoved","docs":["Order removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"order","docs":["Order."],"type":"pubkey"},{"name":"kind","docs":["Kind."],"type":{"defined":{"name":"OrderKind"}}},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"OrderTokenAccounts","docs":["Token accounts for Order."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"initial_collateral","docs":["Initial collateral."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"final_output_token","docs":["Final output token."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"long_token","docs":["Long token."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"short_token","docs":["Short token."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"OtherState","docs":["Market State."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"padding","type":{"array":["u8",16]}},{"name":"rev","type":"u64"},{"name":"trade_count","type":"u64"},{"name":"long_token_balance","type":"u64"},{"name":"short_token_balance","type":"u64"},{"name":"funding_factor_per_second","type":"i128"},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"OutputAmounts","docs":["Output amounts."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"output_amount","type":{"generic":"T"}},{"name":"secondary_output_amount","type":{"generic":"T"}}]}},{"name":"Pnl","docs":["Processed PnL."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"pnl","docs":["Final PnL value."],"type":{"generic":"T"}},{"name":"uncapped_pnl","docs":["Uncapped PnL value."],"type":{"generic":"T"}}]}},{"name":"Pool","docs":["A pool for market."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"is_pure","docs":["Whether the pool only contains one kind of token,","i.e. a pure pool.","For a pure pool, only the `long_token_amount` field is used."],"type":"u8"},{"name":"padding","type":{"array":["u8",15]}},{"name":"long_token_amount","docs":["Long token amount."],"type":"u128"},{"name":"short_token_amount","docs":["Short token amount."],"type":"u128"}]}},{"name":"PoolKind","docs":["Pool kind."],"repr":{"kind":"rust"},"type":{"kind":"enum","variants":[{"name":"Primary"},{"name":"SwapImpact"},{"name":"ClaimableFee"},{"name":"OpenInterestForLong"},{"name":"OpenInterestForShort"},{"name":"OpenInterestInTokensForLong"},{"name":"OpenInterestInTokensForShort"},{"name":"PositionImpact"},{"name":"BorrowingFactor"},{"name":"FundingAmountPerSizeForLong"},{"name":"FundingAmountPerSizeForShort"},{"name":"ClaimableFundingAmountPerSizeForLong"},{"name":"ClaimableFundingAmountPerSizeForShort"},{"name":"CollateralSumForLong"},{"name":"CollateralSumForShort"},{"name":"TotalBorrowing"}]}},{"name":"PoolStorage","docs":["A pool storage for market."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"rev","type":"u64"},{"name":"padding","type":{"array":["u8",8]}},{"name":"pool","type":{"defined":{"name":"Pool"}}}]}},{"name":"Pools","docs":["Market Pools."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"primary","docs":["Primary Pool."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"swap_impact","docs":["Swap Impact Pool."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"claimable_fee","docs":["Claimable Fee Pool."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"open_interest_for_long","docs":["Long open interest."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"open_interest_for_short","docs":["Short open interest."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"open_interest_in_tokens_for_long","docs":["Long open interest in tokens."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"open_interest_in_tokens_for_short","docs":["Short open interest in tokens."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"position_impact","docs":["Position Impact."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"borrowing_factor","docs":["Borrowing Factor."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"funding_amount_per_size_for_long","docs":["Funding Amount Per Size for long."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"funding_amount_per_size_for_short","docs":["Funding Amount Per Size for short."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"claimable_funding_amount_per_size_for_long","docs":["Claimable Funding Amount Per Size for long."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"claimable_funding_amount_per_size_for_short","docs":["Claimable Funding Amount Per Size for short."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"collateral_sum_for_long","docs":["Collateral sum pool for long."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"collateral_sum_for_short","docs":["Collateral sum pool for short."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"total_borrowing","docs":["Total borrowing pool."],"type":{"defined":{"name":"PoolStorage"}}},{"name":"reserved","type":{"array":[{"defined":{"name":"PoolStorage"}},16]}}]}},{"name":"Position","docs":["Position."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"bump","docs":["Bump seed."],"type":"u8"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"kind","docs":["Position kind (the representation of [`PositionKind`])."],"type":"u8"},{"name":"padding_0","docs":["Padding."],"type":{"array":["u8",13]}},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"market_token","docs":["The market token of the position market."],"type":"pubkey"},{"name":"collateral_token","docs":["Collateral token."],"type":"pubkey"},{"name":"state","docs":["Position State."],"type":{"defined":{"name":"PositionState"}}},{"name":"reserved","docs":["Reserved."],"type":{"array":["u8",256]}}]}},{"name":"PositionDecreased","docs":["Position decrease event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"report","docs":["Report."],"type":{"defined":{"name":"DecreasePositionReport","generics":[{"kind":"type","type":"u128"},{"kind":"type","type":"i128"}]}}}]}},{"name":"PositionFees","docs":["Position Fees."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"paid_order_fee_value","type":{"generic":"T"}},{"name":"order","type":{"defined":{"name":"OrderFees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"borrowing","type":{"defined":{"name":"BorrowingFees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"funding","type":{"defined":{"name":"FundingFees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"liquidation","type":{"option":{"defined":{"name":"LiquidationFees","generics":[{"kind":"type","type":{"generic":"T"}}]}}}}]}},{"name":"PositionIncreased","docs":["Position increased event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"report","docs":["Report."],"type":{"defined":{"name":"IncreasePositionReport","generics":[{"kind":"type","type":"u128"},{"kind":"type","type":"i128"}]}}}]}},{"name":"PositionState","docs":["Position State."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"trade_id","docs":["Trade id."],"type":"u64"},{"name":"increased_at","docs":["The time that the position last increased at."],"type":"i64"},{"name":"updated_at_slot","docs":["Updated at slot."],"type":"u64"},{"name":"decreased_at","docs":["The time that the position last decreased at."],"type":"i64"},{"name":"size_in_tokens","docs":["Size in tokens."],"type":"u128"},{"name":"collateral_amount","docs":["Collateral amount."],"type":"u128"},{"name":"size_in_usd","docs":["Size in usd."],"type":"u128"},{"name":"borrowing_factor","docs":["Borrowing factor."],"type":"u128"},{"name":"funding_fee_amount_per_size","docs":["Funding fee amount per size."],"type":"u128"},{"name":"long_token_claimable_funding_amount_per_size","docs":["Long token claimable funding amount per size."],"type":"u128"},{"name":"short_token_claimable_funding_amount_per_size","docs":["Short token claimable funding amount per size."],"type":"u128"},{"name":"reserved","docs":["Reserved."],"type":{"array":["u8",128]}}]}},{"name":"Price","docs":["Price."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"min","docs":["Minimum Price."],"type":{"generic":"T"}},{"name":"max","docs":["Maximum Price."],"type":{"generic":"T"}}]}},{"name":"PriceFeed","docs":["Custom Price Feed."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"provider","type":"u8"},{"name":"index","type":"u16"},{"name":"padding_0","type":{"array":["u8",12]}},{"name":"store","type":"pubkey"},{"name":"authority","type":"pubkey"},{"name":"token","type":"pubkey"},{"name":"feed_id","type":"pubkey"},{"name":"last_published_at_slot","type":"u64"},{"name":"last_published_at","type":"i64"},{"name":"price","type":{"defined":{"name":"PriceFeedPrice"}}},{"name":"reserved","type":{"array":["u8",256]}}]}},{"name":"PriceFeedPrice","docs":["Price structure for Price Feed."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"decimals","type":"u8"},{"name":"flags","type":{"defined":{"name":"PriceFlagContainer"}}},{"name":"padding","type":{"array":["u8",6]}},{"name":"ts","type":"i64"},{"name":"price","type":"u128"},{"name":"min_price","type":"u128"},{"name":"max_price","type":"u128"}]}},{"name":"PriceFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"PriceMap","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"PriceMapEntry"}},512]}},{"name":"padding","type":{"array":["u8",0]}},{"name":"count","type":"u32"}]}},{"name":"PriceMapEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",32]}},{"name":"value","type":{"defined":{"name":"SmallPrices"}}}]}},{"name":"Prices","docs":["Prices for execution."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"index_token_price","docs":["Index token price."],"type":{"defined":{"name":"Price","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"long_token_price","docs":["Long token price."],"type":{"defined":{"name":"Price","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"short_token_price","docs":["Short token price."],"type":{"defined":{"name":"Price","generics":[{"kind":"type","type":{"generic":"T"}}]}}}]}},{"name":"Referral","docs":["Referral."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"referrer","docs":["The (owner) address of the referrer.","","[`DEFAULT_PUBKEY`] means no referrer."],"type":"pubkey"},{"name":"code","docs":["Referral Code Address."],"type":"pubkey"},{"name":"referee_count","docs":["Number of referee."],"type":"u128"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"ReferralCodeV2","docs":["Referral Code."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"bump","docs":["Bump."],"type":"u8"},{"name":"code","docs":["Code bytes."],"type":{"array":["u8",8]}},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"next_owner","docs":["Next owner."],"type":"pubkey"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"RevertibleBuffer","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"rev","type":"u64"},{"name":"padding","type":{"array":["u8",8]}},{"name":"state","type":{"defined":{"name":"State"}}}]}},{"name":"RoleMap","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"RoleMapEntry"}},32]}},{"name":"padding","type":{"array":["u8",0]}},{"name":"count","type":"u32"}]}},{"name":"RoleMapEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",32]}},{"name":"value","type":{"defined":{"name":"RoleMetadata"}}}]}},{"name":"RoleMetadata","docs":["Role Metadata."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"name","type":{"array":["u8",32]}},{"name":"enabled","type":"u8"},{"name":"index","type":"u8"}]}},{"name":"RoleStore","docs":["Roles Store."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"roles","type":{"defined":{"name":"RoleMap"}}},{"name":"members","type":{"defined":{"name":"Members"}}}]}},{"name":"Shift","docs":["Shift."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Action header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"ShiftTokenAccounts"}}},{"name":"params","docs":["Shift params."],"type":{"defined":{"name":"ShiftActionParams"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"ShiftActionParams","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"from_market_token_amount","type":"u64"},{"name":"min_to_market_token_amount","type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"ShiftRemoved","docs":["Shift removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"shift","docs":["Shift."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"ShiftTokenAccounts","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"from_market_token","type":{"defined":{"name":"TokenAndAccount"}}},{"name":"to_market_token","type":{"defined":{"name":"TokenAndAccount"}}},{"name":"long_token","type":"pubkey"},{"name":"short_token","type":"pubkey"},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"SmallPrices","docs":["Zero-copy price structure for storing min max prices."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"decimal_multipler","type":"u8"},{"name":"flags","type":"u8"},{"name":"padding_0","type":{"array":["u8",2]}},{"name":"min","type":"u32"},{"name":"max","type":"u32"}]}},{"name":"State","serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"pools","type":{"defined":{"name":"Pools"}}},{"name":"clocks","type":{"defined":{"name":"Clocks"}}},{"name":"other","type":{"defined":{"name":"OtherState"}}},{"name":"reserved","type":{"array":["u8",1024]}}]}},{"name":"Store","docs":["Data Store."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"bump","type":{"array":["u8",1]}},{"name":"key_seed","type":{"array":["u8",32]}},{"name":"key","type":{"array":["u8",32]}},{"name":"padding_0","type":{"array":["u8",6]}},{"name":"role","type":{"defined":{"name":"RoleStore"}}},{"name":"authority","docs":["Store authority."],"type":"pubkey"},{"name":"next_authority","docs":["Next authority."],"type":"pubkey"},{"name":"token_map","docs":["The token map to used."],"type":"pubkey"},{"name":"disabled_features","docs":["Disabled features."],"type":{"defined":{"name":"DisabledFeatures"}}},{"name":"padding_1","type":{"array":["u8",4]}},{"name":"last_restarted_slot","docs":["Cached last cluster restart slot."],"type":"u64"},{"name":"treasury","docs":["Treasury Config."],"type":{"defined":{"name":"Treasury"}}},{"name":"amount","docs":["Amounts."],"type":{"defined":{"name":"Amounts"}}},{"name":"padding_2","type":{"array":["u8",8]}},{"name":"factor","docs":["Factors."],"type":{"defined":{"name":"Factors"}}},{"name":"address","docs":["Addresses."],"type":{"defined":{"name":"Addresses"}}},{"name":"gt","docs":["GT State."],"type":{"defined":{"name":"GtState"}}},{"name":"reserved","type":{"array":["u8",1024]}}]}},{"name":"SwapActionParams","docs":["Swap params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"primary_length","docs":["The length of primary swap path."],"type":"u8"},{"name":"secondary_length","docs":["The length of secondary swap path."],"type":"u8"},{"name":"num_tokens","docs":["The number of tokens."],"type":"u8"},{"name":"padding_0","type":{"array":["u8",1]}},{"name":"current_market_token","type":"pubkey"},{"name":"paths","docs":["Swap paths."],"type":{"array":["pubkey",10]}},{"name":"tokens","docs":["Tokens."],"type":{"array":["pubkey",25]}}]}},{"name":"SwapExecuted","docs":["Swap executed Event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"report","docs":["Report."],"type":{"defined":{"name":"SwapReport","generics":[{"kind":"type","type":"u128"},{"kind":"type","type":"i128"}]}}},{"name":"ty","docs":["Type."],"type":{"option":{"defined":{"name":"DecreasePositionSwapType"}}}}]}},{"name":"SwapParams","docs":["Swap params."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"is_token_in_long","type":"bool"},{"name":"token_in_amount","type":{"generic":"T"}},{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":{"generic":"T"}}]}}}]}},{"name":"SwapReport","docs":["Report of the execution of swap."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"params","type":{"defined":{"name":"SwapParams","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"result","type":{"defined":{"name":"SwapResult","generics":[{"kind":"type","type":{"generic":"Unsigned"}},{"kind":"type","type":{"generic":"Signed"}}]}}}]}},{"name":"SwapResult","generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"token_in_fees","type":{"defined":{"name":"Fees","generics":[{"kind":"type","type":{"generic":"Unsigned"}}]}}},{"name":"token_out_amount","type":{"generic":"Unsigned"}},{"name":"price_impact_value","type":{"generic":"Signed"}},{"name":"price_impact_amount","type":{"generic":"Unsigned"}}]}},{"name":"TokenAndAccount","docs":["Token Account."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"token","docs":["Token."],"type":"pubkey"},{"name":"account","docs":["Account."],"type":"pubkey"}]}},{"name":"TokenMapHeader","docs":["Header of `TokenMap`."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"store","docs":["The authorized store."],"type":"pubkey"},{"name":"tokens","type":{"defined":{"name":"Tokens"}}},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"Tokens","docs":["Fixed size map generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"data","type":{"array":[{"defined":{"name":"TokensEntry"}},256]}},{"name":"padding","type":{"array":["u8",0]}},{"name":"count","type":"u32"}]}},{"name":"TokensEntry","docs":["Entry."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"key","type":{"array":["u8",32]}},{"name":"value","type":"u8"}]}},{"name":"TradeData","docs":["Trade event data."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"flags","docs":["Trade flag."],"type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"trade_id","docs":["Trade id."],"type":"u64"},{"name":"authority","docs":["Authority."],"type":"pubkey"},{"name":"store","docs":["Store address."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"user","docs":["User."],"type":"pubkey"},{"name":"position","docs":["Position address."],"type":"pubkey"},{"name":"order","docs":["Order address."],"type":"pubkey"},{"name":"final_output_token","docs":["Final output token."],"type":"pubkey"},{"name":"ts","docs":["Trade ts."],"type":"i64"},{"name":"slot","docs":["Trade slot."],"type":"u64"},{"name":"before","docs":["Before state."],"type":{"defined":{"name":"PositionState"}}},{"name":"after","docs":["After state."],"type":{"defined":{"name":"PositionState"}}},{"name":"transfer_out","docs":["Transfer out."],"type":{"defined":{"name":"TransferOut"}}},{"name":"padding_1","type":{"array":["u8",8]}},{"name":"prices","docs":["Prices."],"type":{"defined":{"name":"TradePrices"}}},{"name":"execution_price","docs":["Execution price."],"type":"u128"},{"name":"price_impact_value","docs":["Price impact value."],"type":"i128"},{"name":"price_impact_diff","docs":["Price impact diff."],"type":"u128"},{"name":"pnl","docs":["Processed pnl."],"type":{"defined":{"name":"TradePnl"}}},{"name":"fees","docs":["Fees."],"type":{"defined":{"name":"TradeFees"}}},{"name":"output_amounts","docs":["Output amounts."],"type":{"defined":{"name":"TradeOutputAmounts"}}}]}},{"name":"TradeEvent","docs":["Trade event."],"type":{"kind":"struct","fields":[{"name":"flags","docs":["Trade flag."],"type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"trade_id","docs":["Trade id."],"type":"u64"},{"name":"authority","docs":["Authority."],"type":"pubkey"},{"name":"store","docs":["Store address."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"user","docs":["User."],"type":"pubkey"},{"name":"position","docs":["Position address."],"type":"pubkey"},{"name":"order","docs":["Order address."],"type":"pubkey"},{"name":"final_output_token","docs":["Final output token."],"type":"pubkey"},{"name":"ts","docs":["Trade ts."],"type":"i64"},{"name":"slot","docs":["Trade slot."],"type":"u64"},{"name":"before","docs":["Before state."],"type":{"defined":{"name":"EventPositionState"}}},{"name":"after","docs":["After state."],"type":{"defined":{"name":"EventPositionState"}}},{"name":"transfer_out","docs":["Transfer out."],"type":{"defined":{"name":"EventTransferOut"}}},{"name":"padding_1","type":{"array":["u8",8]}},{"name":"prices","docs":["Prices."],"type":{"defined":{"name":"EventTradePrices"}}},{"name":"execution_price","docs":["Execution price."],"type":"u128"},{"name":"price_impact_value","docs":["Price impact value."],"type":"i128"},{"name":"price_impact_diff","docs":["Price impact diff."],"type":"u128"},{"name":"pnl","docs":["Processed pnl."],"type":{"defined":{"name":"EventTradePnl"}}},{"name":"fees","docs":["Fees."],"type":{"defined":{"name":"EventTradeFees"}}},{"name":"output_amounts","docs":["Output amounts."],"type":{"defined":{"name":"EventTradeOutputAmounts"}}}]}},{"name":"TradeFees","docs":["Trade Fees."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"order_fee_for_receiver_amount","docs":["Order fee for receiver amount."],"type":"u128"},{"name":"order_fee_for_pool_amount","docs":["Order fee for pool amount."],"type":"u128"},{"name":"liquidation_fee_amount","docs":["Total liquidation fee amount."],"type":"u128"},{"name":"liquidation_fee_for_receiver_amount","docs":["Liquidation fee for pool amount."],"type":"u128"},{"name":"total_borrowing_fee_amount","docs":["Total borrowing fee amount."],"type":"u128"},{"name":"borrowing_fee_for_receiver_amount","docs":["Borrowing fee for receiver amount."],"type":"u128"},{"name":"funding_fee_amount","docs":["Funding fee amount."],"type":"u128"},{"name":"claimable_funding_fee_long_token_amount","docs":["Claimable funding fee long token amount."],"type":"u128"},{"name":"claimable_funding_fee_short_token_amount","docs":["Claimable funding fee short token amount."],"type":"u128"}]}},{"name":"TradeOutputAmounts","docs":["Output amounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"output_amount","docs":["Output amount."],"type":"u128"},{"name":"secondary_output_amount","docs":["Secondary output amount."],"type":"u128"}]}},{"name":"TradePnl","docs":["Trade PnL."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"pnl","docs":["Final PnL value."],"type":"i128"},{"name":"uncapped_pnl","docs":["Uncapped PnL value."],"type":"i128"}]}},{"name":"TradePrice","docs":["Price."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"min","docs":["Min price."],"type":"u128"},{"name":"max","docs":["Max price."],"type":"u128"}]}},{"name":"TradePrices","docs":["Prices."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"index","docs":["Index token price."],"type":{"defined":{"name":"TradePrice"}}},{"name":"long","docs":["Long token price."],"type":{"defined":{"name":"TradePrice"}}},{"name":"short","docs":["Short token price."],"type":{"defined":{"name":"TradePrice"}}}]}},{"name":"TransferOut","docs":["Transfer Out."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"executed","docs":["Executed."],"type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"final_output_token","docs":["Final output token."],"type":"u64"},{"name":"secondary_output_token","docs":["Secondary output token."],"type":"u64"},{"name":"long_token","docs":["Long token."],"type":"u64"},{"name":"short_token","docs":["Short token."],"type":"u64"},{"name":"long_token_for_claimable_account_of_user","docs":["Long token amount for claimable account of user."],"type":"u64"},{"name":"short_token_for_claimable_account_of_user","docs":["Short token amount for cliamable account of user."],"type":"u64"},{"name":"long_token_for_claimable_account_of_holding","docs":["Long token amount for claimable account of holding."],"type":"u64"},{"name":"short_token_for_claimable_account_of_holding","docs":["Short token amount for claimable account of holding."],"type":"u64"}]}},{"name":"Treasury","docs":["Treasury."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"receiver","docs":["Receiver."],"type":"pubkey"},{"name":"next_receiver","docs":["Next receiver."],"type":"pubkey"},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"UpdateBorrowingReport","docs":["Update Borrowing Report."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"duration_in_seconds","type":"u64"},{"name":"next_cumulative_borrowing_factor_for_long","type":{"generic":"T"}},{"name":"next_cumulative_borrowing_factor_for_short","type":{"generic":"T"}}]}},{"name":"UpdateFundingReport","docs":["Update Funding Report."],"generics":[{"kind":"type","name":"Unsigned"},{"kind":"type","name":"Signed"}],"type":{"kind":"struct","fields":[{"name":"duration_in_seconds","type":"u64"},{"name":"next_funding_factor_per_second","type":{"generic":"Signed"}},{"name":"delta_funding_amount_per_size","type":{"array":[{"generic":"Unsigned"},4]}},{"name":"delta_claimable_funding_amount_per_size","type":{"array":[{"generic":"Unsigned"},4]}}]}},{"name":"UpdateGlvParams","docs":["GLV Update Params."],"type":{"kind":"struct","fields":[{"name":"min_tokens_for_first_deposit","docs":["Minimum amount for the first GLV deposit."],"type":{"option":"u64"}},{"name":"shift_min_interval_secs","docs":["Minimum shift interval seconds."],"type":{"option":"u32"}},{"name":"shift_max_price_impact_factor","docs":["Maximum price impact factor after shift."],"type":{"option":"u128"}},{"name":"shift_min_value","docs":["Minimum shift value."],"type":{"option":"u128"}}]}},{"name":"UpdateOrderParams","docs":["Update Order Params."],"type":{"kind":"struct","fields":[{"name":"size_delta_value","docs":["Size delta in USD."],"type":{"option":"u128"}},{"name":"acceptable_price","docs":["Acceptable price."],"type":{"option":"u128"}},{"name":"trigger_price","docs":["Trigger price."],"type":{"option":"u128"}},{"name":"min_output","docs":["Min output amount."],"type":{"option":"u128"}},{"name":"valid_from_ts","docs":["Valid from this timestamp."],"type":{"option":"i64"}}]}},{"name":"UpdateTokenConfigParams","type":{"kind":"struct","fields":[{"name":"heartbeat_duration","type":"u32"},{"name":"precision","type":"u8"},{"name":"feeds","type":{"vec":"pubkey"}},{"name":"timestamp_adjustments","type":{"vec":"u32"}},{"name":"expected_provider","type":{"option":"u8"}}]}},{"name":"UserFlagContainer","docs":["Flags container generated by the macro."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"value","type":"u8"}]}},{"name":"UserGtState","docs":["GT State."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"rank","type":"u8"},{"name":"padding_0","type":{"array":["u8",7]}},{"name":"last_minted_at","type":"i64"},{"name":"total_minted","type":"u64"},{"name":"amount","type":"u64"},{"name":"padding_1","type":{"array":["u8",32]}},{"name":"paid_fee_value","type":"u128"},{"name":"minted_fee_value","type":"u128"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"UserHeader","docs":["Header of `User` Account."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"version","docs":["Version of the user account."],"type":"u8"},{"name":"bump","docs":["The bump seed."],"type":"u8"},{"name":"flags","type":{"defined":{"name":"UserFlagContainer"}}},{"name":"padding_0","type":{"array":["u8",13]}},{"name":"owner","docs":["The owner of this user account."],"type":"pubkey"},{"name":"store","docs":["The store."],"type":"pubkey"},{"name":"referral","docs":["Referral."],"type":{"defined":{"name":"Referral"}}},{"name":"gt","docs":["GT State."],"type":{"defined":{"name":"UserGtState"}}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"WithdrawParams","docs":["Withdraw params."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"market_token_amount","type":{"generic":"T"}},{"name":"prices","type":{"defined":{"name":"Prices","generics":[{"kind":"type","type":{"generic":"T"}}]}}}]}},{"name":"WithdrawReport","docs":["Report of the execution of withdrawal."],"generics":[{"kind":"type","name":"T"}],"type":{"kind":"struct","fields":[{"name":"params","type":{"defined":{"name":"WithdrawParams","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"long_token_fees","type":{"defined":{"name":"Fees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"short_token_fees","type":{"defined":{"name":"Fees","generics":[{"kind":"type","type":{"generic":"T"}}]}}},{"name":"long_token_output","type":{"generic":"T"}},{"name":"short_token_output","type":{"generic":"T"}}]}},{"name":"Withdrawal","docs":["Withdrawal."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"header","docs":["Action header."],"type":{"defined":{"name":"ActionHeader"}}},{"name":"tokens","docs":["Token accounts."],"type":{"defined":{"name":"WithdrawalTokenAccounts"}}},{"name":"params","docs":["Withdrawal params."],"type":{"defined":{"name":"WithdrawalActionParams"}}},{"name":"swap","docs":["Swap params."],"type":{"defined":{"name":"SwapActionParams"}}},{"name":"padding_1","type":{"array":["u8",4]}},{"name":"reserved","type":{"array":["u8",128]}}]}},{"name":"WithdrawalActionParams","docs":["Withdrawal params."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"market_token_amount","docs":["Market token amount to burn."],"type":"u64"},{"name":"min_long_token_amount","docs":["The minimum acceptable amount of final long tokens to receive."],"type":"u64"},{"name":"min_short_token_amount","docs":["The minimum acceptable amount of final short tokens to receive."],"type":"u64"},{"name":"reserved","type":{"array":["u8",64]}}]}},{"name":"WithdrawalCreated","docs":["Withdrawal created event."],"type":{"kind":"struct","fields":[{"name":"ts","docs":["Event time."],"type":"i64"},{"name":"store","docs":["Store account."],"type":"pubkey"},{"name":"withdrawal","docs":["Withdrawal account."],"type":"pubkey"}]}},{"name":"WithdrawalExecuted","docs":["Withdrawal executed Event."],"type":{"kind":"struct","fields":[{"name":"rev","docs":["Revision."],"type":"u64"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"report","docs":["Report."],"type":{"defined":{"name":"WithdrawReport","generics":[{"kind":"type","type":"u128"}]}}}]}},{"name":"WithdrawalRemoved","docs":["Withdrawal removed event."],"type":{"kind":"struct","fields":[{"name":"id","docs":["Action id."],"type":"u64"},{"name":"ts","docs":["Timestamp."],"type":"i64"},{"name":"slot","docs":["Slot."],"type":"u64"},{"name":"store","docs":["Store."],"type":"pubkey"},{"name":"withdrawal","docs":["Withdrawal."],"type":"pubkey"},{"name":"market_token","docs":["Market token."],"type":"pubkey"},{"name":"owner","docs":["Owner."],"type":"pubkey"},{"name":"state","docs":["Final state."],"type":{"defined":{"name":"ActionState"}}},{"name":"reason","docs":["Reason."],"type":"string"}]}},{"name":"WithdrawalTokenAccounts","docs":["Token Accounts."],"serialization":"bytemuck","repr":{"kind":"c"},"type":{"kind":"struct","fields":[{"name":"final_long_token","docs":["Final long token accounts."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"final_short_token","docs":["Final short token accounts."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"market_token","docs":["Market token account."],"type":{"defined":{"name":"TokenAndAccount"}}},{"name":"reserved","type":{"array":["u8",128]}}]}}]}