{"address":"E7jPY6J5s2uAxAjJQX5tqoASkmFr6TYxVoMm97hPLNZ1","metadata":{"name":"agrofi","version":"0.1.0","spec":"0.1.0","description":"Created with Anchor"},"instructions":[{"name":"create_pool","docs":["Creates a new [AgroPool] account.","","May only be called by the program admin authority."],"discriminator":[233,146,209,142,207,104,64,188],"accounts":[{"name":"program_account","pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"token_mint"}]}},{"name":"pool_fees"},{"name":"signer","writable":true,"signer":true},{"name":"token_mint"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"deposit","docs":["Deposit user funds into a lending protocol, updating pool and user state."],"discriminator":[242,35,198,137,82,225,242,182],"accounts":[{"name":"signer","writable":true,"signer":true},{"name":"program_account","writable":true,"pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"program_token_account","writable":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"token_mint"}]}},{"name":"pool_fees","writable":true},{"name":"pool_user","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108,95,117,115,101,114]},{"kind":"account","path":"token_mint"},{"kind":"account","path":"pool_user_owner"}]}},{"name":"pool_user_owner","docs":["Must be either the same as the signer or a PDA controlled by the program."],"writable":true},{"name":"user_token_account","writable":true},{"name":"token_mint","writable":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"args","type":{"defined":{"name":"DepositIxArgs"}}}]},{"name":"get_balances","docs":["Calculate the balances in the lending pools supported by a given [AgroPool].","","This is a read-only operation and does not require any signatures.","It is provided primarily as a convenience for clients to avoid recalculation."],"discriminator":[7,176,166,37,177,24,146,160],"accounts":[{"name":"pool","pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"mint"}]}},{"name":"mint"}],"args":[]},{"name":"get_pool_supply_rate","docs":["Calculate the aggregate supply rate for a given [AgroPool], based on pool balances.","","This is a read-only operation and does not require any signatures.","It is provided primarily as a convenience for clients to avoid recalculation."],"discriminator":[109,77,114,69,177,146,145,249],"accounts":[{"name":"pool","pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"mint"}]}},{"name":"mint"}],"args":[],"returns":"f64"},{"name":"get_pool_user_balance","docs":["Calculate a user's balance in a specified [AgroPool].","","This is a read-only operation and does not require any signatures.","It is provided primarily as a convenience for clients to avoid recalculation."],"discriminator":[38,114,116,17,64,159,112,188],"accounts":[{"name":"pool","pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"mint"}]}},{"name":"pool_user","pda":{"seeds":[{"kind":"const","value":[112,111,111,108,95,117,115,101,114]},{"kind":"account","path":"mint"},{"kind":"account","path":"pool_user_owner"}]}},{"name":"pool_user_owner"},{"name":"mint"}],"args":[],"returns":"u64"},{"name":"get_supply_rates","docs":["Calculate the supply rates for the lending pools supported by a given [AgroPool].","","This is a read-only operation and does not require any signatures.","It is provided primarily as a convenience for clients to avoid recalculation."],"discriminator":[185,4,237,78,37,176,56,216],"accounts":[{"name":"pool","pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"mint"}]}},{"name":"mint"}],"args":[]},{"name":"initialize_lending_pool","docs":["Performs any initialization required for supporting a new protocol."],"discriminator":[236,76,136,68,196,14,9,177],"accounts":[{"name":"signer","signer":true},{"name":"program_account","writable":true,"pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"token_mint","optional":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"}],"args":[{"name":"args","type":{"defined":{"name":"InitializeLendingPoolIxArgs"}}}]},{"name":"initialize_program","docs":["Initializes the program.","","Must be called before any other instruction, and will fail if","called more than once."],"discriminator":[176,107,205,168,24,157,175,103],"accounts":[{"name":"program_account","writable":true,"pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"signer","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[{"name":"args","type":{"defined":{"name":"InitializeProgramArgs"}}}]},{"name":"rebalance","docs":["Redistribute assets in underlying pools, shifting all assets to the highest yield pool.","Because balances and rates are calculated on-chain, this instruction may be called by","anyone.","","Returns true if any assets were moved, false otherwise. This can be used to determine","if the pool is already optimally balanced and avoid unnecessary transactions.","","Note: this currently shifts all assets every time. A future version of this function may","only partially shift assets, once the protocol is managing enough assets to meaningfully","influence rates."],"discriminator":[108,158,77,9,210,52,88,62],"accounts":[{"name":"signer","writable":true,"signer":true},{"name":"program_account","writable":true,"pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"program_token_account","writable":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"token_mint"}]}},{"name":"token_mint","writable":true},{"name":"token_program"},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[],"returns":"bool"},{"name":"set_lending_pools","docs":["Sets the lending pools supported by an [AgroPool]."],"discriminator":[225,210,14,110,80,61,19,233],"accounts":[{"name":"signer","signer":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"mint"}]}},{"name":"mint"}],"args":[{"name":"lending_markets","type":{"vec":{"defined":{"name":"LendingMarket"}}}}]},{"name":"wipe","discriminator":[192,226,18,70,115,4,167,99],"accounts":[{"name":"redeem_account","writable":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"withdraw","docs":["Withdraw user funds from a lending protocol, updating pool and user state."],"discriminator":[183,18,70,156,148,109,161,34],"accounts":[{"name":"signer","writable":true,"signer":true},{"name":"program_account","writable":true,"pda":{"seeds":[{"kind":"const","value":[97,103,114,111,102,105]}]}},{"name":"program_token_account","writable":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]},{"kind":"account","path":"token_mint"}]}},{"name":"pool_fees","writable":true},{"name":"pool_user","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108,95,117,115,101,114]},{"kind":"account","path":"token_mint"},{"kind":"account","path":"pool_user_owner"}]}},{"name":"pool_user_owner","docs":["Must be either the same as the signer or a PDA controlled by the program."],"writable":true},{"name":"user_token_account","writable":true},{"name":"token_mint","writable":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"}],"args":[{"name":"args","type":{"defined":{"name":"WithdrawIxArgs"}}}]}],"accounts":[{"name":"AgroPool","discriminator":[88,81,171,117,49,135,39,43]},{"name":"PoolUserAccount","discriminator":[32,21,167,152,51,46,168,237]},{"name":"ProgramAccount","discriminator":[19,199,219,91,104,24,64,141]}],"events":[{"name":"DepositEvent","discriminator":[120,248,61,83,31,142,107,144]},{"name":"WithdrawEvent","discriminator":[22,9,133,26,160,44,71,192]}],"errors":[{"code":6000,"name":"InvalidMarketAuthority","msg":"Market authority is invalid"},{"code":6001,"name":"InvalidMarketOwner","msg":"Market owner is invalid"},{"code":6002,"name":"InvalidAccountOwner","msg":"Input account owner is not the program address"},{"code":6003,"name":"InvalidAmount","msg":"Input amount is invalid"},{"code":6004,"name":"InvalidConfig","msg":"Input config value is invalid"},{"code":6005,"name":"InvalidSigner","msg":"Input account must be a signer"},{"code":6006,"name":"InvalidAccountInput","msg":"Invalid account input"},{"code":6007,"name":"MathOverflow","msg":"Math operation overflow"},{"code":6008,"name":"InsufficientLiquidity","msg":"Insufficient liquidity available"},{"code":6009,"name":"ReserveStale","msg":"Reserve state needs to be refreshed"},{"code":6010,"name":"WithdrawTooSmall","msg":"Withdraw amount too small"},{"code":6011,"name":"WithdrawTooLarge","msg":"Withdraw amount too large"},{"code":6012,"name":"BorrowTooSmall","msg":"Borrow amount too small to receive liquidity after fees"},{"code":6013,"name":"BorrowTooLarge","msg":"Borrow amount too large for deposited collateral"},{"code":6014,"name":"RepayTooSmall","msg":"Repay amount too small to transfer liquidity"},{"code":6015,"name":"LiquidationTooSmall","msg":"Liquidation amount too small to receive collateral"},{"code":6016,"name":"ObligationHealthy","msg":"Cannot liquidate healthy obligations"},{"code":6017,"name":"ObligationStale","msg":"Obligation state needs to be refreshed"},{"code":6018,"name":"ObligationReserveLimit","msg":"Obligation reserve limit exceeded"},{"code":6019,"name":"InvalidObligationOwner","msg":"Obligation owner is invalid"},{"code":6020,"name":"ObligationDepositsEmpty","msg":"Obligation deposits are empty"},{"code":6021,"name":"ObligationBorrowsEmpty","msg":"Obligation borrows are empty"},{"code":6022,"name":"ObligationDepositsZero","msg":"Obligation deposits have zero value"},{"code":6023,"name":"ObligationBorrowsZero","msg":"Obligation borrows have zero value"},{"code":6024,"name":"InvalidObligationCollateral","msg":"Invalid obligation collateral"},{"code":6025,"name":"InvalidObligationLiquidity","msg":"Invalid obligation liquidity"},{"code":6026,"name":"ObligationCollateralEmpty","msg":"Obligation collateral is empty"},{"code":6027,"name":"ObligationLiquidityEmpty","msg":"Obligation liquidity is empty"},{"code":6028,"name":"NegativeInterestRate","msg":"Interest rate is negative"},{"code":6029,"name":"InvalidOracleConfig","msg":"Input oracle config is invalid"},{"code":6030,"name":"InsufficientProtocolFeesToRedeem","msg":"Insufficient protocol fees to claim or no liquidity available"},{"code":6031,"name":"FlashBorrowCpi","msg":"No cpi flash borrows allowed"},{"code":6032,"name":"NoFlashRepayFound","msg":"No corresponding repay found for flash borrow"},{"code":6033,"name":"InvalidFlashRepay","msg":"Invalid repay found"},{"code":6034,"name":"FlashRepayCpi","msg":"No cpi flash repays allowed"},{"code":6035,"name":"MultipleFlashBorrows","msg":"Multiple flash borrows not allowed in the same transaction"},{"code":6036,"name":"FlashLoansDisabled","msg":"Flash loans are disabled for this reserve"},{"code":6037,"name":"SwitchboardV2Error","msg":"Switchboard error"},{"code":6038,"name":"CouldNotDeserializeScope","msg":"Cannot deserialize the scope price account"},{"code":6039,"name":"PriceTooOld","msg":"Price too old"},{"code":6040,"name":"PriceTooDivergentFromTwap","msg":"Price too divergent from twap"},{"code":6041,"name":"InvalidTwapPrice","msg":"Invalid twap price"},{"code":6042,"name":"GlobalEmergencyMode","msg":"Emergency mode is enabled"},{"code":6043,"name":"InvalidFlag","msg":"Invalid lending market config"},{"code":6044,"name":"PriceNotValid","msg":"Price is not valid"},{"code":6045,"name":"PriceIsBiggerThanHeuristic","msg":"Price is bigger than allowed by heuristic"},{"code":6046,"name":"PriceIsLowerThanHeuristic","msg":"Price lower than allowed by heuristic"},{"code":6047,"name":"PriceIsZero","msg":"Price is zero"},{"code":6048,"name":"PriceConfidenceTooWide","msg":"Price confidence too wide"},{"code":6049,"name":"IntegerOverflow","msg":"Conversion between integers failed"},{"code":6050,"name":"NoFarmForReserve","msg":"This reserve does not have a farm"},{"code":6051,"name":"IncorrectInstructionInPosition","msg":"Wrong instruction at expected position"},{"code":6052,"name":"NoPriceFound","msg":"No price found"},{"code":6053,"name":"InvalidTwapConfig","msg":"Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap"},{"code":6054,"name":"InvalidPythPriceAccount","msg":"Pyth price account does not match configuration"},{"code":6055,"name":"InvalidSwitchboardAccount","msg":"Switchboard account(s) do not match configuration"},{"code":6056,"name":"InvalidScopePriceAccount","msg":"Scope price account does not match configuration"},{"code":6057,"name":"ObligationCollateralLtvZero","msg":"The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals"},{"code":6058,"name":"InvalidObligationSeedsValue","msg":"Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2"},{"code":6059,"name":"InvalidObligationId","msg":"Obligation id must be 0"},{"code":6060,"name":"InvalidBorrowRateCurvePoint","msg":"Invalid borrow rate curve point"},{"code":6061,"name":"InvalidUtilizationRate","msg":"Invalid utilization rate"},{"code":6062,"name":"CannotSocializeObligationWithCollateral","msg":"Obligation hasn't been fully liquidated and debt cannot be socialized."},{"code":6063,"name":"ObligationEmpty","msg":"Obligation has no borrows or deposits."},{"code":6064,"name":"WithdrawalCapReached","msg":"Withdrawal cap is reached"},{"code":6065,"name":"LastTimestampGreaterThanCurrent","msg":"The last interval start timestamp is greater than the current timestamp"},{"code":6066,"name":"LiquidationRewardTooSmall","msg":"The reward amount is less than the minimum acceptable received liquidity"},{"code":6067,"name":"IsolatedAssetTierViolation","msg":"Isolated Asset Tier Violation"},{"code":6068,"name":"InconsistentElevationGroup","msg":"The obligation's elevation group and the reserve's are not the same"},{"code":6069,"name":"InvalidElevationGroup","msg":"The elevation group chosen for the reserve does not exist in the lending market"},{"code":6070,"name":"InvalidElevationGroupConfig","msg":"The elevation group updated has wrong parameters set"},{"code":6071,"name":"UnhealthyElevationGroupLtv","msg":"The current obligation must have most or all its debt repaid before changing the elevation group"},{"code":6072,"name":"ElevationGroupNewLoansDisabled","msg":"Elevation group does not accept any new loans or any new borrows/withdrawals"},{"code":6073,"name":"ReserveDeprecated","msg":"Reserve was deprecated, no longer usable"},{"code":6074,"name":"ReferrerAccountNotInitialized","msg":"Referrer account not initialized"},{"code":6075,"name":"ReferrerAccountMintMissmatch","msg":"Referrer account mint does not match the operation reserve mint"},{"code":6076,"name":"ReferrerAccountWrongAddress","msg":"Referrer account address is not a valid program address"},{"code":6077,"name":"ReferrerAccountReferrerMissmatch","msg":"Referrer account referrer does not match the owner referrer"},{"code":6078,"name":"ReferrerAccountMissing","msg":"Referrer account missing for obligation with referrer"},{"code":6079,"name":"InsufficientReferralFeesToRedeem","msg":"Insufficient referral fees to claim or no liquidity available"},{"code":6080,"name":"CpiDisabled","msg":"CPI disabled for this instruction"},{"code":6081,"name":"ShortUrlNotAsciiAlphanumeric","msg":"Referrer short_url is not ascii alphanumeric"},{"code":6082,"name":"ReserveObsolete","msg":"Reserve is marked as obsolete"},{"code":6083,"name":"ElevationGroupAlreadyActivated","msg":"Obligation already part of the same elevation group"},{"code":6084,"name":"ObligationInDeprecatedReserve","msg":"Obligation has a deposit in a deprecated reserve"},{"code":6085,"name":"ReferrerStateOwnerMismatch","msg":"Referrer state owner does not match the given signer"},{"code":6086,"name":"UserMetadataOwnerAlreadySet","msg":"User metadata owner is already set"},{"code":6087,"name":"CollateralNonLiquidatable","msg":"This collateral cannot be liquidated (LTV set to 0)"},{"code":6088,"name":"BorrowingDisabled","msg":"Borrowing is disabled"},{"code":6089,"name":"BorrowLimitExceeded","msg":"Cannot borrow above borrow limit"},{"code":6090,"name":"DepositLimitExceeded","msg":"Cannot deposit above deposit limit"},{"code":6091,"name":"BorrowingDisabledOutsideElevationGroup","msg":"Reserve does not accept any new borrows outside elevation group"},{"code":6092,"name":"NetValueRemainingTooSmall","msg":"Net value remaining too small"},{"code":6093,"name":"WorseLTVBlocked","msg":"Cannot get the obligation in a worse position"},{"code":6094,"name":"LiabilitiesBiggerThanAssets","msg":"Cannot have more liabilities than assets in a position"},{"code":6095,"name":"ReserveTokenBalanceMismatch","msg":"Reserve state and token account cannot drift"},{"code":6096,"name":"ReserveVaultBalanceMismatch","msg":"Reserve token account has been unexpectedly modified"},{"code":6097,"name":"ReserveAccountingMismatch","msg":"Reserve internal state accounting has been unexpectedly modified"},{"code":6098,"name":"BorrowingAboveUtilizationRateDisabled","msg":"Borrowing above set utilization rate is disabled"},{"code":6099,"name":"LiquidationBorrowFactorPriority","msg":"Liquidation must prioritize the debt with the highest borrow factor"},{"code":6100,"name":"LiquidationLowestLTVPriority","msg":"Liquidation must prioritize the collateral with the lowest LTV"},{"code":6101,"name":"ElevationGroupBorrowLimitExceeded","msg":"Elevation group borrow limit exceeded"},{"code":6102,"name":"ElevationGroupWithoutDebtReserve","msg":"The elevation group does not have a debt reserve defined"},{"code":6103,"name":"ElevationGroupMaxCollateralReserveZero","msg":"The elevation group does not allow any collateral reserves"},{"code":6104,"name":"ElevationGroupHasAnotherDebtReserve","msg":"In elevation group attempt to borrow from a reserve that is not the debt reserve"},{"code":6105,"name":"ElevationGroupDebtReserveAsCollateral","msg":"The elevation group's debt reserve cannot be used as a collateral reserve"},{"code":6106,"name":"ObligationCollateralExceedsElevationGroupLimit","msg":"Obligation have more collateral than the maximum allowed by the elevation group"},{"code":6107,"name":"ObligationElevationGroupMultipleDebtReserve","msg":"Obligation is an elevation group but have more than one debt reserve"},{"code":6108,"name":"UnsupportedTokenExtension","msg":"Mint has a token (2022) extension that is not supported"},{"code":6109,"name":"InvalidTokenAccount","msg":"Can't have an spl token mint with a t22 account"},{"code":6110,"name":"DepositDisabledOutsideElevationGroup","msg":"Can't deposit into this reserve outside elevation group"},{"code":6111,"name":"CannotCalculateReferralAmountDueToSlotsMismatch","msg":"Cannot calculate referral amount due to slots mismatch"}],"types":[{"name":"AgroPool","docs":["An AgroPool is responsible for depositing, withdrawing, and managing assets in","underlying lending pools. Each pool is tied to a single token mint."],"type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"is_frozen","docs":["When frozen, no deposits or withdrawals are allowed."],"type":"bool"},{"name":"admin_authority","docs":["The admin authority is the only key authorized to freeze/unfreeze the pool","or add lending pool configurations."],"type":"pubkey"},{"name":"token_mint","type":"pubkey"},{"name":"total_deposits","docs":["All-time deposit amount, irrespective of withdrawals."],"type":"u64"},{"name":"total_withdrawals","docs":["All-time withdrawal amount."],"type":"u64"},{"name":"total_shares","type":"u64"},{"name":"total_assets","docs":["Total tokens managed by the pool. Not normalized by decimals.","NOT up to date unless used immediately after calling [get_refreshed_pools]."],"type":"u64"},{"name":"lending_markets","docs":["The underlying lending pools configured for this pool."],"type":{"array":[{"defined":{"name":"LendingMarket"}},8]}},{"name":"_lending_pools_padding","type":{"array":["u32",8]}},{"name":"padding","type":{"array":["u8",512]}}]}},{"name":"DepositEvent","type":{"kind":"struct","fields":[{"name":"pool","type":"pubkey"},{"name":"user","type":"pubkey"},{"name":"amount","type":"u64"}]}},{"name":"DepositIxArgs","type":{"kind":"struct","fields":[{"name":"amount","docs":["Amount to deposit."],"type":"u64"},{"name":"crosschain_id","docs":["Optional unique ID, typically a non-Solana public key,","or derived from a public key.","If crosschain_pubkey is supplied, a corresponding PDA will be","used as the user account."],"type":{"option":"bytes"}}]}},{"name":"EvmTransferRequest","docs":["A crosschain transfer request to an EVM account from a crosschain request.","Such requests involve bridging assets through a relay service."],"type":{"kind":"struct","fields":[{"name":"amount","type":"u64"},{"name":"source_address","docs":["Address of the non-Solana public key.","Keys must be made into 32 bytes, whether by 0-padding or truncation."],"type":"string"},{"name":"destination_address","docs":["Evm destination address, padded to 32 bytes."],"type":"string"},{"name":"token_mint","docs":["Solana token mint."],"type":"string"},{"name":"relay_memo_data","docs":["The https://relay.link memo ID for the bridge."],"type":"bytes"},{"name":"nonce","docs":["Used to prevent replay attacks.","Instead of a traditional nonce, we use the user's total_withdrawals."],"type":"u64"}]}},{"name":"InitializeLendingPoolIxArgs","type":{"kind":"enum","variants":[{"name":"MarginFi"},{"name":"Kamino","fields":[{"defined":{"name":"KaminoInitializeAccountsArgs"}}]},{"name":"Solend","fields":[{"defined":{"name":"SolendInitializeAccountsArgs"}}]},{"name":"Drift"}]}},{"name":"InitializeProgramArgs","type":{"kind":"struct","fields":[{"name":"admin_authority","type":"pubkey"}]}},{"name":"KaminoInitializeAccountsArgs","type":{"kind":"struct","fields":[{"name":"recent_slot","type":"u64"}]}},{"name":"KaminoMarket","type":{"kind":"enum","variants":[{"name":"Main"},{"name":"Alt"},{"name":"Jlp"}]}},{"name":"LendingMarket","type":{"kind":"enum","variants":[{"name":"None"},{"name":"MarginFi"},{"name":"Drift"},{"name":"Solend"},{"name":"Kamino","fields":[{"defined":{"name":"KaminoMarket"}}]}]}},{"name":"PoolUserAccount","type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"pool","docs":["The [AgroPool] this account falls under."],"type":"pubkey"},{"name":"owner","docs":["The account's authority."],"type":"pubkey"},{"name":"shares","docs":["The amount of pool shares currently held."],"type":"u64"},{"name":"total_deposits","docs":["The all-time deposits made, in token amount."],"type":"u64"},{"name":"total_withdrawals","docs":["The all-time withdrawals made, in token amount, excluding fees."],"type":"u64"},{"name":"total_fees_paid","docs":["The total amount of interest earned paid to the pool."],"type":"u64"},{"name":"padding","type":{"array":["u8",128]}}]}},{"name":"ProgramAccount","type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"admin_authority","type":"pubkey"},{"name":"padding","type":{"array":["u8",256]}}]}},{"name":"SignedTransferRequest","type":{"kind":"struct","fields":[{"name":"request","type":{"defined":{"name":"TransferRequest"}}},{"name":"signature","type":"bytes"}]}},{"name":"SolanaTransferRequest","docs":["A crosschain transfer request to a Solana account from a crosschain account."],"type":{"kind":"struct","fields":[{"name":"amount","type":"u64"},{"name":"source_address","docs":["Address of the non-Solana public key."],"type":"string"},{"name":"destination_address","docs":["Destination address on Solana."],"type":"string"},{"name":"token_mint","docs":["Solana token mint."],"type":"string"},{"name":"nonce","docs":["Used to prevent replay attacks.","Instead of a traditional nonce, we use the user's total_withdrawals."],"type":"u64"}]}},{"name":"SolendInitializeAccountsArgs","type":{"kind":"struct","fields":[{"name":"obligation_seed","type":"string"}]}},{"name":"TransferRequest","docs":["A crosschain transfer request."],"type":{"kind":"enum","variants":[{"name":"Solana","fields":[{"defined":{"name":"SolanaTransferRequest"}}]},{"name":"Evm","fields":[{"defined":{"name":"EvmTransferRequest"}}]}]}},{"name":"WithdrawEvent","type":{"kind":"struct","fields":[{"name":"pool","type":"pubkey"},{"name":"user","type":"pubkey"},{"name":"amount","type":"u64"}]}},{"name":"WithdrawIxArgs","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"},{"name":"crosschain_options","type":{"option":{"defined":{"name":"SignedTransferRequest"}}}}]}}]}