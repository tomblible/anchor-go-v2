{"version":"0.0.1","name":"voter_stake_registry","instructions":[{"name":"initializeRegistrarV0","accounts":[{"name":"registrar","isMut":true,"isSigner":false,"docs":["The voting registrar. There can only be a single registrar","per governance realm and governing mint."],"pda":{"seeds":[{"kind":"account","type":"publicKey","path":"realm"},{"kind":"const","type":"string","value":"registrar"},{"kind":"account","type":"publicKey","account":"Mint","path":"realm_governing_token_mint"}]}},{"name":"collection","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"collection"},{"kind":"account","type":"publicKey","account":"Registrar","path":"registrar"}]}},{"name":"metadata","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"collection"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"masterEdition","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"collection"},{"kind":"const","type":"string","value":"edition"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"tokenAccount","isMut":true,"isSigner":false},{"name":"realm","isMut":false,"isSigner":false,"docs":["An spl-governance realm","","realm is validated in the instruction:","- realm is owned by the governance_program_id","- realm_governing_token_mint must be the community or council mint","- realm_authority is realm.authority"]},{"name":"governanceProgramId","isMut":false,"isSigner":false,"docs":["The program id of the spl-governance program the realm belongs to."]},{"name":"realmGoverningTokenMint","isMut":false,"isSigner":false,"docs":["Either the realm community mint or the council mint."]},{"name":"realmAuthority","isMut":false,"isSigner":true},{"name":"payer","isMut":true,"isSigner":true},{"name":"tokenMetadataProgram","isMut":false,"isSigner":false},{"name":"associatedTokenProgram","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"rent","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"InitializeRegistrarArgsV0"}}]},{"name":"configureVotingMintV0","accounts":[{"name":"registrar","isMut":true,"isSigner":false,"relations":["realm_authority"]},{"name":"realmAuthority","isMut":false,"isSigner":true},{"name":"mint","isMut":false,"isSigner":false,"docs":["Tokens of this mint will produce vote weight"]},{"name":"payer","isMut":true,"isSigner":true},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"ConfigureVotingMintArgsV0"}}]},{"name":"updateMaxVoterWeightV0","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"registrar","isMut":false,"isSigner":false,"relations":["realm_governing_token_mint"]},{"name":"realmGoverningTokenMint","isMut":false,"isSigner":false},{"name":"maxVoterWeightRecord","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"max-voter-weight-record"},{"kind":"account","type":"publicKey","account":"Registrar","path":"registrar.realm"},{"kind":"account","type":"publicKey","account":"Registrar","path":"registrar.realm_governing_token_mint"}]}},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"initializePositionV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false,"relations":["collection"]},{"name":"collection","isMut":false,"isSigner":false},{"name":"collectionMetadata","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"collection"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"collectionMasterEdition","isMut":false,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"collection"},{"kind":"const","type":"string","value":"edition"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"position","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]}},{"name":"mint","isMut":true,"isSigner":false},{"name":"metadata","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"masterEdition","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"metadata"},{"kind":"account","type":"publicKey","path":"token_metadata_program"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"},{"kind":"const","type":"string","value":"edition"}],"programId":{"kind":"account","type":"publicKey","path":"token_metadata_program"}}},{"name":"positionTokenAccount","isMut":true,"isSigner":false},{"name":"recipient","isMut":false,"isSigner":false},{"name":"vault","isMut":true,"isSigner":false},{"name":"payer","isMut":true,"isSigner":true},{"name":"depositMint","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"associatedTokenProgram","isMut":false,"isSigner":false},{"name":"tokenMetadataProgram","isMut":false,"isSigner":false},{"name":"rent","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"InitializePositionArgsV0"}}]},{"name":"depositV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"position","isMut":true,"isSigner":false,"relations":["registrar"]},{"name":"vault","isMut":true,"isSigner":false},{"name":"mint","isMut":false,"isSigner":false},{"name":"depositToken","isMut":true,"isSigner":false,"relations":["mint"]},{"name":"depositAuthority","isMut":false,"isSigner":true},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"DepositArgsV0"}}]},{"name":"withdrawV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"position","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]},"relations":["registrar","mint"]},{"name":"mint","isMut":false,"isSigner":false},{"name":"positionTokenAccount","isMut":false,"isSigner":false},{"name":"positionAuthority","isMut":false,"isSigner":true},{"name":"vault","isMut":true,"isSigner":false},{"name":"depositMint","isMut":false,"isSigner":false},{"name":"destination","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"WithdrawArgsV0"}}]},{"name":"closePositionV0","accounts":[{"name":"solDestination","isMut":true,"isSigner":false},{"name":"position","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]},"relations":["mint","registrar"]},{"name":"registrar","isMut":false,"isSigner":false},{"name":"mint","isMut":true,"isSigner":false},{"name":"positionTokenAccount","isMut":true,"isSigner":false},{"name":"positionAuthority","isMut":false,"isSigner":true},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"tokenMetadataProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"resetLockupV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"positionUpdateAuthority","isMut":false,"isSigner":true},{"name":"position","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]},"relations":["registrar","mint"]},{"name":"mint","isMut":false,"isSigner":false},{"name":"positionTokenAccount","isMut":false,"isSigner":false},{"name":"positionAuthority","isMut":false,"isSigner":true}],"args":[{"name":"args","type":{"defined":"ResetLockupArgsV0"}}]},{"name":"transferV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"positionUpdateAuthority","isMut":false,"isSigner":true},{"name":"sourcePosition","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]},"relations":["registrar","mint"]},{"name":"mint","isMut":false,"isSigner":false},{"name":"positionTokenAccount","isMut":false,"isSigner":false},{"name":"positionAuthority","isMut":false,"isSigner":true},{"name":"targetPosition","isMut":true,"isSigner":false,"relations":["registrar"]},{"name":"depositMint","isMut":false,"isSigner":false},{"name":"sourceVault","isMut":true,"isSigner":false},{"name":"targetVault","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"associatedTokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"TransferArgsV0"}}]},{"name":"updateVoterWeightRecordV0","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"registrar","isMut":false,"isSigner":false},{"name":"voterWeightRecord","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"account","type":"publicKey","account":"Registrar","path":"registrar"},{"kind":"const","type":"string","value":"voter-weight-record"},{"kind":"arg","type":{"defined":"UpdateVoterWeightRecordArgsV0"},"path":"args.owner"}]}},{"name":"voterTokenOwnerRecord","isMut":false,"isSigner":false},{"name":"voterAuthority","isMut":false,"isSigner":true,"docs":["Authority of the voter","It can be either governing_token_owner or its delegate and must sign this instruction"]},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"UpdateVoterWeightRecordArgsV0"}}]},{"name":"setTimeOffsetV0","accounts":[{"name":"registrar","isMut":true,"isSigner":false,"relations":["realm_authority"]},{"name":"realmAuthority","isMut":false,"isSigner":true}],"args":[{"name":"timeOffset","type":"i64"}]},{"name":"castVoteV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"voterWeightRecord","isMut":true,"isSigner":false,"pda":{"seeds":[{"kind":"account","type":"publicKey","account":"Registrar","path":"registrar"},{"kind":"const","type":"string","value":"voter-weight-record"},{"kind":"arg","type":{"defined":"CastVoteArgsV0"},"path":"args.owner"}]}},{"name":"voterTokenOwnerRecord","isMut":false,"isSigner":false},{"name":"voterAuthority","isMut":false,"isSigner":true,"docs":["Authority of the voter who casts the vote","It can be either governing_token_owner or its delegate and must sign this instruction"]},{"name":"payer","isMut":true,"isSigner":true,"docs":["The account which pays for the transaction"]},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"args","type":{"defined":"CastVoteArgsV0"}}]},{"name":"relinquishVoteV0","accounts":[{"name":"registrar","isMut":false,"isSigner":false},{"name":"voterWeightRecord","isMut":true,"isSigner":false},{"name":"governance","isMut":false,"isSigner":false,"docs":["Governance account the Proposal is for"]},{"name":"proposal","isMut":false,"isSigner":false},{"name":"voterTokenOwnerRecord","isMut":false,"isSigner":false,"docs":["TokenOwnerRecord of the voter who cast the original vote"]},{"name":"voterAuthority","isMut":false,"isSigner":true,"docs":["Authority of the voter who cast the original vote","It can be either governing_token_owner or its delegate and must sign this instruction"]},{"name":"voteRecord","isMut":false,"isSigner":false,"docs":["The account is used to validate that it doesn't exist and if it doesn't then Anchor owner check throws error","The check is disabled here and performed inside the instruction","#[account(owner = registrar.governance_program_id)]"]},{"name":"beneficiary","isMut":true,"isSigner":false}],"args":[]},{"name":"ledgerTransferPositionV0","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"position","isMut":false,"isSigner":false,"pda":{"seeds":[{"kind":"const","type":"string","value":"position"},{"kind":"account","type":"publicKey","account":"Mint","path":"mint"}]},"relations":["mint"]},{"name":"mint","isMut":true,"isSigner":false},{"name":"fromTokenAccount","isMut":true,"isSigner":false},{"name":"toTokenAccount","isMut":true,"isSigner":false},{"name":"from","isMut":false,"isSigner":true},{"name":"to","isMut":false,"isSigner":true},{"name":"approver","isMut":false,"isSigner":true},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"associatedTokenProgram","isMut":false,"isSigner":false}],"args":[]}],"accounts":[{"name":"MaxVoterWeightRecord","docs":["MaxVoterWeightRecord account as defined in spl-governance-addin-api","It's redefined here without account_discriminator for Anchor to treat it as native account","","The account is used as an api interface to provide max voting power to the governance program from external addin contracts"],"type":{"kind":"struct","fields":[{"name":"realm","docs":["The Realm the MaxVoterWeightRecord belongs to"],"type":"publicKey"},{"name":"governingTokenMint","docs":["Governing Token Mint the MaxVoterWeightRecord is associated with","Note: The addin can take deposits of any tokens and is not restricted to the community or council tokens only"],"type":"publicKey"},{"name":"maxVoterWeight","docs":["Max voter weight","The max voter weight provided by the addin for the given realm and governing_token_mint"],"type":"u64"},{"name":"maxVoterWeightExpiry","docs":["The slot when the max voting weight expires","It should be set to None if the weight never expires","If the max vote weight decays with time, for example for time locked based weights, then the expiry must be set","As a pattern Revise instruction to update the max weight should be invoked before governance instruction within the same transaction","and the expiry set to the current slot to provide up to date weight"],"type":{"option":"u64"}},{"name":"reserved","docs":["Reserved space for future versions"],"type":{"array":["u8",8]}}]}},{"name":"PositionV0","type":{"kind":"struct","fields":[{"name":"registrar","type":"publicKey"},{"name":"mint","type":"publicKey"},{"name":"lockup","type":{"defined":"Lockup"}},{"name":"amountDepositedNative","docs":["Amount in deposited, in native currency. Withdraws of vested tokens","directly reduce this amount.","","This directly tracks the total amount added by the user. They may","never withdraw more than this amount."],"type":"u64"},{"name":"votingMintConfigIdx","type":"u8"},{"name":"numActiveVotes","type":"u16"},{"name":"genesisEnd","type":"i64"},{"name":"bumpSeed","type":"u8"}]}},{"name":"Registrar","docs":["Instance of a voting rights distributor."],"type":{"kind":"struct","fields":[{"name":"governanceProgramId","type":"publicKey"},{"name":"realm","type":"publicKey"},{"name":"realmGoverningTokenMint","type":"publicKey"},{"name":"realmAuthority","type":"publicKey"},{"name":"timeOffset","docs":["Debug only: time offset, to allow tests to move forward in time."],"type":"i64"},{"name":"positionUpdateAuthority","docs":["Allows a program to wrap updates to the position (transfer or reset lockup)"],"type":{"option":"publicKey"}},{"name":"collection","docs":["Storage for voting mints and their configuration."],"type":"publicKey"},{"name":"bumpSeed","type":"u8"},{"name":"collectionBumpSeed","type":"u8"},{"name":"reserved1","type":{"array":["u8",4]}},{"name":"reserved2","type":{"array":["u64",7]}},{"name":"votingMints","type":{"vec":{"defined":"VotingMintConfigV0"}}}]}},{"name":"VoterWeightRecord","docs":["VoterWeightRecord account as defined in spl-governance-addin-api","It's redefined here without account_discriminator for Anchor to treat it as native account","","The account is used as an api interface to provide voting power to the governance program from external addin contracts"],"type":{"kind":"struct","fields":[{"name":"realm","docs":["The Realm the VoterWeightRecord belongs to"],"type":"publicKey"},{"name":"governingTokenMint","docs":["Governing Token Mint the VoterWeightRecord is associated with","Note: The addin can take deposits of any tokens and is not restricted to the community or council tokens only"],"type":"publicKey"},{"name":"governingTokenOwner","docs":["The owner of the governing token and voter","This is the actual owner (voter) and corresponds to TokenOwnerRecord.governing_token_owner"],"type":"publicKey"},{"name":"voterWeight","docs":["Voter's weight","The weight of the voter provided by the addin for the given realm, governing_token_mint and governing_token_owner (voter)"],"type":"u64"},{"name":"voterWeightExpiry","docs":["The slot when the voting weight expires","It should be set to None if the weight never expires","If the voter weight decays with time, for example for time locked based weights, then the expiry must be set","As a common pattern Revise instruction to update the weight should be invoked before governance instruction within the same transaction","and the expiry set to the current slot to provide up to date weight"],"type":{"option":"u64"}},{"name":"weightAction","docs":["The governance action the voter's weight pertains to","It allows to provided voter's weight specific to the particular action the weight is evaluated for","When the action is provided then the governance program asserts the executing action is the same as specified by the addin"],"type":{"option":{"defined":"VoterWeightAction"}}},{"name":"weightActionTarget","docs":["The target the voter's weight  action pertains to","It allows to provided voter's weight specific to the target the weight is evaluated for","For example when addin supplies weight to vote on a particular proposal then it must specify the proposal as the action target","When the target is provided then the governance program asserts the target is the same as specified by the addin"],"type":{"option":"publicKey"}},{"name":"reserved","docs":["Reserved space for future versions"],"type":{"array":["u8",8]}}]}}],"types":[{"name":"CastVoteArgsV0","type":{"kind":"struct","fields":[{"name":"proposal","type":"publicKey"},{"name":"owner","type":"publicKey"}]}},{"name":"ConfigureVotingMintArgsV0","type":{"kind":"struct","fields":[{"name":"idx","type":"u16"},{"name":"digitShift","type":"i8"},{"name":"baselineVoteWeightScaledFactor","type":"u64"},{"name":"maxExtraLockupVoteWeightScaledFactor","type":"u64"},{"name":"genesisVotePowerMultiplier","type":"u8"},{"name":"genesisVotePowerMultiplierExpirationTs","type":"i64"},{"name":"lockupSaturationSecs","type":"u64"}]}},{"name":"DepositArgsV0","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"InitializePositionArgsV0","type":{"kind":"struct","fields":[{"name":"kind","type":{"defined":"LockupKind"}},{"name":"periods","type":"u32"}]}},{"name":"InitializeRegistrarArgsV0","type":{"kind":"struct","fields":[{"name":"positionUpdateAuthority","type":{"option":"publicKey"}}]}},{"name":"ResetLockupArgsV0","type":{"kind":"struct","fields":[{"name":"kind","type":{"defined":"LockupKind"}},{"name":"periods","type":"u32"}]}},{"name":"TransferArgsV0","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"UpdateVoterWeightRecordArgsV0","type":{"kind":"struct","fields":[{"name":"voterWeightAction","type":{"defined":"VoterWeightAction"}},{"name":"owner","type":"publicKey"}]}},{"name":"WithdrawArgsV0","type":{"kind":"struct","fields":[{"name":"amount","type":"u64"}]}},{"name":"Lockup","type":{"kind":"struct","fields":[{"name":"startTs","docs":["Start of the lockup.","","Note, that if start_ts is in the future, the funds are nevertheless","locked up!","","Similarly vote power computations don't care about start_ts and always","assume the full interval from now to end_ts."],"type":"i64"},{"name":"endTs","docs":["End of the lockup."],"type":"i64"},{"name":"kind","docs":["Type of lockup."],"type":{"defined":"LockupKind"}}]}},{"name":"VotingMintConfigV0","docs":["Exchange rate for an asset that can be used to mint voting rights.","","See documentation of configure_voting_mint for details on how","native token amounts convert to vote weight."],"type":{"kind":"struct","fields":[{"name":"mint","docs":["Mint for this entry."],"type":"publicKey"},{"name":"baselineVoteWeightScaledFactor","docs":["Vote weight factor for all funds in the account, no matter if locked or not.","","In 1/SCALED_FACTOR_BASE units."],"type":"u64"},{"name":"maxExtraLockupVoteWeightScaledFactor","docs":["Maximum extra vote weight factor for lockups.","","This is the extra votes gained for lockups lasting lockup_saturation_secs or","longer. Shorter lockups receive only a fraction of the maximum extra vote weight,","based on lockup_time divided by lockup_saturation_secs.","","In 1/SCALED_FACTOR_BASE units."],"type":"u64"},{"name":"genesisVotePowerMultiplier","docs":["Genesis vote power multipliers for lockups.","","This is a multiplier applied to voting power for lockups created before","genesis_extra_lockup_expiration"],"type":"u8"},{"name":"genesisVotePowerMultiplierExpirationTs","docs":["Timestamp of when to stop applying the genesis_extra_lockup_vote_weight_scaled_factor"],"type":"i64"},{"name":"lockupSaturationSecs","docs":["Number of seconds of lockup needed to reach the maximum lockup bonus."],"type":"u64"},{"name":"digitShift","docs":["Number of digits to shift native amounts, applying a 10^digit_shift factor."],"type":"i8"}]}},{"name":"LockupKind","type":{"kind":"enum","variants":[{"name":"None"},{"name":"Cliff"},{"name":"Constant"}]}},{"name":"VoterWeightAction","docs":["VoterWeightAction enum as defined in spl-governance-addin-api","It's redefined here for Anchor to export it to IDL"],"type":{"kind":"enum","variants":[{"name":"CastVote"},{"name":"CommentProposal"},{"name":"CreateGovernance"},{"name":"CreateProposal"},{"name":"SignOffProposal"}]}}],"errors":[{"code":6000,"name":"InvalidRate","msg":"Exchange rate must be greater than zero"},{"code":6001,"name":"RatesFull","msg":""},{"code":6002,"name":"VotingMintNotFound","msg":""},{"code":6003,"name":"DepositEntryNotFound","msg":""},{"code":6004,"name":"DepositEntryFull","msg":""},{"code":6005,"name":"VotingTokenNonZero","msg":""},{"code":6006,"name":"OutOfBoundsDepositEntryIndex","msg":""},{"code":6007,"name":"UnusedDepositEntryIndex","msg":""},{"code":6008,"name":"InsufficientUnlockedTokens","msg":""},{"code":6009,"name":"UnableToConvert","msg":""},{"code":6010,"name":"InvalidLockupPeriod","msg":""},{"code":6011,"name":"InvalidEndTs","msg":""},{"code":6012,"name":"InvalidDays","msg":""},{"code":6013,"name":"VotingMintConfigIndexAlreadyInUse","msg":""},{"code":6014,"name":"OutOfBoundsVotingMintConfigIndex","msg":""},{"code":6015,"name":"InvalidDecimals","msg":"Exchange rate decimals cannot be larger than registrar decimals"},{"code":6016,"name":"InvalidToDepositAndWithdrawInOneSlot","msg":""},{"code":6017,"name":"ShouldBeTheFirstIxInATx","msg":""},{"code":6018,"name":"ForbiddenCpi","msg":""},{"code":6019,"name":"InvalidMint","msg":""},{"code":6020,"name":"DebugInstruction","msg":""},{"code":6021,"name":"ClawbackNotAllowedOnDeposit","msg":""},{"code":6022,"name":"DepositStillLocked","msg":""},{"code":6023,"name":"InvalidAuthority","msg":""},{"code":6024,"name":"InvalidTokenOwnerRecord","msg":""},{"code":6025,"name":"InvalidRealmAuthority","msg":""},{"code":6026,"name":"VoterWeightOverflow","msg":""},{"code":6027,"name":"LockupSaturationMustBePositive","msg":""},{"code":6028,"name":"VotingMintConfiguredWithDifferentIndex","msg":""},{"code":6029,"name":"InternalProgramError","msg":""},{"code":6030,"name":"InsufficientLockedTokens","msg":""},{"code":6031,"name":"MustKeepTokensLocked","msg":""},{"code":6032,"name":"InvalidLockupKind","msg":""},{"code":6033,"name":"InvalidChangeToClawbackDepositEntry","msg":""},{"code":6034,"name":"InternalErrorBadLockupVoteWeight","msg":""},{"code":6035,"name":"DepositStartTooFarInFuture","msg":""},{"code":6036,"name":"VaultTokenNonZero","msg":""},{"code":6037,"name":"InvalidTimestampArguments","msg":""},{"code":6038,"name":"CastVoteIsNotAllowed","msg":"Cast vote is not allowed on update_voter_weight_record_v0 endpoint"},{"code":6039,"name":"InvalidProgramId","msg":"Program id was not what was expected"},{"code":6040,"name":"InvalidMintOwner","msg":""},{"code":6041,"name":"InvalidMintAmount","msg":""},{"code":6042,"name":"DuplicatedNftDetected","msg":""},{"code":6043,"name":"InvalidTokenOwnerForVoterWeightRecord","msg":""},{"code":6044,"name":"NftAlreadyVoted","msg":""},{"code":6045,"name":"InvalidProposalForNftVoteRecord","msg":""},{"code":6046,"name":"InvalidTokenOwnerForNftVoteRecord","msg":""},{"code":6047,"name":"UninitializedAccount","msg":""},{"code":6048,"name":"PositionNotWritable","msg":""},{"code":6049,"name":"InvalidVoteRecordForNftVoteRecord","msg":""},{"code":6050,"name":"VoteRecordMustBeWithdrawn","msg":""},{"code":6051,"name":"VoterWeightRecordMustBeExpired","msg":""},{"code":6052,"name":"InvalidMintForPosition","msg":""},{"code":6053,"name":"InvalidOwner","msg":""},{"code":6054,"name":"NoDepositOnGenesisPositions","msg":"You may not deposit additional tokens on a position created during the genesis period that still has the genesis multiplier"},{"code":6055,"name":"ActiveVotesExist","msg":"Cannot change a position while active votes exist"},{"code":6056,"name":"UnauthorizedPositionUpdateAuthority","msg":"Position update authority must sign off on this transaction"},{"code":6057,"name":"SamePosition","msg":"Cannot transfer to the same position"}]}