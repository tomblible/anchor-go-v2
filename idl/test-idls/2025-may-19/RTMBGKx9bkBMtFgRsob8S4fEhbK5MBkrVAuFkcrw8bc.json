{"address":"RTMBGKx9bkBMtFgRsob8S4fEhbK5MBkrVAuFkcrw8bc","metadata":{"name":"roam_token_manager","version":"1.0.0","spec":"0.1.0","description":"A program to manage the Roam token release schedule."},"docs":["Main program module containing all instruction handlers"],"instructions":[{"name":"accept_admin","docs":["Accepts the new admin role (step 2)","","This instruction:","- Requires new admin signature","- Finalizes admin change"],"discriminator":[112,42,45,90,116,181,13,170],"accounts":[{"name":"new_admin","docs":["The new admin must sign to accept the role"],"signer":true},{"name":"config","docs":["Program configuration PDA containing admin authority","Will be updated with new admin public key"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}}],"args":[]},{"name":"change_admin","docs":["Changes the program admin (step 1)","","This instruction:","- Requires current admin signature","- Sets pending admin"],"discriminator":[193,151,203,161,200,202,32,146],"accounts":[{"name":"admin","docs":["Only the current admin can initiate admin change"],"signer":true,"relations":["config"]},{"name":"config","docs":["Program configuration PDA containing admin authority","Will be updated with pending admin"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}}],"args":[{"name":"args","type":{"defined":{"name":"ChangeAdminArgs"}}}]},{"name":"change_operator","docs":["Changes the program operator","","This instruction:","- Requires admin signature","- Updates operator public key in Config PDA","- Allows delegation of operational responsibilities"],"discriminator":[188,251,169,61,182,74,90,246],"accounts":[{"name":"admin","docs":["Admin account that must sign the transaction","Only the admin can change the operator"],"signer":true,"relations":["config"]},{"name":"config","docs":["Program configuration PDA containing operator authority","Will be updated with new operator public key"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}}],"args":[{"name":"args","type":{"defined":{"name":"ChangeOperatorArgs"}}}]},{"name":"initialize","docs":["Initializes the token manager program","","This instruction:","- Creates and initializes the Config PDA","- Creates and initializes the Cycle PDA","- Sets up initial admin and operator","- Configures initial vaults"],"discriminator":[175,175,109,31,13,152,155,237],"accounts":[{"name":"payer","docs":["The account paying for account creation","Also becomes initial admin and operator"],"writable":true,"signer":true},{"name":"config","docs":["Program configuration PDA storing global settings","Stores admin, operator, and vault configurations"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}},{"name":"cycle","docs":["Cycle tracking PDA for release scheduling","Manages token release timing and amounts"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,121,99,108,101]}]}},{"name":"roam_token","docs":["The ROAM token mint account","All token operations reference this mint"]},{"name":"payer_ata","docs":["Associated Token Account for the payer","Used for initial token operations"],"writable":true,"pda":{"seeds":[{"kind":"account","path":"payer"},{"kind":"account","path":"token_program"},{"kind":"account","path":"roam_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"cycle_ata","docs":["Associated Token Account for the cycle PDA","Holds tokens for distribution"],"writable":true,"pda":{"seeds":[{"kind":"account","path":"cycle"},{"kind":"account","path":"token_program"},{"kind":"account","path":"roam_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"associated_token_program","docs":["SPL Associated Token Program","Required for ATA creation"],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"token_program","docs":["SPL Token Program interface","Handles all token operations"]},{"name":"system_program","docs":["Solana System Program","Required for account creation"],"address":"11111111111111111111111111111111"}],"args":[{"name":"args","type":{"defined":{"name":"InitializeArgs"}}}]},{"name":"pause","docs":["Pauses all program operations","","This instruction:","- Requires admin signature","- Sets program pause flag","- Records pause timestamp for duration calculation"],"discriminator":[211,22,221,251,74,121,193,47],"accounts":[{"name":"admin","docs":["Admin account that must sign the transaction","Only the admin can pause the program","The admin of the config"],"signer":true,"relations":["config"]},{"name":"config","docs":["Program configuration PDA","Will be updated with pause flag","The config PDA account"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}},{"name":"cycle","docs":["Cycle tracking PDA","Will record the pause timestamp","The cycle PDA"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,121,99,108,101]}]}}],"args":[]},{"name":"release","docs":["Releases tokens from vaults based on current cycle and difficulty","","This instruction:","- Validates release parameters","- Calculates release amount using exponential decay model","- Transfers tokens from vault to recipient","- Updates cycle statistics"],"discriminator":[253,249,15,206,28,127,193,241],"accounts":[{"name":"operator","docs":["Operator account that must sign the transaction","Only the operator can trigger token releases"],"signer":true,"relations":["config"]},{"name":"config","docs":["Program configuration PDA containing vault settings","Must not be paused and operator must match"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}},{"name":"cycle","docs":["The cycle PDA for release scheduling"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,121,99,108,101]}]}},{"name":"roam_token","docs":["ROAM token mint account"],"writable":true,"relations":["config"]},{"name":"cycle_ata","docs":["Associated token account holding tokens to be released","Must be owned by the cycle PDA"],"writable":true,"pda":{"seeds":[{"kind":"account","path":"cycle"},{"kind":"account","path":"token_program"},{"kind":"account","path":"roam_token"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"associated_token_program","docs":["The associated token program"],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"token_program","docs":["The token program, it compatible with the SPL token program"]},{"name":"system_program","docs":["The system program"],"address":"11111111111111111111111111111111"}],"args":[{"name":"args","type":{"defined":{"name":"ReleaseArgs"}}}]},{"name":"unpause","docs":["Unpauses program operations","","This instruction:","- Requires admin signature","- Clears program pause flag","- Calculates and accounts for pause duration"],"discriminator":[169,144,4,38,10,141,188,255],"accounts":[{"name":"admin","docs":["The admin of the config"],"signer":true,"relations":["config"]},{"name":"config","docs":["The config PDA account"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}},{"name":"cycle","docs":["The cycle PDA"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,121,99,108,101]}]}}],"args":[]},{"name":"update_vaults","docs":["Updates vault configurations","","This instruction:","- Requires operator signature","- Modifies vault parameters","- Ensures vault integrity and proper token distribution"],"discriminator":[135,85,187,58,151,143,58,155],"accounts":[{"name":"admin","docs":["Admin account that must sign the transaction","Only the admin can update vault configuration"],"signer":true,"relations":["config"]},{"name":"config","docs":["Program configuration PDA containing vault settings","Will be updated with new vault configuration"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[99,111,110,102,105,103]}]}},{"name":"system_program","docs":["Solana System Program","Required for account operations"],"address":"11111111111111111111111111111111"}],"args":[{"name":"args","type":{"defined":{"name":"UpdateVaultsArgs"}}}]}],"accounts":[{"name":"Config","discriminator":[155,12,170,224,30,250,204,130]},{"name":"Cycle","discriminator":[189,110,197,59,103,0,241,115]}],"events":[{"name":"AdminChangedEvent","discriminator":[172,190,41,86,23,187,232,84]},{"name":"AdminPendingEvent","discriminator":[239,130,246,78,122,202,160,151]},{"name":"InitializedEvent","discriminator":[136,202,63,120,152,146,41,79]},{"name":"OperatorChangedEvent","discriminator":[187,77,97,28,45,25,137,159]},{"name":"PausedEvent","discriminator":[43,14,250,236,116,42,177,89]},{"name":"ResumedEvent","discriminator":[135,83,108,93,107,77,117,17]},{"name":"TokenReleasedEvent","discriminator":[166,215,137,155,84,0,149,214]},{"name":"VaultsUpdatedEvent","discriminator":[221,70,110,196,78,175,93,80]}],"errors":[{"code":6000,"name":"OnlyAdmin","msg":"Only admin can perform this action"},{"code":6001,"name":"OnlyOperator","msg":"Only operator can perform this action"},{"code":6002,"name":"TokenMgrPaused","msg":"Token manager program is paused"},{"code":6003,"name":"TokenMgrAlreadyPaused","msg":"Token manager program is already paused"},{"code":6004,"name":"TokenMgrNotPaused","msg":"Token manager program is not paused"},{"code":6005,"name":"VaultAccountDuplicated","msg":"Vault account duplicated"},{"code":6006,"name":"CycleSupplyReached","msg":"Roam max supply reached"},{"code":6007,"name":"InvalidVaultRatio","msg":"The vaults ratio is invalid"},{"code":6008,"name":"InvalidVaultRatioSum","msg":"The vaults ratio sum is invalid"},{"code":6009,"name":"VaultAccountNotProvided","msg":"The vault account not provided"},{"code":6010,"name":"VaultsMinNumberNotReached","msg":"The min number of vaults is not reached"},{"code":6011,"name":"VaultsMaxNumberExceeded","msg":"The maximum number of vaults is exceeded"},{"code":6012,"name":"CycleGenesisTimeMustBeFuture","msg":"The cycle genesis time must be future"},{"code":6013,"name":"CycleGenesisTimeTooFar","msg":"The cycle genesis time is too far in the future"},{"code":6014,"name":"CycleNotElapsed","msg":"The cycle not elapsed"},{"code":6015,"name":"CycleNotGenesis","msg":"The cycle not genesis"},{"code":6016,"name":"MathOverflow","msg":"Math overflow"},{"code":6017,"name":"TooEarlyToUpdateDifficulty","msg":"Too early to adjust difficulty, must wait for 1000 cycles between adjustments"},{"code":6018,"name":"InvalidDifficulty","msg":"Difficulty value must be greater than 0"},{"code":6019,"name":"DuplicateAddress","msg":"Duplicate address"},{"code":6020,"name":"InvalidZeroAddress","msg":"Invalid zero address"},{"code":6021,"name":"InvalidPendingAdmin","msg":"Invalid pending admin"}],"types":[{"name":"AdminChangedEvent","docs":["Event emitted when admin authority changes","","Provides transparency by recording both the old","and new admin public keys"],"type":{"kind":"struct","fields":[{"name":"new","docs":["Public key of the new admin"],"type":"pubkey"},{"name":"old","docs":["Public key of the previous admin"],"type":"pubkey"}]}},{"name":"AdminPendingEvent","docs":["Event emitted when admin authority change is initiated","","Records the proposed new admin and current admin for transparency"],"type":{"kind":"struct","fields":[{"name":"pending","docs":["Public key of the proposed new admin"],"type":"pubkey"},{"name":"current","docs":["Public key of the current admin"],"type":"pubkey"}]}},{"name":"ChangeAdminArgs","docs":["Arguments for changing admin authority","","Contains the new admin's public key that will","be set as pending admin"],"type":{"kind":"struct","fields":[{"name":"new_admin","docs":["Public key of the new admin","Must not be the current admin or zero address"],"type":"pubkey"}]}},{"name":"ChangeOperatorArgs","docs":["Arguments for changing operator authority","","Contains the new operator's public key that will","receive operator authority"],"type":{"kind":"struct","fields":[{"name":"new_operator","docs":["Public key of the new operator","Must not be the current operator or zero address"],"type":"pubkey"}]}},{"name":"Config","docs":["Global configuration account storing program settings and authorities","","This account is created during program initialization and stores all","global settings required for program operation. It is stored in a PDA","derived from the program ID.","","# Security Considerations","- Only the admin can modify program settings","- The operator can execute operational functions","- Pause functionality allows emergency stops","- Vault ratios must sum to 100% (10000 basis points)"],"type":{"kind":"struct","fields":[{"name":"bump","docs":["The PDA bump seed used for deterministic address derivation","This ensures the PDA address is unique and owned by the program"],"type":"u8"},{"name":"roam_token","docs":["The mint address for the ROAM token that this program manages","This is set during initialization and cannot be changed"],"type":"pubkey"},{"name":"paused","docs":["The state of the program (true = paused, false = active)","When paused, most program operations are suspended"],"type":"bool"},{"name":"admin","docs":["The admin public key with authority to change program settings","Admin can update vaults, change authorities, and pause/unpause"],"type":"pubkey"},{"name":"operator","docs":["The operator public key with authority to execute operations","Operator can trigger token releases and update mining difficulty"],"type":"pubkey"},{"name":"vaults","docs":["The vaults configured to receive token distributions","Each vault has its own ratio of the total distribution","The sum of all vault ratios must equal 10000 (100%)"],"type":{"vec":{"defined":{"name":"VaultData"}}}},{"name":"pending_admin","docs":["Pending admin for two-step ownership transfer (33 bytes)"],"type":{"option":"pubkey"}},{"name":"padding","docs":["Reserved space for future upgrades (63 bytes)","Reduced from original 96 bytes after adding pending_admin (33 bytes)"],"type":{"array":["u8",63]}}]}},{"name":"Cycle","docs":["Cycle account storing token release schedule and mining parameters","","This account tracks the current state of token release cycles and","mining difficulty. It is stored in a PDA and updated on each","release operation.","","# Token Release Model","- Uses exponential decay for predictable emission schedule","- Adjusts based on mining difficulty every 1000 cycles","- Includes pause mechanism for emergency situations","- Enforces maximum supply limits"],"type":{"kind":"struct","fields":[{"name":"bump","docs":["The PDA bump seed used for deterministic address derivation","This ensures the PDA address is unique and owned by the program"],"type":"u8"},{"name":"beta","docs":["Current beta coefficient used in token release calculations","Adjusted based on mining difficulty relative to ATH","Range: 0.0 to 1.0, where 1.0 means current difficulty >= ATH"],"type":"f64"},{"name":"genesis_time","docs":["Unix timestamp when token releases begin","All operations before this time will fail","This prevents premature token distribution"],"type":"i64"},{"name":"cycle_id","docs":["Current cycle number, increments with each release","Used in exponential decay calculations"],"type":"u64"},{"name":"cycle_reward","docs":["Token amount to be released in the next cycle","Calculated using exponential decay formula","Adjusted by beta coefficient based on mining difficulty"],"type":"u64"},{"name":"start_time","docs":["Unix timestamp when current cycle begins","Used to enforce cycle timing requirements"],"type":"i64"},{"name":"end_time","docs":["Unix timestamp when current cycle ends","Next release can only occur after this time"],"type":"i64"},{"name":"accumulated_reward","docs":["Total tokens released across all cycles","Used to enforce maximum supply and calculate adjustments","Must never exceed CYCLE_SUPPLY constant"],"type":"u64"},{"name":"pause_time","docs":["Unix timestamp when program was paused","Zero indicates program is not paused","Used to adjust cycle timing after unpause"],"type":"i64"},{"name":"ath_difficulty","docs":["All-time high mining difficulty","Used to calculate beta coefficient","Never decreases, only increases when new ATH is reached"],"type":"u64"},{"name":"difficulty","docs":["Current mining difficulty","Updated every 1000 cycles","Affects token release through beta coefficient"],"type":"u64"},{"name":"padding","docs":["Reserved space for future upgrades (80 bytes)","This space allows adding new fields without breaking compatibility"],"type":{"array":["u8",80]}}]}},{"name":"InitializeArgs","docs":["Arguments for program initialization","","Contains all parameters required to initialize the program:","- Genesis time: When token releases begin","- Vaults: Initial vault configuration","- Admin: Optional admin authority (defaults to payer)","- Operator: Optional operator authority (defaults to admin)"],"type":{"kind":"struct","fields":[{"name":"genesis_time","docs":["Unix timestamp when token releases begin","Must be in the future but not too far ahead"],"type":"i64"},{"name":"vaults","docs":["List of vaults and their distribution ratios","Must have at least one vault but not exceed MAX_VAULTS"],"type":{"vec":{"defined":{"name":"VaultData"}}}},{"name":"admin","docs":["Optional admin authority, defaults to payer"],"type":{"option":"pubkey"}},{"name":"operator","docs":["Optional operator authority, defaults to admin"],"type":{"option":"pubkey"}}]}},{"name":"InitializedEvent","docs":["Event emitted when program is initialized","","Records the initial program configuration including","authorities, token settings, and cycle parameters"],"type":{"kind":"struct","fields":[{"name":"admin","docs":["Initial admin authority"],"type":"pubkey"},{"name":"operator","docs":["Initial operator authority (same as admin at start)"],"type":"pubkey"},{"name":"roam_token","docs":["ROAM token mint address"],"type":"pubkey"},{"name":"vaults","docs":["Initial vault configuration"],"type":{"vec":{"defined":{"name":"VaultData"}}}},{"name":"genesis_time","docs":["When token releases will begin"],"type":"i64"},{"name":"difficulty","docs":["Initial mining difficulty"],"type":"u64"},{"name":"beta","docs":["Initial beta parameter"],"type":"f64"},{"name":"cycle_reward","docs":["First cycle's reward amount"],"type":"u64"},{"name":"cycle_duration","docs":["Duration of each cycle in seconds"],"type":"i64"}]}},{"name":"OperatorChangedEvent","docs":["Event emitted when operator authority changes","","Provides transparency by recording both the old","and new operator public keys"],"type":{"kind":"struct","fields":[{"name":"new","docs":["Public key of the new operator"],"type":"pubkey"},{"name":"old","docs":["Public key of the previous operator"],"type":"pubkey"}]}},{"name":"PausedEvent","docs":["Event emitted when program is paused","","Records the cycle ID and timestamp when pause occurred"],"type":{"kind":"struct","fields":[{"name":"cycle_id","docs":["ID of the cycle that was paused"],"type":"u64"},{"name":"pause_time","docs":["Time when pause occurred"],"type":"i64"}]}},{"name":"ReleaseArgs","docs":["Arguments for token release instruction","","Contains optional parameters that can modify the","release behavior, such as updating difficulty"],"type":{"kind":"struct","fields":[{"name":"new_difficulty","docs":["The new difficulty"],"type":{"option":"u64"}}]}},{"name":"ResumedEvent","docs":["Event emitted when program is resumed","","Records the cycle ID and timestamp when resume occurred"],"type":{"kind":"struct","fields":[{"name":"cycle_id","docs":["The cycle being resumed"],"type":"u64"},{"name":"resume_time","docs":["Time when resume occurred"],"type":"i64"},{"name":"new_end_time","docs":["The new end time for the cycle"],"type":"i64"}]}},{"name":"TokenReleasedEvent","docs":["Event emitted when tokens are released","","Records the amount released in the previous cycle and","all parameters for the new cycle that is starting"],"type":{"kind":"struct","fields":[{"name":"released_cycle_id","docs":["ID of the cycle that was just released"],"type":"u64"},{"name":"released_reward","docs":["Reward amount that was just released"],"type":"u64"},{"name":"released_time","docs":["Timestamp when release occurred"],"type":"i64"},{"name":"cycle_id","docs":["New cycle number"],"type":"u64"},{"name":"cycle_reward","docs":["Amount of tokens to be released in this cycle"],"type":"u64"},{"name":"cycle_difficulty","docs":["New network difficulty"],"type":"u64"},{"name":"cycle_ath_difficulty","docs":["All-time high difficulty"],"type":"u64"},{"name":"cycle_beta","docs":["New beta parameter"],"type":"f64"},{"name":"cycle_start_time","docs":["New cycle start timestamp"],"type":"i64"},{"name":"cycle_end_time","docs":["New cycle end timestamp"],"type":"i64"},{"name":"accumulated_reward","docs":["Updated total tokens released"],"type":"u64"},{"name":"new_difficulty_provided","docs":["Whether difficulty was updated this release"],"type":"bool"}]}},{"name":"UpdateVaultsArgs","docs":["Arguments for updating vault configuration","","Contains the new vault configuration that will replace","the existing configuration. Each vault specifies a token","account and its distribution ratio."],"type":{"kind":"struct","fields":[{"name":"vaults","docs":["The new vaults to add."],"type":{"vec":{"defined":{"name":"VaultData"}}}}]}},{"name":"VaultData","docs":["Data structure defining a vault's configuration","","Each vault represents a token account that receives a portion of","the distributed tokens. The ratio determines what percentage of","tokens this vault receives.","","# Example","```","use anchor_lang::prelude::Pubkey;","use token_manager::VaultData;","VaultData {","account: Pubkey::new_unique(),","ratio: 5000, // 50% of distributions","}","```"],"type":{"kind":"struct","fields":[{"name":"account","docs":["The token account that will receive the funds","Must be a valid SPL token account for the ROAM token"],"type":"pubkey"},{"name":"ratio","docs":["The ratio for this vault (in basis points, e.g. 5000 = 50%)","The sum of all vault ratios must equal 10000 (100%)","Valid range: 1 to 10000"],"type":"u16"}]}},{"name":"VaultsUpdatedEvent","docs":["Event emitted when vault configuration is updated","","Records the new vault configuration for monitoring"],"type":{"kind":"struct","fields":[{"name":"new_vaults","docs":["New vault configuration"],"type":{"vec":{"defined":{"name":"VaultData"}}}}]}}],"constants":[{"name":"CONFIG_SEED","docs":["Seed string for deriving Config PDA address"],"type":"string","value":"\"config\""},{"name":"CYCLE_DURATION","docs":["Duration of each cycle in production (1000 seconds)","Standard cycle length for mainnet operation"],"type":"i64","value":"1000"},{"name":"CYCLE_LAMBDA","docs":["Decay rate for exponential release model","Controls how quickly release amounts decrease"],"type":"f64","value":"4e-6"},{"name":"CYCLE_SEED","docs":["Seed string for deriving Cycle PDA address"],"type":"string","value":"\"cycle\""},{"name":"CYCLE_SUPPLY","docs":["Maximum total token supply (600 billion)","Used to enforce supply cap during releases"],"type":"u64","value":"600000000000000"},{"name":"GENESIS_BETA","docs":["Initial beta coefficient (100%)","Starting multiplier for token release calculations"],"type":"f64","value":"1.0"},{"name":"GENESIS_DIFFICULTY","docs":["Initial mining difficulty","Starting point for difficulty adjustments"],"type":"u64","value":"0"},{"name":"GENESIS_REWARD","docs":["Initial token release amount (2400 $R0AM)","Starting point for exponential decay model"],"type":"u64","value":"2400000000"}]}