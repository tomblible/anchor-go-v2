package generator

import (
	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/anchor-go/idl"
	"github.com/gagliardetto/anchor-go/tools"
	"github.com/gagliardetto/solana-go"
)

// TODO:
// - generate program IDs for mainnet, devnet, testnet, and localnet.

func (g *Generator) genFileProgramId(id *solana.PublicKey) (*OutputFile, error) {
	file := NewFile(g.options.Package)
	file.HeaderComment("Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.")
	file.HeaderComment("This file contains the program ID.")

	if id == nil {
		id = &solana.PublicKey{}
	}

	// 定义程序ID
	idDecl := Var().Id("ProgramID").Op("=").Qual(PkgSolanaGo, "MustPublicKeyFromBase58").Call(Lit(id.String()))
	file.Add(idDecl)

	// 依赖程序ID
	pads, err := g.GetPads()
	if err != nil {
		return nil, err
	}
	file.Add(pads)

	code, err := g.GetDependOnPrograms()
	if err != nil {
		return nil, err
	}
	file.Add(code)

	return &OutputFile{
		Name: "program-id.go",
		File: file,
	}, nil
}

func (g *Generator) GetDependOnPrograms() (Code, error) {
	var (
		ids = make(map[string]solana.PublicKey)
	)
	code := Empty().Line()
	code.Comment("program dependency address").Line()

	code.Add(Var().Parens(DoGroup(func(code *Group) {
		for _, instruction := range g.idl.Instructions {
			account, err := g.GetInstructionAccount(instruction.Accounts)
			if err != nil {
				panic(err)
			}
			// 设置账户信息
			for _, instructionAccount := range account {
				if instructionAccount.Address.IsNone() {
					continue
				}
				name := tools.ToCamel(instructionAccount.Name)
				// 判断名字是否存在
				if _, ok := ids[name]; ok {
					continue
				}
				ids[name] = instructionAccount.Address.Unwrap()
				code.Id(name).Op("=").Qual(PkgSolanaGo, "MustPublicKeyFromBase58").Call(Lit(ids[name].String()))
				// 生成固定参数信息
				code.Line()
			}
		}
	})))

	return code, nil
}

func (g *Generator) GetPads() (Code, error) {
	var (
		ids = make(map[string]bool)
	)
	code := Empty().Line()
	code.Comment("pads generated by anchor-go").Line()

	code.Add(Var().Parens(DoGroup(func(code *Group) {
		for _, instruction := range g.idl.Instructions {
			account, err := g.GetInstructionAccount(instruction.Accounts)
			if err != nil {
				panic(err)
			}
			// 设置账户信息
			for _, instructionAccount := range account {
				if instructionAccount.Pda.IsNone() {
					continue
				}
				pda := instructionAccount.Pda.Unwrap()
				if pda.Program.IsSome() {
					continue
				}
				if pda.Program.IsSome() {
					continue
				}
				generator := true
				// 必须都是固定的参数才生成
				for _, seed := range pda.Seeds {
					switch seed.(type) {
					case *idl.IdlSeedArg, *idl.IdlSeedAccount:
						generator = false
						break
					}
				}
				if !generator {
					continue
				}
				// 判断是否存在
				name := formatGlobalPadEncoderName(instructionAccount.Name)
				if _, ok := ids[name]; ok {
					continue
				}
				ids[name] = true
				code.Id(name).Op("=").Id(formatMustPadEncoderName(instructionAccount.Name)).Call()
				// 生成固定参数信息
				code.Line()
			}
		}
	})))

	return code, nil
}
