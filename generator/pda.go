package generator

import (
	"errors"
	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/anchor-go/idl"
	"github.com/gagliardetto/anchor-go/idl/idltype"
	"github.com/gagliardetto/anchor-go/tools"
)

func (g *Generator) genfile_pda() (*OutputFile, error) {
	file := NewFile(g.options.Package)
	file.HeaderComment("Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.")
	file.HeaderComment("This file contains documentation and example usage for the generated code.")

	file.Line().Line()

	// pad 账户生成
	{
		for _, instruction := range g.idl.Instructions {
			for _, account := range instruction.Accounts {
				switch v := account.(type) {
				case *idl.IdlInstructionAccount:
					if v.Pda.IsNone() || v.Pda.Unwrap().Program.IsSome() {
						continue
					}
					if parser, err := g.genPdaParser(v.Name, instruction, v.Pda.Unwrap()); err != nil && parser != nil {
						file.Add(parser)
						file.Add(Empty().Line())
					}
				}
			}
		}
	}
	return &OutputFile{
		Name: "pda.go",
		File: file,
	}, nil
}

func (g *Generator) genPdaParser(name string, instruction idl.IdlInstruction, idlPda idl.IdlPda) (Code, error) {
	if g.Pad[name] {
		return nil, nil
	}
	g.Pad[name] = true
	code := Empty()

	code.Add(
		Empty().Func().Id(formatPadEncoderName(name)).
			Params(
				ListFunc(func(params *Group) {
					// Parameters:
					for _, seed := range idlPda.Seeds {
						switch v := seed.(type) {
						case *idl.IdlSeedAccount:
							params.Id(tools.ToCamelLower(v.Path)).Qual(PkgSolanaGo, "PublicKey")
						case *idl.IdlSeedArg:
							// 判断参数类型
							for _, arg := range instruction.Args {
								if arg.Name == v.Path {
									params.Id(tools.ToCamelLower(arg.Name)).Add(genTypeName(arg.Ty))
								}
							}
						}
					}
				}),
			).
			Params(
				ListFunc(func(results *Group) {
					// Results:
					results.Id("pda").Qual(PkgSolanaGo, "PublicKey")
					results.Id("bumpSeed").Uint8()
					results.Id("err").Error()
				}),
			).
			BlockFunc(func(body *Group) {
				body.Add(Id("seeds").Op(":=").Make(Index().Index().Byte(), Lit(len(idlPda.Seeds))))
				for i, seed := range idlPda.Seeds {
					switch v := seed.(type) {
					case *idl.IdlSeedConst:
						body.Add(
							Id("seeds").Index(Lit(i)).Op("=").Index().Byte().Op("{").ListFunc(func(byteGroup *Group) {
								for _, byteVal := range v.Value[:] {
									byteGroup.Lit(int(byteVal))
								}
							}).Op("}"),
						)
					case *idl.IdlSeedAccount:
						body.Add(
							Id("seeds").Index(Lit(i)).Op("=").Id(tools.ToCamelLower(v.Path)).Dot("Bytes").Call(),
						)
					case *idl.IdlSeedArg:
						for _, arg := range instruction.Args {
							if arg.Name != v.Path {
								continue
							}
							switch arg.Ty.(type) {
							case *idltype.String:
								body.Add(
									Id("seeds").Index(Lit(i)).
										Op("=").
										Id(tools.ToCamelLower(v.Path)).
										Call(),
								)
							default:
								body.Add(
									If(List(Id("seeds").Index(Lit(i)), Err()).
										Op("=").
										Qual(PkgBinary, "MarshalBorsh").
										Call(Id(tools.ToCamelLower(arg.Name))),
										Err().Op("!=").Nil(),
									).Block(
										Return(),
									),
								)
							}
						}
					}
				}
				body.Add(List(Id("pda"), Id("bumpSeed"), Id("err")).Op("=").Add(Qual(PkgSolanaGo, "FindProgramAddress").Call(Id("seeds"), Id("ProgramID"))))
				body.Return()
			}),
	)

	// Must函数
	code.Add(Empty().Line().Line())

	code.Add(
		Empty().Func().Id(formatMustPadEncoderName(name)).
			Params(
				ListFunc(func(params *Group) {
					// Parameters:
					for _, seed := range idlPda.Seeds {
						switch v := seed.(type) {
						case *idl.IdlSeedAccount:
							params.Id(tools.ToCamelLower(v.Path)).Qual(PkgSolanaGo, "PublicKey")
						case *idl.IdlSeedArg:
							// 判断参数类型
							for _, arg := range instruction.Args {
								if arg.Name == v.Path {
									params.Id(tools.ToCamelLower(arg.Name)).Add(genTypeName(arg.Ty))
								}
							}
						}
					}
				}),
			).
			Params(
				ListFunc(func(results *Group) {
					// Results:
					results.Id("pda").Qual(PkgSolanaGo, "PublicKey")
				}),
			).
			BlockFunc(func(body *Group) {
				body.Add(
					List(Id("pda"), Id("_"), Id("_")).Op("=").Add(Id(formatPadEncoderName(name)).CallFunc(func(group *Group) {
						for _, seed := range idlPda.Seeds {
							switch v := seed.(type) {
							case *idl.IdlSeedAccount:
								group.Id(tools.ToCamelLower(v.Path))
							case *idl.IdlSeedArg:
								// 判断参数类型
								for _, arg := range instruction.Args {
									if arg.Name == v.Path {
										group.Id(tools.ToCamelLower(arg.Name))
									}
								}
							}
						}
					})),
				)
				body.Return()
			}),
	)

	return code, errors.New("gen pda parser")
}
